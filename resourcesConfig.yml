#Name of the base resource from which the tables will be derived.
Patient:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, telecom, address, contact, contact.telecom, contact.relationship, communication, generalPractitioner, link, photo]
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [active, name, gender, birthDate, maritalStatus, managingOrganization]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.
  #- {name: CommunicationLanguageText, path: "", expression: "communication.where(preferred=true)[0].text", type: string}
  #- {name: CommunicationLanguageCodingSystem, path: "", expression: "communication.where(preferred=true)[0].language.coding[0].system", type: string}
  #- {name: CommunicationLanguageCodingCode, path: "", expression: "communication.where(preferred=true)[0].language.coding[0].code", type: string}
  #For choice types, give all the options.
  - {name: DeceasedBoolean, path: deceased, type: boolean}
  - {name: DeceasedDateTime, path: deceased, type: dateTime}
  - {name: MultipleBirthBoolean, path: multipleBirth, type: boolean}
  - {name: MultipleBirthInteger, path: multipleBirth, type: integer}
#Name of the base resource from which the tables will be derived.
Encounter:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, statusHistory, classHistory, participant, diagnosis, hospitalization, location]
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [status, class, type, serviceType, priority, subject, episodeOfCare, basedOn, appointment, period, length, reasonCode, reasonReference, account, serviceProvider, partOf]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.
#Name of the base resource from which the tables will be derived.
AllergyIntolerance:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, reaction] #, category
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [clinicalStatus, verificationStatus, type, criticality, code, patient, encounter, recordedDate, recorder, asserter, lastOccurrence, note]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.
  - {name: OnsetDateTime, path: onset, type: dateTime}
  - {name: OnsetAge, path: onset, type: age}
  - {name: OnsetPeriod, path: onset, type: period}
  - {name: OnsetRange, path: onset, type: range}
  - {name: OnsetString, path: onset, type: string}
#Name of the base resource from which the tables will be derived.
CarePlan:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, category, contributor, careTeam, addresses, supportingInfo, goal, activity, activity.outcomeCodeableConcept, activity.outcomeReference, activity.progress, activity.detail, activity.detail.instantiatesCanonical, activity.detail.instantiatesUri, activity.detail.reasonCode, activity.detail.reasonReference, activity.detail.goal, activity.detail.performer] 
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [instantiatesCanonical, instantiatesUri, basedOn, replaces, partOf, status, intent, title, description, subject, encounter, period, created, author, note]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.  
#Name of the base resource from which the tables will be derived.
CareTeam:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, category, participant, participant.role, reasonCode, reasonReference, managingOrganization, telecom, note] 
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [status, name, subject, encounter, period]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.   
#Name of the base resource from which the tables will be derived.
ClinicalImpression:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, problem, investigation, investigation.item, protocol, finding, prognosisCodeableConcept, prognosisReference, supportingInfo, note] 
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [status, statusReason, code, description, subject, encounter, date, assessor, previous, summary]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.
  - {name: EffectiveDateTime, path: effective, type: dateTime}   
  - {name: EffectivePeriod, path: effective, type: period}  
#Name of the base resource from which the tables will be derived.
Condition:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, category, bodySite, stage, stage.assessment, evidence, evidence.code, evidence.detail] 
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [clinicalStatus, verificationStatus, severity, code, subject, encounter, recordedDate, recorder, asserter, note]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.
  - {name: OnsetDateTime, path: onset, type: dateTime}  
  - {name: OnsetAge, path: onset, type: age} 
  - {name: OnsetPeriod, path: onset, type: period} 
  - {name: OnsetRange, path: onset, type: range} 
  - {name: OnsetString, path: onset, type: string} 
  - {name: AbatementDateTime, path: abatement, type: dateTime}
  - {name: AbatementAge, path: abatement, type: age}
  - {name: AbatementPeriod, path: abatement, type: period}
  - {name: AbatementRange, path: abatement, type: range}
  - {name: AbatementString, path: abatement, type: string}  
#Name of the base resource from which the tables will be derived.
Dosage:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [additionalInstruction, doseAndRate] 
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [sequence, text, patientInstruction, timing, site, route, method, maxDosePerPeriod, maxDosePerAdministration, maxDosePerLifetime]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options. 
  - {name: DoseRange, path: dose, type: range}
  - {name: DoseQuantity, path: dose, type: quantity}
  - {name: RateRatio, path: rate, type: ratio}
  - {name: RateRange, path: rate, type: range}
  - {name: RateQuantity, path: rate, type: quantity}
  - {name: AsNeededBoolean, path: asNeeded, type: boolean}
  - {name: AsNeededCodeableConcept, path: asNeeded, type: codeableConcept}
#Name of the base resource from which the tables will be derived.
FamilyMemberHistory:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, instantiatesCanonical, instantiatesUri, reasonCode, reasonReference, note, condition, condition.note] 
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [status, dataAbsentReason, patient, date, name, relationship, sex, estimatedAge]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options. 
  - {name: BornPeriod, path: born, type: period}
  - {name: BornDate, path: born, type: date}
  - {name: BornString, path: born, type: string}
  - {name: AgeAge, path: age, type: age}
  - {name: AgeRange, path: age, type: range}
  - {name: AgeString, path: age, type: string}
  - {name: DeceasedBoolean, path: deceased, type: boolean}
  - {name: DeceasedAge, path: deceased, type: age}  
  - {name: DeceasedRange, path: deceased, type: range} 
  - {name: DeceasedDate, path: deceased, type: date}
  - {name: DeceasedString, path: deceased, type: string} 
#Name of the base resource from which the tables will be derived.
Medication:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, ingredient, batch] 
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [code, status, manufacturer, form, amount]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.  
#Name of the base resource from which the tables will be derived.
MedicationRequest:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, category, supportingInformation, reasonCode, reasonReference, instantiatesCanonical, instantiatesUri, basedOn, insurance, note, dosageInstruction, dispenseRequest, substitution, detectedIssue, eventHistory] 
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [status, statusReason, intent, priority, doNotPerform, subject, encounter, authoredOn, requester, performer, performerType, recorder, groupIdentifier, courseOfTherapyType, priorPrescription]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options. 
  - {name: ReportedBoolean, path: reported, type: boolean}  
  - {name: ReportedReference, path: reported, type: reference}   
  - {name: MedicationCodeableConcept, path: medication, type: codeableConcept}  
  - {name: MedicationReference, path: medication, type: reference}    
#Name of the base resource from which the tables will be derived.
MedicationDispense:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, partOf, supportingInformation, performer, authorizingPrescription, receiver, note, dosageInstruction, substitution, substitution.reason, substitution.responsibleParty, detectedIssue, eventHistory] 
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [status, category, subject, context, location, type, quantity, daysSupply, whenPrepared, whenHandedOver, destination]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options. 
  - {name: StatusReasoncodeableConcept, path: statusReason, type: codeableConcept}  
  - {name: StatusReasonReference, path: statusReason, type: reference}   
  - {name: MedicationCodeableConcept, path: medication, type: codeableConcept}  
  - {name: MedicationReference, path: medication, type: reference} 
#Name of the base resource from which the tables will be derived.
MedicationAdministration:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, instantiates, partOf, statusReason, supportingInformation, reasonCode, reasonReference, device, note, dosage, eventHistory] 
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [status, category, subject, context, performer, request]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options. 
  - {name: MedicationCodeableConcept, path: medication, type: codeableConcept}  
  - {name: MedicationReference, path: medication, type: reference} 
  - {name: EffectiveDateTime, path: effective, type: dateTime}  
  - {name: EffectivePeriod, path: effective, type: period}
#Name of the base resource from which the tables will be derived.
MedicationStatement:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, basedOn, partOf, statusReason, derivedFrom, reasonCode, reasonReference, note, dosage] 
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [status, category, subject, context, dateAsserted, informationSource]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options. 
  - {name: MedicationCodeableConcept, path: medication, type: codeableConcept}  
  - {name: MedicationReference, path: medication, type: reference} 
  - {name: EffectiveDateTime, path: effective, type: dateTime}  
  - {name: EffectivePeriod, path: effective, type: period}  
#Name of the base resource from which the tables will be derived.
MedicationKnowledge:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [synonym, relatedMedicationKnowledge, relatedMedicationKnowledge.reference, associatedMedication, productType, monograph, ingredient, cost, monitoringProgram, administrationGuidelines, administrationGuidelines.dosage, administrationGuidelines.dosage.dosage, administrationGuidelines.patientCharacteristics, administrationGuidelines.patientCharacteristics.value, medicineClassification, medicineClassification.classification, packaging, drugCharacteristic, contraindication, regulatory, regulatory.substitution, regulatory.schedule, regulatory.maxDispense, kinetics, kinetics.areaUnderCurve, kinetics.lethalDose50] 
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [code, status, manufacturer, doseForm, amount, preparationInstruction]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.  
#Name of the base resource from which the tables will be derived.
Immunization:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, performer, note, reasonCode, reasonReference, subpotentReason, education, programEligibility, reaction, protocolApplied, protocolApplied.targetDisease] 
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [status, statusReason, vaccineCode, patient, encounter, recorded, primarySource, reportOrigin, location, manufacturer, lotNumber, expirationDate, site, route, doseQuantity, isSubpotent, fundingSource]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.
  - {name: OccurrenceDateTime, path: occurrence, type: dateTime}  
  - {name: OccurrenceString, path: occurrence, type: string}  
#Name of the base resource from which the tables will be derived.
ImmunizationEvaluation:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, doseStatusReason] 
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [status, patient, date, authority, targetDisease, immunizationEvent, doseStatus, description, series]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.
  - {name: DoseNumberPositiveInt, path: doseNumber, type: positiveInt}  
  - {name: DoseNumberString, path: doseNumber, type: string}  
  - {name: SeriesDosesPositiveInt, path: seriesDoses, type: positiveInt}  
  - {name: SeriesDosesString, path: seriesDoses, type: string}
#Name of the base resource from which the tables will be derived.
ImmunizationRecommendation:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, recommendation, recommendation.vaccineCode, recommendation.contraindicatedVaccineCode, recommendation.forecastReason, recommendation.dateCriterion, recommendation.supportingImmunization, recommendation.supportingPatientInformation] 
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [patient, date, authority]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options. 
#Name of the base resource from which the tables will be derived.
Observation:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, basedOn, partOf, category, focus, performer, interpretation, note, referenceRange, referenceRange.appliesTo, hasMember, derivedFrom, component] 
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [status, code, subject, encounter, issued, dataAbsentReason, bodySite, method, specimen, device]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.  
  - {name: EffectiveDateTime, path: effective, type: dateTime}  
  - {name: EffectivePeriod, path: effective, type: period} 
  - {name: EffectiveTiming, path: effective, type: timing}  
  - {name: EffectiveInstant, path: effective, type: instant}
  - {name: ValueQuantity, path: value, type: quantity}  
  - {name: ValueCodeableConcept, path: value, type: codeableConcept} 
  - {name: ValueString, path: value, type: string}  
  - {name: ValueBoolean, path: value, type: boolean}
  - {name: ValueInteger, path: value, type: integer}  
  - {name: ValueRange, path: value, type: range} 
  - {name: ValueRatio, path: value, type: ratio}  
  - {name: ValueSampledData, path: value, type: sampledData}
  - {name: ValueTime, path: value, type: time} 
  - {name: ValueDateTime, path: value, type: dateTime}  
  - {name: ValuePeriod, path: value, type: period}
#Name of the base resource from which the tables will be derived.
DiagnosticReport:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, basedOn, category, performer, resultsInterpreter, specimen, result, imagingStudy, media, conclusionCode, presentedForm] 
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [status, code, subject, encounter, issued, conclusion]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.  
  - {name: EffectiveDateTime, path: effective, type: dateTime}  
  - {name: EffectivePeriod, path: effective, type: period}   
#Name of the base resource from which the tables will be derived.
ServiceRequest:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, instantiatesCanonical, instantiatesUri, basedOn, replaces, category, orderDetail, locationCode, locationReference, reasonCode, reasonReference, insurance, supportingInfo, specimen, bodySite, note, relevantHistory] 
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [requisition, status, intent, priority, doNotPerform, code, authoredOn, requester, performerType, patientInstruction]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.  
  - {name: QuantityDateTime, path: quantity, type: dateTime}  
  - {name: QuantityPeriod, path: quantity, type: period} 
  - {name: QuantityTiming, path: quantity, type: timing}
  - {name: AsNeededBoolean, path: asNeeded, type: boolean}
  - {name: AsNeededCodeableConcept, path: asNeeded, type: codeableConcept}
#Name of the base resource from which the tables will be derived.
Media:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, basedOn, partOf, reasonCode, note] 
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [status, type, modality, view, subject, encounter, issued, operator, bodySite, deviceName, device, height, width, frames, duration, content]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.  
  - {name: CreatedDateTime, path: created, type: dateTime}  
  - {name: CreatedPeriod, path: created, type: period}  
#Name of the base resource from which the tables will be derived.
ImagingStudy:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, modality, basedOn, interpreter, endpoint, procedureCode, reasonCode, reasonReference, note, series, series.endpoint, series.specimen, series.performer, series.instance] 
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [status, subject, encounter, started, referrer, numberOfSeries, numberOfInstances, procedureReference, location, description]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.
#Name of the base resource from which the tables will be derived.
MolecularSequence:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, referenceSeq, variant, quality, quality.roc, repository, pointer, structureVariant, structureVariant.outer, structureVariant.inner] 
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [type, coordinateSystem, patient, specimen, device, performer, quantity, observedSeq, readCoverage]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.  
#Name of the base resource from which the tables will be derived.
Specimen:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, parent, request, collection, processing, processing.additive, container, container.identifier, condition, note] 
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [accessionIdentifier, status, type, subject, receivedTime]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.    
#Name of the base resource from which the tables will be derived.
BodyStructure:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, locationQualifier, image] 
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [active, morphology, location, description, patient]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.   
#Name of the base resource from which the tables will be derived.
Procedure:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, instantiatesCanonical, instantiatesUri, basedOn, partOf, performer, reasonCode, reasonReference, bodySite, report, complication, complicationDetail, followUp, note, focalDevice, usedReference] 
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [status, statusReason, category, code, subject, encounter, recorder, asserter, location, outcome]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.  
  - {name: PerformedDateTime, path: performed, type: dateTime}  
  - {name: PerformedPeriod, path: performed, type: period}  
  - {name: PerformedString, path: performed, type: string}  
  - {name: PerformedAge, path: performed, type: age} 
  - {name: PerformedRange, path: performed, type: range}  
#Name of the base resource from which the tables will be derived.
Goal:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, category, target, addresses, note, outcomeCode, outcomeReference] 
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [lifecycleStatus, achievementStatus, priority, description, subject, statusDate, statusReason, expressedBy]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.  
  - {name: StartDate, path: start, type: date}  
  - {name: StartCodeableConcept, path: start, type: codeableConcept}  
#Name of the base resource from which the tables will be derived.
AdverseEvent:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [category, resultingCondition, contributor, suspectEntity, suspectEntity.causality, subjectMedicalHistory, referenceDocument, study] 
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [identifier, actuality, event, subject, encounter, date, detected, recordedDate, location, seriousness, severity, outcome, recorder]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.  
#Name of the base resource from which the tables will be derived.
DetectedIssue:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, implicated, evidence, evidence.code, evidence.detail, mitigation] 
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [status, code, severity, patient, author, detail, reference]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.  
  - {name: IdentifiedDateTime, path: identified, type: dateTime}  
  - {name: IdentifiedPeriod, path: identified, type: period}  
#Name of the base resource from which the tables will be derived.
RiskAssessment:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, reasonCode, reasonReference, basis, prediction, note] 
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [basedOn, parent, status, method, code, subject, encounter, condition, performer, mitigation]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.  
  - {name: OccurrenceDateTime, path: occurrence, type: dateTime}  
  - {name: OccurrencePeriod, path: occurrence, type: period}   
#Name of the base resource from which the tables will be derived.
Practitioner:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, name, telecom, address, photo, qualification, qualification.identifier, communication] 
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [active, gender, birthDate]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.    
#Name of the base resource from which the tables will be derived.
PractitionerRole:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, code, specialty, location, healthcareService, telecom, availableTime, availableTime.daysOfWeek, notAvailable, endpoint] 
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [active, period, practitioner, organization, availabilityExceptions]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.   
#Name of the base resource from which the tables will be derived.
RelatedPerson:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, relationship, name, telecom, address, photo, communication] 
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [active, patient, gender, birthDate, period]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options. 
#Name of the base resource from which the tables will be derived.
Person:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, name, telecom, address, link] 
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [gender, birthDate, photo, active]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options. 
#Name of the base resource from which the tables will be derived.
Group:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, characteristic, member] 
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [active, type, actual, code, name, managingEntity]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.
#Name of the base resource from which the tables will be derived.
Organization:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, type, alias, telecom, address, contact, contact.telecom, endpoint] 
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [active, name, partOf]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.  
#Name of the base resource from which the tables will be derived.
Location:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, alias, type, telecom, position, hoursOfOperation, hoursOfOperation.daysOfWeek, endpoint] 
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [status, operationalStatus, name, description, mode, address, physicalType, managingOrganization, partOf, availabilityExceptions]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.   
#Name of the base resource from which the tables will be derived.
HealthcareService:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, category, type, specialty, location, telecom, coverageArea, serviceProvisionCode, eligibility, program, characteristic, communication, referralMethod, availableTime, notAvailable, endpoint] #, availableTime.daysOfWeek
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [active, providedBy, name, comment, extraDetails, photo, appointmentRequired, availabilityExceptions]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.   
#Name of the base resource from which the tables will be derived.
Endpoint:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, contact, payloadType, payloadMimeType, header] 
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [status, connectionType, name, managingOrganization, period, address]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.  
#Name of the base resource from which the tables will be derived.
Schedule:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, serviceCategory, serviceType, specialty, actor]
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [active, planningHorizon, comment]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.  
#Name of the base resource from which the tables will be derived.
Slot:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, serviceCategory, serviceType, specialty]
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [appointmentType, schedule, status, start, end, overbooked, comment]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.
#Name of the base resource from which the tables will be derived.
EpisodeOfCare:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, statusHistory, type, diagnosis, referralRequest, team, account]
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [status, patient, managingOrganization, period, careManager]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.
#Name of the base resource from which the tables will be derived.
Appointment:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, serviceCategory, serviceType, specialty, reasonCode, reasonReference, supportingInformation, slot, basedOn, participant, participant.type, requestedPeriod]
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [status, cancelationReason, appointmentType, priority, description, start, end, minutesDuration, created, comment, patientInstruction]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.  
#Name of the base resource from which the tables will be derived.
AppointmentResponse:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, participantType]
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [appointment, start, end, actor, participantStatus, comment]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.
#Name of the base resource from which the tables will be derived.
Account:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, subject, coverage, guarantor]
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [status, type, name, servicePeriod, owner, description, partOf]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.
#Name of the base resource from which the tables will be derived.
Flag:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, category]
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [status, code, subject, period, encounter, author]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.  
#Name of the base resource from which the tables will be derived.
Device:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, udiCarrier, statusReason, deviceName, specialization, version, property, property.valueQuantity, property.valueCode, contact, note, safety]
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [definition, status, distinctIdentifier, manufacturer, manufactureDate, expirationDate, lotNumber, serialNumber, modelNumber, partNumber, type, patient, owner, location, url, parent]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.  
#Name of the base resource from which the tables will be derived.
DeviceDefinition:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, udiDeviceIdentifier, deviceName, specialization, version, safety, shelfLifeStorage, languageCode, capability, capability.description, property, property.valueQuantity, property.valueCode, contact, note, material] 
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [modelNumber, type, physicalCharacteristics, owner, url, onlineInformation, quantity, parentDevice]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.  
  - {name: ManufacturerString, path: manufacturer, type: string}  
  - {name: ManufacturerReference, path: manufacturer, type: reference}   
#Name of the base resource from which the tables will be derived.
DeviceMetric:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, calibration] 
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [type, unit, source, parent, operationalStatus, color, category, measurementPeriod]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.  
#Name of the base resource from which the tables will be derived.
Substance:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, category, instance, ingredient] 
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [status, code, description]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.  
  - {name: ManufacturerString, path: manufacturer, type: string}  
  - {name: ManufacturerReference, path: manufacturer, type: reference}  
#Name of the base resource from which the tables will be derived.
List:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, note, entry] 
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [status, mode, title, code, subject, encounter, date, source, orderedBy, emptyReason]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.  
#Name of the base resource from which the tables will be derived.
Composition:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [category, author, attester, relatesTo, event, event.code, event.detail, section, section.author, section.entry, section.section] 
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [identifier, status, type, subject, encounter, date, title, confidentiality, custodian]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options. 
#Name of the base resource from which the tables will be derived.
DocumentReference:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, category, author, relatesTo, securityLabel, content, context, context.encounter, context.event, context.related] 
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [masterIdentifier, status, docStatus, type, subject, date, authenticator, custodian, description]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.  
#Name of the base resource from which the tables will be derived.
DocumentManifest:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, author, recipient, content, related] 
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [masterIdentifier, status, type, subject, created, source, description]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.  
#Name of the base resource from which the tables will be derived.
Contract:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, subject, authority, domain, site, alias, subType, contentDefinition, term, term.securityLabel, term.securityLabel.number, term.securityLabel.category, term.securityLabel.control, term.offer, term.offer.identifier, term.offer.party, term.offer.party.reference, term.offer.decisionMode, term.offer.answer, term.offer.linkId, term.offer.securityLabelNumber, term.asset, term.asset.type, term.asset.typeReference, term.asset.subtype, term.asset.context, term.asset.context.code, term.asset.periodType, term.asset.period, term.asset.usePeriod, term.asset.linkId, term.asset.answer, term.asset.securityLabelNumber, term.asset.valuedItem, term.asset.valuedItem.linkId, term.asset.valuedItem.securityLabelNumber, term.action, term.action.subject, term.action.subject.reference, term.action.linkId, term.action.contextLinkId, term.action.requester, term.action.requesterLinkId, term.action.performerType, term.action.performerLinkId, term.action.reasonCode, term.action.reasonReference, term.action.reason, term.action.reasonLinkId, term.action.note, term.action.securityLabelNumber, term.group, supportingInfo, relevantHistory, signer, signer.signature, friendly, legal, rule] 
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [url, version, status, legalState, instantiatesCanonical, instantiatesUri, contentDerivative, issued, applies, expirationType, name, title, subtitle, author, scope, type]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.   
  - {name: TopicCodeableConcept, path: topic, type: codeableConcept}  
  - {name: TopicReference, path: topic, type: reference}
  - {name: LegallyBindingAttachment, path: legallyBinding, type: attachment}  
  - {name: LegallyBindingReference, path: legallyBinding, type: reference}
#Name of the base resource from which the tables will be derived.
Coverage:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, payor, class, costToBeneficiary, costToBeneficiary.exception, contract] 
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [status, type, policyHolder, subscriber, subscriberId, beneficiary, dependent, relationship, period, order, network, subrogation]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.  
#Name of the base resource from which the tables will be derived.
CoverageEligibilityRequest:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, supportingInfo, insurance, item, item.supportingInfoSequence, item.modifier, item.diagnosis, item.detail] #, purpose
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [status, priority, patient, created, enterer, provider, insurer, facility]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.  
  - {name: ServicedDate, path: serviced, type: date}  
  - {name: ServicedPeriod, path: serviced, type: period}  
#Name of the base resource from which the tables will be derived.
CoverageEligibilityResponse:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, insurance, insurance.item, insurance.item.modifier, insurance.item.benefit, insurance.item.authorizationSupporting, error] # , purpose
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [status, patient, created, requestor, request, outcome, disposition, insurer, preAuthRef, form]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.  
  - {name: ServicedDate, path: serviced, type: date}  
  - {name: ServicedPeriod, path: serviced, type: period}   
#Name of the base resource from which the tables will be derived.
EnrollmentRequest:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier] 
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [status, created, insurer, provider, candidate, coverage]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.  
#Name of the base resource from which the tables will be derived.
EnrollmentResponse:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier] 
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [status, request, outcome, disposition, created, organization, requestProvider]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.  
#Name of the base resource from which the tables will be derived.
Claim:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, related, payee, careTeam, supportingInfo, diagnosis, diagnosis.type, insurance, insurance.preAuthRef, accident, item, item.careTeamSequence, item.diagnosisSequence, item.procedureSequence, item.informationSequence, item.modifier, item.programCode, item.udi, item.subSite, item.encounter, item.detail, item.detail.modifier, item.detail.programCode, item.detail.udi, item.detail.subDetail, item.detail.subDetail, item.detail.subDetail.modifier, item.detail.subDetail.programCode, item.detail.subDetail.udi] 
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [status, type, subType, use, patient, billablePeriod, created, enterer, insurer, provider, priority, fundsReserve, prescription, originalPrescription, referral, facility, total]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.   
#Name of the base resource from which the tables will be derived.
ClaimResponse:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, item, item.noteNumber, item.adjudication, item.detail, item.detail.noteNumber, item.detail.adjudication, item.detail.subDetail, item.detail.subDetail.noteNumber, item.detail.subDetail.adjudication, addItem, addItem.itemSequence, addItem.detailSequence, addItem.subdetailSequence, addItem.provider, addItem.modifier, addItem.programCode, addItem.subSite, addItem.noteNumber, addItem.detail, addItem.detail.modifier, addItem.detail.noteNumber, addItem.detail.subDetail, addItem.detail.subDetail.modifier, addItem.detail.subDetail.noteNumber, addItem.detail.subDetail.adjudication, adjudication, total, payment, processNote, communicationRequest, insurance, error]
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [status, type, subType, use, patient, created, insurer, requestor, request, outcome, disposition, preAuthRef, preAuthPeriod, payeeType, fundsReserve, formCode, form]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options. 
#Name of the base resource from which the tables will be derived.
PaymentNotice:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier]
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [status, request, response, created, provider, payment, paymentDate, payee, recipient, amount, paymentStatus]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.  
#Name of the base resource from which the tables will be derived.
PaymentReconciliation:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, detail, processNote]
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [status, period, created, paymentIssuer, request, requestor, outcome, disposition, paymentDate, paymentAmount, paymentIdentifier, formCode]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.  
#Name of the base resource from which the tables will be derived.
ExplanationOfBenefit:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, related, payee, preAuthRef, preAuthRefPeriod, careTeam, supportingInfo, diagnosis, diagnosis.type, procedure, procedure.udi, insurance, insurance.preAuthRef, accident, item, item.careTeamSequence, item.diagnosisSequence, item.procedureSequence, item.informationSequence, item.modifier, item.programCode, item.udi, item.subSite, item.encounter, item.noteNumber, item.adjudication, item.detail, item.detail.modifier, item.detail.programCode, item.detail.udi, item.detail.noteNumber, item.detail.adjudication, item.detail.subDetail, item.detail.subDetail.modifier, item.detail.subDetail.programCode, item.detail.subDetail.udi, item.detail.subDetail.noteNumber, item.detail.subDetail.adjudication, addItem, addItem.itemSequence, addItem.detailSequence, addItem.subDetailSequence, addItem.provider, addItem.modifier, addItem.programCode, addItem.subSite, addItem.noteNumber, addItem.adjudication, addItem.detail, addItem.detail.modifier, addItem.detail.noteNumber, addItem.detail.adjudication, addItem.detail.subDetail, addItem.detail.subDetail.modifier, addItem.detail.subDetail.noteNumber, addItem.detail.subDetail.adjudication, total, payment, processNote, benefitBalance, benefitBalance.financial]
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [status, type, subType, use, patient, billablePeriod, created, enterer, insurer, provider, priority, fundsReserveRequested, fundsReserve, prescription, originalPrescription, referral, facility, claim, claimResponse, outcome, disposition, precedence, adjudication, formCode, form, benefitPeriod]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options. 
  - {name: ServicedDate, path: serviced, type: date}
  - {name: ServicedPeriod, path: serviced, type: period}
  - {name: LocationCodeableConcept, path: location, type: codeableConcept}
  - {name: LocationAddress, path: location, type: address}
  - {name: LocationReference, path: location, type: reference}  
#Name of the base resource from which the tables will be derived.
VisionPrescription:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, lensSpecification, lensSpecification.prism, lensSpecification.note]
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [status, created, patient, encounter, dateWritten, prescriber]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.   
#Name of the base resource from which the tables will be derived.
Questionnaire:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, derivedFrom, subjectType, contact, useContext, jurisdiction, code, item, item.code, item.enableWhen, item.answerOption, item.initial, item.item]
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [url, version, name, title, status, experimental, date, publisher, description, purpose, copyright, approvalDate, lastReviewDate, effectivePeriod]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.   
#Name of the base resource from which the tables will be derived.
QuestionnaireResponse:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [basedOn, partOf, item, item.answer, item.answer.item, item.item]
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [identifier, questionnaire, status, subject, encounter, authored, author, source]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.   
#Name of the base resource from which the tables will be derived.
NutritionOrder:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, instantiatesCanonical, instantiatesUri, instantiates, allergyIntolerance, foodPreferenceModifier, excludeFoodModifier, oralDiet, oralDiet.type, oralDiet.schedule, oralDiet.nutrient, oralDiet.texture, oralDiet.fluidConsistencyType, supplement, supplement.schedule, enteralFormula, enteralFormula.administration, note]
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [status, intent, patient, encounter, dateTime, orderer]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.  
#Name of the base resource from which the tables will be derived.
Task:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, basedOn, partOf, performerType, insurance, note, relevantHistory, restriction, restriction.recipient, input, output]
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [instantiatesCanonical, instantiatesUri, groupIdentifier, status, statusReason, intent, priority, code, description, focus, for, encounter, executionPeriod, authoredOn, lastModified, requester, owner, location, reasonCode, reasonReference]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.  
#Name of the base resource from which the tables will be derived.
RequestGroup:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, instantiatesCanonical, instantiatesUri, basedOn, replaces, reasonCode, reasonReference, note, action, action.code, action.documentation, action.condition, action.relatedAction, action.participant, action.action]
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [groupIdentifier, status, intent, priority, code, subject, encounter, authoredOn, author]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.  
  - {name: TimingDateTime, path: timing, type: dateTime}
  - {name: TimingAge, path: timing, type: age}
  - {name: TimingPeriod, path: timing, type: period}
  - {name: TimingDuration, path: timing, type: duration}
  - {name: TimingRange, path: timing, type: range}
  - {name: TimingTiming, path: timing, type: timing}
#Name of the base resource from which the tables will be derived.
PlanDefinition:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, contact, useContext, jurisdiction, topic, author, editor, reviewer, endorser, relatedArtifact, library, goal, goal.addresses, goal.documentation, goal.target, action, action.code, action.reason, action.documentation, action.goalId, action.trigger, action.condition, action.input, action.output, action.relatedAction, action.participant, action.dynamicValue, action.action]
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [url, version, name, title, subtitle, type, status, experimental, date, publisher, description, purpose, usage, copyright, approvalDate, lastReviewDate, effectivePeriod]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.  
  - {name: SubjectCodeableConcept, path: subject, type: codeableConcept}
  - {name: SubjectReference, path: subject, type: reference} 
#Name of the base resource from which the tables will be derived.
ResearchStudy:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, protocol, partOf, category, focus, condition, contact, relatedArtifact, keyword, location, enrollment, site, note, arm, objective]
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [title, status, primaryPurposeType, phase, description, period, sponsor, principalInvestigator, reasonStopped]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.
#Name of the base resource from which the tables will be derived.
InsurancePlan:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, type, alias, coverageArea, contact, contact.telecom, endpoint, network, coverage, coverage.network, coverage.benefit, coverage.benefit.limit, plan, plan.identifier, plan.coverageArea, plan.network, plan.generalCost, plan.specificCost, plan.specificCost.benefit, plan.specificCost.benefit.cost, plan.specificCost.benefit.cost.qualifiers]
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [status, name, period, ownedBy, administeredBy]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.
#Name of the base resource from which the tables will be derived.
AuditEvent:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [subtype, purposeOfEvent, agent, agent.role, agent.policy, agent.network, agent.purposeOfUse, source, source.type, entity, entity.securityLabel, entity.detail]
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [type, action, period, recorded, outcome, outcomeDesc]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.  
#Name of the base resource from which the tables will be derived.
Basic:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier]
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [code, subject, created, author]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.  
#Name of the base resource from which the tables will be derived.
BiologicallyDerivedProduct:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, request, parent, collection, processing, manipulation, storage]
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [productCategory, productCode, status, quantity]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.  
#Name of the base resource from which the tables will be derived.
ChargeItem:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, definitionUri, definitionCanonical, partOf, performer, bodysite, reason, service, account, note, supportingInformation]
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [status, code, subject, context, performingOrganization, requestingOrganization, costCenter, quantity, factorOverride, priceOverride, overrideReason, enterer, enteredDate]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options. 
  - {name: OccurrenceDateTime, path: occurrence, type: dateTime}
  - {name: OccurrencePeriod, path: occurrence, type: period}
  - {name: OccurrenceTiming, path: occurrence, type: timing}
  - {name: ProductReference, path: product, type: reference}
  - {name: ProductCodeableConcept, path: product, type: codeableConcept}  
#Name of the base resource from which the tables will be derived.
Consent:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, category, performer, organization, policy, verification, provision, provision.actor, provision.action, provision.securityLabel, provision.purpose, provision.class, provision.code, provision.data, provision.provision]
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [status, scope, patient, dateTime, policyRule]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options. 
  - {name: SourceAttachment, path: source, type: attachment}
  - {name: SourceReference, path: source, type: reference}  
#Name of the base resource from which the tables will be derived.
DeviceRequest:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, instantiatesCanonical, instantiatesUri, basedOn, priorRequest, parameter, reasonCode, reasonReference, insurance, supportingInfo, note, relevantHistory]
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [groupIdentifier, status, intent, priority, subject, encounter, authoredOn, requester, performerType]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.  
  - {name: CodeReference, path: code, type: reference}
  - {name: CodeCodeableConcept, path: code, type: codeableConcept}
  - {name: OccurrenceDateTime, path: occurrence, type: dateTime}
  - {name: OccurrencePeriod, path: occurrence, type: period}
  - {name: OccurrenceTiming, path: occurrence, type: timing}
#Name of the base resource from which the tables will be derived.
DeviceUseStatement:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, basedOn, derivedFrom, reasonCode, reasonReference, note]
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [status, subject, recordedOn, source, device, bodySite]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.  
  - {name: TimingTiming, path: timing, type: timing}
  - {name: TimingPeriod, path: timing, type: period}
  - {name: TimingDateTime, path: timing, type: dateTime} 
#Name of the base resource from which the tables will be derived.
GuidanceResponse:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, reasonCode, reasonReference, note, evaluationMessage, dataRequirement]
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [requestIdentifier, status, subject, encounter, occurrenceDateTime, performer, outputParameters, result]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.  
  - {name: ModuleUri, path: module, type: uri}
  - {name: ModuleCanonical, path: module, type: canonical}
  - {name: ModuleCodeableConcept, path: module, type: codeableConcept}  
#Name of the base resource from which the tables will be derived.
Invoice:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, participant, lineItem, totalPriceComponent, note]
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [status, cancelledReason, type, subject, recipient, date, issuer, account, totalNet, totalGross, paymentTerms]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.  
#Name of the base resource from which the tables will be derived.
MeasureReport:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, group, evaluatedResource, group.population, group.stratifier, group.stratifier.code, group.stratifier.stratum, group.stratifier.stratum.component, group.stratifier.stratum.population]
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [status, type, measure, subject, date, reporter, period, improvementNotation]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.   
#Name of the base resource from which the tables will be derived.
Provenance:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [target, policy, reason, agent, agent.role, entity, entity.agent]
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [recorded, location, activity, signature]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.  
  - {name: OccurredPeriod, path: occurred, type: period}
  - {name: OccurredDateTime, path: occurred, type: dateTime}   
#Name of the base resource from which the tables will be derived.
ResearchSubject:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier]
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [status, period, study, individual, assignedArm, actualArm, consent]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.  
#Name of the base resource from which the tables will be derived.
SupplyDelivery:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, basedOn, partOf, suppliedItem, receiver]
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [status, patient, type, supplier, destination]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.    
  - {name: OccurrenceDateTime, path: occurrence, type: dateTime}
  - {name: OccurrencePeriod, path: occurrence, type: period}
  - {name: OccurrenceTiming, path: occurrence, type: timing}
#Name of the base resource from which the tables will be derived.
SupplyRequest:
 #Each node should either resolve to a primitive data type, or a complex data type for which the yaml config is defined in PropertiesGroupConfig.yml.

 #List the array-type node paths for which you want to create separate tables. These paths need not be direct children of the resource. Notice 'contact.telecom'.
 unrollPath: [identifier, parameter, supplier, reasonCode, reasonReference]
 #List the nodes that you want to include in the resource's main table. If the node is of array type, the first element of the array will be used by default. ResourceId is generated by default using id attribute.
 propertiesByDefault: [status, category, priority, quantity, authoredOn, requester, deliverFrom, deliverTo]
 #Customize the expressions for columns if the default does not meet your requirements.
 customProperties:
  # The path below defines the scope for expression. It is a simple dot based navigation to the child nodes. It is not FHIRPath (for performance reasons).
  # Use type:array in order to serialize the array type nodes as a json string.

  #For choice types, give all the options.    
  - {name: ItemCodeableConcept, item: chargeItem, type: codeableConcept}  
  - {name: ItemReference, path: item, type: reference}  
  - {name: OccurrenceDateTime, path: occurrence, type: dateTime}
  - {name: OccurrencePeriod, path: occurrence, type: period}
  - {name: OccurrenceTiming, path: occurrence, type: timing}