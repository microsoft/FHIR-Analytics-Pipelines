CREATE EXTERNAL TABLE [fhir].[Account] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [status] NVARCHAR(100),
    [billingStatus.id] NVARCHAR(100),
    [billingStatus.extension] NVARCHAR(MAX),
    [billingStatus.coding] VARCHAR(MAX),
    [billingStatus.text] NVARCHAR(4000),
    [type.id] NVARCHAR(100),
    [type.extension] NVARCHAR(MAX),
    [type.coding] VARCHAR(MAX),
    [type.text] NVARCHAR(4000),
    [name] NVARCHAR(500),
    [subject] VARCHAR(MAX),
    [servicePeriod.id] NVARCHAR(100),
    [servicePeriod.extension] NVARCHAR(MAX),
    [servicePeriod.start] VARCHAR(64),
    [servicePeriod.end] VARCHAR(64),
    [coverage] VARCHAR(MAX),
    [owner.id] NVARCHAR(100),
    [owner.extension] NVARCHAR(MAX),
    [owner.reference] NVARCHAR(4000),
    [owner.type] VARCHAR(256),
    [owner.identifier.id] NVARCHAR(100),
    [owner.identifier.extension] NVARCHAR(MAX),
    [owner.identifier.use] NVARCHAR(64),
    [owner.identifier.type] NVARCHAR(MAX),
    [owner.identifier.system] VARCHAR(256),
    [owner.identifier.value] NVARCHAR(4000),
    [owner.identifier.period] NVARCHAR(MAX),
    [owner.identifier.assigner] NVARCHAR(MAX),
    [owner.display] NVARCHAR(4000),
    [description] NVARCHAR(4000),
    [guarantor] VARCHAR(MAX),
    [partOf.id] NVARCHAR(100),
    [partOf.extension] NVARCHAR(MAX),
    [partOf.reference] NVARCHAR(4000),
    [partOf.type] VARCHAR(256),
    [partOf.identifier.id] NVARCHAR(100),
    [partOf.identifier.extension] NVARCHAR(MAX),
    [partOf.identifier.use] NVARCHAR(64),
    [partOf.identifier.type] NVARCHAR(MAX),
    [partOf.identifier.system] VARCHAR(256),
    [partOf.identifier.value] NVARCHAR(4000),
    [partOf.identifier.period] NVARCHAR(MAX),
    [partOf.identifier.assigner] NVARCHAR(MAX),
    [partOf.display] NVARCHAR(4000),
) WITH (
    LOCATION='/Account/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.AccountIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'Account/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.AccountSubject AS
SELECT
    [id],
    [subject.JSON],
    [subject.id],
    [subject.extension],
    [subject.reference],
    [subject.type],
    [subject.identifier.id],
    [subject.identifier.extension],
    [subject.identifier.use],
    [subject.identifier.type],
    [subject.identifier.system],
    [subject.identifier.value],
    [subject.identifier.period],
    [subject.identifier.assigner],
    [subject.display]
FROM openrowset (
        BULK 'Account/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [subject.JSON]  VARCHAR(MAX) '$.subject'
    ) AS rowset
    CROSS APPLY openjson (rowset.[subject.JSON]) with (
        [subject.id]                   NVARCHAR(100)       '$.id',
        [subject.extension]            NVARCHAR(MAX)       '$.extension',
        [subject.reference]            NVARCHAR(4000)      '$.reference',
        [subject.type]                 VARCHAR(256)        '$.type',
        [subject.identifier.id]        NVARCHAR(100)       '$.identifier.id',
        [subject.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [subject.identifier.use]       NVARCHAR(64)        '$.identifier.use',
        [subject.identifier.type]      NVARCHAR(MAX)       '$.identifier.type',
        [subject.identifier.system]    VARCHAR(256)        '$.identifier.system',
        [subject.identifier.value]     NVARCHAR(4000)      '$.identifier.value',
        [subject.identifier.period]    NVARCHAR(MAX)       '$.identifier.period',
        [subject.identifier.assigner]  NVARCHAR(MAX)       '$.identifier.assigner',
        [subject.display]              NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.AccountCoverage AS
SELECT
    [id],
    [coverage.JSON],
    [coverage.id],
    [coverage.extension],
    [coverage.modifierExtension],
    [coverage.coverage.id],
    [coverage.coverage.extension],
    [coverage.coverage.reference],
    [coverage.coverage.type],
    [coverage.coverage.identifier],
    [coverage.coverage.display],
    [coverage.priority]
FROM openrowset (
        BULK 'Account/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [coverage.JSON]  VARCHAR(MAX) '$.coverage'
    ) AS rowset
    CROSS APPLY openjson (rowset.[coverage.JSON]) with (
        [coverage.id]                  NVARCHAR(100)       '$.id',
        [coverage.extension]           NVARCHAR(MAX)       '$.extension',
        [coverage.modifierExtension]   NVARCHAR(MAX)       '$.modifierExtension',
        [coverage.coverage.id]         NVARCHAR(100)       '$.coverage.id',
        [coverage.coverage.extension]  NVARCHAR(MAX)       '$.coverage.extension',
        [coverage.coverage.reference]  NVARCHAR(4000)      '$.coverage.reference',
        [coverage.coverage.type]       VARCHAR(256)        '$.coverage.type',
        [coverage.coverage.identifier] NVARCHAR(MAX)       '$.coverage.identifier',
        [coverage.coverage.display]    NVARCHAR(4000)      '$.coverage.display',
        [coverage.priority]            bigint              '$.priority'
    ) j

GO

CREATE VIEW fhir.AccountGuarantor AS
SELECT
    [id],
    [guarantor.JSON],
    [guarantor.id],
    [guarantor.extension],
    [guarantor.modifierExtension],
    [guarantor.party.id],
    [guarantor.party.extension],
    [guarantor.party.reference],
    [guarantor.party.type],
    [guarantor.party.identifier],
    [guarantor.party.display],
    [guarantor.onHold],
    [guarantor.period.id],
    [guarantor.period.extension],
    [guarantor.period.start],
    [guarantor.period.end]
FROM openrowset (
        BULK 'Account/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [guarantor.JSON]  VARCHAR(MAX) '$.guarantor'
    ) AS rowset
    CROSS APPLY openjson (rowset.[guarantor.JSON]) with (
        [guarantor.id]                 NVARCHAR(100)       '$.id',
        [guarantor.extension]          NVARCHAR(MAX)       '$.extension',
        [guarantor.modifierExtension]  NVARCHAR(MAX)       '$.modifierExtension',
        [guarantor.party.id]           NVARCHAR(100)       '$.party.id',
        [guarantor.party.extension]    NVARCHAR(MAX)       '$.party.extension',
        [guarantor.party.reference]    NVARCHAR(4000)      '$.party.reference',
        [guarantor.party.type]         VARCHAR(256)        '$.party.type',
        [guarantor.party.identifier]   NVARCHAR(MAX)       '$.party.identifier',
        [guarantor.party.display]      NVARCHAR(4000)      '$.party.display',
        [guarantor.onHold]             bit                 '$.onHold',
        [guarantor.period.id]          NVARCHAR(100)       '$.period.id',
        [guarantor.period.extension]   NVARCHAR(MAX)       '$.period.extension',
        [guarantor.period.start]       VARCHAR(64)         '$.period.start',
        [guarantor.period.end]         VARCHAR(64)         '$.period.end'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[ActivityDefinition] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [url] VARCHAR(256),
    [identifier] VARCHAR(MAX),
    [version] NVARCHAR(100),
    [name] NVARCHAR(500),
    [title] NVARCHAR(4000),
    [status] NVARCHAR(100),
    [experimental] bit,
    [date] VARCHAR(64),
    [publisher] NVARCHAR(500),
    [contact] VARCHAR(MAX),
    [description] NVARCHAR(MAX),
    [useContext] VARCHAR(MAX),
    [jurisdiction] VARCHAR(MAX),
    [purpose] NVARCHAR(MAX),
    [copyright] NVARCHAR(MAX),
    [approvalDate] VARCHAR(64),
    [lastReviewDate] VARCHAR(64),
    [effectivePeriod.id] NVARCHAR(100),
    [effectivePeriod.extension] NVARCHAR(MAX),
    [effectivePeriod.start] VARCHAR(64),
    [effectivePeriod.end] VARCHAR(64),
    [topic] VARCHAR(MAX),
    [author] VARCHAR(MAX),
    [editor] VARCHAR(MAX),
    [reviewer] VARCHAR(MAX),
    [endorser] VARCHAR(MAX),
    [relatedArtifact] VARCHAR(MAX),
    [subtitle] NVARCHAR(4000),
    [usage] NVARCHAR(4000),
    [library] VARCHAR(MAX),
    [kind] NVARCHAR(100),
    [profile] VARCHAR(256),
    [code.id] NVARCHAR(100),
    [code.extension] NVARCHAR(MAX),
    [code.coding] VARCHAR(MAX),
    [code.text] NVARCHAR(4000),
    [intent] NVARCHAR(100),
    [priority] NVARCHAR(100),
    [doNotPerform] bit,
    [location.id] NVARCHAR(100),
    [location.extension] NVARCHAR(MAX),
    [location.concept.id] NVARCHAR(100),
    [location.concept.extension] NVARCHAR(MAX),
    [location.concept.coding] NVARCHAR(MAX),
    [location.concept.text] NVARCHAR(4000),
    [location.reference.id] NVARCHAR(100),
    [location.reference.extension] NVARCHAR(MAX),
    [location.reference.reference] NVARCHAR(4000),
    [location.reference.type] VARCHAR(256),
    [location.reference.identifier] NVARCHAR(MAX),
    [location.reference.display] NVARCHAR(4000),
    [participant] VARCHAR(MAX),
    [quantity.id] NVARCHAR(100),
    [quantity.extension] NVARCHAR(MAX),
    [quantity.value] float,
    [quantity.comparator] NVARCHAR(64),
    [quantity.unit] NVARCHAR(100),
    [quantity.system] VARCHAR(256),
    [quantity.code] NVARCHAR(4000),
    [dosage] VARCHAR(MAX),
    [bodySite] VARCHAR(MAX),
    [specimenRequirement] VARCHAR(MAX),
    [observationRequirement] VARCHAR(MAX),
    [observationResultRequirement] VARCHAR(MAX),
    [transform] VARCHAR(256),
    [dynamicValue] VARCHAR(MAX),
    [subject.codeableConcept.id] NVARCHAR(100),
    [subject.codeableConcept.extension] NVARCHAR(MAX),
    [subject.codeableConcept.coding] VARCHAR(MAX),
    [subject.codeableConcept.text] NVARCHAR(4000),
    [subject.reference.id] NVARCHAR(100),
    [subject.reference.extension] NVARCHAR(MAX),
    [subject.reference.reference] NVARCHAR(4000),
    [subject.reference.type] VARCHAR(256),
    [subject.reference.identifier.id] NVARCHAR(100),
    [subject.reference.identifier.extension] NVARCHAR(MAX),
    [subject.reference.identifier.use] NVARCHAR(64),
    [subject.reference.identifier.type] NVARCHAR(MAX),
    [subject.reference.identifier.system] VARCHAR(256),
    [subject.reference.identifier.value] NVARCHAR(4000),
    [subject.reference.identifier.period] NVARCHAR(MAX),
    [subject.reference.identifier.assigner] NVARCHAR(MAX),
    [subject.reference.display] NVARCHAR(4000),
    [subject.canonical] VARCHAR(256),
    [timing.timing.id] NVARCHAR(100),
    [timing.timing.extension] NVARCHAR(MAX),
    [timing.timing.modifierExtension] NVARCHAR(MAX),
    [timing.timing.event] VARCHAR(MAX),
    [timing.timing.repeat.id] NVARCHAR(100),
    [timing.timing.repeat.extension] NVARCHAR(MAX),
    [timing.timing.repeat.modifierExtension] NVARCHAR(MAX),
    [timing.timing.repeat.count] bigint,
    [timing.timing.repeat.countMax] bigint,
    [timing.timing.repeat.duration] float,
    [timing.timing.repeat.durationMax] float,
    [timing.timing.repeat.durationUnit] NVARCHAR(64),
    [timing.timing.repeat.frequency] bigint,
    [timing.timing.repeat.frequencyMax] bigint,
    [timing.timing.repeat.period] float,
    [timing.timing.repeat.periodMax] float,
    [timing.timing.repeat.periodUnit] NVARCHAR(64),
    [timing.timing.repeat.dayOfWeek] NVARCHAR(MAX),
    [timing.timing.repeat.timeOfDay] NVARCHAR(MAX),
    [timing.timing.repeat.when] NVARCHAR(MAX),
    [timing.timing.repeat.offset] bigint,
    [timing.timing.repeat.bounds.duration] NVARCHAR(MAX),
    [timing.timing.repeat.bounds.range] NVARCHAR(MAX),
    [timing.timing.repeat.bounds.period] NVARCHAR(MAX),
    [timing.timing.code.id] NVARCHAR(100),
    [timing.timing.code.extension] NVARCHAR(MAX),
    [timing.timing.code.coding] NVARCHAR(MAX),
    [timing.timing.code.text] NVARCHAR(4000),
    [timing.age.id] NVARCHAR(100),
    [timing.age.extension] NVARCHAR(MAX),
    [timing.age.value] float,
    [timing.age.comparator] NVARCHAR(64),
    [timing.age.unit] NVARCHAR(100),
    [timing.age.system] VARCHAR(256),
    [timing.age.code] NVARCHAR(4000),
    [timing.range.id] NVARCHAR(100),
    [timing.range.extension] NVARCHAR(MAX),
    [timing.range.low.id] NVARCHAR(100),
    [timing.range.low.extension] NVARCHAR(MAX),
    [timing.range.low.value] float,
    [timing.range.low.comparator] NVARCHAR(64),
    [timing.range.low.unit] NVARCHAR(100),
    [timing.range.low.system] VARCHAR(256),
    [timing.range.low.code] NVARCHAR(4000),
    [timing.range.high.id] NVARCHAR(100),
    [timing.range.high.extension] NVARCHAR(MAX),
    [timing.range.high.value] float,
    [timing.range.high.comparator] NVARCHAR(64),
    [timing.range.high.unit] NVARCHAR(100),
    [timing.range.high.system] VARCHAR(256),
    [timing.range.high.code] NVARCHAR(4000),
    [timing.duration.id] NVARCHAR(100),
    [timing.duration.extension] NVARCHAR(MAX),
    [timing.duration.value] float,
    [timing.duration.comparator] NVARCHAR(64),
    [timing.duration.unit] NVARCHAR(100),
    [timing.duration.system] VARCHAR(256),
    [timing.duration.code] NVARCHAR(4000),
    [product.reference.id] NVARCHAR(100),
    [product.reference.extension] NVARCHAR(MAX),
    [product.reference.reference] NVARCHAR(4000),
    [product.reference.type] VARCHAR(256),
    [product.reference.identifier.id] NVARCHAR(100),
    [product.reference.identifier.extension] NVARCHAR(MAX),
    [product.reference.identifier.use] NVARCHAR(64),
    [product.reference.identifier.type] NVARCHAR(MAX),
    [product.reference.identifier.system] VARCHAR(256),
    [product.reference.identifier.value] NVARCHAR(4000),
    [product.reference.identifier.period] NVARCHAR(MAX),
    [product.reference.identifier.assigner] NVARCHAR(MAX),
    [product.reference.display] NVARCHAR(4000),
    [product.codeableConcept.id] NVARCHAR(100),
    [product.codeableConcept.extension] NVARCHAR(MAX),
    [product.codeableConcept.coding] VARCHAR(MAX),
    [product.codeableConcept.text] NVARCHAR(4000),
) WITH (
    LOCATION='/ActivityDefinition/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.ActivityDefinitionIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'ActivityDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.ActivityDefinitionContact AS
SELECT
    [id],
    [contact.JSON],
    [contact.id],
    [contact.extension],
    [contact.name],
    [contact.telecom]
FROM openrowset (
        BULK 'ActivityDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [contact.JSON]  VARCHAR(MAX) '$.contact'
    ) AS rowset
    CROSS APPLY openjson (rowset.[contact.JSON]) with (
        [contact.id]                   NVARCHAR(100)       '$.id',
        [contact.extension]            NVARCHAR(MAX)       '$.extension',
        [contact.name]                 NVARCHAR(500)       '$.name',
        [contact.telecom]              NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.ActivityDefinitionUseContext AS
SELECT
    [id],
    [useContext.JSON],
    [useContext.id],
    [useContext.extension],
    [useContext.code.id],
    [useContext.code.extension],
    [useContext.code.system],
    [useContext.code.version],
    [useContext.code.code],
    [useContext.code.display],
    [useContext.code.userSelected],
    [useContext.value.codeableConcept.id],
    [useContext.value.codeableConcept.extension],
    [useContext.value.codeableConcept.coding],
    [useContext.value.codeableConcept.text],
    [useContext.value.quantity.id],
    [useContext.value.quantity.extension],
    [useContext.value.quantity.value],
    [useContext.value.quantity.comparator],
    [useContext.value.quantity.unit],
    [useContext.value.quantity.system],
    [useContext.value.quantity.code],
    [useContext.value.range.id],
    [useContext.value.range.extension],
    [useContext.value.range.low],
    [useContext.value.range.high],
    [useContext.value.reference.id],
    [useContext.value.reference.extension],
    [useContext.value.reference.reference],
    [useContext.value.reference.type],
    [useContext.value.reference.identifier],
    [useContext.value.reference.display]
FROM openrowset (
        BULK 'ActivityDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [useContext.JSON]  VARCHAR(MAX) '$.useContext'
    ) AS rowset
    CROSS APPLY openjson (rowset.[useContext.JSON]) with (
        [useContext.id]                NVARCHAR(100)       '$.id',
        [useContext.extension]         NVARCHAR(MAX)       '$.extension',
        [useContext.code.id]           NVARCHAR(100)       '$.code.id',
        [useContext.code.extension]    NVARCHAR(MAX)       '$.code.extension',
        [useContext.code.system]       VARCHAR(256)        '$.code.system',
        [useContext.code.version]      NVARCHAR(100)       '$.code.version',
        [useContext.code.code]         NVARCHAR(4000)      '$.code.code',
        [useContext.code.display]      NVARCHAR(4000)      '$.code.display',
        [useContext.code.userSelected] bit                 '$.code.userSelected',
        [useContext.value.codeableConcept.id] NVARCHAR(100)       '$.value.codeableConcept.id',
        [useContext.value.codeableConcept.extension] NVARCHAR(MAX)       '$.value.codeableConcept.extension',
        [useContext.value.codeableConcept.coding] NVARCHAR(MAX)       '$.value.codeableConcept.coding',
        [useContext.value.codeableConcept.text] NVARCHAR(4000)      '$.value.codeableConcept.text',
        [useContext.value.quantity.id] NVARCHAR(100)       '$.value.quantity.id',
        [useContext.value.quantity.extension] NVARCHAR(MAX)       '$.value.quantity.extension',
        [useContext.value.quantity.value] float               '$.value.quantity.value',
        [useContext.value.quantity.comparator] NVARCHAR(64)        '$.value.quantity.comparator',
        [useContext.value.quantity.unit] NVARCHAR(100)       '$.value.quantity.unit',
        [useContext.value.quantity.system] VARCHAR(256)        '$.value.quantity.system',
        [useContext.value.quantity.code] NVARCHAR(4000)      '$.value.quantity.code',
        [useContext.value.range.id]    NVARCHAR(100)       '$.value.range.id',
        [useContext.value.range.extension] NVARCHAR(MAX)       '$.value.range.extension',
        [useContext.value.range.low]   NVARCHAR(MAX)       '$.value.range.low',
        [useContext.value.range.high]  NVARCHAR(MAX)       '$.value.range.high',
        [useContext.value.reference.id] NVARCHAR(100)       '$.value.reference.id',
        [useContext.value.reference.extension] NVARCHAR(MAX)       '$.value.reference.extension',
        [useContext.value.reference.reference] NVARCHAR(4000)      '$.value.reference.reference',
        [useContext.value.reference.type] VARCHAR(256)        '$.value.reference.type',
        [useContext.value.reference.identifier] NVARCHAR(MAX)       '$.value.reference.identifier',
        [useContext.value.reference.display] NVARCHAR(4000)      '$.value.reference.display'
    ) j

GO

CREATE VIEW fhir.ActivityDefinitionJurisdiction AS
SELECT
    [id],
    [jurisdiction.JSON],
    [jurisdiction.id],
    [jurisdiction.extension],
    [jurisdiction.coding],
    [jurisdiction.text]
FROM openrowset (
        BULK 'ActivityDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [jurisdiction.JSON]  VARCHAR(MAX) '$.jurisdiction'
    ) AS rowset
    CROSS APPLY openjson (rowset.[jurisdiction.JSON]) with (
        [jurisdiction.id]              NVARCHAR(100)       '$.id',
        [jurisdiction.extension]       NVARCHAR(MAX)       '$.extension',
        [jurisdiction.coding]          NVARCHAR(MAX)       '$.coding' AS JSON,
        [jurisdiction.text]            NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.ActivityDefinitionTopic AS
SELECT
    [id],
    [topic.JSON],
    [topic.id],
    [topic.extension],
    [topic.coding],
    [topic.text]
FROM openrowset (
        BULK 'ActivityDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [topic.JSON]  VARCHAR(MAX) '$.topic'
    ) AS rowset
    CROSS APPLY openjson (rowset.[topic.JSON]) with (
        [topic.id]                     NVARCHAR(100)       '$.id',
        [topic.extension]              NVARCHAR(MAX)       '$.extension',
        [topic.coding]                 NVARCHAR(MAX)       '$.coding' AS JSON,
        [topic.text]                   NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.ActivityDefinitionAuthor AS
SELECT
    [id],
    [author.JSON],
    [author.id],
    [author.extension],
    [author.name],
    [author.telecom]
FROM openrowset (
        BULK 'ActivityDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [author.JSON]  VARCHAR(MAX) '$.author'
    ) AS rowset
    CROSS APPLY openjson (rowset.[author.JSON]) with (
        [author.id]                    NVARCHAR(100)       '$.id',
        [author.extension]             NVARCHAR(MAX)       '$.extension',
        [author.name]                  NVARCHAR(500)       '$.name',
        [author.telecom]               NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.ActivityDefinitionEditor AS
SELECT
    [id],
    [editor.JSON],
    [editor.id],
    [editor.extension],
    [editor.name],
    [editor.telecom]
FROM openrowset (
        BULK 'ActivityDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [editor.JSON]  VARCHAR(MAX) '$.editor'
    ) AS rowset
    CROSS APPLY openjson (rowset.[editor.JSON]) with (
        [editor.id]                    NVARCHAR(100)       '$.id',
        [editor.extension]             NVARCHAR(MAX)       '$.extension',
        [editor.name]                  NVARCHAR(500)       '$.name',
        [editor.telecom]               NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.ActivityDefinitionReviewer AS
SELECT
    [id],
    [reviewer.JSON],
    [reviewer.id],
    [reviewer.extension],
    [reviewer.name],
    [reviewer.telecom]
FROM openrowset (
        BULK 'ActivityDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [reviewer.JSON]  VARCHAR(MAX) '$.reviewer'
    ) AS rowset
    CROSS APPLY openjson (rowset.[reviewer.JSON]) with (
        [reviewer.id]                  NVARCHAR(100)       '$.id',
        [reviewer.extension]           NVARCHAR(MAX)       '$.extension',
        [reviewer.name]                NVARCHAR(500)       '$.name',
        [reviewer.telecom]             NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.ActivityDefinitionEndorser AS
SELECT
    [id],
    [endorser.JSON],
    [endorser.id],
    [endorser.extension],
    [endorser.name],
    [endorser.telecom]
FROM openrowset (
        BULK 'ActivityDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [endorser.JSON]  VARCHAR(MAX) '$.endorser'
    ) AS rowset
    CROSS APPLY openjson (rowset.[endorser.JSON]) with (
        [endorser.id]                  NVARCHAR(100)       '$.id',
        [endorser.extension]           NVARCHAR(MAX)       '$.extension',
        [endorser.name]                NVARCHAR(500)       '$.name',
        [endorser.telecom]             NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.ActivityDefinitionRelatedArtifact AS
SELECT
    [id],
    [relatedArtifact.JSON],
    [relatedArtifact.id],
    [relatedArtifact.extension],
    [relatedArtifact.type],
    [relatedArtifact.classifier],
    [relatedArtifact.label],
    [relatedArtifact.display],
    [relatedArtifact.citation],
    [relatedArtifact.document.id],
    [relatedArtifact.document.extension],
    [relatedArtifact.document.contentType],
    [relatedArtifact.document.language],
    [relatedArtifact.document.data],
    [relatedArtifact.document.url],
    [relatedArtifact.document.size],
    [relatedArtifact.document.hash],
    [relatedArtifact.document.title],
    [relatedArtifact.document.creation],
    [relatedArtifact.document.height],
    [relatedArtifact.document.width],
    [relatedArtifact.document.frames],
    [relatedArtifact.document.duration],
    [relatedArtifact.document.pages],
    [relatedArtifact.resource],
    [relatedArtifact.resourceReference.id],
    [relatedArtifact.resourceReference.extension],
    [relatedArtifact.resourceReference.reference],
    [relatedArtifact.resourceReference.type],
    [relatedArtifact.resourceReference.identifier],
    [relatedArtifact.resourceReference.display]
FROM openrowset (
        BULK 'ActivityDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [relatedArtifact.JSON]  VARCHAR(MAX) '$.relatedArtifact'
    ) AS rowset
    CROSS APPLY openjson (rowset.[relatedArtifact.JSON]) with (
        [relatedArtifact.id]           NVARCHAR(100)       '$.id',
        [relatedArtifact.extension]    NVARCHAR(MAX)       '$.extension',
        [relatedArtifact.type]         NVARCHAR(64)        '$.type',
        [relatedArtifact.classifier]   NVARCHAR(MAX)       '$.classifier' AS JSON,
        [relatedArtifact.label]        NVARCHAR(100)       '$.label',
        [relatedArtifact.display]      NVARCHAR(4000)      '$.display',
        [relatedArtifact.citation]     NVARCHAR(MAX)       '$.citation',
        [relatedArtifact.document.id]  NVARCHAR(100)       '$.document.id',
        [relatedArtifact.document.extension] NVARCHAR(MAX)       '$.document.extension',
        [relatedArtifact.document.contentType] NVARCHAR(100)       '$.document.contentType',
        [relatedArtifact.document.language] NVARCHAR(100)       '$.document.language',
        [relatedArtifact.document.data] NVARCHAR(MAX)       '$.document.data',
        [relatedArtifact.document.url] VARCHAR(256)        '$.document.url',
        [relatedArtifact.document.size] NVARCHAR(MAX)       '$.document.size',
        [relatedArtifact.document.hash] NVARCHAR(MAX)       '$.document.hash',
        [relatedArtifact.document.title] NVARCHAR(4000)      '$.document.title',
        [relatedArtifact.document.creation] VARCHAR(64)         '$.document.creation',
        [relatedArtifact.document.height] bigint              '$.document.height',
        [relatedArtifact.document.width] bigint              '$.document.width',
        [relatedArtifact.document.frames] bigint              '$.document.frames',
        [relatedArtifact.document.duration] float               '$.document.duration',
        [relatedArtifact.document.pages] bigint              '$.document.pages',
        [relatedArtifact.resource]     VARCHAR(256)        '$.resource',
        [relatedArtifact.resourceReference.id] NVARCHAR(100)       '$.resourceReference.id',
        [relatedArtifact.resourceReference.extension] NVARCHAR(MAX)       '$.resourceReference.extension',
        [relatedArtifact.resourceReference.reference] NVARCHAR(4000)      '$.resourceReference.reference',
        [relatedArtifact.resourceReference.type] VARCHAR(256)        '$.resourceReference.type',
        [relatedArtifact.resourceReference.identifier] NVARCHAR(MAX)       '$.resourceReference.identifier',
        [relatedArtifact.resourceReference.display] NVARCHAR(4000)      '$.resourceReference.display'
    ) j

GO

CREATE VIEW fhir.ActivityDefinitionLibrary AS
SELECT
    [id],
    [library.JSON],
    [library]
FROM openrowset (
        BULK 'ActivityDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [library.JSON]  VARCHAR(MAX) '$.library'
    ) AS rowset
    CROSS APPLY openjson (rowset.[library.JSON]) with (
        [library]                      NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.ActivityDefinitionParticipant AS
SELECT
    [id],
    [participant.JSON],
    [participant.id],
    [participant.extension],
    [participant.modifierExtension],
    [participant.type],
    [participant.typeReference.id],
    [participant.typeReference.extension],
    [participant.typeReference.reference],
    [participant.typeReference.type],
    [participant.typeReference.identifier],
    [participant.typeReference.display],
    [participant.role.id],
    [participant.role.extension],
    [participant.role.coding],
    [participant.role.text],
    [participant.function.id],
    [participant.function.extension],
    [participant.function.coding],
    [participant.function.text]
FROM openrowset (
        BULK 'ActivityDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [participant.JSON]  VARCHAR(MAX) '$.participant'
    ) AS rowset
    CROSS APPLY openjson (rowset.[participant.JSON]) with (
        [participant.id]               NVARCHAR(100)       '$.id',
        [participant.extension]        NVARCHAR(MAX)       '$.extension',
        [participant.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [participant.type]             NVARCHAR(100)       '$.type',
        [participant.typeReference.id] NVARCHAR(100)       '$.typeReference.id',
        [participant.typeReference.extension] NVARCHAR(MAX)       '$.typeReference.extension',
        [participant.typeReference.reference] NVARCHAR(4000)      '$.typeReference.reference',
        [participant.typeReference.type] VARCHAR(256)        '$.typeReference.type',
        [participant.typeReference.identifier] NVARCHAR(MAX)       '$.typeReference.identifier',
        [participant.typeReference.display] NVARCHAR(4000)      '$.typeReference.display',
        [participant.role.id]          NVARCHAR(100)       '$.role.id',
        [participant.role.extension]   NVARCHAR(MAX)       '$.role.extension',
        [participant.role.coding]      NVARCHAR(MAX)       '$.role.coding',
        [participant.role.text]        NVARCHAR(4000)      '$.role.text',
        [participant.function.id]      NVARCHAR(100)       '$.function.id',
        [participant.function.extension] NVARCHAR(MAX)       '$.function.extension',
        [participant.function.coding]  NVARCHAR(MAX)       '$.function.coding',
        [participant.function.text]    NVARCHAR(4000)      '$.function.text'
    ) j

GO

CREATE VIEW fhir.ActivityDefinitionDosage AS
SELECT
    [id],
    [dosage.JSON],
    [dosage.id],
    [dosage.extension],
    [dosage.modifierExtension],
    [dosage.sequence],
    [dosage.text],
    [dosage.additionalInstruction],
    [dosage.patientInstruction],
    [dosage.timing.id],
    [dosage.timing.extension],
    [dosage.timing.modifierExtension],
    [dosage.timing.event],
    [dosage.timing.repeat],
    [dosage.timing.code],
    [dosage.site.id],
    [dosage.site.extension],
    [dosage.site.coding],
    [dosage.site.text],
    [dosage.route.id],
    [dosage.route.extension],
    [dosage.route.coding],
    [dosage.route.text],
    [dosage.method.id],
    [dosage.method.extension],
    [dosage.method.coding],
    [dosage.method.text],
    [dosage.doseAndRate],
    [dosage.maxDosePerPeriod.id],
    [dosage.maxDosePerPeriod.extension],
    [dosage.maxDosePerPeriod.numerator],
    [dosage.maxDosePerPeriod.denominator],
    [dosage.maxDosePerAdministration.id],
    [dosage.maxDosePerAdministration.extension],
    [dosage.maxDosePerAdministration.value],
    [dosage.maxDosePerAdministration.comparator],
    [dosage.maxDosePerAdministration.unit],
    [dosage.maxDosePerAdministration.system],
    [dosage.maxDosePerAdministration.code],
    [dosage.maxDosePerLifetime.id],
    [dosage.maxDosePerLifetime.extension],
    [dosage.maxDosePerLifetime.value],
    [dosage.maxDosePerLifetime.comparator],
    [dosage.maxDosePerLifetime.unit],
    [dosage.maxDosePerLifetime.system],
    [dosage.maxDosePerLifetime.code],
    [dosage.asNeeded.boolean],
    [dosage.asNeeded.codeableConcept.id],
    [dosage.asNeeded.codeableConcept.extension],
    [dosage.asNeeded.codeableConcept.coding],
    [dosage.asNeeded.codeableConcept.text]
FROM openrowset (
        BULK 'ActivityDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [dosage.JSON]  VARCHAR(MAX) '$.dosage'
    ) AS rowset
    CROSS APPLY openjson (rowset.[dosage.JSON]) with (
        [dosage.id]                    NVARCHAR(100)       '$.id',
        [dosage.extension]             NVARCHAR(MAX)       '$.extension',
        [dosage.modifierExtension]     NVARCHAR(MAX)       '$.modifierExtension',
        [dosage.sequence]              bigint              '$.sequence',
        [dosage.text]                  NVARCHAR(4000)      '$.text',
        [dosage.additionalInstruction] NVARCHAR(MAX)       '$.additionalInstruction' AS JSON,
        [dosage.patientInstruction]    NVARCHAR(4000)      '$.patientInstruction',
        [dosage.timing.id]             NVARCHAR(100)       '$.timing.id',
        [dosage.timing.extension]      NVARCHAR(MAX)       '$.timing.extension',
        [dosage.timing.modifierExtension] NVARCHAR(MAX)       '$.timing.modifierExtension',
        [dosage.timing.event]          NVARCHAR(MAX)       '$.timing.event',
        [dosage.timing.repeat]         NVARCHAR(MAX)       '$.timing.repeat',
        [dosage.timing.code]           NVARCHAR(MAX)       '$.timing.code',
        [dosage.site.id]               NVARCHAR(100)       '$.site.id',
        [dosage.site.extension]        NVARCHAR(MAX)       '$.site.extension',
        [dosage.site.coding]           NVARCHAR(MAX)       '$.site.coding',
        [dosage.site.text]             NVARCHAR(4000)      '$.site.text',
        [dosage.route.id]              NVARCHAR(100)       '$.route.id',
        [dosage.route.extension]       NVARCHAR(MAX)       '$.route.extension',
        [dosage.route.coding]          NVARCHAR(MAX)       '$.route.coding',
        [dosage.route.text]            NVARCHAR(4000)      '$.route.text',
        [dosage.method.id]             NVARCHAR(100)       '$.method.id',
        [dosage.method.extension]      NVARCHAR(MAX)       '$.method.extension',
        [dosage.method.coding]         NVARCHAR(MAX)       '$.method.coding',
        [dosage.method.text]           NVARCHAR(4000)      '$.method.text',
        [dosage.doseAndRate]           NVARCHAR(MAX)       '$.doseAndRate' AS JSON,
        [dosage.maxDosePerPeriod.id]   NVARCHAR(100)       '$.maxDosePerPeriod.id',
        [dosage.maxDosePerPeriod.extension] NVARCHAR(MAX)       '$.maxDosePerPeriod.extension',
        [dosage.maxDosePerPeriod.numerator] NVARCHAR(MAX)       '$.maxDosePerPeriod.numerator',
        [dosage.maxDosePerPeriod.denominator] NVARCHAR(MAX)       '$.maxDosePerPeriod.denominator',
        [dosage.maxDosePerAdministration.id] NVARCHAR(100)       '$.maxDosePerAdministration.id',
        [dosage.maxDosePerAdministration.extension] NVARCHAR(MAX)       '$.maxDosePerAdministration.extension',
        [dosage.maxDosePerAdministration.value] float               '$.maxDosePerAdministration.value',
        [dosage.maxDosePerAdministration.comparator] NVARCHAR(64)        '$.maxDosePerAdministration.comparator',
        [dosage.maxDosePerAdministration.unit] NVARCHAR(100)       '$.maxDosePerAdministration.unit',
        [dosage.maxDosePerAdministration.system] VARCHAR(256)        '$.maxDosePerAdministration.system',
        [dosage.maxDosePerAdministration.code] NVARCHAR(4000)      '$.maxDosePerAdministration.code',
        [dosage.maxDosePerLifetime.id] NVARCHAR(100)       '$.maxDosePerLifetime.id',
        [dosage.maxDosePerLifetime.extension] NVARCHAR(MAX)       '$.maxDosePerLifetime.extension',
        [dosage.maxDosePerLifetime.value] float               '$.maxDosePerLifetime.value',
        [dosage.maxDosePerLifetime.comparator] NVARCHAR(64)        '$.maxDosePerLifetime.comparator',
        [dosage.maxDosePerLifetime.unit] NVARCHAR(100)       '$.maxDosePerLifetime.unit',
        [dosage.maxDosePerLifetime.system] VARCHAR(256)        '$.maxDosePerLifetime.system',
        [dosage.maxDosePerLifetime.code] NVARCHAR(4000)      '$.maxDosePerLifetime.code',
        [dosage.asNeeded.boolean]      bit                 '$.asNeeded.boolean',
        [dosage.asNeeded.codeableConcept.id] NVARCHAR(100)       '$.asNeeded.codeableConcept.id',
        [dosage.asNeeded.codeableConcept.extension] NVARCHAR(MAX)       '$.asNeeded.codeableConcept.extension',
        [dosage.asNeeded.codeableConcept.coding] NVARCHAR(MAX)       '$.asNeeded.codeableConcept.coding',
        [dosage.asNeeded.codeableConcept.text] NVARCHAR(4000)      '$.asNeeded.codeableConcept.text'
    ) j

GO

CREATE VIEW fhir.ActivityDefinitionBodySite AS
SELECT
    [id],
    [bodySite.JSON],
    [bodySite.id],
    [bodySite.extension],
    [bodySite.coding],
    [bodySite.text]
FROM openrowset (
        BULK 'ActivityDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [bodySite.JSON]  VARCHAR(MAX) '$.bodySite'
    ) AS rowset
    CROSS APPLY openjson (rowset.[bodySite.JSON]) with (
        [bodySite.id]                  NVARCHAR(100)       '$.id',
        [bodySite.extension]           NVARCHAR(MAX)       '$.extension',
        [bodySite.coding]              NVARCHAR(MAX)       '$.coding' AS JSON,
        [bodySite.text]                NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.ActivityDefinitionSpecimenRequirement AS
SELECT
    [id],
    [specimenRequirement.JSON],
    [specimenRequirement.id],
    [specimenRequirement.extension],
    [specimenRequirement.reference],
    [specimenRequirement.type],
    [specimenRequirement.identifier.id],
    [specimenRequirement.identifier.extension],
    [specimenRequirement.identifier.use],
    [specimenRequirement.identifier.type],
    [specimenRequirement.identifier.system],
    [specimenRequirement.identifier.value],
    [specimenRequirement.identifier.period],
    [specimenRequirement.identifier.assigner],
    [specimenRequirement.display]
FROM openrowset (
        BULK 'ActivityDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [specimenRequirement.JSON]  VARCHAR(MAX) '$.specimenRequirement'
    ) AS rowset
    CROSS APPLY openjson (rowset.[specimenRequirement.JSON]) with (
        [specimenRequirement.id]       NVARCHAR(100)       '$.id',
        [specimenRequirement.extension] NVARCHAR(MAX)       '$.extension',
        [specimenRequirement.reference] NVARCHAR(4000)      '$.reference',
        [specimenRequirement.type]     VARCHAR(256)        '$.type',
        [specimenRequirement.identifier.id] NVARCHAR(100)       '$.identifier.id',
        [specimenRequirement.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [specimenRequirement.identifier.use] NVARCHAR(64)        '$.identifier.use',
        [specimenRequirement.identifier.type] NVARCHAR(MAX)       '$.identifier.type',
        [specimenRequirement.identifier.system] VARCHAR(256)        '$.identifier.system',
        [specimenRequirement.identifier.value] NVARCHAR(4000)      '$.identifier.value',
        [specimenRequirement.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [specimenRequirement.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [specimenRequirement.display]  NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.ActivityDefinitionObservationRequirement AS
SELECT
    [id],
    [observationRequirement.JSON],
    [observationRequirement.id],
    [observationRequirement.extension],
    [observationRequirement.reference],
    [observationRequirement.type],
    [observationRequirement.identifier.id],
    [observationRequirement.identifier.extension],
    [observationRequirement.identifier.use],
    [observationRequirement.identifier.type],
    [observationRequirement.identifier.system],
    [observationRequirement.identifier.value],
    [observationRequirement.identifier.period],
    [observationRequirement.identifier.assigner],
    [observationRequirement.display]
FROM openrowset (
        BULK 'ActivityDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [observationRequirement.JSON]  VARCHAR(MAX) '$.observationRequirement'
    ) AS rowset
    CROSS APPLY openjson (rowset.[observationRequirement.JSON]) with (
        [observationRequirement.id]    NVARCHAR(100)       '$.id',
        [observationRequirement.extension] NVARCHAR(MAX)       '$.extension',
        [observationRequirement.reference] NVARCHAR(4000)      '$.reference',
        [observationRequirement.type]  VARCHAR(256)        '$.type',
        [observationRequirement.identifier.id] NVARCHAR(100)       '$.identifier.id',
        [observationRequirement.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [observationRequirement.identifier.use] NVARCHAR(64)        '$.identifier.use',
        [observationRequirement.identifier.type] NVARCHAR(MAX)       '$.identifier.type',
        [observationRequirement.identifier.system] VARCHAR(256)        '$.identifier.system',
        [observationRequirement.identifier.value] NVARCHAR(4000)      '$.identifier.value',
        [observationRequirement.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [observationRequirement.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [observationRequirement.display] NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.ActivityDefinitionObservationResultRequirement AS
SELECT
    [id],
    [observationResultRequirement.JSON],
    [observationResultRequirement.id],
    [observationResultRequirement.extension],
    [observationResultRequirement.reference],
    [observationResultRequirement.type],
    [observationResultRequirement.identifier.id],
    [observationResultRequirement.identifier.extension],
    [observationResultRequirement.identifier.use],
    [observationResultRequirement.identifier.type],
    [observationResultRequirement.identifier.system],
    [observationResultRequirement.identifier.value],
    [observationResultRequirement.identifier.period],
    [observationResultRequirement.identifier.assigner],
    [observationResultRequirement.display]
FROM openrowset (
        BULK 'ActivityDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [observationResultRequirement.JSON]  VARCHAR(MAX) '$.observationResultRequirement'
    ) AS rowset
    CROSS APPLY openjson (rowset.[observationResultRequirement.JSON]) with (
        [observationResultRequirement.id] NVARCHAR(100)       '$.id',
        [observationResultRequirement.extension] NVARCHAR(MAX)       '$.extension',
        [observationResultRequirement.reference] NVARCHAR(4000)      '$.reference',
        [observationResultRequirement.type] VARCHAR(256)        '$.type',
        [observationResultRequirement.identifier.id] NVARCHAR(100)       '$.identifier.id',
        [observationResultRequirement.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [observationResultRequirement.identifier.use] NVARCHAR(64)        '$.identifier.use',
        [observationResultRequirement.identifier.type] NVARCHAR(MAX)       '$.identifier.type',
        [observationResultRequirement.identifier.system] VARCHAR(256)        '$.identifier.system',
        [observationResultRequirement.identifier.value] NVARCHAR(4000)      '$.identifier.value',
        [observationResultRequirement.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [observationResultRequirement.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [observationResultRequirement.display] NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.ActivityDefinitionDynamicValue AS
SELECT
    [id],
    [dynamicValue.JSON],
    [dynamicValue.id],
    [dynamicValue.extension],
    [dynamicValue.modifierExtension],
    [dynamicValue.path],
    [dynamicValue.expression.id],
    [dynamicValue.expression.extension],
    [dynamicValue.expression.description],
    [dynamicValue.expression.name],
    [dynamicValue.expression.language],
    [dynamicValue.expression.expression],
    [dynamicValue.expression.reference]
FROM openrowset (
        BULK 'ActivityDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [dynamicValue.JSON]  VARCHAR(MAX) '$.dynamicValue'
    ) AS rowset
    CROSS APPLY openjson (rowset.[dynamicValue.JSON]) with (
        [dynamicValue.id]              NVARCHAR(100)       '$.id',
        [dynamicValue.extension]       NVARCHAR(MAX)       '$.extension',
        [dynamicValue.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [dynamicValue.path]            NVARCHAR(4000)      '$.path',
        [dynamicValue.expression.id]   NVARCHAR(100)       '$.expression.id',
        [dynamicValue.expression.extension] NVARCHAR(MAX)       '$.expression.extension',
        [dynamicValue.expression.description] NVARCHAR(4000)      '$.expression.description',
        [dynamicValue.expression.name] VARCHAR(64)         '$.expression.name',
        [dynamicValue.expression.language] NVARCHAR(100)       '$.expression.language',
        [dynamicValue.expression.expression] NVARCHAR(4000)      '$.expression.expression',
        [dynamicValue.expression.reference] VARCHAR(256)        '$.expression.reference'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[AdministrableProductDefinition] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [status] NVARCHAR(100),
    [formOf] VARCHAR(MAX),
    [administrableDoseForm.id] NVARCHAR(100),
    [administrableDoseForm.extension] NVARCHAR(MAX),
    [administrableDoseForm.coding] VARCHAR(MAX),
    [administrableDoseForm.text] NVARCHAR(4000),
    [unitOfPresentation.id] NVARCHAR(100),
    [unitOfPresentation.extension] NVARCHAR(MAX),
    [unitOfPresentation.coding] VARCHAR(MAX),
    [unitOfPresentation.text] NVARCHAR(4000),
    [producedFrom] VARCHAR(MAX),
    [ingredient] VARCHAR(MAX),
    [device.id] NVARCHAR(100),
    [device.extension] NVARCHAR(MAX),
    [device.reference] NVARCHAR(4000),
    [device.type] VARCHAR(256),
    [device.identifier.id] NVARCHAR(100),
    [device.identifier.extension] NVARCHAR(MAX),
    [device.identifier.use] NVARCHAR(64),
    [device.identifier.type] NVARCHAR(MAX),
    [device.identifier.system] VARCHAR(256),
    [device.identifier.value] NVARCHAR(4000),
    [device.identifier.period] NVARCHAR(MAX),
    [device.identifier.assigner] NVARCHAR(MAX),
    [device.display] NVARCHAR(4000),
    [property] VARCHAR(MAX),
    [routeOfAdministration] VARCHAR(MAX),
) WITH (
    LOCATION='/AdministrableProductDefinition/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.AdministrableProductDefinitionIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'AdministrableProductDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.AdministrableProductDefinitionFormOf AS
SELECT
    [id],
    [formOf.JSON],
    [formOf.id],
    [formOf.extension],
    [formOf.reference],
    [formOf.type],
    [formOf.identifier.id],
    [formOf.identifier.extension],
    [formOf.identifier.use],
    [formOf.identifier.type],
    [formOf.identifier.system],
    [formOf.identifier.value],
    [formOf.identifier.period],
    [formOf.identifier.assigner],
    [formOf.display]
FROM openrowset (
        BULK 'AdministrableProductDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [formOf.JSON]  VARCHAR(MAX) '$.formOf'
    ) AS rowset
    CROSS APPLY openjson (rowset.[formOf.JSON]) with (
        [formOf.id]                    NVARCHAR(100)       '$.id',
        [formOf.extension]             NVARCHAR(MAX)       '$.extension',
        [formOf.reference]             NVARCHAR(4000)      '$.reference',
        [formOf.type]                  VARCHAR(256)        '$.type',
        [formOf.identifier.id]         NVARCHAR(100)       '$.identifier.id',
        [formOf.identifier.extension]  NVARCHAR(MAX)       '$.identifier.extension',
        [formOf.identifier.use]        NVARCHAR(64)        '$.identifier.use',
        [formOf.identifier.type]       NVARCHAR(MAX)       '$.identifier.type',
        [formOf.identifier.system]     VARCHAR(256)        '$.identifier.system',
        [formOf.identifier.value]      NVARCHAR(4000)      '$.identifier.value',
        [formOf.identifier.period]     NVARCHAR(MAX)       '$.identifier.period',
        [formOf.identifier.assigner]   NVARCHAR(MAX)       '$.identifier.assigner',
        [formOf.display]               NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.AdministrableProductDefinitionProducedFrom AS
SELECT
    [id],
    [producedFrom.JSON],
    [producedFrom.id],
    [producedFrom.extension],
    [producedFrom.reference],
    [producedFrom.type],
    [producedFrom.identifier.id],
    [producedFrom.identifier.extension],
    [producedFrom.identifier.use],
    [producedFrom.identifier.type],
    [producedFrom.identifier.system],
    [producedFrom.identifier.value],
    [producedFrom.identifier.period],
    [producedFrom.identifier.assigner],
    [producedFrom.display]
FROM openrowset (
        BULK 'AdministrableProductDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [producedFrom.JSON]  VARCHAR(MAX) '$.producedFrom'
    ) AS rowset
    CROSS APPLY openjson (rowset.[producedFrom.JSON]) with (
        [producedFrom.id]              NVARCHAR(100)       '$.id',
        [producedFrom.extension]       NVARCHAR(MAX)       '$.extension',
        [producedFrom.reference]       NVARCHAR(4000)      '$.reference',
        [producedFrom.type]            VARCHAR(256)        '$.type',
        [producedFrom.identifier.id]   NVARCHAR(100)       '$.identifier.id',
        [producedFrom.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [producedFrom.identifier.use]  NVARCHAR(64)        '$.identifier.use',
        [producedFrom.identifier.type] NVARCHAR(MAX)       '$.identifier.type',
        [producedFrom.identifier.system] VARCHAR(256)        '$.identifier.system',
        [producedFrom.identifier.value] NVARCHAR(4000)      '$.identifier.value',
        [producedFrom.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [producedFrom.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [producedFrom.display]         NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.AdministrableProductDefinitionIngredient AS
SELECT
    [id],
    [ingredient.JSON],
    [ingredient.id],
    [ingredient.extension],
    [ingredient.coding],
    [ingredient.text]
FROM openrowset (
        BULK 'AdministrableProductDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [ingredient.JSON]  VARCHAR(MAX) '$.ingredient'
    ) AS rowset
    CROSS APPLY openjson (rowset.[ingredient.JSON]) with (
        [ingredient.id]                NVARCHAR(100)       '$.id',
        [ingredient.extension]         NVARCHAR(MAX)       '$.extension',
        [ingredient.coding]            NVARCHAR(MAX)       '$.coding' AS JSON,
        [ingredient.text]              NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.AdministrableProductDefinitionProperty AS
SELECT
    [id],
    [property.JSON],
    [property.id],
    [property.extension],
    [property.modifierExtension],
    [property.type.id],
    [property.type.extension],
    [property.type.coding],
    [property.type.text],
    [property.status.id],
    [property.status.extension],
    [property.status.coding],
    [property.status.text],
    [property.value.codeableConcept.id],
    [property.value.codeableConcept.extension],
    [property.value.codeableConcept.coding],
    [property.value.codeableConcept.text],
    [property.value.quantity.id],
    [property.value.quantity.extension],
    [property.value.quantity.value],
    [property.value.quantity.comparator],
    [property.value.quantity.unit],
    [property.value.quantity.system],
    [property.value.quantity.code],
    [property.value.date],
    [property.value.boolean],
    [property.value.attachment.id],
    [property.value.attachment.extension],
    [property.value.attachment.contentType],
    [property.value.attachment.language],
    [property.value.attachment.data],
    [property.value.attachment.url],
    [property.value.attachment.size],
    [property.value.attachment.hash],
    [property.value.attachment.title],
    [property.value.attachment.creation],
    [property.value.attachment.height],
    [property.value.attachment.width],
    [property.value.attachment.frames],
    [property.value.attachment.duration],
    [property.value.attachment.pages]
FROM openrowset (
        BULK 'AdministrableProductDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [property.JSON]  VARCHAR(MAX) '$.property'
    ) AS rowset
    CROSS APPLY openjson (rowset.[property.JSON]) with (
        [property.id]                  NVARCHAR(100)       '$.id',
        [property.extension]           NVARCHAR(MAX)       '$.extension',
        [property.modifierExtension]   NVARCHAR(MAX)       '$.modifierExtension',
        [property.type.id]             NVARCHAR(100)       '$.type.id',
        [property.type.extension]      NVARCHAR(MAX)       '$.type.extension',
        [property.type.coding]         NVARCHAR(MAX)       '$.type.coding',
        [property.type.text]           NVARCHAR(4000)      '$.type.text',
        [property.status.id]           NVARCHAR(100)       '$.status.id',
        [property.status.extension]    NVARCHAR(MAX)       '$.status.extension',
        [property.status.coding]       NVARCHAR(MAX)       '$.status.coding',
        [property.status.text]         NVARCHAR(4000)      '$.status.text',
        [property.value.codeableConcept.id] NVARCHAR(100)       '$.value.codeableConcept.id',
        [property.value.codeableConcept.extension] NVARCHAR(MAX)       '$.value.codeableConcept.extension',
        [property.value.codeableConcept.coding] NVARCHAR(MAX)       '$.value.codeableConcept.coding',
        [property.value.codeableConcept.text] NVARCHAR(4000)      '$.value.codeableConcept.text',
        [property.value.quantity.id]   NVARCHAR(100)       '$.value.quantity.id',
        [property.value.quantity.extension] NVARCHAR(MAX)       '$.value.quantity.extension',
        [property.value.quantity.value] float               '$.value.quantity.value',
        [property.value.quantity.comparator] NVARCHAR(64)        '$.value.quantity.comparator',
        [property.value.quantity.unit] NVARCHAR(100)       '$.value.quantity.unit',
        [property.value.quantity.system] VARCHAR(256)        '$.value.quantity.system',
        [property.value.quantity.code] NVARCHAR(4000)      '$.value.quantity.code',
        [property.value.date]          VARCHAR(64)         '$.value.date',
        [property.value.boolean]       bit                 '$.value.boolean',
        [property.value.attachment.id] NVARCHAR(100)       '$.value.attachment.id',
        [property.value.attachment.extension] NVARCHAR(MAX)       '$.value.attachment.extension',
        [property.value.attachment.contentType] NVARCHAR(100)       '$.value.attachment.contentType',
        [property.value.attachment.language] NVARCHAR(100)       '$.value.attachment.language',
        [property.value.attachment.data] NVARCHAR(MAX)       '$.value.attachment.data',
        [property.value.attachment.url] VARCHAR(256)        '$.value.attachment.url',
        [property.value.attachment.size] NVARCHAR(MAX)       '$.value.attachment.size',
        [property.value.attachment.hash] NVARCHAR(MAX)       '$.value.attachment.hash',
        [property.value.attachment.title] NVARCHAR(4000)      '$.value.attachment.title',
        [property.value.attachment.creation] VARCHAR(64)         '$.value.attachment.creation',
        [property.value.attachment.height] bigint              '$.value.attachment.height',
        [property.value.attachment.width] bigint              '$.value.attachment.width',
        [property.value.attachment.frames] bigint              '$.value.attachment.frames',
        [property.value.attachment.duration] float               '$.value.attachment.duration',
        [property.value.attachment.pages] bigint              '$.value.attachment.pages'
    ) j

GO

CREATE VIEW fhir.AdministrableProductDefinitionRouteOfAdministration AS
SELECT
    [id],
    [routeOfAdministration.JSON],
    [routeOfAdministration.id],
    [routeOfAdministration.extension],
    [routeOfAdministration.modifierExtension],
    [routeOfAdministration.code.id],
    [routeOfAdministration.code.extension],
    [routeOfAdministration.code.coding],
    [routeOfAdministration.code.text],
    [routeOfAdministration.firstDose.id],
    [routeOfAdministration.firstDose.extension],
    [routeOfAdministration.firstDose.value],
    [routeOfAdministration.firstDose.comparator],
    [routeOfAdministration.firstDose.unit],
    [routeOfAdministration.firstDose.system],
    [routeOfAdministration.firstDose.code],
    [routeOfAdministration.maxSingleDose.id],
    [routeOfAdministration.maxSingleDose.extension],
    [routeOfAdministration.maxSingleDose.value],
    [routeOfAdministration.maxSingleDose.comparator],
    [routeOfAdministration.maxSingleDose.unit],
    [routeOfAdministration.maxSingleDose.system],
    [routeOfAdministration.maxSingleDose.code],
    [routeOfAdministration.maxDosePerDay.id],
    [routeOfAdministration.maxDosePerDay.extension],
    [routeOfAdministration.maxDosePerDay.value],
    [routeOfAdministration.maxDosePerDay.comparator],
    [routeOfAdministration.maxDosePerDay.unit],
    [routeOfAdministration.maxDosePerDay.system],
    [routeOfAdministration.maxDosePerDay.code],
    [routeOfAdministration.maxDosePerTreatmentPeriod.id],
    [routeOfAdministration.maxDosePerTreatmentPeriod.extension],
    [routeOfAdministration.maxDosePerTreatmentPeriod.numerator],
    [routeOfAdministration.maxDosePerTreatmentPeriod.denominator],
    [routeOfAdministration.maxTreatmentPeriod.id],
    [routeOfAdministration.maxTreatmentPeriod.extension],
    [routeOfAdministration.maxTreatmentPeriod.value],
    [routeOfAdministration.maxTreatmentPeriod.comparator],
    [routeOfAdministration.maxTreatmentPeriod.unit],
    [routeOfAdministration.maxTreatmentPeriod.system],
    [routeOfAdministration.maxTreatmentPeriod.code],
    [routeOfAdministration.targetSpecies]
FROM openrowset (
        BULK 'AdministrableProductDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [routeOfAdministration.JSON]  VARCHAR(MAX) '$.routeOfAdministration'
    ) AS rowset
    CROSS APPLY openjson (rowset.[routeOfAdministration.JSON]) with (
        [routeOfAdministration.id]     NVARCHAR(100)       '$.id',
        [routeOfAdministration.extension] NVARCHAR(MAX)       '$.extension',
        [routeOfAdministration.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [routeOfAdministration.code.id] NVARCHAR(100)       '$.code.id',
        [routeOfAdministration.code.extension] NVARCHAR(MAX)       '$.code.extension',
        [routeOfAdministration.code.coding] NVARCHAR(MAX)       '$.code.coding',
        [routeOfAdministration.code.text] NVARCHAR(4000)      '$.code.text',
        [routeOfAdministration.firstDose.id] NVARCHAR(100)       '$.firstDose.id',
        [routeOfAdministration.firstDose.extension] NVARCHAR(MAX)       '$.firstDose.extension',
        [routeOfAdministration.firstDose.value] float               '$.firstDose.value',
        [routeOfAdministration.firstDose.comparator] NVARCHAR(64)        '$.firstDose.comparator',
        [routeOfAdministration.firstDose.unit] NVARCHAR(100)       '$.firstDose.unit',
        [routeOfAdministration.firstDose.system] VARCHAR(256)        '$.firstDose.system',
        [routeOfAdministration.firstDose.code] NVARCHAR(4000)      '$.firstDose.code',
        [routeOfAdministration.maxSingleDose.id] NVARCHAR(100)       '$.maxSingleDose.id',
        [routeOfAdministration.maxSingleDose.extension] NVARCHAR(MAX)       '$.maxSingleDose.extension',
        [routeOfAdministration.maxSingleDose.value] float               '$.maxSingleDose.value',
        [routeOfAdministration.maxSingleDose.comparator] NVARCHAR(64)        '$.maxSingleDose.comparator',
        [routeOfAdministration.maxSingleDose.unit] NVARCHAR(100)       '$.maxSingleDose.unit',
        [routeOfAdministration.maxSingleDose.system] VARCHAR(256)        '$.maxSingleDose.system',
        [routeOfAdministration.maxSingleDose.code] NVARCHAR(4000)      '$.maxSingleDose.code',
        [routeOfAdministration.maxDosePerDay.id] NVARCHAR(100)       '$.maxDosePerDay.id',
        [routeOfAdministration.maxDosePerDay.extension] NVARCHAR(MAX)       '$.maxDosePerDay.extension',
        [routeOfAdministration.maxDosePerDay.value] float               '$.maxDosePerDay.value',
        [routeOfAdministration.maxDosePerDay.comparator] NVARCHAR(64)        '$.maxDosePerDay.comparator',
        [routeOfAdministration.maxDosePerDay.unit] NVARCHAR(100)       '$.maxDosePerDay.unit',
        [routeOfAdministration.maxDosePerDay.system] VARCHAR(256)        '$.maxDosePerDay.system',
        [routeOfAdministration.maxDosePerDay.code] NVARCHAR(4000)      '$.maxDosePerDay.code',
        [routeOfAdministration.maxDosePerTreatmentPeriod.id] NVARCHAR(100)       '$.maxDosePerTreatmentPeriod.id',
        [routeOfAdministration.maxDosePerTreatmentPeriod.extension] NVARCHAR(MAX)       '$.maxDosePerTreatmentPeriod.extension',
        [routeOfAdministration.maxDosePerTreatmentPeriod.numerator] NVARCHAR(MAX)       '$.maxDosePerTreatmentPeriod.numerator',
        [routeOfAdministration.maxDosePerTreatmentPeriod.denominator] NVARCHAR(MAX)       '$.maxDosePerTreatmentPeriod.denominator',
        [routeOfAdministration.maxTreatmentPeriod.id] NVARCHAR(100)       '$.maxTreatmentPeriod.id',
        [routeOfAdministration.maxTreatmentPeriod.extension] NVARCHAR(MAX)       '$.maxTreatmentPeriod.extension',
        [routeOfAdministration.maxTreatmentPeriod.value] float               '$.maxTreatmentPeriod.value',
        [routeOfAdministration.maxTreatmentPeriod.comparator] NVARCHAR(64)        '$.maxTreatmentPeriod.comparator',
        [routeOfAdministration.maxTreatmentPeriod.unit] NVARCHAR(100)       '$.maxTreatmentPeriod.unit',
        [routeOfAdministration.maxTreatmentPeriod.system] VARCHAR(256)        '$.maxTreatmentPeriod.system',
        [routeOfAdministration.maxTreatmentPeriod.code] NVARCHAR(4000)      '$.maxTreatmentPeriod.code',
        [routeOfAdministration.targetSpecies] NVARCHAR(MAX)       '$.targetSpecies' AS JSON
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[AdverseEvent] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [status] NVARCHAR(100),
    [actuality] NVARCHAR(4000),
    [category] VARCHAR(MAX),
    [code.id] NVARCHAR(100),
    [code.extension] NVARCHAR(MAX),
    [code.coding] VARCHAR(MAX),
    [code.text] NVARCHAR(4000),
    [subject.id] NVARCHAR(100),
    [subject.extension] NVARCHAR(MAX),
    [subject.reference] NVARCHAR(4000),
    [subject.type] VARCHAR(256),
    [subject.identifier.id] NVARCHAR(100),
    [subject.identifier.extension] NVARCHAR(MAX),
    [subject.identifier.use] NVARCHAR(64),
    [subject.identifier.type] NVARCHAR(MAX),
    [subject.identifier.system] VARCHAR(256),
    [subject.identifier.value] NVARCHAR(4000),
    [subject.identifier.period] NVARCHAR(MAX),
    [subject.identifier.assigner] NVARCHAR(MAX),
    [subject.display] NVARCHAR(4000),
    [encounter.id] NVARCHAR(100),
    [encounter.extension] NVARCHAR(MAX),
    [encounter.reference] NVARCHAR(4000),
    [encounter.type] VARCHAR(256),
    [encounter.identifier.id] NVARCHAR(100),
    [encounter.identifier.extension] NVARCHAR(MAX),
    [encounter.identifier.use] NVARCHAR(64),
    [encounter.identifier.type] NVARCHAR(MAX),
    [encounter.identifier.system] VARCHAR(256),
    [encounter.identifier.value] NVARCHAR(4000),
    [encounter.identifier.period] NVARCHAR(MAX),
    [encounter.identifier.assigner] NVARCHAR(MAX),
    [encounter.display] NVARCHAR(4000),
    [detected] VARCHAR(64),
    [recordedDate] VARCHAR(64),
    [resultingCondition] VARCHAR(MAX),
    [location.id] NVARCHAR(100),
    [location.extension] NVARCHAR(MAX),
    [location.reference] NVARCHAR(4000),
    [location.type] VARCHAR(256),
    [location.identifier.id] NVARCHAR(100),
    [location.identifier.extension] NVARCHAR(MAX),
    [location.identifier.use] NVARCHAR(64),
    [location.identifier.type] NVARCHAR(MAX),
    [location.identifier.system] VARCHAR(256),
    [location.identifier.value] NVARCHAR(4000),
    [location.identifier.period] NVARCHAR(MAX),
    [location.identifier.assigner] NVARCHAR(MAX),
    [location.display] NVARCHAR(4000),
    [seriousness.id] NVARCHAR(100),
    [seriousness.extension] NVARCHAR(MAX),
    [seriousness.coding] VARCHAR(MAX),
    [seriousness.text] NVARCHAR(4000),
    [outcome] VARCHAR(MAX),
    [recorder.id] NVARCHAR(100),
    [recorder.extension] NVARCHAR(MAX),
    [recorder.reference] NVARCHAR(4000),
    [recorder.type] VARCHAR(256),
    [recorder.identifier.id] NVARCHAR(100),
    [recorder.identifier.extension] NVARCHAR(MAX),
    [recorder.identifier.use] NVARCHAR(64),
    [recorder.identifier.type] NVARCHAR(MAX),
    [recorder.identifier.system] VARCHAR(256),
    [recorder.identifier.value] NVARCHAR(4000),
    [recorder.identifier.period] NVARCHAR(MAX),
    [recorder.identifier.assigner] NVARCHAR(MAX),
    [recorder.display] NVARCHAR(4000),
    [participant] VARCHAR(MAX),
    [suspectEntity] VARCHAR(MAX),
    [contributingFactor] VARCHAR(MAX),
    [preventiveAction] VARCHAR(MAX),
    [mitigatingAction] VARCHAR(MAX),
    [supportingInfo] VARCHAR(MAX),
    [study] VARCHAR(MAX),
    [occurrence.dateTime] VARCHAR(64),
    [occurrence.period.id] NVARCHAR(100),
    [occurrence.period.extension] NVARCHAR(MAX),
    [occurrence.period.start] VARCHAR(64),
    [occurrence.period.end] VARCHAR(64),
    [occurrence.timing.id] NVARCHAR(100),
    [occurrence.timing.extension] NVARCHAR(MAX),
    [occurrence.timing.modifierExtension] NVARCHAR(MAX),
    [occurrence.timing.event] VARCHAR(MAX),
    [occurrence.timing.repeat.id] NVARCHAR(100),
    [occurrence.timing.repeat.extension] NVARCHAR(MAX),
    [occurrence.timing.repeat.modifierExtension] NVARCHAR(MAX),
    [occurrence.timing.repeat.count] bigint,
    [occurrence.timing.repeat.countMax] bigint,
    [occurrence.timing.repeat.duration] float,
    [occurrence.timing.repeat.durationMax] float,
    [occurrence.timing.repeat.durationUnit] NVARCHAR(64),
    [occurrence.timing.repeat.frequency] bigint,
    [occurrence.timing.repeat.frequencyMax] bigint,
    [occurrence.timing.repeat.period] float,
    [occurrence.timing.repeat.periodMax] float,
    [occurrence.timing.repeat.periodUnit] NVARCHAR(64),
    [occurrence.timing.repeat.dayOfWeek] NVARCHAR(MAX),
    [occurrence.timing.repeat.timeOfDay] NVARCHAR(MAX),
    [occurrence.timing.repeat.when] NVARCHAR(MAX),
    [occurrence.timing.repeat.offset] bigint,
    [occurrence.timing.repeat.bounds.duration] NVARCHAR(MAX),
    [occurrence.timing.repeat.bounds.range] NVARCHAR(MAX),
    [occurrence.timing.repeat.bounds.period] NVARCHAR(MAX),
    [occurrence.timing.code.id] NVARCHAR(100),
    [occurrence.timing.code.extension] NVARCHAR(MAX),
    [occurrence.timing.code.coding] NVARCHAR(MAX),
    [occurrence.timing.code.text] NVARCHAR(4000),
) WITH (
    LOCATION='/AdverseEvent/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.AdverseEventIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'AdverseEvent/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.AdverseEventCategory AS
SELECT
    [id],
    [category.JSON],
    [category.id],
    [category.extension],
    [category.coding],
    [category.text]
FROM openrowset (
        BULK 'AdverseEvent/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [category.JSON]  VARCHAR(MAX) '$.category'
    ) AS rowset
    CROSS APPLY openjson (rowset.[category.JSON]) with (
        [category.id]                  NVARCHAR(100)       '$.id',
        [category.extension]           NVARCHAR(MAX)       '$.extension',
        [category.coding]              NVARCHAR(MAX)       '$.coding' AS JSON,
        [category.text]                NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.AdverseEventResultingCondition AS
SELECT
    [id],
    [resultingCondition.JSON],
    [resultingCondition.id],
    [resultingCondition.extension],
    [resultingCondition.reference],
    [resultingCondition.type],
    [resultingCondition.identifier.id],
    [resultingCondition.identifier.extension],
    [resultingCondition.identifier.use],
    [resultingCondition.identifier.type],
    [resultingCondition.identifier.system],
    [resultingCondition.identifier.value],
    [resultingCondition.identifier.period],
    [resultingCondition.identifier.assigner],
    [resultingCondition.display]
FROM openrowset (
        BULK 'AdverseEvent/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [resultingCondition.JSON]  VARCHAR(MAX) '$.resultingCondition'
    ) AS rowset
    CROSS APPLY openjson (rowset.[resultingCondition.JSON]) with (
        [resultingCondition.id]        NVARCHAR(100)       '$.id',
        [resultingCondition.extension] NVARCHAR(MAX)       '$.extension',
        [resultingCondition.reference] NVARCHAR(4000)      '$.reference',
        [resultingCondition.type]      VARCHAR(256)        '$.type',
        [resultingCondition.identifier.id] NVARCHAR(100)       '$.identifier.id',
        [resultingCondition.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [resultingCondition.identifier.use] NVARCHAR(64)        '$.identifier.use',
        [resultingCondition.identifier.type] NVARCHAR(MAX)       '$.identifier.type',
        [resultingCondition.identifier.system] VARCHAR(256)        '$.identifier.system',
        [resultingCondition.identifier.value] NVARCHAR(4000)      '$.identifier.value',
        [resultingCondition.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [resultingCondition.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [resultingCondition.display]   NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.AdverseEventOutcome AS
SELECT
    [id],
    [outcome.JSON],
    [outcome.id],
    [outcome.extension],
    [outcome.coding],
    [outcome.text]
FROM openrowset (
        BULK 'AdverseEvent/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [outcome.JSON]  VARCHAR(MAX) '$.outcome'
    ) AS rowset
    CROSS APPLY openjson (rowset.[outcome.JSON]) with (
        [outcome.id]                   NVARCHAR(100)       '$.id',
        [outcome.extension]            NVARCHAR(MAX)       '$.extension',
        [outcome.coding]               NVARCHAR(MAX)       '$.coding' AS JSON,
        [outcome.text]                 NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.AdverseEventParticipant AS
SELECT
    [id],
    [participant.JSON],
    [participant.id],
    [participant.extension],
    [participant.modifierExtension],
    [participant.function.id],
    [participant.function.extension],
    [participant.function.coding],
    [participant.function.text],
    [participant.actor.id],
    [participant.actor.extension],
    [participant.actor.reference],
    [participant.actor.type],
    [participant.actor.identifier],
    [participant.actor.display]
FROM openrowset (
        BULK 'AdverseEvent/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [participant.JSON]  VARCHAR(MAX) '$.participant'
    ) AS rowset
    CROSS APPLY openjson (rowset.[participant.JSON]) with (
        [participant.id]               NVARCHAR(100)       '$.id',
        [participant.extension]        NVARCHAR(MAX)       '$.extension',
        [participant.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [participant.function.id]      NVARCHAR(100)       '$.function.id',
        [participant.function.extension] NVARCHAR(MAX)       '$.function.extension',
        [participant.function.coding]  NVARCHAR(MAX)       '$.function.coding',
        [participant.function.text]    NVARCHAR(4000)      '$.function.text',
        [participant.actor.id]         NVARCHAR(100)       '$.actor.id',
        [participant.actor.extension]  NVARCHAR(MAX)       '$.actor.extension',
        [participant.actor.reference]  NVARCHAR(4000)      '$.actor.reference',
        [participant.actor.type]       VARCHAR(256)        '$.actor.type',
        [participant.actor.identifier] NVARCHAR(MAX)       '$.actor.identifier',
        [participant.actor.display]    NVARCHAR(4000)      '$.actor.display'
    ) j

GO

CREATE VIEW fhir.AdverseEventSuspectEntity AS
SELECT
    [id],
    [suspectEntity.JSON],
    [suspectEntity.id],
    [suspectEntity.extension],
    [suspectEntity.modifierExtension],
    [suspectEntity.causality.id],
    [suspectEntity.causality.extension],
    [suspectEntity.causality.modifierExtension],
    [suspectEntity.causality.assessmentMethod],
    [suspectEntity.causality.entityRelatedness],
    [suspectEntity.causality.author],
    [suspectEntity.instance.codeableConcept.id],
    [suspectEntity.instance.codeableConcept.extension],
    [suspectEntity.instance.codeableConcept.coding],
    [suspectEntity.instance.codeableConcept.text],
    [suspectEntity.instance.reference.id],
    [suspectEntity.instance.reference.extension],
    [suspectEntity.instance.reference.reference],
    [suspectEntity.instance.reference.type],
    [suspectEntity.instance.reference.identifier],
    [suspectEntity.instance.reference.display]
FROM openrowset (
        BULK 'AdverseEvent/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [suspectEntity.JSON]  VARCHAR(MAX) '$.suspectEntity'
    ) AS rowset
    CROSS APPLY openjson (rowset.[suspectEntity.JSON]) with (
        [suspectEntity.id]             NVARCHAR(100)       '$.id',
        [suspectEntity.extension]      NVARCHAR(MAX)       '$.extension',
        [suspectEntity.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [suspectEntity.causality.id]   NVARCHAR(100)       '$.causality.id',
        [suspectEntity.causality.extension] NVARCHAR(MAX)       '$.causality.extension',
        [suspectEntity.causality.modifierExtension] NVARCHAR(MAX)       '$.causality.modifierExtension',
        [suspectEntity.causality.assessmentMethod] NVARCHAR(MAX)       '$.causality.assessmentMethod',
        [suspectEntity.causality.entityRelatedness] NVARCHAR(MAX)       '$.causality.entityRelatedness',
        [suspectEntity.causality.author] NVARCHAR(MAX)       '$.causality.author',
        [suspectEntity.instance.codeableConcept.id] NVARCHAR(100)       '$.instance.codeableConcept.id',
        [suspectEntity.instance.codeableConcept.extension] NVARCHAR(MAX)       '$.instance.codeableConcept.extension',
        [suspectEntity.instance.codeableConcept.coding] NVARCHAR(MAX)       '$.instance.codeableConcept.coding',
        [suspectEntity.instance.codeableConcept.text] NVARCHAR(4000)      '$.instance.codeableConcept.text',
        [suspectEntity.instance.reference.id] NVARCHAR(100)       '$.instance.reference.id',
        [suspectEntity.instance.reference.extension] NVARCHAR(MAX)       '$.instance.reference.extension',
        [suspectEntity.instance.reference.reference] NVARCHAR(4000)      '$.instance.reference.reference',
        [suspectEntity.instance.reference.type] VARCHAR(256)        '$.instance.reference.type',
        [suspectEntity.instance.reference.identifier] NVARCHAR(MAX)       '$.instance.reference.identifier',
        [suspectEntity.instance.reference.display] NVARCHAR(4000)      '$.instance.reference.display'
    ) j

GO

CREATE VIEW fhir.AdverseEventContributingFactor AS
SELECT
    [id],
    [contributingFactor.JSON],
    [contributingFactor.id],
    [contributingFactor.extension],
    [contributingFactor.modifierExtension],
    [contributingFactor.item.reference.id],
    [contributingFactor.item.reference.extension],
    [contributingFactor.item.reference.reference],
    [contributingFactor.item.reference.type],
    [contributingFactor.item.reference.identifier],
    [contributingFactor.item.reference.display],
    [contributingFactor.item.codeableConcept.id],
    [contributingFactor.item.codeableConcept.extension],
    [contributingFactor.item.codeableConcept.coding],
    [contributingFactor.item.codeableConcept.text]
FROM openrowset (
        BULK 'AdverseEvent/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [contributingFactor.JSON]  VARCHAR(MAX) '$.contributingFactor'
    ) AS rowset
    CROSS APPLY openjson (rowset.[contributingFactor.JSON]) with (
        [contributingFactor.id]        NVARCHAR(100)       '$.id',
        [contributingFactor.extension] NVARCHAR(MAX)       '$.extension',
        [contributingFactor.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [contributingFactor.item.reference.id] NVARCHAR(100)       '$.item.reference.id',
        [contributingFactor.item.reference.extension] NVARCHAR(MAX)       '$.item.reference.extension',
        [contributingFactor.item.reference.reference] NVARCHAR(4000)      '$.item.reference.reference',
        [contributingFactor.item.reference.type] VARCHAR(256)        '$.item.reference.type',
        [contributingFactor.item.reference.identifier] NVARCHAR(MAX)       '$.item.reference.identifier',
        [contributingFactor.item.reference.display] NVARCHAR(4000)      '$.item.reference.display',
        [contributingFactor.item.codeableConcept.id] NVARCHAR(100)       '$.item.codeableConcept.id',
        [contributingFactor.item.codeableConcept.extension] NVARCHAR(MAX)       '$.item.codeableConcept.extension',
        [contributingFactor.item.codeableConcept.coding] NVARCHAR(MAX)       '$.item.codeableConcept.coding',
        [contributingFactor.item.codeableConcept.text] NVARCHAR(4000)      '$.item.codeableConcept.text'
    ) j

GO

CREATE VIEW fhir.AdverseEventPreventiveAction AS
SELECT
    [id],
    [preventiveAction.JSON],
    [preventiveAction.id],
    [preventiveAction.extension],
    [preventiveAction.modifierExtension],
    [preventiveAction.item.reference.id],
    [preventiveAction.item.reference.extension],
    [preventiveAction.item.reference.reference],
    [preventiveAction.item.reference.type],
    [preventiveAction.item.reference.identifier],
    [preventiveAction.item.reference.display],
    [preventiveAction.item.codeableConcept.id],
    [preventiveAction.item.codeableConcept.extension],
    [preventiveAction.item.codeableConcept.coding],
    [preventiveAction.item.codeableConcept.text]
FROM openrowset (
        BULK 'AdverseEvent/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [preventiveAction.JSON]  VARCHAR(MAX) '$.preventiveAction'
    ) AS rowset
    CROSS APPLY openjson (rowset.[preventiveAction.JSON]) with (
        [preventiveAction.id]          NVARCHAR(100)       '$.id',
        [preventiveAction.extension]   NVARCHAR(MAX)       '$.extension',
        [preventiveAction.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [preventiveAction.item.reference.id] NVARCHAR(100)       '$.item.reference.id',
        [preventiveAction.item.reference.extension] NVARCHAR(MAX)       '$.item.reference.extension',
        [preventiveAction.item.reference.reference] NVARCHAR(4000)      '$.item.reference.reference',
        [preventiveAction.item.reference.type] VARCHAR(256)        '$.item.reference.type',
        [preventiveAction.item.reference.identifier] NVARCHAR(MAX)       '$.item.reference.identifier',
        [preventiveAction.item.reference.display] NVARCHAR(4000)      '$.item.reference.display',
        [preventiveAction.item.codeableConcept.id] NVARCHAR(100)       '$.item.codeableConcept.id',
        [preventiveAction.item.codeableConcept.extension] NVARCHAR(MAX)       '$.item.codeableConcept.extension',
        [preventiveAction.item.codeableConcept.coding] NVARCHAR(MAX)       '$.item.codeableConcept.coding',
        [preventiveAction.item.codeableConcept.text] NVARCHAR(4000)      '$.item.codeableConcept.text'
    ) j

GO

CREATE VIEW fhir.AdverseEventMitigatingAction AS
SELECT
    [id],
    [mitigatingAction.JSON],
    [mitigatingAction.id],
    [mitigatingAction.extension],
    [mitigatingAction.modifierExtension],
    [mitigatingAction.item.reference.id],
    [mitigatingAction.item.reference.extension],
    [mitigatingAction.item.reference.reference],
    [mitigatingAction.item.reference.type],
    [mitigatingAction.item.reference.identifier],
    [mitigatingAction.item.reference.display],
    [mitigatingAction.item.codeableConcept.id],
    [mitigatingAction.item.codeableConcept.extension],
    [mitigatingAction.item.codeableConcept.coding],
    [mitigatingAction.item.codeableConcept.text]
FROM openrowset (
        BULK 'AdverseEvent/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [mitigatingAction.JSON]  VARCHAR(MAX) '$.mitigatingAction'
    ) AS rowset
    CROSS APPLY openjson (rowset.[mitigatingAction.JSON]) with (
        [mitigatingAction.id]          NVARCHAR(100)       '$.id',
        [mitigatingAction.extension]   NVARCHAR(MAX)       '$.extension',
        [mitigatingAction.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [mitigatingAction.item.reference.id] NVARCHAR(100)       '$.item.reference.id',
        [mitigatingAction.item.reference.extension] NVARCHAR(MAX)       '$.item.reference.extension',
        [mitigatingAction.item.reference.reference] NVARCHAR(4000)      '$.item.reference.reference',
        [mitigatingAction.item.reference.type] VARCHAR(256)        '$.item.reference.type',
        [mitigatingAction.item.reference.identifier] NVARCHAR(MAX)       '$.item.reference.identifier',
        [mitigatingAction.item.reference.display] NVARCHAR(4000)      '$.item.reference.display',
        [mitigatingAction.item.codeableConcept.id] NVARCHAR(100)       '$.item.codeableConcept.id',
        [mitigatingAction.item.codeableConcept.extension] NVARCHAR(MAX)       '$.item.codeableConcept.extension',
        [mitigatingAction.item.codeableConcept.coding] NVARCHAR(MAX)       '$.item.codeableConcept.coding',
        [mitigatingAction.item.codeableConcept.text] NVARCHAR(4000)      '$.item.codeableConcept.text'
    ) j

GO

CREATE VIEW fhir.AdverseEventSupportingInfo AS
SELECT
    [id],
    [supportingInfo.JSON],
    [supportingInfo.id],
    [supportingInfo.extension],
    [supportingInfo.modifierExtension],
    [supportingInfo.item.reference.id],
    [supportingInfo.item.reference.extension],
    [supportingInfo.item.reference.reference],
    [supportingInfo.item.reference.type],
    [supportingInfo.item.reference.identifier],
    [supportingInfo.item.reference.display],
    [supportingInfo.item.codeableConcept.id],
    [supportingInfo.item.codeableConcept.extension],
    [supportingInfo.item.codeableConcept.coding],
    [supportingInfo.item.codeableConcept.text]
FROM openrowset (
        BULK 'AdverseEvent/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [supportingInfo.JSON]  VARCHAR(MAX) '$.supportingInfo'
    ) AS rowset
    CROSS APPLY openjson (rowset.[supportingInfo.JSON]) with (
        [supportingInfo.id]            NVARCHAR(100)       '$.id',
        [supportingInfo.extension]     NVARCHAR(MAX)       '$.extension',
        [supportingInfo.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [supportingInfo.item.reference.id] NVARCHAR(100)       '$.item.reference.id',
        [supportingInfo.item.reference.extension] NVARCHAR(MAX)       '$.item.reference.extension',
        [supportingInfo.item.reference.reference] NVARCHAR(4000)      '$.item.reference.reference',
        [supportingInfo.item.reference.type] VARCHAR(256)        '$.item.reference.type',
        [supportingInfo.item.reference.identifier] NVARCHAR(MAX)       '$.item.reference.identifier',
        [supportingInfo.item.reference.display] NVARCHAR(4000)      '$.item.reference.display',
        [supportingInfo.item.codeableConcept.id] NVARCHAR(100)       '$.item.codeableConcept.id',
        [supportingInfo.item.codeableConcept.extension] NVARCHAR(MAX)       '$.item.codeableConcept.extension',
        [supportingInfo.item.codeableConcept.coding] NVARCHAR(MAX)       '$.item.codeableConcept.coding',
        [supportingInfo.item.codeableConcept.text] NVARCHAR(4000)      '$.item.codeableConcept.text'
    ) j

GO

CREATE VIEW fhir.AdverseEventStudy AS
SELECT
    [id],
    [study.JSON],
    [study.id],
    [study.extension],
    [study.reference],
    [study.type],
    [study.identifier.id],
    [study.identifier.extension],
    [study.identifier.use],
    [study.identifier.type],
    [study.identifier.system],
    [study.identifier.value],
    [study.identifier.period],
    [study.identifier.assigner],
    [study.display]
FROM openrowset (
        BULK 'AdverseEvent/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [study.JSON]  VARCHAR(MAX) '$.study'
    ) AS rowset
    CROSS APPLY openjson (rowset.[study.JSON]) with (
        [study.id]                     NVARCHAR(100)       '$.id',
        [study.extension]              NVARCHAR(MAX)       '$.extension',
        [study.reference]              NVARCHAR(4000)      '$.reference',
        [study.type]                   VARCHAR(256)        '$.type',
        [study.identifier.id]          NVARCHAR(100)       '$.identifier.id',
        [study.identifier.extension]   NVARCHAR(MAX)       '$.identifier.extension',
        [study.identifier.use]         NVARCHAR(64)        '$.identifier.use',
        [study.identifier.type]        NVARCHAR(MAX)       '$.identifier.type',
        [study.identifier.system]      VARCHAR(256)        '$.identifier.system',
        [study.identifier.value]       NVARCHAR(4000)      '$.identifier.value',
        [study.identifier.period]      NVARCHAR(MAX)       '$.identifier.period',
        [study.identifier.assigner]    NVARCHAR(MAX)       '$.identifier.assigner',
        [study.display]                NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[AllergyIntolerance] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [clinicalStatus.id] NVARCHAR(100),
    [clinicalStatus.extension] NVARCHAR(MAX),
    [clinicalStatus.coding] VARCHAR(MAX),
    [clinicalStatus.text] NVARCHAR(4000),
    [verificationStatus.id] NVARCHAR(100),
    [verificationStatus.extension] NVARCHAR(MAX),
    [verificationStatus.coding] VARCHAR(MAX),
    [verificationStatus.text] NVARCHAR(4000),
    [type] NVARCHAR(100),
    [category] VARCHAR(MAX),
    [criticality] NVARCHAR(4000),
    [code.id] NVARCHAR(100),
    [code.extension] NVARCHAR(MAX),
    [code.coding] VARCHAR(MAX),
    [code.text] NVARCHAR(4000),
    [patient.id] NVARCHAR(100),
    [patient.extension] NVARCHAR(MAX),
    [patient.reference] NVARCHAR(4000),
    [patient.type] VARCHAR(256),
    [patient.identifier.id] NVARCHAR(100),
    [patient.identifier.extension] NVARCHAR(MAX),
    [patient.identifier.use] NVARCHAR(64),
    [patient.identifier.type] NVARCHAR(MAX),
    [patient.identifier.system] VARCHAR(256),
    [patient.identifier.value] NVARCHAR(4000),
    [patient.identifier.period] NVARCHAR(MAX),
    [patient.identifier.assigner] NVARCHAR(MAX),
    [patient.display] NVARCHAR(4000),
    [encounter.id] NVARCHAR(100),
    [encounter.extension] NVARCHAR(MAX),
    [encounter.reference] NVARCHAR(4000),
    [encounter.type] VARCHAR(256),
    [encounter.identifier.id] NVARCHAR(100),
    [encounter.identifier.extension] NVARCHAR(MAX),
    [encounter.identifier.use] NVARCHAR(64),
    [encounter.identifier.type] NVARCHAR(MAX),
    [encounter.identifier.system] VARCHAR(256),
    [encounter.identifier.value] NVARCHAR(4000),
    [encounter.identifier.period] NVARCHAR(MAX),
    [encounter.identifier.assigner] NVARCHAR(MAX),
    [encounter.display] NVARCHAR(4000),
    [recordedDate] VARCHAR(64),
    [recorder.id] NVARCHAR(100),
    [recorder.extension] NVARCHAR(MAX),
    [recorder.reference] NVARCHAR(4000),
    [recorder.type] VARCHAR(256),
    [recorder.identifier.id] NVARCHAR(100),
    [recorder.identifier.extension] NVARCHAR(MAX),
    [recorder.identifier.use] NVARCHAR(64),
    [recorder.identifier.type] NVARCHAR(MAX),
    [recorder.identifier.system] VARCHAR(256),
    [recorder.identifier.value] NVARCHAR(4000),
    [recorder.identifier.period] NVARCHAR(MAX),
    [recorder.identifier.assigner] NVARCHAR(MAX),
    [recorder.display] NVARCHAR(4000),
    [asserter.id] NVARCHAR(100),
    [asserter.extension] NVARCHAR(MAX),
    [asserter.reference] NVARCHAR(4000),
    [asserter.type] VARCHAR(256),
    [asserter.identifier.id] NVARCHAR(100),
    [asserter.identifier.extension] NVARCHAR(MAX),
    [asserter.identifier.use] NVARCHAR(64),
    [asserter.identifier.type] NVARCHAR(MAX),
    [asserter.identifier.system] VARCHAR(256),
    [asserter.identifier.value] NVARCHAR(4000),
    [asserter.identifier.period] NVARCHAR(MAX),
    [asserter.identifier.assigner] NVARCHAR(MAX),
    [asserter.display] NVARCHAR(4000),
    [lastOccurrence] VARCHAR(64),
    [note] VARCHAR(MAX),
    [reaction] VARCHAR(MAX),
    [onset.dateTime] VARCHAR(64),
    [onset.age.id] NVARCHAR(100),
    [onset.age.extension] NVARCHAR(MAX),
    [onset.age.value] float,
    [onset.age.comparator] NVARCHAR(64),
    [onset.age.unit] NVARCHAR(100),
    [onset.age.system] VARCHAR(256),
    [onset.age.code] NVARCHAR(4000),
    [onset.period.id] NVARCHAR(100),
    [onset.period.extension] NVARCHAR(MAX),
    [onset.period.start] VARCHAR(64),
    [onset.period.end] VARCHAR(64),
    [onset.range.id] NVARCHAR(100),
    [onset.range.extension] NVARCHAR(MAX),
    [onset.range.low.id] NVARCHAR(100),
    [onset.range.low.extension] NVARCHAR(MAX),
    [onset.range.low.value] float,
    [onset.range.low.comparator] NVARCHAR(64),
    [onset.range.low.unit] NVARCHAR(100),
    [onset.range.low.system] VARCHAR(256),
    [onset.range.low.code] NVARCHAR(4000),
    [onset.range.high.id] NVARCHAR(100),
    [onset.range.high.extension] NVARCHAR(MAX),
    [onset.range.high.value] float,
    [onset.range.high.comparator] NVARCHAR(64),
    [onset.range.high.unit] NVARCHAR(100),
    [onset.range.high.system] VARCHAR(256),
    [onset.range.high.code] NVARCHAR(4000),
    [onset.string] NVARCHAR(4000),
) WITH (
    LOCATION='/AllergyIntolerance/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.AllergyIntoleranceIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'AllergyIntolerance/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.AllergyIntoleranceCategory AS
SELECT
    [id],
    [category.JSON],
    [category]
FROM openrowset (
        BULK 'AllergyIntolerance/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [category.JSON]  VARCHAR(MAX) '$.category'
    ) AS rowset
    CROSS APPLY openjson (rowset.[category.JSON]) with (
        [category]                     NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.AllergyIntoleranceNote AS
SELECT
    [id],
    [note.JSON],
    [note.id],
    [note.extension],
    [note.time],
    [note.text],
    [note.author.reference.id],
    [note.author.reference.extension],
    [note.author.reference.reference],
    [note.author.reference.type],
    [note.author.reference.identifier],
    [note.author.reference.display],
    [note.author.string]
FROM openrowset (
        BULK 'AllergyIntolerance/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [note.JSON]  VARCHAR(MAX) '$.note'
    ) AS rowset
    CROSS APPLY openjson (rowset.[note.JSON]) with (
        [note.id]                      NVARCHAR(100)       '$.id',
        [note.extension]               NVARCHAR(MAX)       '$.extension',
        [note.time]                    VARCHAR(64)         '$.time',
        [note.text]                    NVARCHAR(MAX)       '$.text',
        [note.author.reference.id]     NVARCHAR(100)       '$.author.reference.id',
        [note.author.reference.extension] NVARCHAR(MAX)       '$.author.reference.extension',
        [note.author.reference.reference] NVARCHAR(4000)      '$.author.reference.reference',
        [note.author.reference.type]   VARCHAR(256)        '$.author.reference.type',
        [note.author.reference.identifier] NVARCHAR(MAX)       '$.author.reference.identifier',
        [note.author.reference.display] NVARCHAR(4000)      '$.author.reference.display',
        [note.author.string]           NVARCHAR(4000)      '$.author.string'
    ) j

GO

CREATE VIEW fhir.AllergyIntoleranceReaction AS
SELECT
    [id],
    [reaction.JSON],
    [reaction.id],
    [reaction.extension],
    [reaction.modifierExtension],
    [reaction.substance.id],
    [reaction.substance.extension],
    [reaction.substance.coding],
    [reaction.substance.text],
    [reaction.manifestation],
    [reaction.description],
    [reaction.onset],
    [reaction.severity],
    [reaction.exposureRoute.id],
    [reaction.exposureRoute.extension],
    [reaction.exposureRoute.coding],
    [reaction.exposureRoute.text],
    [reaction.note]
FROM openrowset (
        BULK 'AllergyIntolerance/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [reaction.JSON]  VARCHAR(MAX) '$.reaction'
    ) AS rowset
    CROSS APPLY openjson (rowset.[reaction.JSON]) with (
        [reaction.id]                  NVARCHAR(100)       '$.id',
        [reaction.extension]           NVARCHAR(MAX)       '$.extension',
        [reaction.modifierExtension]   NVARCHAR(MAX)       '$.modifierExtension',
        [reaction.substance.id]        NVARCHAR(100)       '$.substance.id',
        [reaction.substance.extension] NVARCHAR(MAX)       '$.substance.extension',
        [reaction.substance.coding]    NVARCHAR(MAX)       '$.substance.coding',
        [reaction.substance.text]      NVARCHAR(4000)      '$.substance.text',
        [reaction.manifestation]       NVARCHAR(MAX)       '$.manifestation' AS JSON,
        [reaction.description]         NVARCHAR(4000)      '$.description',
        [reaction.onset]               VARCHAR(64)         '$.onset',
        [reaction.severity]            NVARCHAR(4000)      '$.severity',
        [reaction.exposureRoute.id]    NVARCHAR(100)       '$.exposureRoute.id',
        [reaction.exposureRoute.extension] NVARCHAR(MAX)       '$.exposureRoute.extension',
        [reaction.exposureRoute.coding] NVARCHAR(MAX)       '$.exposureRoute.coding',
        [reaction.exposureRoute.text]  NVARCHAR(4000)      '$.exposureRoute.text',
        [reaction.note]                NVARCHAR(MAX)       '$.note' AS JSON
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[Appointment] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [status] NVARCHAR(100),
    [cancellationReason.id] NVARCHAR(100),
    [cancellationReason.extension] NVARCHAR(MAX),
    [cancellationReason.coding] VARCHAR(MAX),
    [cancellationReason.text] NVARCHAR(4000),
    [serviceCategory] VARCHAR(MAX),
    [serviceType] VARCHAR(MAX),
    [specialty] VARCHAR(MAX),
    [appointmentType.id] NVARCHAR(100),
    [appointmentType.extension] NVARCHAR(MAX),
    [appointmentType.coding] VARCHAR(MAX),
    [appointmentType.text] NVARCHAR(4000),
    [reason] VARCHAR(MAX),
    [priority.id] NVARCHAR(100),
    [priority.extension] NVARCHAR(MAX),
    [priority.coding] VARCHAR(MAX),
    [priority.text] NVARCHAR(4000),
    [description] NVARCHAR(4000),
    [replaces] VARCHAR(MAX),
    [supportingInformation] VARCHAR(MAX),
    [start] VARCHAR(64),
    [end] VARCHAR(64),
    [minutesDuration] bigint,
    [slot] VARCHAR(MAX),
    [account] VARCHAR(MAX),
    [created] VARCHAR(64),
    [note] VARCHAR(MAX),
    [patientInstruction] VARCHAR(MAX),
    [basedOn] VARCHAR(MAX),
    [subject.id] NVARCHAR(100),
    [subject.extension] NVARCHAR(MAX),
    [subject.reference] NVARCHAR(4000),
    [subject.type] VARCHAR(256),
    [subject.identifier.id] NVARCHAR(100),
    [subject.identifier.extension] NVARCHAR(MAX),
    [subject.identifier.use] NVARCHAR(64),
    [subject.identifier.type] NVARCHAR(MAX),
    [subject.identifier.system] VARCHAR(256),
    [subject.identifier.value] NVARCHAR(4000),
    [subject.identifier.period] NVARCHAR(MAX),
    [subject.identifier.assigner] NVARCHAR(MAX),
    [subject.display] NVARCHAR(4000),
    [participant] VARCHAR(MAX),
    [requestedPeriod] VARCHAR(MAX),
) WITH (
    LOCATION='/Appointment/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.AppointmentIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'Appointment/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.AppointmentServiceCategory AS
SELECT
    [id],
    [serviceCategory.JSON],
    [serviceCategory.id],
    [serviceCategory.extension],
    [serviceCategory.coding],
    [serviceCategory.text]
FROM openrowset (
        BULK 'Appointment/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [serviceCategory.JSON]  VARCHAR(MAX) '$.serviceCategory'
    ) AS rowset
    CROSS APPLY openjson (rowset.[serviceCategory.JSON]) with (
        [serviceCategory.id]           NVARCHAR(100)       '$.id',
        [serviceCategory.extension]    NVARCHAR(MAX)       '$.extension',
        [serviceCategory.coding]       NVARCHAR(MAX)       '$.coding' AS JSON,
        [serviceCategory.text]         NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.AppointmentServiceType AS
SELECT
    [id],
    [serviceType.JSON],
    [serviceType.id],
    [serviceType.extension],
    [serviceType.coding],
    [serviceType.text]
FROM openrowset (
        BULK 'Appointment/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [serviceType.JSON]  VARCHAR(MAX) '$.serviceType'
    ) AS rowset
    CROSS APPLY openjson (rowset.[serviceType.JSON]) with (
        [serviceType.id]               NVARCHAR(100)       '$.id',
        [serviceType.extension]        NVARCHAR(MAX)       '$.extension',
        [serviceType.coding]           NVARCHAR(MAX)       '$.coding' AS JSON,
        [serviceType.text]             NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.AppointmentSpecialty AS
SELECT
    [id],
    [specialty.JSON],
    [specialty.id],
    [specialty.extension],
    [specialty.coding],
    [specialty.text]
FROM openrowset (
        BULK 'Appointment/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [specialty.JSON]  VARCHAR(MAX) '$.specialty'
    ) AS rowset
    CROSS APPLY openjson (rowset.[specialty.JSON]) with (
        [specialty.id]                 NVARCHAR(100)       '$.id',
        [specialty.extension]          NVARCHAR(MAX)       '$.extension',
        [specialty.coding]             NVARCHAR(MAX)       '$.coding' AS JSON,
        [specialty.text]               NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.AppointmentReason AS
SELECT
    [id],
    [reason.JSON],
    [reason.id],
    [reason.extension],
    [reason.concept.id],
    [reason.concept.extension],
    [reason.concept.coding],
    [reason.concept.text],
    [reason.reference.id],
    [reason.reference.extension],
    [reason.reference.reference],
    [reason.reference.type],
    [reason.reference.identifier],
    [reason.reference.display]
FROM openrowset (
        BULK 'Appointment/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [reason.JSON]  VARCHAR(MAX) '$.reason'
    ) AS rowset
    CROSS APPLY openjson (rowset.[reason.JSON]) with (
        [reason.id]                    NVARCHAR(100)       '$.id',
        [reason.extension]             NVARCHAR(MAX)       '$.extension',
        [reason.concept.id]            NVARCHAR(100)       '$.concept.id',
        [reason.concept.extension]     NVARCHAR(MAX)       '$.concept.extension',
        [reason.concept.coding]        NVARCHAR(MAX)       '$.concept.coding',
        [reason.concept.text]          NVARCHAR(4000)      '$.concept.text',
        [reason.reference.id]          NVARCHAR(100)       '$.reference.id',
        [reason.reference.extension]   NVARCHAR(MAX)       '$.reference.extension',
        [reason.reference.reference]   NVARCHAR(4000)      '$.reference.reference',
        [reason.reference.type]        VARCHAR(256)        '$.reference.type',
        [reason.reference.identifier]  NVARCHAR(MAX)       '$.reference.identifier',
        [reason.reference.display]     NVARCHAR(4000)      '$.reference.display'
    ) j

GO

CREATE VIEW fhir.AppointmentReplaces AS
SELECT
    [id],
    [replaces.JSON],
    [replaces.id],
    [replaces.extension],
    [replaces.reference],
    [replaces.type],
    [replaces.identifier.id],
    [replaces.identifier.extension],
    [replaces.identifier.use],
    [replaces.identifier.type],
    [replaces.identifier.system],
    [replaces.identifier.value],
    [replaces.identifier.period],
    [replaces.identifier.assigner],
    [replaces.display]
FROM openrowset (
        BULK 'Appointment/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [replaces.JSON]  VARCHAR(MAX) '$.replaces'
    ) AS rowset
    CROSS APPLY openjson (rowset.[replaces.JSON]) with (
        [replaces.id]                  NVARCHAR(100)       '$.id',
        [replaces.extension]           NVARCHAR(MAX)       '$.extension',
        [replaces.reference]           NVARCHAR(4000)      '$.reference',
        [replaces.type]                VARCHAR(256)        '$.type',
        [replaces.identifier.id]       NVARCHAR(100)       '$.identifier.id',
        [replaces.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [replaces.identifier.use]      NVARCHAR(64)        '$.identifier.use',
        [replaces.identifier.type]     NVARCHAR(MAX)       '$.identifier.type',
        [replaces.identifier.system]   VARCHAR(256)        '$.identifier.system',
        [replaces.identifier.value]    NVARCHAR(4000)      '$.identifier.value',
        [replaces.identifier.period]   NVARCHAR(MAX)       '$.identifier.period',
        [replaces.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [replaces.display]             NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.AppointmentSupportingInformation AS
SELECT
    [id],
    [supportingInformation.JSON],
    [supportingInformation.id],
    [supportingInformation.extension],
    [supportingInformation.reference],
    [supportingInformation.type],
    [supportingInformation.identifier.id],
    [supportingInformation.identifier.extension],
    [supportingInformation.identifier.use],
    [supportingInformation.identifier.type],
    [supportingInformation.identifier.system],
    [supportingInformation.identifier.value],
    [supportingInformation.identifier.period],
    [supportingInformation.identifier.assigner],
    [supportingInformation.display]
FROM openrowset (
        BULK 'Appointment/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [supportingInformation.JSON]  VARCHAR(MAX) '$.supportingInformation'
    ) AS rowset
    CROSS APPLY openjson (rowset.[supportingInformation.JSON]) with (
        [supportingInformation.id]     NVARCHAR(100)       '$.id',
        [supportingInformation.extension] NVARCHAR(MAX)       '$.extension',
        [supportingInformation.reference] NVARCHAR(4000)      '$.reference',
        [supportingInformation.type]   VARCHAR(256)        '$.type',
        [supportingInformation.identifier.id] NVARCHAR(100)       '$.identifier.id',
        [supportingInformation.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [supportingInformation.identifier.use] NVARCHAR(64)        '$.identifier.use',
        [supportingInformation.identifier.type] NVARCHAR(MAX)       '$.identifier.type',
        [supportingInformation.identifier.system] VARCHAR(256)        '$.identifier.system',
        [supportingInformation.identifier.value] NVARCHAR(4000)      '$.identifier.value',
        [supportingInformation.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [supportingInformation.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [supportingInformation.display] NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.AppointmentSlot AS
SELECT
    [id],
    [slot.JSON],
    [slot.id],
    [slot.extension],
    [slot.reference],
    [slot.type],
    [slot.identifier.id],
    [slot.identifier.extension],
    [slot.identifier.use],
    [slot.identifier.type],
    [slot.identifier.system],
    [slot.identifier.value],
    [slot.identifier.period],
    [slot.identifier.assigner],
    [slot.display]
FROM openrowset (
        BULK 'Appointment/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [slot.JSON]  VARCHAR(MAX) '$.slot'
    ) AS rowset
    CROSS APPLY openjson (rowset.[slot.JSON]) with (
        [slot.id]                      NVARCHAR(100)       '$.id',
        [slot.extension]               NVARCHAR(MAX)       '$.extension',
        [slot.reference]               NVARCHAR(4000)      '$.reference',
        [slot.type]                    VARCHAR(256)        '$.type',
        [slot.identifier.id]           NVARCHAR(100)       '$.identifier.id',
        [slot.identifier.extension]    NVARCHAR(MAX)       '$.identifier.extension',
        [slot.identifier.use]          NVARCHAR(64)        '$.identifier.use',
        [slot.identifier.type]         NVARCHAR(MAX)       '$.identifier.type',
        [slot.identifier.system]       VARCHAR(256)        '$.identifier.system',
        [slot.identifier.value]        NVARCHAR(4000)      '$.identifier.value',
        [slot.identifier.period]       NVARCHAR(MAX)       '$.identifier.period',
        [slot.identifier.assigner]     NVARCHAR(MAX)       '$.identifier.assigner',
        [slot.display]                 NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.AppointmentAccount AS
SELECT
    [id],
    [account.JSON],
    [account.id],
    [account.extension],
    [account.reference],
    [account.type],
    [account.identifier.id],
    [account.identifier.extension],
    [account.identifier.use],
    [account.identifier.type],
    [account.identifier.system],
    [account.identifier.value],
    [account.identifier.period],
    [account.identifier.assigner],
    [account.display]
FROM openrowset (
        BULK 'Appointment/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [account.JSON]  VARCHAR(MAX) '$.account'
    ) AS rowset
    CROSS APPLY openjson (rowset.[account.JSON]) with (
        [account.id]                   NVARCHAR(100)       '$.id',
        [account.extension]            NVARCHAR(MAX)       '$.extension',
        [account.reference]            NVARCHAR(4000)      '$.reference',
        [account.type]                 VARCHAR(256)        '$.type',
        [account.identifier.id]        NVARCHAR(100)       '$.identifier.id',
        [account.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [account.identifier.use]       NVARCHAR(64)        '$.identifier.use',
        [account.identifier.type]      NVARCHAR(MAX)       '$.identifier.type',
        [account.identifier.system]    VARCHAR(256)        '$.identifier.system',
        [account.identifier.value]     NVARCHAR(4000)      '$.identifier.value',
        [account.identifier.period]    NVARCHAR(MAX)       '$.identifier.period',
        [account.identifier.assigner]  NVARCHAR(MAX)       '$.identifier.assigner',
        [account.display]              NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.AppointmentNote AS
SELECT
    [id],
    [note.JSON],
    [note.id],
    [note.extension],
    [note.time],
    [note.text],
    [note.author.reference.id],
    [note.author.reference.extension],
    [note.author.reference.reference],
    [note.author.reference.type],
    [note.author.reference.identifier],
    [note.author.reference.display],
    [note.author.string]
FROM openrowset (
        BULK 'Appointment/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [note.JSON]  VARCHAR(MAX) '$.note'
    ) AS rowset
    CROSS APPLY openjson (rowset.[note.JSON]) with (
        [note.id]                      NVARCHAR(100)       '$.id',
        [note.extension]               NVARCHAR(MAX)       '$.extension',
        [note.time]                    VARCHAR(64)         '$.time',
        [note.text]                    NVARCHAR(MAX)       '$.text',
        [note.author.reference.id]     NVARCHAR(100)       '$.author.reference.id',
        [note.author.reference.extension] NVARCHAR(MAX)       '$.author.reference.extension',
        [note.author.reference.reference] NVARCHAR(4000)      '$.author.reference.reference',
        [note.author.reference.type]   VARCHAR(256)        '$.author.reference.type',
        [note.author.reference.identifier] NVARCHAR(MAX)       '$.author.reference.identifier',
        [note.author.reference.display] NVARCHAR(4000)      '$.author.reference.display',
        [note.author.string]           NVARCHAR(4000)      '$.author.string'
    ) j

GO

CREATE VIEW fhir.AppointmentPatientInstruction AS
SELECT
    [id],
    [patientInstruction.JSON],
    [patientInstruction.id],
    [patientInstruction.extension],
    [patientInstruction.concept.id],
    [patientInstruction.concept.extension],
    [patientInstruction.concept.coding],
    [patientInstruction.concept.text],
    [patientInstruction.reference.id],
    [patientInstruction.reference.extension],
    [patientInstruction.reference.reference],
    [patientInstruction.reference.type],
    [patientInstruction.reference.identifier],
    [patientInstruction.reference.display]
FROM openrowset (
        BULK 'Appointment/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [patientInstruction.JSON]  VARCHAR(MAX) '$.patientInstruction'
    ) AS rowset
    CROSS APPLY openjson (rowset.[patientInstruction.JSON]) with (
        [patientInstruction.id]        NVARCHAR(100)       '$.id',
        [patientInstruction.extension] NVARCHAR(MAX)       '$.extension',
        [patientInstruction.concept.id] NVARCHAR(100)       '$.concept.id',
        [patientInstruction.concept.extension] NVARCHAR(MAX)       '$.concept.extension',
        [patientInstruction.concept.coding] NVARCHAR(MAX)       '$.concept.coding',
        [patientInstruction.concept.text] NVARCHAR(4000)      '$.concept.text',
        [patientInstruction.reference.id] NVARCHAR(100)       '$.reference.id',
        [patientInstruction.reference.extension] NVARCHAR(MAX)       '$.reference.extension',
        [patientInstruction.reference.reference] NVARCHAR(4000)      '$.reference.reference',
        [patientInstruction.reference.type] VARCHAR(256)        '$.reference.type',
        [patientInstruction.reference.identifier] NVARCHAR(MAX)       '$.reference.identifier',
        [patientInstruction.reference.display] NVARCHAR(4000)      '$.reference.display'
    ) j

GO

CREATE VIEW fhir.AppointmentBasedOn AS
SELECT
    [id],
    [basedOn.JSON],
    [basedOn.id],
    [basedOn.extension],
    [basedOn.reference],
    [basedOn.type],
    [basedOn.identifier.id],
    [basedOn.identifier.extension],
    [basedOn.identifier.use],
    [basedOn.identifier.type],
    [basedOn.identifier.system],
    [basedOn.identifier.value],
    [basedOn.identifier.period],
    [basedOn.identifier.assigner],
    [basedOn.display]
FROM openrowset (
        BULK 'Appointment/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [basedOn.JSON]  VARCHAR(MAX) '$.basedOn'
    ) AS rowset
    CROSS APPLY openjson (rowset.[basedOn.JSON]) with (
        [basedOn.id]                   NVARCHAR(100)       '$.id',
        [basedOn.extension]            NVARCHAR(MAX)       '$.extension',
        [basedOn.reference]            NVARCHAR(4000)      '$.reference',
        [basedOn.type]                 VARCHAR(256)        '$.type',
        [basedOn.identifier.id]        NVARCHAR(100)       '$.identifier.id',
        [basedOn.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [basedOn.identifier.use]       NVARCHAR(64)        '$.identifier.use',
        [basedOn.identifier.type]      NVARCHAR(MAX)       '$.identifier.type',
        [basedOn.identifier.system]    VARCHAR(256)        '$.identifier.system',
        [basedOn.identifier.value]     NVARCHAR(4000)      '$.identifier.value',
        [basedOn.identifier.period]    NVARCHAR(MAX)       '$.identifier.period',
        [basedOn.identifier.assigner]  NVARCHAR(MAX)       '$.identifier.assigner',
        [basedOn.display]              NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.AppointmentParticipant AS
SELECT
    [id],
    [participant.JSON],
    [participant.id],
    [participant.extension],
    [participant.modifierExtension],
    [participant.type],
    [participant.period.id],
    [participant.period.extension],
    [participant.period.start],
    [participant.period.end],
    [participant.actor.id],
    [participant.actor.extension],
    [participant.actor.reference],
    [participant.actor.type],
    [participant.actor.identifier],
    [participant.actor.display],
    [participant.required],
    [participant.status]
FROM openrowset (
        BULK 'Appointment/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [participant.JSON]  VARCHAR(MAX) '$.participant'
    ) AS rowset
    CROSS APPLY openjson (rowset.[participant.JSON]) with (
        [participant.id]               NVARCHAR(100)       '$.id',
        [participant.extension]        NVARCHAR(MAX)       '$.extension',
        [participant.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [participant.type]             NVARCHAR(MAX)       '$.type' AS JSON,
        [participant.period.id]        NVARCHAR(100)       '$.period.id',
        [participant.period.extension] NVARCHAR(MAX)       '$.period.extension',
        [participant.period.start]     VARCHAR(64)         '$.period.start',
        [participant.period.end]       VARCHAR(64)         '$.period.end',
        [participant.actor.id]         NVARCHAR(100)       '$.actor.id',
        [participant.actor.extension]  NVARCHAR(MAX)       '$.actor.extension',
        [participant.actor.reference]  NVARCHAR(4000)      '$.actor.reference',
        [participant.actor.type]       VARCHAR(256)        '$.actor.type',
        [participant.actor.identifier] NVARCHAR(MAX)       '$.actor.identifier',
        [participant.actor.display]    NVARCHAR(4000)      '$.actor.display',
        [participant.required]         bit                 '$.required',
        [participant.status]           NVARCHAR(100)       '$.status'
    ) j

GO

CREATE VIEW fhir.AppointmentRequestedPeriod AS
SELECT
    [id],
    [requestedPeriod.JSON],
    [requestedPeriod.id],
    [requestedPeriod.extension],
    [requestedPeriod.start],
    [requestedPeriod.end]
FROM openrowset (
        BULK 'Appointment/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [requestedPeriod.JSON]  VARCHAR(MAX) '$.requestedPeriod'
    ) AS rowset
    CROSS APPLY openjson (rowset.[requestedPeriod.JSON]) with (
        [requestedPeriod.id]           NVARCHAR(100)       '$.id',
        [requestedPeriod.extension]    NVARCHAR(MAX)       '$.extension',
        [requestedPeriod.start]        VARCHAR(64)         '$.start',
        [requestedPeriod.end]          VARCHAR(64)         '$.end'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[AppointmentResponse] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [appointment.id] NVARCHAR(100),
    [appointment.extension] NVARCHAR(MAX),
    [appointment.reference] NVARCHAR(4000),
    [appointment.type] VARCHAR(256),
    [appointment.identifier.id] NVARCHAR(100),
    [appointment.identifier.extension] NVARCHAR(MAX),
    [appointment.identifier.use] NVARCHAR(64),
    [appointment.identifier.type] NVARCHAR(MAX),
    [appointment.identifier.system] VARCHAR(256),
    [appointment.identifier.value] NVARCHAR(4000),
    [appointment.identifier.period] NVARCHAR(MAX),
    [appointment.identifier.assigner] NVARCHAR(MAX),
    [appointment.display] NVARCHAR(4000),
    [start] VARCHAR(64),
    [end] VARCHAR(64),
    [participantType] VARCHAR(MAX),
    [actor.id] NVARCHAR(100),
    [actor.extension] NVARCHAR(MAX),
    [actor.reference] NVARCHAR(4000),
    [actor.type] VARCHAR(256),
    [actor.identifier.id] NVARCHAR(100),
    [actor.identifier.extension] NVARCHAR(MAX),
    [actor.identifier.use] NVARCHAR(64),
    [actor.identifier.type] NVARCHAR(MAX),
    [actor.identifier.system] VARCHAR(256),
    [actor.identifier.value] NVARCHAR(4000),
    [actor.identifier.period] NVARCHAR(MAX),
    [actor.identifier.assigner] NVARCHAR(MAX),
    [actor.display] NVARCHAR(4000),
    [participantStatus] NVARCHAR(100),
    [comment] NVARCHAR(4000),
) WITH (
    LOCATION='/AppointmentResponse/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.AppointmentResponseIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'AppointmentResponse/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.AppointmentResponseParticipantType AS
SELECT
    [id],
    [participantType.JSON],
    [participantType.id],
    [participantType.extension],
    [participantType.coding],
    [participantType.text]
FROM openrowset (
        BULK 'AppointmentResponse/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [participantType.JSON]  VARCHAR(MAX) '$.participantType'
    ) AS rowset
    CROSS APPLY openjson (rowset.[participantType.JSON]) with (
        [participantType.id]           NVARCHAR(100)       '$.id',
        [participantType.extension]    NVARCHAR(MAX)       '$.extension',
        [participantType.coding]       NVARCHAR(MAX)       '$.coding' AS JSON,
        [participantType.text]         NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[ArtifactAssessment] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [url] VARCHAR(256),
    [identifier] VARCHAR(MAX),
    [version] NVARCHAR(100),
    [name] NVARCHAR(500),
    [title] NVARCHAR(4000),
    [status] NVARCHAR(100),
    [experimental] bit,
    [date] VARCHAR(64),
    [publisher] NVARCHAR(500),
    [contact] VARCHAR(MAX),
    [description] NVARCHAR(MAX),
    [useContext] VARCHAR(MAX),
    [jurisdiction] VARCHAR(MAX),
    [purpose] NVARCHAR(MAX),
    [copyright] NVARCHAR(MAX),
    [approvalDate] VARCHAR(64),
    [lastReviewDate] VARCHAR(64),
    [effectivePeriod.id] NVARCHAR(100),
    [effectivePeriod.extension] NVARCHAR(MAX),
    [effectivePeriod.start] VARCHAR(64),
    [effectivePeriod.end] VARCHAR(64),
    [topic] VARCHAR(MAX),
    [author] VARCHAR(MAX),
    [editor] VARCHAR(MAX),
    [reviewer] VARCHAR(MAX),
    [endorser] VARCHAR(MAX),
    [relatedArtifact] VARCHAR(MAX),
    [content] VARCHAR(MAX),
    [workflowStatus] NVARCHAR(4000),
    [disposition] NVARCHAR(4000),
    [citeAs.reference.id] NVARCHAR(100),
    [citeAs.reference.extension] NVARCHAR(MAX),
    [citeAs.reference.reference] NVARCHAR(4000),
    [citeAs.reference.type] VARCHAR(256),
    [citeAs.reference.identifier.id] NVARCHAR(100),
    [citeAs.reference.identifier.extension] NVARCHAR(MAX),
    [citeAs.reference.identifier.use] NVARCHAR(64),
    [citeAs.reference.identifier.type] NVARCHAR(MAX),
    [citeAs.reference.identifier.system] VARCHAR(256),
    [citeAs.reference.identifier.value] NVARCHAR(4000),
    [citeAs.reference.identifier.period] NVARCHAR(MAX),
    [citeAs.reference.identifier.assigner] NVARCHAR(MAX),
    [citeAs.reference.display] NVARCHAR(4000),
    [citeAs.markdown] NVARCHAR(MAX),
    [artifact.reference.id] NVARCHAR(100),
    [artifact.reference.extension] NVARCHAR(MAX),
    [artifact.reference.reference] NVARCHAR(4000),
    [artifact.reference.type] VARCHAR(256),
    [artifact.reference.identifier.id] NVARCHAR(100),
    [artifact.reference.identifier.extension] NVARCHAR(MAX),
    [artifact.reference.identifier.use] NVARCHAR(64),
    [artifact.reference.identifier.type] NVARCHAR(MAX),
    [artifact.reference.identifier.system] VARCHAR(256),
    [artifact.reference.identifier.value] NVARCHAR(4000),
    [artifact.reference.identifier.period] NVARCHAR(MAX),
    [artifact.reference.identifier.assigner] NVARCHAR(MAX),
    [artifact.reference.display] NVARCHAR(4000),
    [artifact.canonical] VARCHAR(256),
    [artifact.uri] VARCHAR(256),
) WITH (
    LOCATION='/ArtifactAssessment/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.ArtifactAssessmentIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'ArtifactAssessment/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.ArtifactAssessmentContact AS
SELECT
    [id],
    [contact.JSON],
    [contact.id],
    [contact.extension],
    [contact.name],
    [contact.telecom]
FROM openrowset (
        BULK 'ArtifactAssessment/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [contact.JSON]  VARCHAR(MAX) '$.contact'
    ) AS rowset
    CROSS APPLY openjson (rowset.[contact.JSON]) with (
        [contact.id]                   NVARCHAR(100)       '$.id',
        [contact.extension]            NVARCHAR(MAX)       '$.extension',
        [contact.name]                 NVARCHAR(500)       '$.name',
        [contact.telecom]              NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.ArtifactAssessmentUseContext AS
SELECT
    [id],
    [useContext.JSON],
    [useContext.id],
    [useContext.extension],
    [useContext.code.id],
    [useContext.code.extension],
    [useContext.code.system],
    [useContext.code.version],
    [useContext.code.code],
    [useContext.code.display],
    [useContext.code.userSelected],
    [useContext.value.codeableConcept.id],
    [useContext.value.codeableConcept.extension],
    [useContext.value.codeableConcept.coding],
    [useContext.value.codeableConcept.text],
    [useContext.value.quantity.id],
    [useContext.value.quantity.extension],
    [useContext.value.quantity.value],
    [useContext.value.quantity.comparator],
    [useContext.value.quantity.unit],
    [useContext.value.quantity.system],
    [useContext.value.quantity.code],
    [useContext.value.range.id],
    [useContext.value.range.extension],
    [useContext.value.range.low],
    [useContext.value.range.high],
    [useContext.value.reference.id],
    [useContext.value.reference.extension],
    [useContext.value.reference.reference],
    [useContext.value.reference.type],
    [useContext.value.reference.identifier],
    [useContext.value.reference.display]
FROM openrowset (
        BULK 'ArtifactAssessment/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [useContext.JSON]  VARCHAR(MAX) '$.useContext'
    ) AS rowset
    CROSS APPLY openjson (rowset.[useContext.JSON]) with (
        [useContext.id]                NVARCHAR(100)       '$.id',
        [useContext.extension]         NVARCHAR(MAX)       '$.extension',
        [useContext.code.id]           NVARCHAR(100)       '$.code.id',
        [useContext.code.extension]    NVARCHAR(MAX)       '$.code.extension',
        [useContext.code.system]       VARCHAR(256)        '$.code.system',
        [useContext.code.version]      NVARCHAR(100)       '$.code.version',
        [useContext.code.code]         NVARCHAR(4000)      '$.code.code',
        [useContext.code.display]      NVARCHAR(4000)      '$.code.display',
        [useContext.code.userSelected] bit                 '$.code.userSelected',
        [useContext.value.codeableConcept.id] NVARCHAR(100)       '$.value.codeableConcept.id',
        [useContext.value.codeableConcept.extension] NVARCHAR(MAX)       '$.value.codeableConcept.extension',
        [useContext.value.codeableConcept.coding] NVARCHAR(MAX)       '$.value.codeableConcept.coding',
        [useContext.value.codeableConcept.text] NVARCHAR(4000)      '$.value.codeableConcept.text',
        [useContext.value.quantity.id] NVARCHAR(100)       '$.value.quantity.id',
        [useContext.value.quantity.extension] NVARCHAR(MAX)       '$.value.quantity.extension',
        [useContext.value.quantity.value] float               '$.value.quantity.value',
        [useContext.value.quantity.comparator] NVARCHAR(64)        '$.value.quantity.comparator',
        [useContext.value.quantity.unit] NVARCHAR(100)       '$.value.quantity.unit',
        [useContext.value.quantity.system] VARCHAR(256)        '$.value.quantity.system',
        [useContext.value.quantity.code] NVARCHAR(4000)      '$.value.quantity.code',
        [useContext.value.range.id]    NVARCHAR(100)       '$.value.range.id',
        [useContext.value.range.extension] NVARCHAR(MAX)       '$.value.range.extension',
        [useContext.value.range.low]   NVARCHAR(MAX)       '$.value.range.low',
        [useContext.value.range.high]  NVARCHAR(MAX)       '$.value.range.high',
        [useContext.value.reference.id] NVARCHAR(100)       '$.value.reference.id',
        [useContext.value.reference.extension] NVARCHAR(MAX)       '$.value.reference.extension',
        [useContext.value.reference.reference] NVARCHAR(4000)      '$.value.reference.reference',
        [useContext.value.reference.type] VARCHAR(256)        '$.value.reference.type',
        [useContext.value.reference.identifier] NVARCHAR(MAX)       '$.value.reference.identifier',
        [useContext.value.reference.display] NVARCHAR(4000)      '$.value.reference.display'
    ) j

GO

CREATE VIEW fhir.ArtifactAssessmentJurisdiction AS
SELECT
    [id],
    [jurisdiction.JSON],
    [jurisdiction.id],
    [jurisdiction.extension],
    [jurisdiction.coding],
    [jurisdiction.text]
FROM openrowset (
        BULK 'ArtifactAssessment/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [jurisdiction.JSON]  VARCHAR(MAX) '$.jurisdiction'
    ) AS rowset
    CROSS APPLY openjson (rowset.[jurisdiction.JSON]) with (
        [jurisdiction.id]              NVARCHAR(100)       '$.id',
        [jurisdiction.extension]       NVARCHAR(MAX)       '$.extension',
        [jurisdiction.coding]          NVARCHAR(MAX)       '$.coding' AS JSON,
        [jurisdiction.text]            NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.ArtifactAssessmentTopic AS
SELECT
    [id],
    [topic.JSON],
    [topic.id],
    [topic.extension],
    [topic.coding],
    [topic.text]
FROM openrowset (
        BULK 'ArtifactAssessment/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [topic.JSON]  VARCHAR(MAX) '$.topic'
    ) AS rowset
    CROSS APPLY openjson (rowset.[topic.JSON]) with (
        [topic.id]                     NVARCHAR(100)       '$.id',
        [topic.extension]              NVARCHAR(MAX)       '$.extension',
        [topic.coding]                 NVARCHAR(MAX)       '$.coding' AS JSON,
        [topic.text]                   NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.ArtifactAssessmentAuthor AS
SELECT
    [id],
    [author.JSON],
    [author.id],
    [author.extension],
    [author.name],
    [author.telecom]
FROM openrowset (
        BULK 'ArtifactAssessment/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [author.JSON]  VARCHAR(MAX) '$.author'
    ) AS rowset
    CROSS APPLY openjson (rowset.[author.JSON]) with (
        [author.id]                    NVARCHAR(100)       '$.id',
        [author.extension]             NVARCHAR(MAX)       '$.extension',
        [author.name]                  NVARCHAR(500)       '$.name',
        [author.telecom]               NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.ArtifactAssessmentEditor AS
SELECT
    [id],
    [editor.JSON],
    [editor.id],
    [editor.extension],
    [editor.name],
    [editor.telecom]
FROM openrowset (
        BULK 'ArtifactAssessment/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [editor.JSON]  VARCHAR(MAX) '$.editor'
    ) AS rowset
    CROSS APPLY openjson (rowset.[editor.JSON]) with (
        [editor.id]                    NVARCHAR(100)       '$.id',
        [editor.extension]             NVARCHAR(MAX)       '$.extension',
        [editor.name]                  NVARCHAR(500)       '$.name',
        [editor.telecom]               NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.ArtifactAssessmentReviewer AS
SELECT
    [id],
    [reviewer.JSON],
    [reviewer.id],
    [reviewer.extension],
    [reviewer.name],
    [reviewer.telecom]
FROM openrowset (
        BULK 'ArtifactAssessment/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [reviewer.JSON]  VARCHAR(MAX) '$.reviewer'
    ) AS rowset
    CROSS APPLY openjson (rowset.[reviewer.JSON]) with (
        [reviewer.id]                  NVARCHAR(100)       '$.id',
        [reviewer.extension]           NVARCHAR(MAX)       '$.extension',
        [reviewer.name]                NVARCHAR(500)       '$.name',
        [reviewer.telecom]             NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.ArtifactAssessmentEndorser AS
SELECT
    [id],
    [endorser.JSON],
    [endorser.id],
    [endorser.extension],
    [endorser.name],
    [endorser.telecom]
FROM openrowset (
        BULK 'ArtifactAssessment/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [endorser.JSON]  VARCHAR(MAX) '$.endorser'
    ) AS rowset
    CROSS APPLY openjson (rowset.[endorser.JSON]) with (
        [endorser.id]                  NVARCHAR(100)       '$.id',
        [endorser.extension]           NVARCHAR(MAX)       '$.extension',
        [endorser.name]                NVARCHAR(500)       '$.name',
        [endorser.telecom]             NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.ArtifactAssessmentRelatedArtifact AS
SELECT
    [id],
    [relatedArtifact.JSON],
    [relatedArtifact.id],
    [relatedArtifact.extension],
    [relatedArtifact.type],
    [relatedArtifact.classifier],
    [relatedArtifact.label],
    [relatedArtifact.display],
    [relatedArtifact.citation],
    [relatedArtifact.document.id],
    [relatedArtifact.document.extension],
    [relatedArtifact.document.contentType],
    [relatedArtifact.document.language],
    [relatedArtifact.document.data],
    [relatedArtifact.document.url],
    [relatedArtifact.document.size],
    [relatedArtifact.document.hash],
    [relatedArtifact.document.title],
    [relatedArtifact.document.creation],
    [relatedArtifact.document.height],
    [relatedArtifact.document.width],
    [relatedArtifact.document.frames],
    [relatedArtifact.document.duration],
    [relatedArtifact.document.pages],
    [relatedArtifact.resource],
    [relatedArtifact.resourceReference.id],
    [relatedArtifact.resourceReference.extension],
    [relatedArtifact.resourceReference.reference],
    [relatedArtifact.resourceReference.type],
    [relatedArtifact.resourceReference.identifier],
    [relatedArtifact.resourceReference.display]
FROM openrowset (
        BULK 'ArtifactAssessment/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [relatedArtifact.JSON]  VARCHAR(MAX) '$.relatedArtifact'
    ) AS rowset
    CROSS APPLY openjson (rowset.[relatedArtifact.JSON]) with (
        [relatedArtifact.id]           NVARCHAR(100)       '$.id',
        [relatedArtifact.extension]    NVARCHAR(MAX)       '$.extension',
        [relatedArtifact.type]         NVARCHAR(64)        '$.type',
        [relatedArtifact.classifier]   NVARCHAR(MAX)       '$.classifier' AS JSON,
        [relatedArtifact.label]        NVARCHAR(100)       '$.label',
        [relatedArtifact.display]      NVARCHAR(4000)      '$.display',
        [relatedArtifact.citation]     NVARCHAR(MAX)       '$.citation',
        [relatedArtifact.document.id]  NVARCHAR(100)       '$.document.id',
        [relatedArtifact.document.extension] NVARCHAR(MAX)       '$.document.extension',
        [relatedArtifact.document.contentType] NVARCHAR(100)       '$.document.contentType',
        [relatedArtifact.document.language] NVARCHAR(100)       '$.document.language',
        [relatedArtifact.document.data] NVARCHAR(MAX)       '$.document.data',
        [relatedArtifact.document.url] VARCHAR(256)        '$.document.url',
        [relatedArtifact.document.size] NVARCHAR(MAX)       '$.document.size',
        [relatedArtifact.document.hash] NVARCHAR(MAX)       '$.document.hash',
        [relatedArtifact.document.title] NVARCHAR(4000)      '$.document.title',
        [relatedArtifact.document.creation] VARCHAR(64)         '$.document.creation',
        [relatedArtifact.document.height] bigint              '$.document.height',
        [relatedArtifact.document.width] bigint              '$.document.width',
        [relatedArtifact.document.frames] bigint              '$.document.frames',
        [relatedArtifact.document.duration] float               '$.document.duration',
        [relatedArtifact.document.pages] bigint              '$.document.pages',
        [relatedArtifact.resource]     VARCHAR(256)        '$.resource',
        [relatedArtifact.resourceReference.id] NVARCHAR(100)       '$.resourceReference.id',
        [relatedArtifact.resourceReference.extension] NVARCHAR(MAX)       '$.resourceReference.extension',
        [relatedArtifact.resourceReference.reference] NVARCHAR(4000)      '$.resourceReference.reference',
        [relatedArtifact.resourceReference.type] VARCHAR(256)        '$.resourceReference.type',
        [relatedArtifact.resourceReference.identifier] NVARCHAR(MAX)       '$.resourceReference.identifier',
        [relatedArtifact.resourceReference.display] NVARCHAR(4000)      '$.resourceReference.display'
    ) j

GO

CREATE VIEW fhir.ArtifactAssessmentContent AS
SELECT
    [id],
    [content.JSON],
    [content.id],
    [content.extension],
    [content.modifierExtension],
    [content.informationType],
    [content.summary],
    [content.type.id],
    [content.type.extension],
    [content.type.coding],
    [content.type.text],
    [content.classifier],
    [content.author.id],
    [content.author.extension],
    [content.author.reference],
    [content.author.type],
    [content.author.identifier],
    [content.author.display],
    [content.path],
    [content.relatedArtifact],
    [content.freeToShare],
    [content.component]
FROM openrowset (
        BULK 'ArtifactAssessment/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [content.JSON]  VARCHAR(MAX) '$.content'
    ) AS rowset
    CROSS APPLY openjson (rowset.[content.JSON]) with (
        [content.id]                   NVARCHAR(100)       '$.id',
        [content.extension]            NVARCHAR(MAX)       '$.extension',
        [content.modifierExtension]    NVARCHAR(MAX)       '$.modifierExtension',
        [content.informationType]      NVARCHAR(4000)      '$.informationType',
        [content.summary]              NVARCHAR(MAX)       '$.summary',
        [content.type.id]              NVARCHAR(100)       '$.type.id',
        [content.type.extension]       NVARCHAR(MAX)       '$.type.extension',
        [content.type.coding]          NVARCHAR(MAX)       '$.type.coding',
        [content.type.text]            NVARCHAR(4000)      '$.type.text',
        [content.classifier]           NVARCHAR(MAX)       '$.classifier' AS JSON,
        [content.author.id]            NVARCHAR(100)       '$.author.id',
        [content.author.extension]     NVARCHAR(MAX)       '$.author.extension',
        [content.author.reference]     NVARCHAR(4000)      '$.author.reference',
        [content.author.type]          VARCHAR(256)        '$.author.type',
        [content.author.identifier]    NVARCHAR(MAX)       '$.author.identifier',
        [content.author.display]       NVARCHAR(4000)      '$.author.display',
        [content.path]                 NVARCHAR(MAX)       '$.path' AS JSON,
        [content.relatedArtifact]      NVARCHAR(MAX)       '$.relatedArtifact' AS JSON,
        [content.freeToShare]          bit                 '$.freeToShare',
        [content.component]            NVARCHAR(MAX)       '$.component' AS JSON
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[AuditEvent] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [category] VARCHAR(MAX),
    [code.id] NVARCHAR(100),
    [code.extension] NVARCHAR(MAX),
    [code.coding] VARCHAR(MAX),
    [code.text] NVARCHAR(4000),
    [action] NVARCHAR(4000),
    [severity] NVARCHAR(4000),
    [recorded] VARCHAR(64),
    [outcome.id] NVARCHAR(100),
    [outcome.extension] NVARCHAR(MAX),
    [outcome.modifierExtension] NVARCHAR(MAX),
    [outcome.code.id] NVARCHAR(100),
    [outcome.code.extension] NVARCHAR(MAX),
    [outcome.code.system] VARCHAR(256),
    [outcome.code.version] NVARCHAR(100),
    [outcome.code.code] NVARCHAR(4000),
    [outcome.code.display] NVARCHAR(4000),
    [outcome.code.userSelected] bit,
    [outcome.detail] VARCHAR(MAX),
    [authorization] VARCHAR(MAX),
    [basedOn] VARCHAR(MAX),
    [encounter.id] NVARCHAR(100),
    [encounter.extension] NVARCHAR(MAX),
    [encounter.reference] NVARCHAR(4000),
    [encounter.type] VARCHAR(256),
    [encounter.identifier.id] NVARCHAR(100),
    [encounter.identifier.extension] NVARCHAR(MAX),
    [encounter.identifier.use] NVARCHAR(64),
    [encounter.identifier.type] NVARCHAR(MAX),
    [encounter.identifier.system] VARCHAR(256),
    [encounter.identifier.value] NVARCHAR(4000),
    [encounter.identifier.period] NVARCHAR(MAX),
    [encounter.identifier.assigner] NVARCHAR(MAX),
    [encounter.display] NVARCHAR(4000),
    [agent] VARCHAR(MAX),
    [source.id] NVARCHAR(100),
    [source.extension] NVARCHAR(MAX),
    [source.modifierExtension] NVARCHAR(MAX),
    [source.site.id] NVARCHAR(100),
    [source.site.extension] NVARCHAR(MAX),
    [source.site.reference] NVARCHAR(4000),
    [source.site.type] VARCHAR(256),
    [source.site.identifier] NVARCHAR(MAX),
    [source.site.display] NVARCHAR(4000),
    [source.observer.id] NVARCHAR(100),
    [source.observer.extension] NVARCHAR(MAX),
    [source.observer.reference] NVARCHAR(4000),
    [source.observer.type] VARCHAR(256),
    [source.observer.identifier] NVARCHAR(MAX),
    [source.observer.display] NVARCHAR(4000),
    [source.type] VARCHAR(MAX),
    [entity] VARCHAR(MAX),
    [occurred.period.id] NVARCHAR(100),
    [occurred.period.extension] NVARCHAR(MAX),
    [occurred.period.start] VARCHAR(64),
    [occurred.period.end] VARCHAR(64),
    [occurred.dateTime] VARCHAR(64),
) WITH (
    LOCATION='/AuditEvent/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.AuditEventCategory AS
SELECT
    [id],
    [category.JSON],
    [category.id],
    [category.extension],
    [category.coding],
    [category.text]
FROM openrowset (
        BULK 'AuditEvent/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [category.JSON]  VARCHAR(MAX) '$.category'
    ) AS rowset
    CROSS APPLY openjson (rowset.[category.JSON]) with (
        [category.id]                  NVARCHAR(100)       '$.id',
        [category.extension]           NVARCHAR(MAX)       '$.extension',
        [category.coding]              NVARCHAR(MAX)       '$.coding' AS JSON,
        [category.text]                NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.AuditEventAuthorization AS
SELECT
    [id],
    [authorization.JSON],
    [authorization.id],
    [authorization.extension],
    [authorization.coding],
    [authorization.text]
FROM openrowset (
        BULK 'AuditEvent/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [authorization.JSON]  VARCHAR(MAX) '$.authorization'
    ) AS rowset
    CROSS APPLY openjson (rowset.[authorization.JSON]) with (
        [authorization.id]             NVARCHAR(100)       '$.id',
        [authorization.extension]      NVARCHAR(MAX)       '$.extension',
        [authorization.coding]         NVARCHAR(MAX)       '$.coding' AS JSON,
        [authorization.text]           NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.AuditEventBasedOn AS
SELECT
    [id],
    [basedOn.JSON],
    [basedOn.id],
    [basedOn.extension],
    [basedOn.reference],
    [basedOn.type],
    [basedOn.identifier.id],
    [basedOn.identifier.extension],
    [basedOn.identifier.use],
    [basedOn.identifier.type],
    [basedOn.identifier.system],
    [basedOn.identifier.value],
    [basedOn.identifier.period],
    [basedOn.identifier.assigner],
    [basedOn.display]
FROM openrowset (
        BULK 'AuditEvent/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [basedOn.JSON]  VARCHAR(MAX) '$.basedOn'
    ) AS rowset
    CROSS APPLY openjson (rowset.[basedOn.JSON]) with (
        [basedOn.id]                   NVARCHAR(100)       '$.id',
        [basedOn.extension]            NVARCHAR(MAX)       '$.extension',
        [basedOn.reference]            NVARCHAR(4000)      '$.reference',
        [basedOn.type]                 VARCHAR(256)        '$.type',
        [basedOn.identifier.id]        NVARCHAR(100)       '$.identifier.id',
        [basedOn.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [basedOn.identifier.use]       NVARCHAR(64)        '$.identifier.use',
        [basedOn.identifier.type]      NVARCHAR(MAX)       '$.identifier.type',
        [basedOn.identifier.system]    VARCHAR(256)        '$.identifier.system',
        [basedOn.identifier.value]     NVARCHAR(4000)      '$.identifier.value',
        [basedOn.identifier.period]    NVARCHAR(MAX)       '$.identifier.period',
        [basedOn.identifier.assigner]  NVARCHAR(MAX)       '$.identifier.assigner',
        [basedOn.display]              NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.AuditEventAgent AS
SELECT
    [id],
    [agent.JSON],
    [agent.id],
    [agent.extension],
    [agent.modifierExtension],
    [agent.type.id],
    [agent.type.extension],
    [agent.type.coding],
    [agent.type.text],
    [agent.role],
    [agent.who.id],
    [agent.who.extension],
    [agent.who.reference],
    [agent.who.type],
    [agent.who.identifier],
    [agent.who.display],
    [agent.requestor],
    [agent.location.id],
    [agent.location.extension],
    [agent.location.reference],
    [agent.location.type],
    [agent.location.identifier],
    [agent.location.display],
    [agent.policy],
    [agent.authorization],
    [agent.network.reference.id],
    [agent.network.reference.extension],
    [agent.network.reference.reference],
    [agent.network.reference.type],
    [agent.network.reference.identifier],
    [agent.network.reference.display],
    [agent.network.uri],
    [agent.network.string]
FROM openrowset (
        BULK 'AuditEvent/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [agent.JSON]  VARCHAR(MAX) '$.agent'
    ) AS rowset
    CROSS APPLY openjson (rowset.[agent.JSON]) with (
        [agent.id]                     NVARCHAR(100)       '$.id',
        [agent.extension]              NVARCHAR(MAX)       '$.extension',
        [agent.modifierExtension]      NVARCHAR(MAX)       '$.modifierExtension',
        [agent.type.id]                NVARCHAR(100)       '$.type.id',
        [agent.type.extension]         NVARCHAR(MAX)       '$.type.extension',
        [agent.type.coding]            NVARCHAR(MAX)       '$.type.coding',
        [agent.type.text]              NVARCHAR(4000)      '$.type.text',
        [agent.role]                   NVARCHAR(MAX)       '$.role' AS JSON,
        [agent.who.id]                 NVARCHAR(100)       '$.who.id',
        [agent.who.extension]          NVARCHAR(MAX)       '$.who.extension',
        [agent.who.reference]          NVARCHAR(4000)      '$.who.reference',
        [agent.who.type]               VARCHAR(256)        '$.who.type',
        [agent.who.identifier]         NVARCHAR(MAX)       '$.who.identifier',
        [agent.who.display]            NVARCHAR(4000)      '$.who.display',
        [agent.requestor]              bit                 '$.requestor',
        [agent.location.id]            NVARCHAR(100)       '$.location.id',
        [agent.location.extension]     NVARCHAR(MAX)       '$.location.extension',
        [agent.location.reference]     NVARCHAR(4000)      '$.location.reference',
        [agent.location.type]          VARCHAR(256)        '$.location.type',
        [agent.location.identifier]    NVARCHAR(MAX)       '$.location.identifier',
        [agent.location.display]       NVARCHAR(4000)      '$.location.display',
        [agent.policy]                 NVARCHAR(MAX)       '$.policy' AS JSON,
        [agent.authorization]          NVARCHAR(MAX)       '$.authorization' AS JSON,
        [agent.network.reference.id]   NVARCHAR(100)       '$.network.reference.id',
        [agent.network.reference.extension] NVARCHAR(MAX)       '$.network.reference.extension',
        [agent.network.reference.reference] NVARCHAR(4000)      '$.network.reference.reference',
        [agent.network.reference.type] VARCHAR(256)        '$.network.reference.type',
        [agent.network.reference.identifier] NVARCHAR(MAX)       '$.network.reference.identifier',
        [agent.network.reference.display] NVARCHAR(4000)      '$.network.reference.display',
        [agent.network.uri]            VARCHAR(256)        '$.network.uri',
        [agent.network.string]         NVARCHAR(4000)      '$.network.string'
    ) j

GO

CREATE VIEW fhir.AuditEventEntity AS
SELECT
    [id],
    [entity.JSON],
    [entity.id],
    [entity.extension],
    [entity.modifierExtension],
    [entity.what.id],
    [entity.what.extension],
    [entity.what.reference],
    [entity.what.type],
    [entity.what.identifier],
    [entity.what.display],
    [entity.role.id],
    [entity.role.extension],
    [entity.role.coding],
    [entity.role.text],
    [entity.securityLabel],
    [entity.query],
    [entity.detail],
    [entity.agent]
FROM openrowset (
        BULK 'AuditEvent/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [entity.JSON]  VARCHAR(MAX) '$.entity'
    ) AS rowset
    CROSS APPLY openjson (rowset.[entity.JSON]) with (
        [entity.id]                    NVARCHAR(100)       '$.id',
        [entity.extension]             NVARCHAR(MAX)       '$.extension',
        [entity.modifierExtension]     NVARCHAR(MAX)       '$.modifierExtension',
        [entity.what.id]               NVARCHAR(100)       '$.what.id',
        [entity.what.extension]        NVARCHAR(MAX)       '$.what.extension',
        [entity.what.reference]        NVARCHAR(4000)      '$.what.reference',
        [entity.what.type]             VARCHAR(256)        '$.what.type',
        [entity.what.identifier]       NVARCHAR(MAX)       '$.what.identifier',
        [entity.what.display]          NVARCHAR(4000)      '$.what.display',
        [entity.role.id]               NVARCHAR(100)       '$.role.id',
        [entity.role.extension]        NVARCHAR(MAX)       '$.role.extension',
        [entity.role.coding]           NVARCHAR(MAX)       '$.role.coding',
        [entity.role.text]             NVARCHAR(4000)      '$.role.text',
        [entity.securityLabel]         NVARCHAR(MAX)       '$.securityLabel' AS JSON,
        [entity.query]                 NVARCHAR(MAX)       '$.query',
        [entity.detail]                NVARCHAR(MAX)       '$.detail' AS JSON,
        [entity.agent]                 NVARCHAR(MAX)       '$.agent' AS JSON
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[Basic] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [code.id] NVARCHAR(100),
    [code.extension] NVARCHAR(MAX),
    [code.coding] VARCHAR(MAX),
    [code.text] NVARCHAR(4000),
    [subject.id] NVARCHAR(100),
    [subject.extension] NVARCHAR(MAX),
    [subject.reference] NVARCHAR(4000),
    [subject.type] VARCHAR(256),
    [subject.identifier.id] NVARCHAR(100),
    [subject.identifier.extension] NVARCHAR(MAX),
    [subject.identifier.use] NVARCHAR(64),
    [subject.identifier.type] NVARCHAR(MAX),
    [subject.identifier.system] VARCHAR(256),
    [subject.identifier.value] NVARCHAR(4000),
    [subject.identifier.period] NVARCHAR(MAX),
    [subject.identifier.assigner] NVARCHAR(MAX),
    [subject.display] NVARCHAR(4000),
    [created] VARCHAR(64),
    [author.id] NVARCHAR(100),
    [author.extension] NVARCHAR(MAX),
    [author.reference] NVARCHAR(4000),
    [author.type] VARCHAR(256),
    [author.identifier.id] NVARCHAR(100),
    [author.identifier.extension] NVARCHAR(MAX),
    [author.identifier.use] NVARCHAR(64),
    [author.identifier.type] NVARCHAR(MAX),
    [author.identifier.system] VARCHAR(256),
    [author.identifier.value] NVARCHAR(4000),
    [author.identifier.period] NVARCHAR(MAX),
    [author.identifier.assigner] NVARCHAR(MAX),
    [author.display] NVARCHAR(4000),
) WITH (
    LOCATION='/Basic/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.BasicIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'Basic/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[Binary] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [contentType] NVARCHAR(100),
    [securityContext.id] NVARCHAR(100),
    [securityContext.extension] NVARCHAR(MAX),
    [securityContext.reference] NVARCHAR(4000),
    [securityContext.type] VARCHAR(256),
    [securityContext.identifier.id] NVARCHAR(100),
    [securityContext.identifier.extension] NVARCHAR(MAX),
    [securityContext.identifier.use] NVARCHAR(64),
    [securityContext.identifier.type] NVARCHAR(MAX),
    [securityContext.identifier.system] VARCHAR(256),
    [securityContext.identifier.value] NVARCHAR(4000),
    [securityContext.identifier.period] NVARCHAR(MAX),
    [securityContext.identifier.assigner] NVARCHAR(MAX),
    [securityContext.display] NVARCHAR(4000),
    [data] NVARCHAR(MAX),
) WITH (
    LOCATION='/Binary/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE EXTERNAL TABLE [fhir].[BiologicallyDerivedProduct] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [productCategory] NVARCHAR(4000),
    [productCode.id] NVARCHAR(100),
    [productCode.extension] NVARCHAR(MAX),
    [productCode.coding] VARCHAR(MAX),
    [productCode.text] NVARCHAR(4000),
    [parent] VARCHAR(MAX),
    [request] VARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [biologicalSource.id] NVARCHAR(100),
    [biologicalSource.extension] NVARCHAR(MAX),
    [biologicalSource.use] NVARCHAR(64),
    [biologicalSource.type.id] NVARCHAR(100),
    [biologicalSource.type.extension] NVARCHAR(MAX),
    [biologicalSource.type.coding] NVARCHAR(MAX),
    [biologicalSource.type.text] NVARCHAR(4000),
    [biologicalSource.system] VARCHAR(256),
    [biologicalSource.value] NVARCHAR(4000),
    [biologicalSource.period.id] NVARCHAR(100),
    [biologicalSource.period.extension] NVARCHAR(MAX),
    [biologicalSource.period.start] VARCHAR(64),
    [biologicalSource.period.end] VARCHAR(64),
    [biologicalSource.assigner.id] NVARCHAR(100),
    [biologicalSource.assigner.extension] NVARCHAR(MAX),
    [biologicalSource.assigner.reference] NVARCHAR(4000),
    [biologicalSource.assigner.type] VARCHAR(256),
    [biologicalSource.assigner.identifier] NVARCHAR(MAX),
    [biologicalSource.assigner.display] NVARCHAR(4000),
    [processingFacility] VARCHAR(MAX),
    [division] NVARCHAR(4000),
    [status] NVARCHAR(100),
    [expirationDate] VARCHAR(64),
    [collection.id] NVARCHAR(100),
    [collection.extension] NVARCHAR(MAX),
    [collection.modifierExtension] NVARCHAR(MAX),
    [collection.collector.id] NVARCHAR(100),
    [collection.collector.extension] NVARCHAR(MAX),
    [collection.collector.reference] NVARCHAR(4000),
    [collection.collector.type] VARCHAR(256),
    [collection.collector.identifier] NVARCHAR(MAX),
    [collection.collector.display] NVARCHAR(4000),
    [collection.source.id] NVARCHAR(100),
    [collection.source.extension] NVARCHAR(MAX),
    [collection.source.reference] NVARCHAR(4000),
    [collection.source.type] VARCHAR(256),
    [collection.source.identifier] NVARCHAR(MAX),
    [collection.source.display] NVARCHAR(4000),
    [collection.collected.dateTime] VARCHAR(64),
    [collection.collected.period.id] NVARCHAR(100),
    [collection.collected.period.extension] NVARCHAR(MAX),
    [collection.collected.period.start] VARCHAR(64),
    [collection.collected.period.end] VARCHAR(64),
    [storageTempRequirements.id] NVARCHAR(100),
    [storageTempRequirements.extension] NVARCHAR(MAX),
    [storageTempRequirements.low.id] NVARCHAR(100),
    [storageTempRequirements.low.extension] NVARCHAR(MAX),
    [storageTempRequirements.low.value] float,
    [storageTempRequirements.low.comparator] NVARCHAR(64),
    [storageTempRequirements.low.unit] NVARCHAR(100),
    [storageTempRequirements.low.system] VARCHAR(256),
    [storageTempRequirements.low.code] NVARCHAR(4000),
    [storageTempRequirements.high.id] NVARCHAR(100),
    [storageTempRequirements.high.extension] NVARCHAR(MAX),
    [storageTempRequirements.high.value] float,
    [storageTempRequirements.high.comparator] NVARCHAR(64),
    [storageTempRequirements.high.unit] NVARCHAR(100),
    [storageTempRequirements.high.system] VARCHAR(256),
    [storageTempRequirements.high.code] NVARCHAR(4000),
    [property] VARCHAR(MAX),
) WITH (
    LOCATION='/BiologicallyDerivedProduct/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.BiologicallyDerivedProductParent AS
SELECT
    [id],
    [parent.JSON],
    [parent.id],
    [parent.extension],
    [parent.reference],
    [parent.type],
    [parent.identifier.id],
    [parent.identifier.extension],
    [parent.identifier.use],
    [parent.identifier.type],
    [parent.identifier.system],
    [parent.identifier.value],
    [parent.identifier.period],
    [parent.identifier.assigner],
    [parent.display]
FROM openrowset (
        BULK 'BiologicallyDerivedProduct/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [parent.JSON]  VARCHAR(MAX) '$.parent'
    ) AS rowset
    CROSS APPLY openjson (rowset.[parent.JSON]) with (
        [parent.id]                    NVARCHAR(100)       '$.id',
        [parent.extension]             NVARCHAR(MAX)       '$.extension',
        [parent.reference]             NVARCHAR(4000)      '$.reference',
        [parent.type]                  VARCHAR(256)        '$.type',
        [parent.identifier.id]         NVARCHAR(100)       '$.identifier.id',
        [parent.identifier.extension]  NVARCHAR(MAX)       '$.identifier.extension',
        [parent.identifier.use]        NVARCHAR(64)        '$.identifier.use',
        [parent.identifier.type]       NVARCHAR(MAX)       '$.identifier.type',
        [parent.identifier.system]     VARCHAR(256)        '$.identifier.system',
        [parent.identifier.value]      NVARCHAR(4000)      '$.identifier.value',
        [parent.identifier.period]     NVARCHAR(MAX)       '$.identifier.period',
        [parent.identifier.assigner]   NVARCHAR(MAX)       '$.identifier.assigner',
        [parent.display]               NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.BiologicallyDerivedProductRequest AS
SELECT
    [id],
    [request.JSON],
    [request.id],
    [request.extension],
    [request.reference],
    [request.type],
    [request.identifier.id],
    [request.identifier.extension],
    [request.identifier.use],
    [request.identifier.type],
    [request.identifier.system],
    [request.identifier.value],
    [request.identifier.period],
    [request.identifier.assigner],
    [request.display]
FROM openrowset (
        BULK 'BiologicallyDerivedProduct/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [request.JSON]  VARCHAR(MAX) '$.request'
    ) AS rowset
    CROSS APPLY openjson (rowset.[request.JSON]) with (
        [request.id]                   NVARCHAR(100)       '$.id',
        [request.extension]            NVARCHAR(MAX)       '$.extension',
        [request.reference]            NVARCHAR(4000)      '$.reference',
        [request.type]                 VARCHAR(256)        '$.type',
        [request.identifier.id]        NVARCHAR(100)       '$.identifier.id',
        [request.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [request.identifier.use]       NVARCHAR(64)        '$.identifier.use',
        [request.identifier.type]      NVARCHAR(MAX)       '$.identifier.type',
        [request.identifier.system]    VARCHAR(256)        '$.identifier.system',
        [request.identifier.value]     NVARCHAR(4000)      '$.identifier.value',
        [request.identifier.period]    NVARCHAR(MAX)       '$.identifier.period',
        [request.identifier.assigner]  NVARCHAR(MAX)       '$.identifier.assigner',
        [request.display]              NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.BiologicallyDerivedProductIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'BiologicallyDerivedProduct/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.BiologicallyDerivedProductProcessingFacility AS
SELECT
    [id],
    [processingFacility.JSON],
    [processingFacility.id],
    [processingFacility.extension],
    [processingFacility.reference],
    [processingFacility.type],
    [processingFacility.identifier.id],
    [processingFacility.identifier.extension],
    [processingFacility.identifier.use],
    [processingFacility.identifier.type],
    [processingFacility.identifier.system],
    [processingFacility.identifier.value],
    [processingFacility.identifier.period],
    [processingFacility.identifier.assigner],
    [processingFacility.display]
FROM openrowset (
        BULK 'BiologicallyDerivedProduct/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [processingFacility.JSON]  VARCHAR(MAX) '$.processingFacility'
    ) AS rowset
    CROSS APPLY openjson (rowset.[processingFacility.JSON]) with (
        [processingFacility.id]        NVARCHAR(100)       '$.id',
        [processingFacility.extension] NVARCHAR(MAX)       '$.extension',
        [processingFacility.reference] NVARCHAR(4000)      '$.reference',
        [processingFacility.type]      VARCHAR(256)        '$.type',
        [processingFacility.identifier.id] NVARCHAR(100)       '$.identifier.id',
        [processingFacility.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [processingFacility.identifier.use] NVARCHAR(64)        '$.identifier.use',
        [processingFacility.identifier.type] NVARCHAR(MAX)       '$.identifier.type',
        [processingFacility.identifier.system] VARCHAR(256)        '$.identifier.system',
        [processingFacility.identifier.value] NVARCHAR(4000)      '$.identifier.value',
        [processingFacility.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [processingFacility.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [processingFacility.display]   NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.BiologicallyDerivedProductProperty AS
SELECT
    [id],
    [property.JSON],
    [property.id],
    [property.extension],
    [property.modifierExtension],
    [property.type.id],
    [property.type.extension],
    [property.type.coding],
    [property.type.text],
    [property.value.boolean],
    [property.value.integer],
    [property.value.codeableConcept.id],
    [property.value.codeableConcept.extension],
    [property.value.codeableConcept.coding],
    [property.value.codeableConcept.text],
    [property.value.quantity.id],
    [property.value.quantity.extension],
    [property.value.quantity.value],
    [property.value.quantity.comparator],
    [property.value.quantity.unit],
    [property.value.quantity.system],
    [property.value.quantity.code],
    [property.value.range.id],
    [property.value.range.extension],
    [property.value.range.low],
    [property.value.range.high],
    [property.value.string],
    [property.value.attachment.id],
    [property.value.attachment.extension],
    [property.value.attachment.contentType],
    [property.value.attachment.language],
    [property.value.attachment.data],
    [property.value.attachment.url],
    [property.value.attachment.size],
    [property.value.attachment.hash],
    [property.value.attachment.title],
    [property.value.attachment.creation],
    [property.value.attachment.height],
    [property.value.attachment.width],
    [property.value.attachment.frames],
    [property.value.attachment.duration],
    [property.value.attachment.pages]
FROM openrowset (
        BULK 'BiologicallyDerivedProduct/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [property.JSON]  VARCHAR(MAX) '$.property'
    ) AS rowset
    CROSS APPLY openjson (rowset.[property.JSON]) with (
        [property.id]                  NVARCHAR(100)       '$.id',
        [property.extension]           NVARCHAR(MAX)       '$.extension',
        [property.modifierExtension]   NVARCHAR(MAX)       '$.modifierExtension',
        [property.type.id]             NVARCHAR(100)       '$.type.id',
        [property.type.extension]      NVARCHAR(MAX)       '$.type.extension',
        [property.type.coding]         NVARCHAR(MAX)       '$.type.coding',
        [property.type.text]           NVARCHAR(4000)      '$.type.text',
        [property.value.boolean]       bit                 '$.value.boolean',
        [property.value.integer]       bigint              '$.value.integer',
        [property.value.codeableConcept.id] NVARCHAR(100)       '$.value.codeableConcept.id',
        [property.value.codeableConcept.extension] NVARCHAR(MAX)       '$.value.codeableConcept.extension',
        [property.value.codeableConcept.coding] NVARCHAR(MAX)       '$.value.codeableConcept.coding',
        [property.value.codeableConcept.text] NVARCHAR(4000)      '$.value.codeableConcept.text',
        [property.value.quantity.id]   NVARCHAR(100)       '$.value.quantity.id',
        [property.value.quantity.extension] NVARCHAR(MAX)       '$.value.quantity.extension',
        [property.value.quantity.value] float               '$.value.quantity.value',
        [property.value.quantity.comparator] NVARCHAR(64)        '$.value.quantity.comparator',
        [property.value.quantity.unit] NVARCHAR(100)       '$.value.quantity.unit',
        [property.value.quantity.system] VARCHAR(256)        '$.value.quantity.system',
        [property.value.quantity.code] NVARCHAR(4000)      '$.value.quantity.code',
        [property.value.range.id]      NVARCHAR(100)       '$.value.range.id',
        [property.value.range.extension] NVARCHAR(MAX)       '$.value.range.extension',
        [property.value.range.low]     NVARCHAR(MAX)       '$.value.range.low',
        [property.value.range.high]    NVARCHAR(MAX)       '$.value.range.high',
        [property.value.string]        NVARCHAR(4000)      '$.value.string',
        [property.value.attachment.id] NVARCHAR(100)       '$.value.attachment.id',
        [property.value.attachment.extension] NVARCHAR(MAX)       '$.value.attachment.extension',
        [property.value.attachment.contentType] NVARCHAR(100)       '$.value.attachment.contentType',
        [property.value.attachment.language] NVARCHAR(100)       '$.value.attachment.language',
        [property.value.attachment.data] NVARCHAR(MAX)       '$.value.attachment.data',
        [property.value.attachment.url] VARCHAR(256)        '$.value.attachment.url',
        [property.value.attachment.size] NVARCHAR(MAX)       '$.value.attachment.size',
        [property.value.attachment.hash] NVARCHAR(MAX)       '$.value.attachment.hash',
        [property.value.attachment.title] NVARCHAR(4000)      '$.value.attachment.title',
        [property.value.attachment.creation] VARCHAR(64)         '$.value.attachment.creation',
        [property.value.attachment.height] bigint              '$.value.attachment.height',
        [property.value.attachment.width] bigint              '$.value.attachment.width',
        [property.value.attachment.frames] bigint              '$.value.attachment.frames',
        [property.value.attachment.duration] float               '$.value.attachment.duration',
        [property.value.attachment.pages] bigint              '$.value.attachment.pages'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[BodyStructure] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [active] bit,
    [morphology.id] NVARCHAR(100),
    [morphology.extension] NVARCHAR(MAX),
    [morphology.coding] VARCHAR(MAX),
    [morphology.text] NVARCHAR(4000),
    [location.id] NVARCHAR(100),
    [location.extension] NVARCHAR(MAX),
    [location.coding] VARCHAR(MAX),
    [location.text] NVARCHAR(4000),
    [includedStructure] VARCHAR(MAX),
    [excludedStructure] VARCHAR(MAX),
    [description] NVARCHAR(4000),
    [image] VARCHAR(MAX),
    [patient.id] NVARCHAR(100),
    [patient.extension] NVARCHAR(MAX),
    [patient.reference] NVARCHAR(4000),
    [patient.type] VARCHAR(256),
    [patient.identifier.id] NVARCHAR(100),
    [patient.identifier.extension] NVARCHAR(MAX),
    [patient.identifier.use] NVARCHAR(64),
    [patient.identifier.type] NVARCHAR(MAX),
    [patient.identifier.system] VARCHAR(256),
    [patient.identifier.value] NVARCHAR(4000),
    [patient.identifier.period] NVARCHAR(MAX),
    [patient.identifier.assigner] NVARCHAR(MAX),
    [patient.display] NVARCHAR(4000),
) WITH (
    LOCATION='/BodyStructure/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.BodyStructureIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'BodyStructure/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.BodyStructureIncludedStructure AS
SELECT
    [id],
    [includedStructure.JSON],
    [includedStructure.id],
    [includedStructure.extension],
    [includedStructure.modifierExtension],
    [includedStructure.structure.id],
    [includedStructure.structure.extension],
    [includedStructure.structure.coding],
    [includedStructure.structure.text],
    [includedStructure.laterality.id],
    [includedStructure.laterality.extension],
    [includedStructure.laterality.coding],
    [includedStructure.laterality.text],
    [includedStructure.qualifier]
FROM openrowset (
        BULK 'BodyStructure/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [includedStructure.JSON]  VARCHAR(MAX) '$.includedStructure'
    ) AS rowset
    CROSS APPLY openjson (rowset.[includedStructure.JSON]) with (
        [includedStructure.id]         NVARCHAR(100)       '$.id',
        [includedStructure.extension]  NVARCHAR(MAX)       '$.extension',
        [includedStructure.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [includedStructure.structure.id] NVARCHAR(100)       '$.structure.id',
        [includedStructure.structure.extension] NVARCHAR(MAX)       '$.structure.extension',
        [includedStructure.structure.coding] NVARCHAR(MAX)       '$.structure.coding',
        [includedStructure.structure.text] NVARCHAR(4000)      '$.structure.text',
        [includedStructure.laterality.id] NVARCHAR(100)       '$.laterality.id',
        [includedStructure.laterality.extension] NVARCHAR(MAX)       '$.laterality.extension',
        [includedStructure.laterality.coding] NVARCHAR(MAX)       '$.laterality.coding',
        [includedStructure.laterality.text] NVARCHAR(4000)      '$.laterality.text',
        [includedStructure.qualifier]  NVARCHAR(MAX)       '$.qualifier' AS JSON
    ) j

GO

CREATE VIEW fhir.BodyStructureExcludedStructure AS
SELECT
    [id],
    [excludedStructure.JSON],
    [excludedStructure.id],
    [excludedStructure.extension],
    [excludedStructure.modifierExtension],
    [excludedStructure.structure.id],
    [excludedStructure.structure.extension],
    [excludedStructure.structure.coding],
    [excludedStructure.structure.text],
    [excludedStructure.laterality.id],
    [excludedStructure.laterality.extension],
    [excludedStructure.laterality.coding],
    [excludedStructure.laterality.text],
    [excludedStructure.qualifier]
FROM openrowset (
        BULK 'BodyStructure/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [excludedStructure.JSON]  VARCHAR(MAX) '$.excludedStructure'
    ) AS rowset
    CROSS APPLY openjson (rowset.[excludedStructure.JSON]) with (
        [excludedStructure.id]         NVARCHAR(100)       '$.id',
        [excludedStructure.extension]  NVARCHAR(MAX)       '$.extension',
        [excludedStructure.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [excludedStructure.structure.id] NVARCHAR(100)       '$.structure.id',
        [excludedStructure.structure.extension] NVARCHAR(MAX)       '$.structure.extension',
        [excludedStructure.structure.coding] NVARCHAR(MAX)       '$.structure.coding',
        [excludedStructure.structure.text] NVARCHAR(4000)      '$.structure.text',
        [excludedStructure.laterality.id] NVARCHAR(100)       '$.laterality.id',
        [excludedStructure.laterality.extension] NVARCHAR(MAX)       '$.laterality.extension',
        [excludedStructure.laterality.coding] NVARCHAR(MAX)       '$.laterality.coding',
        [excludedStructure.laterality.text] NVARCHAR(4000)      '$.laterality.text',
        [excludedStructure.qualifier]  NVARCHAR(MAX)       '$.qualifier' AS JSON
    ) j

GO

CREATE VIEW fhir.BodyStructureImage AS
SELECT
    [id],
    [image.JSON],
    [image.id],
    [image.extension],
    [image.contentType],
    [image.language],
    [image.data],
    [image.url],
    [image.size],
    [image.hash],
    [image.title],
    [image.creation],
    [image.height],
    [image.width],
    [image.frames],
    [image.duration],
    [image.pages]
FROM openrowset (
        BULK 'BodyStructure/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [image.JSON]  VARCHAR(MAX) '$.image'
    ) AS rowset
    CROSS APPLY openjson (rowset.[image.JSON]) with (
        [image.id]                     NVARCHAR(100)       '$.id',
        [image.extension]              NVARCHAR(MAX)       '$.extension',
        [image.contentType]            NVARCHAR(100)       '$.contentType',
        [image.language]               NVARCHAR(100)       '$.language',
        [image.data]                   NVARCHAR(MAX)       '$.data',
        [image.url]                    VARCHAR(256)        '$.url',
        [image.size]                   NVARCHAR(MAX)       '$.size',
        [image.hash]                   NVARCHAR(MAX)       '$.hash',
        [image.title]                  NVARCHAR(4000)      '$.title',
        [image.creation]               VARCHAR(64)         '$.creation',
        [image.height]                 bigint              '$.height',
        [image.width]                  bigint              '$.width',
        [image.frames]                 bigint              '$.frames',
        [image.duration]               float               '$.duration',
        [image.pages]                  bigint              '$.pages'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[Bundle] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [identifier.id] NVARCHAR(100),
    [identifier.extension] NVARCHAR(MAX),
    [identifier.use] NVARCHAR(64),
    [identifier.type.id] NVARCHAR(100),
    [identifier.type.extension] NVARCHAR(MAX),
    [identifier.type.coding] NVARCHAR(MAX),
    [identifier.type.text] NVARCHAR(4000),
    [identifier.system] VARCHAR(256),
    [identifier.value] NVARCHAR(4000),
    [identifier.period.id] NVARCHAR(100),
    [identifier.period.extension] NVARCHAR(MAX),
    [identifier.period.start] VARCHAR(64),
    [identifier.period.end] VARCHAR(64),
    [identifier.assigner.id] NVARCHAR(100),
    [identifier.assigner.extension] NVARCHAR(MAX),
    [identifier.assigner.reference] NVARCHAR(4000),
    [identifier.assigner.type] VARCHAR(256),
    [identifier.assigner.identifier] NVARCHAR(MAX),
    [identifier.assigner.display] NVARCHAR(4000),
    [type] NVARCHAR(100),
    [timestamp] VARCHAR(64),
    [total] bigint,
    [link] VARCHAR(MAX),
    [entry] VARCHAR(MAX),
    [signature.id] NVARCHAR(100),
    [signature.extension] NVARCHAR(MAX),
    [signature.type] VARCHAR(MAX),
    [signature.when] VARCHAR(64),
    [signature.who.id] NVARCHAR(100),
    [signature.who.extension] NVARCHAR(MAX),
    [signature.who.reference] NVARCHAR(4000),
    [signature.who.type] VARCHAR(256),
    [signature.who.identifier] NVARCHAR(MAX),
    [signature.who.display] NVARCHAR(4000),
    [signature.onBehalfOf.id] NVARCHAR(100),
    [signature.onBehalfOf.extension] NVARCHAR(MAX),
    [signature.onBehalfOf.reference] NVARCHAR(4000),
    [signature.onBehalfOf.type] VARCHAR(256),
    [signature.onBehalfOf.identifier] NVARCHAR(MAX),
    [signature.onBehalfOf.display] NVARCHAR(4000),
    [signature.targetFormat] NVARCHAR(100),
    [signature.sigFormat] NVARCHAR(100),
    [signature.data] NVARCHAR(MAX),
) WITH (
    LOCATION='/Bundle/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.BundleLink AS
SELECT
    [id],
    [link.JSON],
    [link.id],
    [link.extension],
    [link.modifierExtension],
    [link.relation],
    [link.url]
FROM openrowset (
        BULK 'Bundle/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [link.JSON]  VARCHAR(MAX) '$.link'
    ) AS rowset
    CROSS APPLY openjson (rowset.[link.JSON]) with (
        [link.id]                      NVARCHAR(100)       '$.id',
        [link.extension]               NVARCHAR(MAX)       '$.extension',
        [link.modifierExtension]       NVARCHAR(MAX)       '$.modifierExtension',
        [link.relation]                NVARCHAR(100)       '$.relation',
        [link.url]                     VARCHAR(256)        '$.url'
    ) j

GO

CREATE VIEW fhir.BundleEntry AS
SELECT
    [id],
    [entry.JSON],
    [entry.id],
    [entry.extension],
    [entry.modifierExtension],
    [entry.link],
    [entry.fullUrl],
    [entry.search.id],
    [entry.search.extension],
    [entry.search.modifierExtension],
    [entry.search.mode],
    [entry.search.score],
    [entry.request.id],
    [entry.request.extension],
    [entry.request.modifierExtension],
    [entry.request.method],
    [entry.request.url],
    [entry.request.ifNoneMatch],
    [entry.request.ifModifiedSince],
    [entry.request.ifMatch],
    [entry.request.ifNoneExist],
    [entry.response.id],
    [entry.response.extension],
    [entry.response.modifierExtension],
    [entry.response.status],
    [entry.response.location],
    [entry.response.etag],
    [entry.response.lastModified]
FROM openrowset (
        BULK 'Bundle/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [entry.JSON]  VARCHAR(MAX) '$.entry'
    ) AS rowset
    CROSS APPLY openjson (rowset.[entry.JSON]) with (
        [entry.id]                     NVARCHAR(100)       '$.id',
        [entry.extension]              NVARCHAR(MAX)       '$.extension',
        [entry.modifierExtension]      NVARCHAR(MAX)       '$.modifierExtension',
        [entry.link]                   NVARCHAR(MAX)       '$.link' AS JSON,
        [entry.fullUrl]                VARCHAR(256)        '$.fullUrl',
        [entry.search.id]              NVARCHAR(100)       '$.search.id',
        [entry.search.extension]       NVARCHAR(MAX)       '$.search.extension',
        [entry.search.modifierExtension] NVARCHAR(MAX)       '$.search.modifierExtension',
        [entry.search.mode]            NVARCHAR(100)       '$.search.mode',
        [entry.search.score]           float               '$.search.score',
        [entry.request.id]             NVARCHAR(100)       '$.request.id',
        [entry.request.extension]      NVARCHAR(MAX)       '$.request.extension',
        [entry.request.modifierExtension] NVARCHAR(MAX)       '$.request.modifierExtension',
        [entry.request.method]         NVARCHAR(4000)      '$.request.method',
        [entry.request.url]            VARCHAR(256)        '$.request.url',
        [entry.request.ifNoneMatch]    NVARCHAR(100)       '$.request.ifNoneMatch',
        [entry.request.ifModifiedSince] VARCHAR(64)         '$.request.ifModifiedSince',
        [entry.request.ifMatch]        NVARCHAR(100)       '$.request.ifMatch',
        [entry.request.ifNoneExist]    NVARCHAR(100)       '$.request.ifNoneExist',
        [entry.response.id]            NVARCHAR(100)       '$.response.id',
        [entry.response.extension]     NVARCHAR(MAX)       '$.response.extension',
        [entry.response.modifierExtension] NVARCHAR(MAX)       '$.response.modifierExtension',
        [entry.response.status]        NVARCHAR(100)       '$.response.status',
        [entry.response.location]      VARCHAR(256)        '$.response.location',
        [entry.response.etag]          NVARCHAR(100)       '$.response.etag',
        [entry.response.lastModified]  VARCHAR(64)         '$.response.lastModified'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[CapabilityStatement] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [url] VARCHAR(256),
    [identifier] VARCHAR(MAX),
    [version] NVARCHAR(100),
    [name] NVARCHAR(500),
    [title] NVARCHAR(4000),
    [status] NVARCHAR(100),
    [experimental] bit,
    [date] VARCHAR(64),
    [publisher] NVARCHAR(500),
    [contact] VARCHAR(MAX),
    [description] NVARCHAR(MAX),
    [useContext] VARCHAR(MAX),
    [jurisdiction] VARCHAR(MAX),
    [purpose] NVARCHAR(MAX),
    [copyright] NVARCHAR(MAX),
    [kind] NVARCHAR(100),
    [instantiates] VARCHAR(MAX),
    [imports] VARCHAR(MAX),
    [software.id] NVARCHAR(100),
    [software.extension] NVARCHAR(MAX),
    [software.modifierExtension] NVARCHAR(MAX),
    [software.name] NVARCHAR(500),
    [software.version] NVARCHAR(100),
    [software.releaseDate] VARCHAR(64),
    [implementation.id] NVARCHAR(100),
    [implementation.extension] NVARCHAR(MAX),
    [implementation.modifierExtension] NVARCHAR(MAX),
    [implementation.description] NVARCHAR(4000),
    [implementation.url] VARCHAR(256),
    [implementation.custodian.id] NVARCHAR(100),
    [implementation.custodian.extension] NVARCHAR(MAX),
    [implementation.custodian.reference] NVARCHAR(4000),
    [implementation.custodian.type] VARCHAR(256),
    [implementation.custodian.identifier] NVARCHAR(MAX),
    [implementation.custodian.display] NVARCHAR(4000),
    [fhirVersion] NVARCHAR(4000),
    [format] VARCHAR(MAX),
    [patchFormat] VARCHAR(MAX),
    [implementationGuide] VARCHAR(MAX),
    [rest] VARCHAR(MAX),
    [messaging] VARCHAR(MAX),
    [document] VARCHAR(MAX),
) WITH (
    LOCATION='/CapabilityStatement/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.CapabilityStatementIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'CapabilityStatement/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.CapabilityStatementContact AS
SELECT
    [id],
    [contact.JSON],
    [contact.id],
    [contact.extension],
    [contact.name],
    [contact.telecom]
FROM openrowset (
        BULK 'CapabilityStatement/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [contact.JSON]  VARCHAR(MAX) '$.contact'
    ) AS rowset
    CROSS APPLY openjson (rowset.[contact.JSON]) with (
        [contact.id]                   NVARCHAR(100)       '$.id',
        [contact.extension]            NVARCHAR(MAX)       '$.extension',
        [contact.name]                 NVARCHAR(500)       '$.name',
        [contact.telecom]              NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.CapabilityStatementUseContext AS
SELECT
    [id],
    [useContext.JSON],
    [useContext.id],
    [useContext.extension],
    [useContext.code.id],
    [useContext.code.extension],
    [useContext.code.system],
    [useContext.code.version],
    [useContext.code.code],
    [useContext.code.display],
    [useContext.code.userSelected],
    [useContext.value.codeableConcept.id],
    [useContext.value.codeableConcept.extension],
    [useContext.value.codeableConcept.coding],
    [useContext.value.codeableConcept.text],
    [useContext.value.quantity.id],
    [useContext.value.quantity.extension],
    [useContext.value.quantity.value],
    [useContext.value.quantity.comparator],
    [useContext.value.quantity.unit],
    [useContext.value.quantity.system],
    [useContext.value.quantity.code],
    [useContext.value.range.id],
    [useContext.value.range.extension],
    [useContext.value.range.low],
    [useContext.value.range.high],
    [useContext.value.reference.id],
    [useContext.value.reference.extension],
    [useContext.value.reference.reference],
    [useContext.value.reference.type],
    [useContext.value.reference.identifier],
    [useContext.value.reference.display]
FROM openrowset (
        BULK 'CapabilityStatement/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [useContext.JSON]  VARCHAR(MAX) '$.useContext'
    ) AS rowset
    CROSS APPLY openjson (rowset.[useContext.JSON]) with (
        [useContext.id]                NVARCHAR(100)       '$.id',
        [useContext.extension]         NVARCHAR(MAX)       '$.extension',
        [useContext.code.id]           NVARCHAR(100)       '$.code.id',
        [useContext.code.extension]    NVARCHAR(MAX)       '$.code.extension',
        [useContext.code.system]       VARCHAR(256)        '$.code.system',
        [useContext.code.version]      NVARCHAR(100)       '$.code.version',
        [useContext.code.code]         NVARCHAR(4000)      '$.code.code',
        [useContext.code.display]      NVARCHAR(4000)      '$.code.display',
        [useContext.code.userSelected] bit                 '$.code.userSelected',
        [useContext.value.codeableConcept.id] NVARCHAR(100)       '$.value.codeableConcept.id',
        [useContext.value.codeableConcept.extension] NVARCHAR(MAX)       '$.value.codeableConcept.extension',
        [useContext.value.codeableConcept.coding] NVARCHAR(MAX)       '$.value.codeableConcept.coding',
        [useContext.value.codeableConcept.text] NVARCHAR(4000)      '$.value.codeableConcept.text',
        [useContext.value.quantity.id] NVARCHAR(100)       '$.value.quantity.id',
        [useContext.value.quantity.extension] NVARCHAR(MAX)       '$.value.quantity.extension',
        [useContext.value.quantity.value] float               '$.value.quantity.value',
        [useContext.value.quantity.comparator] NVARCHAR(64)        '$.value.quantity.comparator',
        [useContext.value.quantity.unit] NVARCHAR(100)       '$.value.quantity.unit',
        [useContext.value.quantity.system] VARCHAR(256)        '$.value.quantity.system',
        [useContext.value.quantity.code] NVARCHAR(4000)      '$.value.quantity.code',
        [useContext.value.range.id]    NVARCHAR(100)       '$.value.range.id',
        [useContext.value.range.extension] NVARCHAR(MAX)       '$.value.range.extension',
        [useContext.value.range.low]   NVARCHAR(MAX)       '$.value.range.low',
        [useContext.value.range.high]  NVARCHAR(MAX)       '$.value.range.high',
        [useContext.value.reference.id] NVARCHAR(100)       '$.value.reference.id',
        [useContext.value.reference.extension] NVARCHAR(MAX)       '$.value.reference.extension',
        [useContext.value.reference.reference] NVARCHAR(4000)      '$.value.reference.reference',
        [useContext.value.reference.type] VARCHAR(256)        '$.value.reference.type',
        [useContext.value.reference.identifier] NVARCHAR(MAX)       '$.value.reference.identifier',
        [useContext.value.reference.display] NVARCHAR(4000)      '$.value.reference.display'
    ) j

GO

CREATE VIEW fhir.CapabilityStatementJurisdiction AS
SELECT
    [id],
    [jurisdiction.JSON],
    [jurisdiction.id],
    [jurisdiction.extension],
    [jurisdiction.coding],
    [jurisdiction.text]
FROM openrowset (
        BULK 'CapabilityStatement/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [jurisdiction.JSON]  VARCHAR(MAX) '$.jurisdiction'
    ) AS rowset
    CROSS APPLY openjson (rowset.[jurisdiction.JSON]) with (
        [jurisdiction.id]              NVARCHAR(100)       '$.id',
        [jurisdiction.extension]       NVARCHAR(MAX)       '$.extension',
        [jurisdiction.coding]          NVARCHAR(MAX)       '$.coding' AS JSON,
        [jurisdiction.text]            NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.CapabilityStatementInstantiates AS
SELECT
    [id],
    [instantiates.JSON],
    [instantiates]
FROM openrowset (
        BULK 'CapabilityStatement/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [instantiates.JSON]  VARCHAR(MAX) '$.instantiates'
    ) AS rowset
    CROSS APPLY openjson (rowset.[instantiates.JSON]) with (
        [instantiates]                 NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.CapabilityStatementImports AS
SELECT
    [id],
    [imports.JSON],
    [imports]
FROM openrowset (
        BULK 'CapabilityStatement/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [imports.JSON]  VARCHAR(MAX) '$.imports'
    ) AS rowset
    CROSS APPLY openjson (rowset.[imports.JSON]) with (
        [imports]                      NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.CapabilityStatementFormat AS
SELECT
    [id],
    [format.JSON],
    [format]
FROM openrowset (
        BULK 'CapabilityStatement/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [format.JSON]  VARCHAR(MAX) '$.format'
    ) AS rowset
    CROSS APPLY openjson (rowset.[format.JSON]) with (
        [format]                       NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.CapabilityStatementPatchFormat AS
SELECT
    [id],
    [patchFormat.JSON],
    [patchFormat]
FROM openrowset (
        BULK 'CapabilityStatement/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [patchFormat.JSON]  VARCHAR(MAX) '$.patchFormat'
    ) AS rowset
    CROSS APPLY openjson (rowset.[patchFormat.JSON]) with (
        [patchFormat]                  NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.CapabilityStatementImplementationGuide AS
SELECT
    [id],
    [implementationGuide.JSON],
    [implementationGuide]
FROM openrowset (
        BULK 'CapabilityStatement/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [implementationGuide.JSON]  VARCHAR(MAX) '$.implementationGuide'
    ) AS rowset
    CROSS APPLY openjson (rowset.[implementationGuide.JSON]) with (
        [implementationGuide]          NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.CapabilityStatementRest AS
SELECT
    [id],
    [rest.JSON],
    [rest.id],
    [rest.extension],
    [rest.modifierExtension],
    [rest.mode],
    [rest.documentation],
    [rest.security.id],
    [rest.security.extension],
    [rest.security.modifierExtension],
    [rest.security.cors],
    [rest.security.service],
    [rest.security.description],
    [rest.resource],
    [rest.interaction],
    [rest.searchParam],
    [rest.operation],
    [rest.compartment]
FROM openrowset (
        BULK 'CapabilityStatement/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [rest.JSON]  VARCHAR(MAX) '$.rest'
    ) AS rowset
    CROSS APPLY openjson (rowset.[rest.JSON]) with (
        [rest.id]                      NVARCHAR(100)       '$.id',
        [rest.extension]               NVARCHAR(MAX)       '$.extension',
        [rest.modifierExtension]       NVARCHAR(MAX)       '$.modifierExtension',
        [rest.mode]                    NVARCHAR(100)       '$.mode',
        [rest.documentation]           NVARCHAR(MAX)       '$.documentation',
        [rest.security.id]             NVARCHAR(100)       '$.security.id',
        [rest.security.extension]      NVARCHAR(MAX)       '$.security.extension',
        [rest.security.modifierExtension] NVARCHAR(MAX)       '$.security.modifierExtension',
        [rest.security.cors]           bit                 '$.security.cors',
        [rest.security.service]        NVARCHAR(MAX)       '$.security.service',
        [rest.security.description]    NVARCHAR(MAX)       '$.security.description',
        [rest.resource]                NVARCHAR(MAX)       '$.resource' AS JSON,
        [rest.interaction]             NVARCHAR(MAX)       '$.interaction' AS JSON,
        [rest.searchParam]             NVARCHAR(MAX)       '$.searchParam' AS JSON,
        [rest.operation]               NVARCHAR(MAX)       '$.operation' AS JSON,
        [rest.compartment]             NVARCHAR(MAX)       '$.compartment' AS JSON
    ) j

GO

CREATE VIEW fhir.CapabilityStatementMessaging AS
SELECT
    [id],
    [messaging.JSON],
    [messaging.id],
    [messaging.extension],
    [messaging.modifierExtension],
    [messaging.endpoint],
    [messaging.reliableCache],
    [messaging.documentation],
    [messaging.supportedMessage]
FROM openrowset (
        BULK 'CapabilityStatement/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [messaging.JSON]  VARCHAR(MAX) '$.messaging'
    ) AS rowset
    CROSS APPLY openjson (rowset.[messaging.JSON]) with (
        [messaging.id]                 NVARCHAR(100)       '$.id',
        [messaging.extension]          NVARCHAR(MAX)       '$.extension',
        [messaging.modifierExtension]  NVARCHAR(MAX)       '$.modifierExtension',
        [messaging.endpoint]           NVARCHAR(MAX)       '$.endpoint' AS JSON,
        [messaging.reliableCache]      bigint              '$.reliableCache',
        [messaging.documentation]      NVARCHAR(MAX)       '$.documentation',
        [messaging.supportedMessage]   NVARCHAR(MAX)       '$.supportedMessage' AS JSON
    ) j

GO

CREATE VIEW fhir.CapabilityStatementDocument AS
SELECT
    [id],
    [document.JSON],
    [document.id],
    [document.extension],
    [document.modifierExtension],
    [document.mode],
    [document.documentation],
    [document.profile]
FROM openrowset (
        BULK 'CapabilityStatement/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [document.JSON]  VARCHAR(MAX) '$.document'
    ) AS rowset
    CROSS APPLY openjson (rowset.[document.JSON]) with (
        [document.id]                  NVARCHAR(100)       '$.id',
        [document.extension]           NVARCHAR(MAX)       '$.extension',
        [document.modifierExtension]   NVARCHAR(MAX)       '$.modifierExtension',
        [document.mode]                NVARCHAR(100)       '$.mode',
        [document.documentation]       NVARCHAR(MAX)       '$.documentation',
        [document.profile]             VARCHAR(256)        '$.profile'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[CapabilityStatement2] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [url] VARCHAR(256),
    [identifier] VARCHAR(MAX),
    [version] NVARCHAR(100),
    [name] NVARCHAR(500),
    [title] NVARCHAR(4000),
    [status] NVARCHAR(100),
    [experimental] bit,
    [date] VARCHAR(64),
    [publisher] NVARCHAR(500),
    [contact] VARCHAR(MAX),
    [description] NVARCHAR(MAX),
    [useContext] VARCHAR(MAX),
    [jurisdiction] VARCHAR(MAX),
    [purpose] NVARCHAR(MAX),
    [copyright] NVARCHAR(MAX),
    [kind] NVARCHAR(100),
    [instantiates] VARCHAR(MAX),
    [imports] VARCHAR(MAX),
    [software.id] NVARCHAR(100),
    [software.extension] NVARCHAR(MAX),
    [software.modifierExtension] NVARCHAR(MAX),
    [software.name] NVARCHAR(500),
    [software.version] NVARCHAR(100),
    [software.releaseDate] VARCHAR(64),
    [implementation.id] NVARCHAR(100),
    [implementation.extension] NVARCHAR(MAX),
    [implementation.modifierExtension] NVARCHAR(MAX),
    [implementation.description] NVARCHAR(4000),
    [implementation.url] VARCHAR(256),
    [implementation.custodian.id] NVARCHAR(100),
    [implementation.custodian.extension] NVARCHAR(MAX),
    [implementation.custodian.reference] NVARCHAR(4000),
    [implementation.custodian.type] VARCHAR(256),
    [implementation.custodian.identifier] NVARCHAR(MAX),
    [implementation.custodian.display] NVARCHAR(4000),
    [fhirVersion] NVARCHAR(4000),
    [format] VARCHAR(MAX),
    [patchFormat] VARCHAR(MAX),
    [implementationGuide] VARCHAR(MAX),
    [rest] VARCHAR(MAX),
) WITH (
    LOCATION='/CapabilityStatement2/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.CapabilityStatement2Identifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'CapabilityStatement2/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.CapabilityStatement2Contact AS
SELECT
    [id],
    [contact.JSON],
    [contact.id],
    [contact.extension],
    [contact.name],
    [contact.telecom]
FROM openrowset (
        BULK 'CapabilityStatement2/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [contact.JSON]  VARCHAR(MAX) '$.contact'
    ) AS rowset
    CROSS APPLY openjson (rowset.[contact.JSON]) with (
        [contact.id]                   NVARCHAR(100)       '$.id',
        [contact.extension]            NVARCHAR(MAX)       '$.extension',
        [contact.name]                 NVARCHAR(500)       '$.name',
        [contact.telecom]              NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.CapabilityStatement2UseContext AS
SELECT
    [id],
    [useContext.JSON],
    [useContext.id],
    [useContext.extension],
    [useContext.code.id],
    [useContext.code.extension],
    [useContext.code.system],
    [useContext.code.version],
    [useContext.code.code],
    [useContext.code.display],
    [useContext.code.userSelected],
    [useContext.value.codeableConcept.id],
    [useContext.value.codeableConcept.extension],
    [useContext.value.codeableConcept.coding],
    [useContext.value.codeableConcept.text],
    [useContext.value.quantity.id],
    [useContext.value.quantity.extension],
    [useContext.value.quantity.value],
    [useContext.value.quantity.comparator],
    [useContext.value.quantity.unit],
    [useContext.value.quantity.system],
    [useContext.value.quantity.code],
    [useContext.value.range.id],
    [useContext.value.range.extension],
    [useContext.value.range.low],
    [useContext.value.range.high],
    [useContext.value.reference.id],
    [useContext.value.reference.extension],
    [useContext.value.reference.reference],
    [useContext.value.reference.type],
    [useContext.value.reference.identifier],
    [useContext.value.reference.display]
FROM openrowset (
        BULK 'CapabilityStatement2/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [useContext.JSON]  VARCHAR(MAX) '$.useContext'
    ) AS rowset
    CROSS APPLY openjson (rowset.[useContext.JSON]) with (
        [useContext.id]                NVARCHAR(100)       '$.id',
        [useContext.extension]         NVARCHAR(MAX)       '$.extension',
        [useContext.code.id]           NVARCHAR(100)       '$.code.id',
        [useContext.code.extension]    NVARCHAR(MAX)       '$.code.extension',
        [useContext.code.system]       VARCHAR(256)        '$.code.system',
        [useContext.code.version]      NVARCHAR(100)       '$.code.version',
        [useContext.code.code]         NVARCHAR(4000)      '$.code.code',
        [useContext.code.display]      NVARCHAR(4000)      '$.code.display',
        [useContext.code.userSelected] bit                 '$.code.userSelected',
        [useContext.value.codeableConcept.id] NVARCHAR(100)       '$.value.codeableConcept.id',
        [useContext.value.codeableConcept.extension] NVARCHAR(MAX)       '$.value.codeableConcept.extension',
        [useContext.value.codeableConcept.coding] NVARCHAR(MAX)       '$.value.codeableConcept.coding',
        [useContext.value.codeableConcept.text] NVARCHAR(4000)      '$.value.codeableConcept.text',
        [useContext.value.quantity.id] NVARCHAR(100)       '$.value.quantity.id',
        [useContext.value.quantity.extension] NVARCHAR(MAX)       '$.value.quantity.extension',
        [useContext.value.quantity.value] float               '$.value.quantity.value',
        [useContext.value.quantity.comparator] NVARCHAR(64)        '$.value.quantity.comparator',
        [useContext.value.quantity.unit] NVARCHAR(100)       '$.value.quantity.unit',
        [useContext.value.quantity.system] VARCHAR(256)        '$.value.quantity.system',
        [useContext.value.quantity.code] NVARCHAR(4000)      '$.value.quantity.code',
        [useContext.value.range.id]    NVARCHAR(100)       '$.value.range.id',
        [useContext.value.range.extension] NVARCHAR(MAX)       '$.value.range.extension',
        [useContext.value.range.low]   NVARCHAR(MAX)       '$.value.range.low',
        [useContext.value.range.high]  NVARCHAR(MAX)       '$.value.range.high',
        [useContext.value.reference.id] NVARCHAR(100)       '$.value.reference.id',
        [useContext.value.reference.extension] NVARCHAR(MAX)       '$.value.reference.extension',
        [useContext.value.reference.reference] NVARCHAR(4000)      '$.value.reference.reference',
        [useContext.value.reference.type] VARCHAR(256)        '$.value.reference.type',
        [useContext.value.reference.identifier] NVARCHAR(MAX)       '$.value.reference.identifier',
        [useContext.value.reference.display] NVARCHAR(4000)      '$.value.reference.display'
    ) j

GO

CREATE VIEW fhir.CapabilityStatement2Jurisdiction AS
SELECT
    [id],
    [jurisdiction.JSON],
    [jurisdiction.id],
    [jurisdiction.extension],
    [jurisdiction.coding],
    [jurisdiction.text]
FROM openrowset (
        BULK 'CapabilityStatement2/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [jurisdiction.JSON]  VARCHAR(MAX) '$.jurisdiction'
    ) AS rowset
    CROSS APPLY openjson (rowset.[jurisdiction.JSON]) with (
        [jurisdiction.id]              NVARCHAR(100)       '$.id',
        [jurisdiction.extension]       NVARCHAR(MAX)       '$.extension',
        [jurisdiction.coding]          NVARCHAR(MAX)       '$.coding' AS JSON,
        [jurisdiction.text]            NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.CapabilityStatement2Instantiates AS
SELECT
    [id],
    [instantiates.JSON],
    [instantiates]
FROM openrowset (
        BULK 'CapabilityStatement2/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [instantiates.JSON]  VARCHAR(MAX) '$.instantiates'
    ) AS rowset
    CROSS APPLY openjson (rowset.[instantiates.JSON]) with (
        [instantiates]                 NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.CapabilityStatement2Imports AS
SELECT
    [id],
    [imports.JSON],
    [imports]
FROM openrowset (
        BULK 'CapabilityStatement2/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [imports.JSON]  VARCHAR(MAX) '$.imports'
    ) AS rowset
    CROSS APPLY openjson (rowset.[imports.JSON]) with (
        [imports]                      NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.CapabilityStatement2Format AS
SELECT
    [id],
    [format.JSON],
    [format]
FROM openrowset (
        BULK 'CapabilityStatement2/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [format.JSON]  VARCHAR(MAX) '$.format'
    ) AS rowset
    CROSS APPLY openjson (rowset.[format.JSON]) with (
        [format]                       NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.CapabilityStatement2PatchFormat AS
SELECT
    [id],
    [patchFormat.JSON],
    [patchFormat]
FROM openrowset (
        BULK 'CapabilityStatement2/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [patchFormat.JSON]  VARCHAR(MAX) '$.patchFormat'
    ) AS rowset
    CROSS APPLY openjson (rowset.[patchFormat.JSON]) with (
        [patchFormat]                  NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.CapabilityStatement2ImplementationGuide AS
SELECT
    [id],
    [implementationGuide.JSON],
    [implementationGuide]
FROM openrowset (
        BULK 'CapabilityStatement2/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [implementationGuide.JSON]  VARCHAR(MAX) '$.implementationGuide'
    ) AS rowset
    CROSS APPLY openjson (rowset.[implementationGuide.JSON]) with (
        [implementationGuide]          NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.CapabilityStatement2Rest AS
SELECT
    [id],
    [rest.JSON],
    [rest.id],
    [rest.extension],
    [rest.modifierExtension],
    [rest.mode],
    [rest.documentation],
    [rest.feature],
    [rest.resource],
    [rest.interaction],
    [rest.searchParam],
    [rest.operation],
    [rest.compartment]
FROM openrowset (
        BULK 'CapabilityStatement2/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [rest.JSON]  VARCHAR(MAX) '$.rest'
    ) AS rowset
    CROSS APPLY openjson (rowset.[rest.JSON]) with (
        [rest.id]                      NVARCHAR(100)       '$.id',
        [rest.extension]               NVARCHAR(MAX)       '$.extension',
        [rest.modifierExtension]       NVARCHAR(MAX)       '$.modifierExtension',
        [rest.mode]                    NVARCHAR(100)       '$.mode',
        [rest.documentation]           NVARCHAR(MAX)       '$.documentation',
        [rest.feature]                 NVARCHAR(MAX)       '$.feature' AS JSON,
        [rest.resource]                NVARCHAR(MAX)       '$.resource' AS JSON,
        [rest.interaction]             NVARCHAR(MAX)       '$.interaction' AS JSON,
        [rest.searchParam]             NVARCHAR(MAX)       '$.searchParam' AS JSON,
        [rest.operation]               NVARCHAR(MAX)       '$.operation' AS JSON,
        [rest.compartment]             NVARCHAR(MAX)       '$.compartment' AS JSON
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[CarePlan] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [instantiatesCanonical] VARCHAR(MAX),
    [instantiatesUri] VARCHAR(MAX),
    [basedOn] VARCHAR(MAX),
    [replaces] VARCHAR(MAX),
    [partOf] VARCHAR(MAX),
    [status] NVARCHAR(100),
    [intent] NVARCHAR(100),
    [category] VARCHAR(MAX),
    [title] NVARCHAR(4000),
    [description] NVARCHAR(4000),
    [subject.id] NVARCHAR(100),
    [subject.extension] NVARCHAR(MAX),
    [subject.reference] NVARCHAR(4000),
    [subject.type] VARCHAR(256),
    [subject.identifier.id] NVARCHAR(100),
    [subject.identifier.extension] NVARCHAR(MAX),
    [subject.identifier.use] NVARCHAR(64),
    [subject.identifier.type] NVARCHAR(MAX),
    [subject.identifier.system] VARCHAR(256),
    [subject.identifier.value] NVARCHAR(4000),
    [subject.identifier.period] NVARCHAR(MAX),
    [subject.identifier.assigner] NVARCHAR(MAX),
    [subject.display] NVARCHAR(4000),
    [encounter.id] NVARCHAR(100),
    [encounter.extension] NVARCHAR(MAX),
    [encounter.reference] NVARCHAR(4000),
    [encounter.type] VARCHAR(256),
    [encounter.identifier.id] NVARCHAR(100),
    [encounter.identifier.extension] NVARCHAR(MAX),
    [encounter.identifier.use] NVARCHAR(64),
    [encounter.identifier.type] NVARCHAR(MAX),
    [encounter.identifier.system] VARCHAR(256),
    [encounter.identifier.value] NVARCHAR(4000),
    [encounter.identifier.period] NVARCHAR(MAX),
    [encounter.identifier.assigner] NVARCHAR(MAX),
    [encounter.display] NVARCHAR(4000),
    [period.id] NVARCHAR(100),
    [period.extension] NVARCHAR(MAX),
    [period.start] VARCHAR(64),
    [period.end] VARCHAR(64),
    [created] VARCHAR(64),
    [author.id] NVARCHAR(100),
    [author.extension] NVARCHAR(MAX),
    [author.reference] NVARCHAR(4000),
    [author.type] VARCHAR(256),
    [author.identifier.id] NVARCHAR(100),
    [author.identifier.extension] NVARCHAR(MAX),
    [author.identifier.use] NVARCHAR(64),
    [author.identifier.type] NVARCHAR(MAX),
    [author.identifier.system] VARCHAR(256),
    [author.identifier.value] NVARCHAR(4000),
    [author.identifier.period] NVARCHAR(MAX),
    [author.identifier.assigner] NVARCHAR(MAX),
    [author.display] NVARCHAR(4000),
    [contributor] VARCHAR(MAX),
    [careTeam] VARCHAR(MAX),
    [addresses] VARCHAR(MAX),
    [supportingInfo] VARCHAR(MAX),
    [goal] VARCHAR(MAX),
    [activity] VARCHAR(MAX),
    [note] VARCHAR(MAX),
) WITH (
    LOCATION='/CarePlan/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.CarePlanIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'CarePlan/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.CarePlanInstantiatesCanonical AS
SELECT
    [id],
    [instantiatesCanonical.JSON],
    [instantiatesCanonical]
FROM openrowset (
        BULK 'CarePlan/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [instantiatesCanonical.JSON]  VARCHAR(MAX) '$.instantiatesCanonical'
    ) AS rowset
    CROSS APPLY openjson (rowset.[instantiatesCanonical.JSON]) with (
        [instantiatesCanonical]        NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.CarePlanInstantiatesUri AS
SELECT
    [id],
    [instantiatesUri.JSON],
    [instantiatesUri]
FROM openrowset (
        BULK 'CarePlan/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [instantiatesUri.JSON]  VARCHAR(MAX) '$.instantiatesUri'
    ) AS rowset
    CROSS APPLY openjson (rowset.[instantiatesUri.JSON]) with (
        [instantiatesUri]              NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.CarePlanBasedOn AS
SELECT
    [id],
    [basedOn.JSON],
    [basedOn.id],
    [basedOn.extension],
    [basedOn.reference],
    [basedOn.type],
    [basedOn.identifier.id],
    [basedOn.identifier.extension],
    [basedOn.identifier.use],
    [basedOn.identifier.type],
    [basedOn.identifier.system],
    [basedOn.identifier.value],
    [basedOn.identifier.period],
    [basedOn.identifier.assigner],
    [basedOn.display]
FROM openrowset (
        BULK 'CarePlan/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [basedOn.JSON]  VARCHAR(MAX) '$.basedOn'
    ) AS rowset
    CROSS APPLY openjson (rowset.[basedOn.JSON]) with (
        [basedOn.id]                   NVARCHAR(100)       '$.id',
        [basedOn.extension]            NVARCHAR(MAX)       '$.extension',
        [basedOn.reference]            NVARCHAR(4000)      '$.reference',
        [basedOn.type]                 VARCHAR(256)        '$.type',
        [basedOn.identifier.id]        NVARCHAR(100)       '$.identifier.id',
        [basedOn.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [basedOn.identifier.use]       NVARCHAR(64)        '$.identifier.use',
        [basedOn.identifier.type]      NVARCHAR(MAX)       '$.identifier.type',
        [basedOn.identifier.system]    VARCHAR(256)        '$.identifier.system',
        [basedOn.identifier.value]     NVARCHAR(4000)      '$.identifier.value',
        [basedOn.identifier.period]    NVARCHAR(MAX)       '$.identifier.period',
        [basedOn.identifier.assigner]  NVARCHAR(MAX)       '$.identifier.assigner',
        [basedOn.display]              NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.CarePlanReplaces AS
SELECT
    [id],
    [replaces.JSON],
    [replaces.id],
    [replaces.extension],
    [replaces.reference],
    [replaces.type],
    [replaces.identifier.id],
    [replaces.identifier.extension],
    [replaces.identifier.use],
    [replaces.identifier.type],
    [replaces.identifier.system],
    [replaces.identifier.value],
    [replaces.identifier.period],
    [replaces.identifier.assigner],
    [replaces.display]
FROM openrowset (
        BULK 'CarePlan/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [replaces.JSON]  VARCHAR(MAX) '$.replaces'
    ) AS rowset
    CROSS APPLY openjson (rowset.[replaces.JSON]) with (
        [replaces.id]                  NVARCHAR(100)       '$.id',
        [replaces.extension]           NVARCHAR(MAX)       '$.extension',
        [replaces.reference]           NVARCHAR(4000)      '$.reference',
        [replaces.type]                VARCHAR(256)        '$.type',
        [replaces.identifier.id]       NVARCHAR(100)       '$.identifier.id',
        [replaces.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [replaces.identifier.use]      NVARCHAR(64)        '$.identifier.use',
        [replaces.identifier.type]     NVARCHAR(MAX)       '$.identifier.type',
        [replaces.identifier.system]   VARCHAR(256)        '$.identifier.system',
        [replaces.identifier.value]    NVARCHAR(4000)      '$.identifier.value',
        [replaces.identifier.period]   NVARCHAR(MAX)       '$.identifier.period',
        [replaces.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [replaces.display]             NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.CarePlanPartOf AS
SELECT
    [id],
    [partOf.JSON],
    [partOf.id],
    [partOf.extension],
    [partOf.reference],
    [partOf.type],
    [partOf.identifier.id],
    [partOf.identifier.extension],
    [partOf.identifier.use],
    [partOf.identifier.type],
    [partOf.identifier.system],
    [partOf.identifier.value],
    [partOf.identifier.period],
    [partOf.identifier.assigner],
    [partOf.display]
FROM openrowset (
        BULK 'CarePlan/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [partOf.JSON]  VARCHAR(MAX) '$.partOf'
    ) AS rowset
    CROSS APPLY openjson (rowset.[partOf.JSON]) with (
        [partOf.id]                    NVARCHAR(100)       '$.id',
        [partOf.extension]             NVARCHAR(MAX)       '$.extension',
        [partOf.reference]             NVARCHAR(4000)      '$.reference',
        [partOf.type]                  VARCHAR(256)        '$.type',
        [partOf.identifier.id]         NVARCHAR(100)       '$.identifier.id',
        [partOf.identifier.extension]  NVARCHAR(MAX)       '$.identifier.extension',
        [partOf.identifier.use]        NVARCHAR(64)        '$.identifier.use',
        [partOf.identifier.type]       NVARCHAR(MAX)       '$.identifier.type',
        [partOf.identifier.system]     VARCHAR(256)        '$.identifier.system',
        [partOf.identifier.value]      NVARCHAR(4000)      '$.identifier.value',
        [partOf.identifier.period]     NVARCHAR(MAX)       '$.identifier.period',
        [partOf.identifier.assigner]   NVARCHAR(MAX)       '$.identifier.assigner',
        [partOf.display]               NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.CarePlanCategory AS
SELECT
    [id],
    [category.JSON],
    [category.id],
    [category.extension],
    [category.coding],
    [category.text]
FROM openrowset (
        BULK 'CarePlan/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [category.JSON]  VARCHAR(MAX) '$.category'
    ) AS rowset
    CROSS APPLY openjson (rowset.[category.JSON]) with (
        [category.id]                  NVARCHAR(100)       '$.id',
        [category.extension]           NVARCHAR(MAX)       '$.extension',
        [category.coding]              NVARCHAR(MAX)       '$.coding' AS JSON,
        [category.text]                NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.CarePlanContributor AS
SELECT
    [id],
    [contributor.JSON],
    [contributor.id],
    [contributor.extension],
    [contributor.reference],
    [contributor.type],
    [contributor.identifier.id],
    [contributor.identifier.extension],
    [contributor.identifier.use],
    [contributor.identifier.type],
    [contributor.identifier.system],
    [contributor.identifier.value],
    [contributor.identifier.period],
    [contributor.identifier.assigner],
    [contributor.display]
FROM openrowset (
        BULK 'CarePlan/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [contributor.JSON]  VARCHAR(MAX) '$.contributor'
    ) AS rowset
    CROSS APPLY openjson (rowset.[contributor.JSON]) with (
        [contributor.id]               NVARCHAR(100)       '$.id',
        [contributor.extension]        NVARCHAR(MAX)       '$.extension',
        [contributor.reference]        NVARCHAR(4000)      '$.reference',
        [contributor.type]             VARCHAR(256)        '$.type',
        [contributor.identifier.id]    NVARCHAR(100)       '$.identifier.id',
        [contributor.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [contributor.identifier.use]   NVARCHAR(64)        '$.identifier.use',
        [contributor.identifier.type]  NVARCHAR(MAX)       '$.identifier.type',
        [contributor.identifier.system] VARCHAR(256)        '$.identifier.system',
        [contributor.identifier.value] NVARCHAR(4000)      '$.identifier.value',
        [contributor.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [contributor.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [contributor.display]          NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.CarePlanCareTeam AS
SELECT
    [id],
    [careTeam.JSON],
    [careTeam.id],
    [careTeam.extension],
    [careTeam.reference],
    [careTeam.type],
    [careTeam.identifier.id],
    [careTeam.identifier.extension],
    [careTeam.identifier.use],
    [careTeam.identifier.type],
    [careTeam.identifier.system],
    [careTeam.identifier.value],
    [careTeam.identifier.period],
    [careTeam.identifier.assigner],
    [careTeam.display]
FROM openrowset (
        BULK 'CarePlan/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [careTeam.JSON]  VARCHAR(MAX) '$.careTeam'
    ) AS rowset
    CROSS APPLY openjson (rowset.[careTeam.JSON]) with (
        [careTeam.id]                  NVARCHAR(100)       '$.id',
        [careTeam.extension]           NVARCHAR(MAX)       '$.extension',
        [careTeam.reference]           NVARCHAR(4000)      '$.reference',
        [careTeam.type]                VARCHAR(256)        '$.type',
        [careTeam.identifier.id]       NVARCHAR(100)       '$.identifier.id',
        [careTeam.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [careTeam.identifier.use]      NVARCHAR(64)        '$.identifier.use',
        [careTeam.identifier.type]     NVARCHAR(MAX)       '$.identifier.type',
        [careTeam.identifier.system]   VARCHAR(256)        '$.identifier.system',
        [careTeam.identifier.value]    NVARCHAR(4000)      '$.identifier.value',
        [careTeam.identifier.period]   NVARCHAR(MAX)       '$.identifier.period',
        [careTeam.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [careTeam.display]             NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.CarePlanAddresses AS
SELECT
    [id],
    [addresses.JSON],
    [addresses.id],
    [addresses.extension],
    [addresses.concept.id],
    [addresses.concept.extension],
    [addresses.concept.coding],
    [addresses.concept.text],
    [addresses.reference.id],
    [addresses.reference.extension],
    [addresses.reference.reference],
    [addresses.reference.type],
    [addresses.reference.identifier],
    [addresses.reference.display]
FROM openrowset (
        BULK 'CarePlan/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [addresses.JSON]  VARCHAR(MAX) '$.addresses'
    ) AS rowset
    CROSS APPLY openjson (rowset.[addresses.JSON]) with (
        [addresses.id]                 NVARCHAR(100)       '$.id',
        [addresses.extension]          NVARCHAR(MAX)       '$.extension',
        [addresses.concept.id]         NVARCHAR(100)       '$.concept.id',
        [addresses.concept.extension]  NVARCHAR(MAX)       '$.concept.extension',
        [addresses.concept.coding]     NVARCHAR(MAX)       '$.concept.coding',
        [addresses.concept.text]       NVARCHAR(4000)      '$.concept.text',
        [addresses.reference.id]       NVARCHAR(100)       '$.reference.id',
        [addresses.reference.extension] NVARCHAR(MAX)       '$.reference.extension',
        [addresses.reference.reference] NVARCHAR(4000)      '$.reference.reference',
        [addresses.reference.type]     VARCHAR(256)        '$.reference.type',
        [addresses.reference.identifier] NVARCHAR(MAX)       '$.reference.identifier',
        [addresses.reference.display]  NVARCHAR(4000)      '$.reference.display'
    ) j

GO

CREATE VIEW fhir.CarePlanSupportingInfo AS
SELECT
    [id],
    [supportingInfo.JSON],
    [supportingInfo.id],
    [supportingInfo.extension],
    [supportingInfo.reference],
    [supportingInfo.type],
    [supportingInfo.identifier.id],
    [supportingInfo.identifier.extension],
    [supportingInfo.identifier.use],
    [supportingInfo.identifier.type],
    [supportingInfo.identifier.system],
    [supportingInfo.identifier.value],
    [supportingInfo.identifier.period],
    [supportingInfo.identifier.assigner],
    [supportingInfo.display]
FROM openrowset (
        BULK 'CarePlan/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [supportingInfo.JSON]  VARCHAR(MAX) '$.supportingInfo'
    ) AS rowset
    CROSS APPLY openjson (rowset.[supportingInfo.JSON]) with (
        [supportingInfo.id]            NVARCHAR(100)       '$.id',
        [supportingInfo.extension]     NVARCHAR(MAX)       '$.extension',
        [supportingInfo.reference]     NVARCHAR(4000)      '$.reference',
        [supportingInfo.type]          VARCHAR(256)        '$.type',
        [supportingInfo.identifier.id] NVARCHAR(100)       '$.identifier.id',
        [supportingInfo.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [supportingInfo.identifier.use] NVARCHAR(64)        '$.identifier.use',
        [supportingInfo.identifier.type] NVARCHAR(MAX)       '$.identifier.type',
        [supportingInfo.identifier.system] VARCHAR(256)        '$.identifier.system',
        [supportingInfo.identifier.value] NVARCHAR(4000)      '$.identifier.value',
        [supportingInfo.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [supportingInfo.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [supportingInfo.display]       NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.CarePlanGoal AS
SELECT
    [id],
    [goal.JSON],
    [goal.id],
    [goal.extension],
    [goal.reference],
    [goal.type],
    [goal.identifier.id],
    [goal.identifier.extension],
    [goal.identifier.use],
    [goal.identifier.type],
    [goal.identifier.system],
    [goal.identifier.value],
    [goal.identifier.period],
    [goal.identifier.assigner],
    [goal.display]
FROM openrowset (
        BULK 'CarePlan/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [goal.JSON]  VARCHAR(MAX) '$.goal'
    ) AS rowset
    CROSS APPLY openjson (rowset.[goal.JSON]) with (
        [goal.id]                      NVARCHAR(100)       '$.id',
        [goal.extension]               NVARCHAR(MAX)       '$.extension',
        [goal.reference]               NVARCHAR(4000)      '$.reference',
        [goal.type]                    VARCHAR(256)        '$.type',
        [goal.identifier.id]           NVARCHAR(100)       '$.identifier.id',
        [goal.identifier.extension]    NVARCHAR(MAX)       '$.identifier.extension',
        [goal.identifier.use]          NVARCHAR(64)        '$.identifier.use',
        [goal.identifier.type]         NVARCHAR(MAX)       '$.identifier.type',
        [goal.identifier.system]       VARCHAR(256)        '$.identifier.system',
        [goal.identifier.value]        NVARCHAR(4000)      '$.identifier.value',
        [goal.identifier.period]       NVARCHAR(MAX)       '$.identifier.period',
        [goal.identifier.assigner]     NVARCHAR(MAX)       '$.identifier.assigner',
        [goal.display]                 NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.CarePlanActivity AS
SELECT
    [id],
    [activity.JSON],
    [activity.id],
    [activity.extension],
    [activity.modifierExtension],
    [activity.performedActivity],
    [activity.progress],
    [activity.plannedActivityReference.id],
    [activity.plannedActivityReference.extension],
    [activity.plannedActivityReference.reference],
    [activity.plannedActivityReference.type],
    [activity.plannedActivityReference.identifier],
    [activity.plannedActivityReference.display],
    [activity.plannedActivityDetail.id],
    [activity.plannedActivityDetail.extension],
    [activity.plannedActivityDetail.modifierExtension],
    [activity.plannedActivityDetail.kind],
    [activity.plannedActivityDetail.instantiatesCanonical],
    [activity.plannedActivityDetail.instantiatesUri],
    [activity.plannedActivityDetail.code],
    [activity.plannedActivityDetail.reason],
    [activity.plannedActivityDetail.goal],
    [activity.plannedActivityDetail.status],
    [activity.plannedActivityDetail.statusReason],
    [activity.plannedActivityDetail.doNotPerform],
    [activity.plannedActivityDetail.location],
    [activity.plannedActivityDetail.performer],
    [activity.plannedActivityDetail.dailyAmount],
    [activity.plannedActivityDetail.quantity],
    [activity.plannedActivityDetail.description],
    [activity.plannedActivityDetail.scheduled.timing],
    [activity.plannedActivityDetail.scheduled.period],
    [activity.plannedActivityDetail.scheduled.string],
    [activity.plannedActivityDetail.reported.boolean],
    [activity.plannedActivityDetail.reported.reference],
    [activity.plannedActivityDetail.product.codeableConcept],
    [activity.plannedActivityDetail.product.reference]
FROM openrowset (
        BULK 'CarePlan/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [activity.JSON]  VARCHAR(MAX) '$.activity'
    ) AS rowset
    CROSS APPLY openjson (rowset.[activity.JSON]) with (
        [activity.id]                  NVARCHAR(100)       '$.id',
        [activity.extension]           NVARCHAR(MAX)       '$.extension',
        [activity.modifierExtension]   NVARCHAR(MAX)       '$.modifierExtension',
        [activity.performedActivity]   NVARCHAR(MAX)       '$.performedActivity' AS JSON,
        [activity.progress]            NVARCHAR(MAX)       '$.progress' AS JSON,
        [activity.plannedActivityReference.id] NVARCHAR(100)       '$.plannedActivityReference.id',
        [activity.plannedActivityReference.extension] NVARCHAR(MAX)       '$.plannedActivityReference.extension',
        [activity.plannedActivityReference.reference] NVARCHAR(4000)      '$.plannedActivityReference.reference',
        [activity.plannedActivityReference.type] VARCHAR(256)        '$.plannedActivityReference.type',
        [activity.plannedActivityReference.identifier] NVARCHAR(MAX)       '$.plannedActivityReference.identifier',
        [activity.plannedActivityReference.display] NVARCHAR(4000)      '$.plannedActivityReference.display',
        [activity.plannedActivityDetail.id] NVARCHAR(100)       '$.plannedActivityDetail.id',
        [activity.plannedActivityDetail.extension] NVARCHAR(MAX)       '$.plannedActivityDetail.extension',
        [activity.plannedActivityDetail.modifierExtension] NVARCHAR(MAX)       '$.plannedActivityDetail.modifierExtension',
        [activity.plannedActivityDetail.kind] NVARCHAR(100)       '$.plannedActivityDetail.kind',
        [activity.plannedActivityDetail.instantiatesCanonical] NVARCHAR(MAX)       '$.plannedActivityDetail.instantiatesCanonical',
        [activity.plannedActivityDetail.instantiatesUri] NVARCHAR(MAX)       '$.plannedActivityDetail.instantiatesUri',
        [activity.plannedActivityDetail.code] NVARCHAR(MAX)       '$.plannedActivityDetail.code',
        [activity.plannedActivityDetail.reason] NVARCHAR(MAX)       '$.plannedActivityDetail.reason',
        [activity.plannedActivityDetail.goal] NVARCHAR(MAX)       '$.plannedActivityDetail.goal',
        [activity.plannedActivityDetail.status] NVARCHAR(100)       '$.plannedActivityDetail.status',
        [activity.plannedActivityDetail.statusReason] NVARCHAR(MAX)       '$.plannedActivityDetail.statusReason',
        [activity.plannedActivityDetail.doNotPerform] bit                 '$.plannedActivityDetail.doNotPerform',
        [activity.plannedActivityDetail.location] NVARCHAR(MAX)       '$.plannedActivityDetail.location',
        [activity.plannedActivityDetail.performer] NVARCHAR(MAX)       '$.plannedActivityDetail.performer',
        [activity.plannedActivityDetail.dailyAmount] NVARCHAR(MAX)       '$.plannedActivityDetail.dailyAmount',
        [activity.plannedActivityDetail.quantity] NVARCHAR(MAX)       '$.plannedActivityDetail.quantity',
        [activity.plannedActivityDetail.description] NVARCHAR(4000)      '$.plannedActivityDetail.description',
        [activity.plannedActivityDetail.scheduled.timing] NVARCHAR(MAX)       '$.plannedActivityDetail.scheduled.timing',
        [activity.plannedActivityDetail.scheduled.period] NVARCHAR(MAX)       '$.plannedActivityDetail.scheduled.period',
        [activity.plannedActivityDetail.scheduled.string] NVARCHAR(4000)      '$.plannedActivityDetail.scheduled.string',
        [activity.plannedActivityDetail.reported.boolean] bit                 '$.plannedActivityDetail.reported.boolean',
        [activity.plannedActivityDetail.reported.reference] NVARCHAR(MAX)       '$.plannedActivityDetail.reported.reference',
        [activity.plannedActivityDetail.product.codeableConcept] NVARCHAR(MAX)       '$.plannedActivityDetail.product.codeableConcept',
        [activity.plannedActivityDetail.product.reference] NVARCHAR(MAX)       '$.plannedActivityDetail.product.reference'
    ) j

GO

CREATE VIEW fhir.CarePlanNote AS
SELECT
    [id],
    [note.JSON],
    [note.id],
    [note.extension],
    [note.time],
    [note.text],
    [note.author.reference.id],
    [note.author.reference.extension],
    [note.author.reference.reference],
    [note.author.reference.type],
    [note.author.reference.identifier],
    [note.author.reference.display],
    [note.author.string]
FROM openrowset (
        BULK 'CarePlan/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [note.JSON]  VARCHAR(MAX) '$.note'
    ) AS rowset
    CROSS APPLY openjson (rowset.[note.JSON]) with (
        [note.id]                      NVARCHAR(100)       '$.id',
        [note.extension]               NVARCHAR(MAX)       '$.extension',
        [note.time]                    VARCHAR(64)         '$.time',
        [note.text]                    NVARCHAR(MAX)       '$.text',
        [note.author.reference.id]     NVARCHAR(100)       '$.author.reference.id',
        [note.author.reference.extension] NVARCHAR(MAX)       '$.author.reference.extension',
        [note.author.reference.reference] NVARCHAR(4000)      '$.author.reference.reference',
        [note.author.reference.type]   VARCHAR(256)        '$.author.reference.type',
        [note.author.reference.identifier] NVARCHAR(MAX)       '$.author.reference.identifier',
        [note.author.reference.display] NVARCHAR(4000)      '$.author.reference.display',
        [note.author.string]           NVARCHAR(4000)      '$.author.string'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[CareTeam] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [status] NVARCHAR(100),
    [category] VARCHAR(MAX),
    [name] NVARCHAR(500),
    [subject.id] NVARCHAR(100),
    [subject.extension] NVARCHAR(MAX),
    [subject.reference] NVARCHAR(4000),
    [subject.type] VARCHAR(256),
    [subject.identifier.id] NVARCHAR(100),
    [subject.identifier.extension] NVARCHAR(MAX),
    [subject.identifier.use] NVARCHAR(64),
    [subject.identifier.type] NVARCHAR(MAX),
    [subject.identifier.system] VARCHAR(256),
    [subject.identifier.value] NVARCHAR(4000),
    [subject.identifier.period] NVARCHAR(MAX),
    [subject.identifier.assigner] NVARCHAR(MAX),
    [subject.display] NVARCHAR(4000),
    [period.id] NVARCHAR(100),
    [period.extension] NVARCHAR(MAX),
    [period.start] VARCHAR(64),
    [period.end] VARCHAR(64),
    [participant] VARCHAR(MAX),
    [reason] VARCHAR(MAX),
    [managingOrganization] VARCHAR(MAX),
    [telecom] VARCHAR(MAX),
    [note] VARCHAR(MAX),
) WITH (
    LOCATION='/CareTeam/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.CareTeamIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'CareTeam/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.CareTeamCategory AS
SELECT
    [id],
    [category.JSON],
    [category.id],
    [category.extension],
    [category.coding],
    [category.text]
FROM openrowset (
        BULK 'CareTeam/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [category.JSON]  VARCHAR(MAX) '$.category'
    ) AS rowset
    CROSS APPLY openjson (rowset.[category.JSON]) with (
        [category.id]                  NVARCHAR(100)       '$.id',
        [category.extension]           NVARCHAR(MAX)       '$.extension',
        [category.coding]              NVARCHAR(MAX)       '$.coding' AS JSON,
        [category.text]                NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.CareTeamParticipant AS
SELECT
    [id],
    [participant.JSON],
    [participant.id],
    [participant.extension],
    [participant.modifierExtension],
    [participant.role.id],
    [participant.role.extension],
    [participant.role.coding],
    [participant.role.text],
    [participant.member.id],
    [participant.member.extension],
    [participant.member.reference],
    [participant.member.type],
    [participant.member.identifier],
    [participant.member.display],
    [participant.onBehalfOf.id],
    [participant.onBehalfOf.extension],
    [participant.onBehalfOf.reference],
    [participant.onBehalfOf.type],
    [participant.onBehalfOf.identifier],
    [participant.onBehalfOf.display],
    [participant.coverage.period.id],
    [participant.coverage.period.extension],
    [participant.coverage.period.start],
    [participant.coverage.period.end],
    [participant.coverage.timing.id],
    [participant.coverage.timing.extension],
    [participant.coverage.timing.modifierExtension],
    [participant.coverage.timing.event],
    [participant.coverage.timing.repeat],
    [participant.coverage.timing.code]
FROM openrowset (
        BULK 'CareTeam/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [participant.JSON]  VARCHAR(MAX) '$.participant'
    ) AS rowset
    CROSS APPLY openjson (rowset.[participant.JSON]) with (
        [participant.id]               NVARCHAR(100)       '$.id',
        [participant.extension]        NVARCHAR(MAX)       '$.extension',
        [participant.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [participant.role.id]          NVARCHAR(100)       '$.role.id',
        [participant.role.extension]   NVARCHAR(MAX)       '$.role.extension',
        [participant.role.coding]      NVARCHAR(MAX)       '$.role.coding',
        [participant.role.text]        NVARCHAR(4000)      '$.role.text',
        [participant.member.id]        NVARCHAR(100)       '$.member.id',
        [participant.member.extension] NVARCHAR(MAX)       '$.member.extension',
        [participant.member.reference] NVARCHAR(4000)      '$.member.reference',
        [participant.member.type]      VARCHAR(256)        '$.member.type',
        [participant.member.identifier] NVARCHAR(MAX)       '$.member.identifier',
        [participant.member.display]   NVARCHAR(4000)      '$.member.display',
        [participant.onBehalfOf.id]    NVARCHAR(100)       '$.onBehalfOf.id',
        [participant.onBehalfOf.extension] NVARCHAR(MAX)       '$.onBehalfOf.extension',
        [participant.onBehalfOf.reference] NVARCHAR(4000)      '$.onBehalfOf.reference',
        [participant.onBehalfOf.type]  VARCHAR(256)        '$.onBehalfOf.type',
        [participant.onBehalfOf.identifier] NVARCHAR(MAX)       '$.onBehalfOf.identifier',
        [participant.onBehalfOf.display] NVARCHAR(4000)      '$.onBehalfOf.display',
        [participant.coverage.period.id] NVARCHAR(100)       '$.coverage.period.id',
        [participant.coverage.period.extension] NVARCHAR(MAX)       '$.coverage.period.extension',
        [participant.coverage.period.start] VARCHAR(64)         '$.coverage.period.start',
        [participant.coverage.period.end] VARCHAR(64)         '$.coverage.period.end',
        [participant.coverage.timing.id] NVARCHAR(100)       '$.coverage.timing.id',
        [participant.coverage.timing.extension] NVARCHAR(MAX)       '$.coverage.timing.extension',
        [participant.coverage.timing.modifierExtension] NVARCHAR(MAX)       '$.coverage.timing.modifierExtension',
        [participant.coverage.timing.event] NVARCHAR(MAX)       '$.coverage.timing.event',
        [participant.coverage.timing.repeat] NVARCHAR(MAX)       '$.coverage.timing.repeat',
        [participant.coverage.timing.code] NVARCHAR(MAX)       '$.coverage.timing.code'
    ) j

GO

CREATE VIEW fhir.CareTeamReason AS
SELECT
    [id],
    [reason.JSON],
    [reason.id],
    [reason.extension],
    [reason.concept.id],
    [reason.concept.extension],
    [reason.concept.coding],
    [reason.concept.text],
    [reason.reference.id],
    [reason.reference.extension],
    [reason.reference.reference],
    [reason.reference.type],
    [reason.reference.identifier],
    [reason.reference.display]
FROM openrowset (
        BULK 'CareTeam/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [reason.JSON]  VARCHAR(MAX) '$.reason'
    ) AS rowset
    CROSS APPLY openjson (rowset.[reason.JSON]) with (
        [reason.id]                    NVARCHAR(100)       '$.id',
        [reason.extension]             NVARCHAR(MAX)       '$.extension',
        [reason.concept.id]            NVARCHAR(100)       '$.concept.id',
        [reason.concept.extension]     NVARCHAR(MAX)       '$.concept.extension',
        [reason.concept.coding]        NVARCHAR(MAX)       '$.concept.coding',
        [reason.concept.text]          NVARCHAR(4000)      '$.concept.text',
        [reason.reference.id]          NVARCHAR(100)       '$.reference.id',
        [reason.reference.extension]   NVARCHAR(MAX)       '$.reference.extension',
        [reason.reference.reference]   NVARCHAR(4000)      '$.reference.reference',
        [reason.reference.type]        VARCHAR(256)        '$.reference.type',
        [reason.reference.identifier]  NVARCHAR(MAX)       '$.reference.identifier',
        [reason.reference.display]     NVARCHAR(4000)      '$.reference.display'
    ) j

GO

CREATE VIEW fhir.CareTeamManagingOrganization AS
SELECT
    [id],
    [managingOrganization.JSON],
    [managingOrganization.id],
    [managingOrganization.extension],
    [managingOrganization.reference],
    [managingOrganization.type],
    [managingOrganization.identifier.id],
    [managingOrganization.identifier.extension],
    [managingOrganization.identifier.use],
    [managingOrganization.identifier.type],
    [managingOrganization.identifier.system],
    [managingOrganization.identifier.value],
    [managingOrganization.identifier.period],
    [managingOrganization.identifier.assigner],
    [managingOrganization.display]
FROM openrowset (
        BULK 'CareTeam/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [managingOrganization.JSON]  VARCHAR(MAX) '$.managingOrganization'
    ) AS rowset
    CROSS APPLY openjson (rowset.[managingOrganization.JSON]) with (
        [managingOrganization.id]      NVARCHAR(100)       '$.id',
        [managingOrganization.extension] NVARCHAR(MAX)       '$.extension',
        [managingOrganization.reference] NVARCHAR(4000)      '$.reference',
        [managingOrganization.type]    VARCHAR(256)        '$.type',
        [managingOrganization.identifier.id] NVARCHAR(100)       '$.identifier.id',
        [managingOrganization.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [managingOrganization.identifier.use] NVARCHAR(64)        '$.identifier.use',
        [managingOrganization.identifier.type] NVARCHAR(MAX)       '$.identifier.type',
        [managingOrganization.identifier.system] VARCHAR(256)        '$.identifier.system',
        [managingOrganization.identifier.value] NVARCHAR(4000)      '$.identifier.value',
        [managingOrganization.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [managingOrganization.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [managingOrganization.display] NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.CareTeamTelecom AS
SELECT
    [id],
    [telecom.JSON],
    [telecom.id],
    [telecom.extension],
    [telecom.system],
    [telecom.value],
    [telecom.use],
    [telecom.rank],
    [telecom.period.id],
    [telecom.period.extension],
    [telecom.period.start],
    [telecom.period.end]
FROM openrowset (
        BULK 'CareTeam/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [telecom.JSON]  VARCHAR(MAX) '$.telecom'
    ) AS rowset
    CROSS APPLY openjson (rowset.[telecom.JSON]) with (
        [telecom.id]                   NVARCHAR(100)       '$.id',
        [telecom.extension]            NVARCHAR(MAX)       '$.extension',
        [telecom.system]               NVARCHAR(64)        '$.system',
        [telecom.value]                NVARCHAR(4000)      '$.value',
        [telecom.use]                  NVARCHAR(64)        '$.use',
        [telecom.rank]                 bigint              '$.rank',
        [telecom.period.id]            NVARCHAR(100)       '$.period.id',
        [telecom.period.extension]     NVARCHAR(MAX)       '$.period.extension',
        [telecom.period.start]         VARCHAR(64)         '$.period.start',
        [telecom.period.end]           VARCHAR(64)         '$.period.end'
    ) j

GO

CREATE VIEW fhir.CareTeamNote AS
SELECT
    [id],
    [note.JSON],
    [note.id],
    [note.extension],
    [note.time],
    [note.text],
    [note.author.reference.id],
    [note.author.reference.extension],
    [note.author.reference.reference],
    [note.author.reference.type],
    [note.author.reference.identifier],
    [note.author.reference.display],
    [note.author.string]
FROM openrowset (
        BULK 'CareTeam/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [note.JSON]  VARCHAR(MAX) '$.note'
    ) AS rowset
    CROSS APPLY openjson (rowset.[note.JSON]) with (
        [note.id]                      NVARCHAR(100)       '$.id',
        [note.extension]               NVARCHAR(MAX)       '$.extension',
        [note.time]                    VARCHAR(64)         '$.time',
        [note.text]                    NVARCHAR(MAX)       '$.text',
        [note.author.reference.id]     NVARCHAR(100)       '$.author.reference.id',
        [note.author.reference.extension] NVARCHAR(MAX)       '$.author.reference.extension',
        [note.author.reference.reference] NVARCHAR(4000)      '$.author.reference.reference',
        [note.author.reference.type]   VARCHAR(256)        '$.author.reference.type',
        [note.author.reference.identifier] NVARCHAR(MAX)       '$.author.reference.identifier',
        [note.author.reference.display] NVARCHAR(4000)      '$.author.reference.display',
        [note.author.string]           NVARCHAR(4000)      '$.author.string'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[ChargeItem] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [definitionUri] VARCHAR(MAX),
    [definitionCanonical] VARCHAR(MAX),
    [status] NVARCHAR(100),
    [partOf] VARCHAR(MAX),
    [code.id] NVARCHAR(100),
    [code.extension] NVARCHAR(MAX),
    [code.coding] VARCHAR(MAX),
    [code.text] NVARCHAR(4000),
    [subject.id] NVARCHAR(100),
    [subject.extension] NVARCHAR(MAX),
    [subject.reference] NVARCHAR(4000),
    [subject.type] VARCHAR(256),
    [subject.identifier.id] NVARCHAR(100),
    [subject.identifier.extension] NVARCHAR(MAX),
    [subject.identifier.use] NVARCHAR(64),
    [subject.identifier.type] NVARCHAR(MAX),
    [subject.identifier.system] VARCHAR(256),
    [subject.identifier.value] NVARCHAR(4000),
    [subject.identifier.period] NVARCHAR(MAX),
    [subject.identifier.assigner] NVARCHAR(MAX),
    [subject.display] NVARCHAR(4000),
    [context.id] NVARCHAR(100),
    [context.extension] NVARCHAR(MAX),
    [context.reference] NVARCHAR(4000),
    [context.type] VARCHAR(256),
    [context.identifier.id] NVARCHAR(100),
    [context.identifier.extension] NVARCHAR(MAX),
    [context.identifier.use] NVARCHAR(64),
    [context.identifier.type] NVARCHAR(MAX),
    [context.identifier.system] VARCHAR(256),
    [context.identifier.value] NVARCHAR(4000),
    [context.identifier.period] NVARCHAR(MAX),
    [context.identifier.assigner] NVARCHAR(MAX),
    [context.display] NVARCHAR(4000),
    [performer] VARCHAR(MAX),
    [performingOrganization.id] NVARCHAR(100),
    [performingOrganization.extension] NVARCHAR(MAX),
    [performingOrganization.reference] NVARCHAR(4000),
    [performingOrganization.type] VARCHAR(256),
    [performingOrganization.identifier.id] NVARCHAR(100),
    [performingOrganization.identifier.extension] NVARCHAR(MAX),
    [performingOrganization.identifier.use] NVARCHAR(64),
    [performingOrganization.identifier.type] NVARCHAR(MAX),
    [performingOrganization.identifier.system] VARCHAR(256),
    [performingOrganization.identifier.value] NVARCHAR(4000),
    [performingOrganization.identifier.period] NVARCHAR(MAX),
    [performingOrganization.identifier.assigner] NVARCHAR(MAX),
    [performingOrganization.display] NVARCHAR(4000),
    [requestingOrganization.id] NVARCHAR(100),
    [requestingOrganization.extension] NVARCHAR(MAX),
    [requestingOrganization.reference] NVARCHAR(4000),
    [requestingOrganization.type] VARCHAR(256),
    [requestingOrganization.identifier.id] NVARCHAR(100),
    [requestingOrganization.identifier.extension] NVARCHAR(MAX),
    [requestingOrganization.identifier.use] NVARCHAR(64),
    [requestingOrganization.identifier.type] NVARCHAR(MAX),
    [requestingOrganization.identifier.system] VARCHAR(256),
    [requestingOrganization.identifier.value] NVARCHAR(4000),
    [requestingOrganization.identifier.period] NVARCHAR(MAX),
    [requestingOrganization.identifier.assigner] NVARCHAR(MAX),
    [requestingOrganization.display] NVARCHAR(4000),
    [costCenter.id] NVARCHAR(100),
    [costCenter.extension] NVARCHAR(MAX),
    [costCenter.reference] NVARCHAR(4000),
    [costCenter.type] VARCHAR(256),
    [costCenter.identifier.id] NVARCHAR(100),
    [costCenter.identifier.extension] NVARCHAR(MAX),
    [costCenter.identifier.use] NVARCHAR(64),
    [costCenter.identifier.type] NVARCHAR(MAX),
    [costCenter.identifier.system] VARCHAR(256),
    [costCenter.identifier.value] NVARCHAR(4000),
    [costCenter.identifier.period] NVARCHAR(MAX),
    [costCenter.identifier.assigner] NVARCHAR(MAX),
    [costCenter.display] NVARCHAR(4000),
    [quantity.id] NVARCHAR(100),
    [quantity.extension] NVARCHAR(MAX),
    [quantity.value] float,
    [quantity.comparator] NVARCHAR(64),
    [quantity.unit] NVARCHAR(100),
    [quantity.system] VARCHAR(256),
    [quantity.code] NVARCHAR(4000),
    [bodysite] VARCHAR(MAX),
    [factorOverride] float,
    [priceOverride.id] NVARCHAR(100),
    [priceOverride.extension] NVARCHAR(MAX),
    [priceOverride.value] float,
    [priceOverride.currency] NVARCHAR(100),
    [overrideReason] NVARCHAR(4000),
    [enterer.id] NVARCHAR(100),
    [enterer.extension] NVARCHAR(MAX),
    [enterer.reference] NVARCHAR(4000),
    [enterer.type] VARCHAR(256),
    [enterer.identifier.id] NVARCHAR(100),
    [enterer.identifier.extension] NVARCHAR(MAX),
    [enterer.identifier.use] NVARCHAR(64),
    [enterer.identifier.type] NVARCHAR(MAX),
    [enterer.identifier.system] VARCHAR(256),
    [enterer.identifier.value] NVARCHAR(4000),
    [enterer.identifier.period] NVARCHAR(MAX),
    [enterer.identifier.assigner] NVARCHAR(MAX),
    [enterer.display] NVARCHAR(4000),
    [enteredDate] VARCHAR(64),
    [reason] VARCHAR(MAX),
    [service] VARCHAR(MAX),
    [product] VARCHAR(MAX),
    [account] VARCHAR(MAX),
    [note] VARCHAR(MAX),
    [supportingInformation] VARCHAR(MAX),
    [occurrence.dateTime] VARCHAR(64),
    [occurrence.period.id] NVARCHAR(100),
    [occurrence.period.extension] NVARCHAR(MAX),
    [occurrence.period.start] VARCHAR(64),
    [occurrence.period.end] VARCHAR(64),
    [occurrence.timing.id] NVARCHAR(100),
    [occurrence.timing.extension] NVARCHAR(MAX),
    [occurrence.timing.modifierExtension] NVARCHAR(MAX),
    [occurrence.timing.event] VARCHAR(MAX),
    [occurrence.timing.repeat.id] NVARCHAR(100),
    [occurrence.timing.repeat.extension] NVARCHAR(MAX),
    [occurrence.timing.repeat.modifierExtension] NVARCHAR(MAX),
    [occurrence.timing.repeat.count] bigint,
    [occurrence.timing.repeat.countMax] bigint,
    [occurrence.timing.repeat.duration] float,
    [occurrence.timing.repeat.durationMax] float,
    [occurrence.timing.repeat.durationUnit] NVARCHAR(64),
    [occurrence.timing.repeat.frequency] bigint,
    [occurrence.timing.repeat.frequencyMax] bigint,
    [occurrence.timing.repeat.period] float,
    [occurrence.timing.repeat.periodMax] float,
    [occurrence.timing.repeat.periodUnit] NVARCHAR(64),
    [occurrence.timing.repeat.dayOfWeek] NVARCHAR(MAX),
    [occurrence.timing.repeat.timeOfDay] NVARCHAR(MAX),
    [occurrence.timing.repeat.when] NVARCHAR(MAX),
    [occurrence.timing.repeat.offset] bigint,
    [occurrence.timing.repeat.bounds.duration] NVARCHAR(MAX),
    [occurrence.timing.repeat.bounds.range] NVARCHAR(MAX),
    [occurrence.timing.repeat.bounds.period] NVARCHAR(MAX),
    [occurrence.timing.code.id] NVARCHAR(100),
    [occurrence.timing.code.extension] NVARCHAR(MAX),
    [occurrence.timing.code.coding] NVARCHAR(MAX),
    [occurrence.timing.code.text] NVARCHAR(4000),
) WITH (
    LOCATION='/ChargeItem/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.ChargeItemIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'ChargeItem/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.ChargeItemDefinitionUri AS
SELECT
    [id],
    [definitionUri.JSON],
    [definitionUri]
FROM openrowset (
        BULK 'ChargeItem/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [definitionUri.JSON]  VARCHAR(MAX) '$.definitionUri'
    ) AS rowset
    CROSS APPLY openjson (rowset.[definitionUri.JSON]) with (
        [definitionUri]                NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.ChargeItemDefinitionCanonical AS
SELECT
    [id],
    [definitionCanonical.JSON],
    [definitionCanonical]
FROM openrowset (
        BULK 'ChargeItem/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [definitionCanonical.JSON]  VARCHAR(MAX) '$.definitionCanonical'
    ) AS rowset
    CROSS APPLY openjson (rowset.[definitionCanonical.JSON]) with (
        [definitionCanonical]          NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.ChargeItemPartOf AS
SELECT
    [id],
    [partOf.JSON],
    [partOf.id],
    [partOf.extension],
    [partOf.reference],
    [partOf.type],
    [partOf.identifier.id],
    [partOf.identifier.extension],
    [partOf.identifier.use],
    [partOf.identifier.type],
    [partOf.identifier.system],
    [partOf.identifier.value],
    [partOf.identifier.period],
    [partOf.identifier.assigner],
    [partOf.display]
FROM openrowset (
        BULK 'ChargeItem/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [partOf.JSON]  VARCHAR(MAX) '$.partOf'
    ) AS rowset
    CROSS APPLY openjson (rowset.[partOf.JSON]) with (
        [partOf.id]                    NVARCHAR(100)       '$.id',
        [partOf.extension]             NVARCHAR(MAX)       '$.extension',
        [partOf.reference]             NVARCHAR(4000)      '$.reference',
        [partOf.type]                  VARCHAR(256)        '$.type',
        [partOf.identifier.id]         NVARCHAR(100)       '$.identifier.id',
        [partOf.identifier.extension]  NVARCHAR(MAX)       '$.identifier.extension',
        [partOf.identifier.use]        NVARCHAR(64)        '$.identifier.use',
        [partOf.identifier.type]       NVARCHAR(MAX)       '$.identifier.type',
        [partOf.identifier.system]     VARCHAR(256)        '$.identifier.system',
        [partOf.identifier.value]      NVARCHAR(4000)      '$.identifier.value',
        [partOf.identifier.period]     NVARCHAR(MAX)       '$.identifier.period',
        [partOf.identifier.assigner]   NVARCHAR(MAX)       '$.identifier.assigner',
        [partOf.display]               NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.ChargeItemPerformer AS
SELECT
    [id],
    [performer.JSON],
    [performer.id],
    [performer.extension],
    [performer.modifierExtension],
    [performer.function.id],
    [performer.function.extension],
    [performer.function.coding],
    [performer.function.text],
    [performer.actor.id],
    [performer.actor.extension],
    [performer.actor.reference],
    [performer.actor.type],
    [performer.actor.identifier],
    [performer.actor.display]
FROM openrowset (
        BULK 'ChargeItem/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [performer.JSON]  VARCHAR(MAX) '$.performer'
    ) AS rowset
    CROSS APPLY openjson (rowset.[performer.JSON]) with (
        [performer.id]                 NVARCHAR(100)       '$.id',
        [performer.extension]          NVARCHAR(MAX)       '$.extension',
        [performer.modifierExtension]  NVARCHAR(MAX)       '$.modifierExtension',
        [performer.function.id]        NVARCHAR(100)       '$.function.id',
        [performer.function.extension] NVARCHAR(MAX)       '$.function.extension',
        [performer.function.coding]    NVARCHAR(MAX)       '$.function.coding',
        [performer.function.text]      NVARCHAR(4000)      '$.function.text',
        [performer.actor.id]           NVARCHAR(100)       '$.actor.id',
        [performer.actor.extension]    NVARCHAR(MAX)       '$.actor.extension',
        [performer.actor.reference]    NVARCHAR(4000)      '$.actor.reference',
        [performer.actor.type]         VARCHAR(256)        '$.actor.type',
        [performer.actor.identifier]   NVARCHAR(MAX)       '$.actor.identifier',
        [performer.actor.display]      NVARCHAR(4000)      '$.actor.display'
    ) j

GO

CREATE VIEW fhir.ChargeItemBodysite AS
SELECT
    [id],
    [bodysite.JSON],
    [bodysite.id],
    [bodysite.extension],
    [bodysite.coding],
    [bodysite.text]
FROM openrowset (
        BULK 'ChargeItem/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [bodysite.JSON]  VARCHAR(MAX) '$.bodysite'
    ) AS rowset
    CROSS APPLY openjson (rowset.[bodysite.JSON]) with (
        [bodysite.id]                  NVARCHAR(100)       '$.id',
        [bodysite.extension]           NVARCHAR(MAX)       '$.extension',
        [bodysite.coding]              NVARCHAR(MAX)       '$.coding' AS JSON,
        [bodysite.text]                NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.ChargeItemReason AS
SELECT
    [id],
    [reason.JSON],
    [reason.id],
    [reason.extension],
    [reason.coding],
    [reason.text]
FROM openrowset (
        BULK 'ChargeItem/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [reason.JSON]  VARCHAR(MAX) '$.reason'
    ) AS rowset
    CROSS APPLY openjson (rowset.[reason.JSON]) with (
        [reason.id]                    NVARCHAR(100)       '$.id',
        [reason.extension]             NVARCHAR(MAX)       '$.extension',
        [reason.coding]                NVARCHAR(MAX)       '$.coding' AS JSON,
        [reason.text]                  NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.ChargeItemService AS
SELECT
    [id],
    [service.JSON],
    [service.id],
    [service.extension],
    [service.reference],
    [service.type],
    [service.identifier.id],
    [service.identifier.extension],
    [service.identifier.use],
    [service.identifier.type],
    [service.identifier.system],
    [service.identifier.value],
    [service.identifier.period],
    [service.identifier.assigner],
    [service.display]
FROM openrowset (
        BULK 'ChargeItem/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [service.JSON]  VARCHAR(MAX) '$.service'
    ) AS rowset
    CROSS APPLY openjson (rowset.[service.JSON]) with (
        [service.id]                   NVARCHAR(100)       '$.id',
        [service.extension]            NVARCHAR(MAX)       '$.extension',
        [service.reference]            NVARCHAR(4000)      '$.reference',
        [service.type]                 VARCHAR(256)        '$.type',
        [service.identifier.id]        NVARCHAR(100)       '$.identifier.id',
        [service.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [service.identifier.use]       NVARCHAR(64)        '$.identifier.use',
        [service.identifier.type]      NVARCHAR(MAX)       '$.identifier.type',
        [service.identifier.system]    VARCHAR(256)        '$.identifier.system',
        [service.identifier.value]     NVARCHAR(4000)      '$.identifier.value',
        [service.identifier.period]    NVARCHAR(MAX)       '$.identifier.period',
        [service.identifier.assigner]  NVARCHAR(MAX)       '$.identifier.assigner',
        [service.display]              NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.ChargeItemProduct AS
SELECT
    [id],
    [product.JSON],
    [product.id],
    [product.extension],
    [product.concept.id],
    [product.concept.extension],
    [product.concept.coding],
    [product.concept.text],
    [product.reference.id],
    [product.reference.extension],
    [product.reference.reference],
    [product.reference.type],
    [product.reference.identifier],
    [product.reference.display]
FROM openrowset (
        BULK 'ChargeItem/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [product.JSON]  VARCHAR(MAX) '$.product'
    ) AS rowset
    CROSS APPLY openjson (rowset.[product.JSON]) with (
        [product.id]                   NVARCHAR(100)       '$.id',
        [product.extension]            NVARCHAR(MAX)       '$.extension',
        [product.concept.id]           NVARCHAR(100)       '$.concept.id',
        [product.concept.extension]    NVARCHAR(MAX)       '$.concept.extension',
        [product.concept.coding]       NVARCHAR(MAX)       '$.concept.coding',
        [product.concept.text]         NVARCHAR(4000)      '$.concept.text',
        [product.reference.id]         NVARCHAR(100)       '$.reference.id',
        [product.reference.extension]  NVARCHAR(MAX)       '$.reference.extension',
        [product.reference.reference]  NVARCHAR(4000)      '$.reference.reference',
        [product.reference.type]       VARCHAR(256)        '$.reference.type',
        [product.reference.identifier] NVARCHAR(MAX)       '$.reference.identifier',
        [product.reference.display]    NVARCHAR(4000)      '$.reference.display'
    ) j

GO

CREATE VIEW fhir.ChargeItemAccount AS
SELECT
    [id],
    [account.JSON],
    [account.id],
    [account.extension],
    [account.reference],
    [account.type],
    [account.identifier.id],
    [account.identifier.extension],
    [account.identifier.use],
    [account.identifier.type],
    [account.identifier.system],
    [account.identifier.value],
    [account.identifier.period],
    [account.identifier.assigner],
    [account.display]
FROM openrowset (
        BULK 'ChargeItem/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [account.JSON]  VARCHAR(MAX) '$.account'
    ) AS rowset
    CROSS APPLY openjson (rowset.[account.JSON]) with (
        [account.id]                   NVARCHAR(100)       '$.id',
        [account.extension]            NVARCHAR(MAX)       '$.extension',
        [account.reference]            NVARCHAR(4000)      '$.reference',
        [account.type]                 VARCHAR(256)        '$.type',
        [account.identifier.id]        NVARCHAR(100)       '$.identifier.id',
        [account.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [account.identifier.use]       NVARCHAR(64)        '$.identifier.use',
        [account.identifier.type]      NVARCHAR(MAX)       '$.identifier.type',
        [account.identifier.system]    VARCHAR(256)        '$.identifier.system',
        [account.identifier.value]     NVARCHAR(4000)      '$.identifier.value',
        [account.identifier.period]    NVARCHAR(MAX)       '$.identifier.period',
        [account.identifier.assigner]  NVARCHAR(MAX)       '$.identifier.assigner',
        [account.display]              NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.ChargeItemNote AS
SELECT
    [id],
    [note.JSON],
    [note.id],
    [note.extension],
    [note.time],
    [note.text],
    [note.author.reference.id],
    [note.author.reference.extension],
    [note.author.reference.reference],
    [note.author.reference.type],
    [note.author.reference.identifier],
    [note.author.reference.display],
    [note.author.string]
FROM openrowset (
        BULK 'ChargeItem/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [note.JSON]  VARCHAR(MAX) '$.note'
    ) AS rowset
    CROSS APPLY openjson (rowset.[note.JSON]) with (
        [note.id]                      NVARCHAR(100)       '$.id',
        [note.extension]               NVARCHAR(MAX)       '$.extension',
        [note.time]                    VARCHAR(64)         '$.time',
        [note.text]                    NVARCHAR(MAX)       '$.text',
        [note.author.reference.id]     NVARCHAR(100)       '$.author.reference.id',
        [note.author.reference.extension] NVARCHAR(MAX)       '$.author.reference.extension',
        [note.author.reference.reference] NVARCHAR(4000)      '$.author.reference.reference',
        [note.author.reference.type]   VARCHAR(256)        '$.author.reference.type',
        [note.author.reference.identifier] NVARCHAR(MAX)       '$.author.reference.identifier',
        [note.author.reference.display] NVARCHAR(4000)      '$.author.reference.display',
        [note.author.string]           NVARCHAR(4000)      '$.author.string'
    ) j

GO

CREATE VIEW fhir.ChargeItemSupportingInformation AS
SELECT
    [id],
    [supportingInformation.JSON],
    [supportingInformation.id],
    [supportingInformation.extension],
    [supportingInformation.reference],
    [supportingInformation.type],
    [supportingInformation.identifier.id],
    [supportingInformation.identifier.extension],
    [supportingInformation.identifier.use],
    [supportingInformation.identifier.type],
    [supportingInformation.identifier.system],
    [supportingInformation.identifier.value],
    [supportingInformation.identifier.period],
    [supportingInformation.identifier.assigner],
    [supportingInformation.display]
FROM openrowset (
        BULK 'ChargeItem/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [supportingInformation.JSON]  VARCHAR(MAX) '$.supportingInformation'
    ) AS rowset
    CROSS APPLY openjson (rowset.[supportingInformation.JSON]) with (
        [supportingInformation.id]     NVARCHAR(100)       '$.id',
        [supportingInformation.extension] NVARCHAR(MAX)       '$.extension',
        [supportingInformation.reference] NVARCHAR(4000)      '$.reference',
        [supportingInformation.type]   VARCHAR(256)        '$.type',
        [supportingInformation.identifier.id] NVARCHAR(100)       '$.identifier.id',
        [supportingInformation.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [supportingInformation.identifier.use] NVARCHAR(64)        '$.identifier.use',
        [supportingInformation.identifier.type] NVARCHAR(MAX)       '$.identifier.type',
        [supportingInformation.identifier.system] VARCHAR(256)        '$.identifier.system',
        [supportingInformation.identifier.value] NVARCHAR(4000)      '$.identifier.value',
        [supportingInformation.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [supportingInformation.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [supportingInformation.display] NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[ChargeItemDefinition] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [url] VARCHAR(256),
    [identifier] VARCHAR(MAX),
    [version] NVARCHAR(100),
    [name] NVARCHAR(500),
    [title] NVARCHAR(4000),
    [status] NVARCHAR(100),
    [experimental] bit,
    [date] VARCHAR(64),
    [publisher] NVARCHAR(500),
    [contact] VARCHAR(MAX),
    [description] NVARCHAR(MAX),
    [useContext] VARCHAR(MAX),
    [jurisdiction] VARCHAR(MAX),
    [purpose] NVARCHAR(MAX),
    [copyright] NVARCHAR(MAX),
    [approvalDate] VARCHAR(64),
    [lastReviewDate] VARCHAR(64),
    [effectivePeriod.id] NVARCHAR(100),
    [effectivePeriod.extension] NVARCHAR(MAX),
    [effectivePeriod.start] VARCHAR(64),
    [effectivePeriod.end] VARCHAR(64),
    [topic] VARCHAR(MAX),
    [author] VARCHAR(MAX),
    [editor] VARCHAR(MAX),
    [reviewer] VARCHAR(MAX),
    [endorser] VARCHAR(MAX),
    [relatedArtifact] VARCHAR(MAX),
    [derivedFromUri] VARCHAR(MAX),
    [partOf] VARCHAR(MAX),
    [replaces] VARCHAR(MAX),
    [code.id] NVARCHAR(100),
    [code.extension] NVARCHAR(MAX),
    [code.coding] VARCHAR(MAX),
    [code.text] NVARCHAR(4000),
    [instance] VARCHAR(MAX),
    [applicability] VARCHAR(MAX),
    [propertyGroup] VARCHAR(MAX),
) WITH (
    LOCATION='/ChargeItemDefinition/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.ChargeItemDefinitionIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'ChargeItemDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.ChargeItemDefinitionContact AS
SELECT
    [id],
    [contact.JSON],
    [contact.id],
    [contact.extension],
    [contact.name],
    [contact.telecom]
FROM openrowset (
        BULK 'ChargeItemDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [contact.JSON]  VARCHAR(MAX) '$.contact'
    ) AS rowset
    CROSS APPLY openjson (rowset.[contact.JSON]) with (
        [contact.id]                   NVARCHAR(100)       '$.id',
        [contact.extension]            NVARCHAR(MAX)       '$.extension',
        [contact.name]                 NVARCHAR(500)       '$.name',
        [contact.telecom]              NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.ChargeItemDefinitionUseContext AS
SELECT
    [id],
    [useContext.JSON],
    [useContext.id],
    [useContext.extension],
    [useContext.code.id],
    [useContext.code.extension],
    [useContext.code.system],
    [useContext.code.version],
    [useContext.code.code],
    [useContext.code.display],
    [useContext.code.userSelected],
    [useContext.value.codeableConcept.id],
    [useContext.value.codeableConcept.extension],
    [useContext.value.codeableConcept.coding],
    [useContext.value.codeableConcept.text],
    [useContext.value.quantity.id],
    [useContext.value.quantity.extension],
    [useContext.value.quantity.value],
    [useContext.value.quantity.comparator],
    [useContext.value.quantity.unit],
    [useContext.value.quantity.system],
    [useContext.value.quantity.code],
    [useContext.value.range.id],
    [useContext.value.range.extension],
    [useContext.value.range.low],
    [useContext.value.range.high],
    [useContext.value.reference.id],
    [useContext.value.reference.extension],
    [useContext.value.reference.reference],
    [useContext.value.reference.type],
    [useContext.value.reference.identifier],
    [useContext.value.reference.display]
FROM openrowset (
        BULK 'ChargeItemDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [useContext.JSON]  VARCHAR(MAX) '$.useContext'
    ) AS rowset
    CROSS APPLY openjson (rowset.[useContext.JSON]) with (
        [useContext.id]                NVARCHAR(100)       '$.id',
        [useContext.extension]         NVARCHAR(MAX)       '$.extension',
        [useContext.code.id]           NVARCHAR(100)       '$.code.id',
        [useContext.code.extension]    NVARCHAR(MAX)       '$.code.extension',
        [useContext.code.system]       VARCHAR(256)        '$.code.system',
        [useContext.code.version]      NVARCHAR(100)       '$.code.version',
        [useContext.code.code]         NVARCHAR(4000)      '$.code.code',
        [useContext.code.display]      NVARCHAR(4000)      '$.code.display',
        [useContext.code.userSelected] bit                 '$.code.userSelected',
        [useContext.value.codeableConcept.id] NVARCHAR(100)       '$.value.codeableConcept.id',
        [useContext.value.codeableConcept.extension] NVARCHAR(MAX)       '$.value.codeableConcept.extension',
        [useContext.value.codeableConcept.coding] NVARCHAR(MAX)       '$.value.codeableConcept.coding',
        [useContext.value.codeableConcept.text] NVARCHAR(4000)      '$.value.codeableConcept.text',
        [useContext.value.quantity.id] NVARCHAR(100)       '$.value.quantity.id',
        [useContext.value.quantity.extension] NVARCHAR(MAX)       '$.value.quantity.extension',
        [useContext.value.quantity.value] float               '$.value.quantity.value',
        [useContext.value.quantity.comparator] NVARCHAR(64)        '$.value.quantity.comparator',
        [useContext.value.quantity.unit] NVARCHAR(100)       '$.value.quantity.unit',
        [useContext.value.quantity.system] VARCHAR(256)        '$.value.quantity.system',
        [useContext.value.quantity.code] NVARCHAR(4000)      '$.value.quantity.code',
        [useContext.value.range.id]    NVARCHAR(100)       '$.value.range.id',
        [useContext.value.range.extension] NVARCHAR(MAX)       '$.value.range.extension',
        [useContext.value.range.low]   NVARCHAR(MAX)       '$.value.range.low',
        [useContext.value.range.high]  NVARCHAR(MAX)       '$.value.range.high',
        [useContext.value.reference.id] NVARCHAR(100)       '$.value.reference.id',
        [useContext.value.reference.extension] NVARCHAR(MAX)       '$.value.reference.extension',
        [useContext.value.reference.reference] NVARCHAR(4000)      '$.value.reference.reference',
        [useContext.value.reference.type] VARCHAR(256)        '$.value.reference.type',
        [useContext.value.reference.identifier] NVARCHAR(MAX)       '$.value.reference.identifier',
        [useContext.value.reference.display] NVARCHAR(4000)      '$.value.reference.display'
    ) j

GO

CREATE VIEW fhir.ChargeItemDefinitionJurisdiction AS
SELECT
    [id],
    [jurisdiction.JSON],
    [jurisdiction.id],
    [jurisdiction.extension],
    [jurisdiction.coding],
    [jurisdiction.text]
FROM openrowset (
        BULK 'ChargeItemDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [jurisdiction.JSON]  VARCHAR(MAX) '$.jurisdiction'
    ) AS rowset
    CROSS APPLY openjson (rowset.[jurisdiction.JSON]) with (
        [jurisdiction.id]              NVARCHAR(100)       '$.id',
        [jurisdiction.extension]       NVARCHAR(MAX)       '$.extension',
        [jurisdiction.coding]          NVARCHAR(MAX)       '$.coding' AS JSON,
        [jurisdiction.text]            NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.ChargeItemDefinitionTopic AS
SELECT
    [id],
    [topic.JSON],
    [topic.id],
    [topic.extension],
    [topic.coding],
    [topic.text]
FROM openrowset (
        BULK 'ChargeItemDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [topic.JSON]  VARCHAR(MAX) '$.topic'
    ) AS rowset
    CROSS APPLY openjson (rowset.[topic.JSON]) with (
        [topic.id]                     NVARCHAR(100)       '$.id',
        [topic.extension]              NVARCHAR(MAX)       '$.extension',
        [topic.coding]                 NVARCHAR(MAX)       '$.coding' AS JSON,
        [topic.text]                   NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.ChargeItemDefinitionAuthor AS
SELECT
    [id],
    [author.JSON],
    [author.id],
    [author.extension],
    [author.name],
    [author.telecom]
FROM openrowset (
        BULK 'ChargeItemDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [author.JSON]  VARCHAR(MAX) '$.author'
    ) AS rowset
    CROSS APPLY openjson (rowset.[author.JSON]) with (
        [author.id]                    NVARCHAR(100)       '$.id',
        [author.extension]             NVARCHAR(MAX)       '$.extension',
        [author.name]                  NVARCHAR(500)       '$.name',
        [author.telecom]               NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.ChargeItemDefinitionEditor AS
SELECT
    [id],
    [editor.JSON],
    [editor.id],
    [editor.extension],
    [editor.name],
    [editor.telecom]
FROM openrowset (
        BULK 'ChargeItemDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [editor.JSON]  VARCHAR(MAX) '$.editor'
    ) AS rowset
    CROSS APPLY openjson (rowset.[editor.JSON]) with (
        [editor.id]                    NVARCHAR(100)       '$.id',
        [editor.extension]             NVARCHAR(MAX)       '$.extension',
        [editor.name]                  NVARCHAR(500)       '$.name',
        [editor.telecom]               NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.ChargeItemDefinitionReviewer AS
SELECT
    [id],
    [reviewer.JSON],
    [reviewer.id],
    [reviewer.extension],
    [reviewer.name],
    [reviewer.telecom]
FROM openrowset (
        BULK 'ChargeItemDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [reviewer.JSON]  VARCHAR(MAX) '$.reviewer'
    ) AS rowset
    CROSS APPLY openjson (rowset.[reviewer.JSON]) with (
        [reviewer.id]                  NVARCHAR(100)       '$.id',
        [reviewer.extension]           NVARCHAR(MAX)       '$.extension',
        [reviewer.name]                NVARCHAR(500)       '$.name',
        [reviewer.telecom]             NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.ChargeItemDefinitionEndorser AS
SELECT
    [id],
    [endorser.JSON],
    [endorser.id],
    [endorser.extension],
    [endorser.name],
    [endorser.telecom]
FROM openrowset (
        BULK 'ChargeItemDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [endorser.JSON]  VARCHAR(MAX) '$.endorser'
    ) AS rowset
    CROSS APPLY openjson (rowset.[endorser.JSON]) with (
        [endorser.id]                  NVARCHAR(100)       '$.id',
        [endorser.extension]           NVARCHAR(MAX)       '$.extension',
        [endorser.name]                NVARCHAR(500)       '$.name',
        [endorser.telecom]             NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.ChargeItemDefinitionRelatedArtifact AS
SELECT
    [id],
    [relatedArtifact.JSON],
    [relatedArtifact.id],
    [relatedArtifact.extension],
    [relatedArtifact.type],
    [relatedArtifact.classifier],
    [relatedArtifact.label],
    [relatedArtifact.display],
    [relatedArtifact.citation],
    [relatedArtifact.document.id],
    [relatedArtifact.document.extension],
    [relatedArtifact.document.contentType],
    [relatedArtifact.document.language],
    [relatedArtifact.document.data],
    [relatedArtifact.document.url],
    [relatedArtifact.document.size],
    [relatedArtifact.document.hash],
    [relatedArtifact.document.title],
    [relatedArtifact.document.creation],
    [relatedArtifact.document.height],
    [relatedArtifact.document.width],
    [relatedArtifact.document.frames],
    [relatedArtifact.document.duration],
    [relatedArtifact.document.pages],
    [relatedArtifact.resource],
    [relatedArtifact.resourceReference.id],
    [relatedArtifact.resourceReference.extension],
    [relatedArtifact.resourceReference.reference],
    [relatedArtifact.resourceReference.type],
    [relatedArtifact.resourceReference.identifier],
    [relatedArtifact.resourceReference.display]
FROM openrowset (
        BULK 'ChargeItemDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [relatedArtifact.JSON]  VARCHAR(MAX) '$.relatedArtifact'
    ) AS rowset
    CROSS APPLY openjson (rowset.[relatedArtifact.JSON]) with (
        [relatedArtifact.id]           NVARCHAR(100)       '$.id',
        [relatedArtifact.extension]    NVARCHAR(MAX)       '$.extension',
        [relatedArtifact.type]         NVARCHAR(64)        '$.type',
        [relatedArtifact.classifier]   NVARCHAR(MAX)       '$.classifier' AS JSON,
        [relatedArtifact.label]        NVARCHAR(100)       '$.label',
        [relatedArtifact.display]      NVARCHAR(4000)      '$.display',
        [relatedArtifact.citation]     NVARCHAR(MAX)       '$.citation',
        [relatedArtifact.document.id]  NVARCHAR(100)       '$.document.id',
        [relatedArtifact.document.extension] NVARCHAR(MAX)       '$.document.extension',
        [relatedArtifact.document.contentType] NVARCHAR(100)       '$.document.contentType',
        [relatedArtifact.document.language] NVARCHAR(100)       '$.document.language',
        [relatedArtifact.document.data] NVARCHAR(MAX)       '$.document.data',
        [relatedArtifact.document.url] VARCHAR(256)        '$.document.url',
        [relatedArtifact.document.size] NVARCHAR(MAX)       '$.document.size',
        [relatedArtifact.document.hash] NVARCHAR(MAX)       '$.document.hash',
        [relatedArtifact.document.title] NVARCHAR(4000)      '$.document.title',
        [relatedArtifact.document.creation] VARCHAR(64)         '$.document.creation',
        [relatedArtifact.document.height] bigint              '$.document.height',
        [relatedArtifact.document.width] bigint              '$.document.width',
        [relatedArtifact.document.frames] bigint              '$.document.frames',
        [relatedArtifact.document.duration] float               '$.document.duration',
        [relatedArtifact.document.pages] bigint              '$.document.pages',
        [relatedArtifact.resource]     VARCHAR(256)        '$.resource',
        [relatedArtifact.resourceReference.id] NVARCHAR(100)       '$.resourceReference.id',
        [relatedArtifact.resourceReference.extension] NVARCHAR(MAX)       '$.resourceReference.extension',
        [relatedArtifact.resourceReference.reference] NVARCHAR(4000)      '$.resourceReference.reference',
        [relatedArtifact.resourceReference.type] VARCHAR(256)        '$.resourceReference.type',
        [relatedArtifact.resourceReference.identifier] NVARCHAR(MAX)       '$.resourceReference.identifier',
        [relatedArtifact.resourceReference.display] NVARCHAR(4000)      '$.resourceReference.display'
    ) j

GO

CREATE VIEW fhir.ChargeItemDefinitionDerivedFromUri AS
SELECT
    [id],
    [derivedFromUri.JSON],
    [derivedFromUri]
FROM openrowset (
        BULK 'ChargeItemDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [derivedFromUri.JSON]  VARCHAR(MAX) '$.derivedFromUri'
    ) AS rowset
    CROSS APPLY openjson (rowset.[derivedFromUri.JSON]) with (
        [derivedFromUri]               NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.ChargeItemDefinitionPartOf AS
SELECT
    [id],
    [partOf.JSON],
    [partOf]
FROM openrowset (
        BULK 'ChargeItemDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [partOf.JSON]  VARCHAR(MAX) '$.partOf'
    ) AS rowset
    CROSS APPLY openjson (rowset.[partOf.JSON]) with (
        [partOf]                       NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.ChargeItemDefinitionReplaces AS
SELECT
    [id],
    [replaces.JSON],
    [replaces]
FROM openrowset (
        BULK 'ChargeItemDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [replaces.JSON]  VARCHAR(MAX) '$.replaces'
    ) AS rowset
    CROSS APPLY openjson (rowset.[replaces.JSON]) with (
        [replaces]                     NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.ChargeItemDefinitionInstance AS
SELECT
    [id],
    [instance.JSON],
    [instance.id],
    [instance.extension],
    [instance.reference],
    [instance.type],
    [instance.identifier.id],
    [instance.identifier.extension],
    [instance.identifier.use],
    [instance.identifier.type],
    [instance.identifier.system],
    [instance.identifier.value],
    [instance.identifier.period],
    [instance.identifier.assigner],
    [instance.display]
FROM openrowset (
        BULK 'ChargeItemDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [instance.JSON]  VARCHAR(MAX) '$.instance'
    ) AS rowset
    CROSS APPLY openjson (rowset.[instance.JSON]) with (
        [instance.id]                  NVARCHAR(100)       '$.id',
        [instance.extension]           NVARCHAR(MAX)       '$.extension',
        [instance.reference]           NVARCHAR(4000)      '$.reference',
        [instance.type]                VARCHAR(256)        '$.type',
        [instance.identifier.id]       NVARCHAR(100)       '$.identifier.id',
        [instance.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [instance.identifier.use]      NVARCHAR(64)        '$.identifier.use',
        [instance.identifier.type]     NVARCHAR(MAX)       '$.identifier.type',
        [instance.identifier.system]   VARCHAR(256)        '$.identifier.system',
        [instance.identifier.value]    NVARCHAR(4000)      '$.identifier.value',
        [instance.identifier.period]   NVARCHAR(MAX)       '$.identifier.period',
        [instance.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [instance.display]             NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.ChargeItemDefinitionApplicability AS
SELECT
    [id],
    [applicability.JSON],
    [applicability.id],
    [applicability.extension],
    [applicability.modifierExtension],
    [applicability.description],
    [applicability.language],
    [applicability.expression]
FROM openrowset (
        BULK 'ChargeItemDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [applicability.JSON]  VARCHAR(MAX) '$.applicability'
    ) AS rowset
    CROSS APPLY openjson (rowset.[applicability.JSON]) with (
        [applicability.id]             NVARCHAR(100)       '$.id',
        [applicability.extension]      NVARCHAR(MAX)       '$.extension',
        [applicability.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [applicability.description]    NVARCHAR(4000)      '$.description',
        [applicability.language]       NVARCHAR(100)       '$.language',
        [applicability.expression]     NVARCHAR(4000)      '$.expression'
    ) j

GO

CREATE VIEW fhir.ChargeItemDefinitionPropertyGroup AS
SELECT
    [id],
    [propertyGroup.JSON],
    [propertyGroup.id],
    [propertyGroup.extension],
    [propertyGroup.modifierExtension],
    [propertyGroup.applicability],
    [propertyGroup.priceComponent]
FROM openrowset (
        BULK 'ChargeItemDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [propertyGroup.JSON]  VARCHAR(MAX) '$.propertyGroup'
    ) AS rowset
    CROSS APPLY openjson (rowset.[propertyGroup.JSON]) with (
        [propertyGroup.id]             NVARCHAR(100)       '$.id',
        [propertyGroup.extension]      NVARCHAR(MAX)       '$.extension',
        [propertyGroup.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [propertyGroup.applicability]  NVARCHAR(MAX)       '$.applicability' AS JSON,
        [propertyGroup.priceComponent] NVARCHAR(MAX)       '$.priceComponent' AS JSON
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[Citation] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [url] VARCHAR(256),
    [identifier] VARCHAR(MAX),
    [version] NVARCHAR(100),
    [name] NVARCHAR(500),
    [title] NVARCHAR(4000),
    [status] NVARCHAR(100),
    [experimental] bit,
    [date] VARCHAR(64),
    [publisher] NVARCHAR(500),
    [contact] VARCHAR(MAX),
    [description] NVARCHAR(MAX),
    [useContext] VARCHAR(MAX),
    [jurisdiction] VARCHAR(MAX),
    [purpose] NVARCHAR(MAX),
    [copyright] NVARCHAR(MAX),
    [approvalDate] VARCHAR(64),
    [lastReviewDate] VARCHAR(64),
    [effectivePeriod.id] NVARCHAR(100),
    [effectivePeriod.extension] NVARCHAR(MAX),
    [effectivePeriod.start] VARCHAR(64),
    [effectivePeriod.end] VARCHAR(64),
    [topic] VARCHAR(MAX),
    [author] VARCHAR(MAX),
    [editor] VARCHAR(MAX),
    [reviewer] VARCHAR(MAX),
    [endorser] VARCHAR(MAX),
    [relatedArtifact] VARCHAR(MAX),
    [summary] VARCHAR(MAX),
    [classification] VARCHAR(MAX),
    [note] VARCHAR(MAX),
    [currentState] VARCHAR(MAX),
    [statusDate] VARCHAR(MAX),
    [citedArtifact.id] NVARCHAR(100),
    [citedArtifact.extension] NVARCHAR(MAX),
    [citedArtifact.modifierExtension] NVARCHAR(MAX),
    [citedArtifact.identifier] VARCHAR(MAX),
    [citedArtifact.relatedIdentifier] VARCHAR(MAX),
    [citedArtifact.dateAccessed] VARCHAR(64),
    [citedArtifact.version.id] NVARCHAR(100),
    [citedArtifact.version.extension] NVARCHAR(MAX),
    [citedArtifact.version.modifierExtension] NVARCHAR(MAX),
    [citedArtifact.version.value] NVARCHAR(4000),
    [citedArtifact.version.baseCitation] NVARCHAR(MAX),
    [citedArtifact.currentState] VARCHAR(MAX),
    [citedArtifact.statusDate] VARCHAR(MAX),
    [citedArtifact.title] VARCHAR(MAX),
    [citedArtifact.abstract] VARCHAR(MAX),
    [citedArtifact.part.id] NVARCHAR(100),
    [citedArtifact.part.extension] NVARCHAR(MAX),
    [citedArtifact.part.modifierExtension] NVARCHAR(MAX),
    [citedArtifact.part.type] NVARCHAR(MAX),
    [citedArtifact.part.value] NVARCHAR(4000),
    [citedArtifact.part.baseCitation] NVARCHAR(MAX),
    [citedArtifact.relatesTo] VARCHAR(MAX),
    [citedArtifact.publicationForm] VARCHAR(MAX),
    [citedArtifact.webLocation] VARCHAR(MAX),
    [citedArtifact.classification] VARCHAR(MAX),
    [citedArtifact.contributorship.id] NVARCHAR(100),
    [citedArtifact.contributorship.extension] NVARCHAR(MAX),
    [citedArtifact.contributorship.modifierExtension] NVARCHAR(MAX),
    [citedArtifact.contributorship.complete] bit,
    [citedArtifact.contributorship.entry] NVARCHAR(MAX),
    [citedArtifact.contributorship.summary] NVARCHAR(MAX),
    [citedArtifact.note] VARCHAR(MAX),
) WITH (
    LOCATION='/Citation/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.CitationIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'Citation/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.CitationContact AS
SELECT
    [id],
    [contact.JSON],
    [contact.id],
    [contact.extension],
    [contact.name],
    [contact.telecom]
FROM openrowset (
        BULK 'Citation/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [contact.JSON]  VARCHAR(MAX) '$.contact'
    ) AS rowset
    CROSS APPLY openjson (rowset.[contact.JSON]) with (
        [contact.id]                   NVARCHAR(100)       '$.id',
        [contact.extension]            NVARCHAR(MAX)       '$.extension',
        [contact.name]                 NVARCHAR(500)       '$.name',
        [contact.telecom]              NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.CitationUseContext AS
SELECT
    [id],
    [useContext.JSON],
    [useContext.id],
    [useContext.extension],
    [useContext.code.id],
    [useContext.code.extension],
    [useContext.code.system],
    [useContext.code.version],
    [useContext.code.code],
    [useContext.code.display],
    [useContext.code.userSelected],
    [useContext.value.codeableConcept.id],
    [useContext.value.codeableConcept.extension],
    [useContext.value.codeableConcept.coding],
    [useContext.value.codeableConcept.text],
    [useContext.value.quantity.id],
    [useContext.value.quantity.extension],
    [useContext.value.quantity.value],
    [useContext.value.quantity.comparator],
    [useContext.value.quantity.unit],
    [useContext.value.quantity.system],
    [useContext.value.quantity.code],
    [useContext.value.range.id],
    [useContext.value.range.extension],
    [useContext.value.range.low],
    [useContext.value.range.high],
    [useContext.value.reference.id],
    [useContext.value.reference.extension],
    [useContext.value.reference.reference],
    [useContext.value.reference.type],
    [useContext.value.reference.identifier],
    [useContext.value.reference.display]
FROM openrowset (
        BULK 'Citation/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [useContext.JSON]  VARCHAR(MAX) '$.useContext'
    ) AS rowset
    CROSS APPLY openjson (rowset.[useContext.JSON]) with (
        [useContext.id]                NVARCHAR(100)       '$.id',
        [useContext.extension]         NVARCHAR(MAX)       '$.extension',
        [useContext.code.id]           NVARCHAR(100)       '$.code.id',
        [useContext.code.extension]    NVARCHAR(MAX)       '$.code.extension',
        [useContext.code.system]       VARCHAR(256)        '$.code.system',
        [useContext.code.version]      NVARCHAR(100)       '$.code.version',
        [useContext.code.code]         NVARCHAR(4000)      '$.code.code',
        [useContext.code.display]      NVARCHAR(4000)      '$.code.display',
        [useContext.code.userSelected] bit                 '$.code.userSelected',
        [useContext.value.codeableConcept.id] NVARCHAR(100)       '$.value.codeableConcept.id',
        [useContext.value.codeableConcept.extension] NVARCHAR(MAX)       '$.value.codeableConcept.extension',
        [useContext.value.codeableConcept.coding] NVARCHAR(MAX)       '$.value.codeableConcept.coding',
        [useContext.value.codeableConcept.text] NVARCHAR(4000)      '$.value.codeableConcept.text',
        [useContext.value.quantity.id] NVARCHAR(100)       '$.value.quantity.id',
        [useContext.value.quantity.extension] NVARCHAR(MAX)       '$.value.quantity.extension',
        [useContext.value.quantity.value] float               '$.value.quantity.value',
        [useContext.value.quantity.comparator] NVARCHAR(64)        '$.value.quantity.comparator',
        [useContext.value.quantity.unit] NVARCHAR(100)       '$.value.quantity.unit',
        [useContext.value.quantity.system] VARCHAR(256)        '$.value.quantity.system',
        [useContext.value.quantity.code] NVARCHAR(4000)      '$.value.quantity.code',
        [useContext.value.range.id]    NVARCHAR(100)       '$.value.range.id',
        [useContext.value.range.extension] NVARCHAR(MAX)       '$.value.range.extension',
        [useContext.value.range.low]   NVARCHAR(MAX)       '$.value.range.low',
        [useContext.value.range.high]  NVARCHAR(MAX)       '$.value.range.high',
        [useContext.value.reference.id] NVARCHAR(100)       '$.value.reference.id',
        [useContext.value.reference.extension] NVARCHAR(MAX)       '$.value.reference.extension',
        [useContext.value.reference.reference] NVARCHAR(4000)      '$.value.reference.reference',
        [useContext.value.reference.type] VARCHAR(256)        '$.value.reference.type',
        [useContext.value.reference.identifier] NVARCHAR(MAX)       '$.value.reference.identifier',
        [useContext.value.reference.display] NVARCHAR(4000)      '$.value.reference.display'
    ) j

GO

CREATE VIEW fhir.CitationJurisdiction AS
SELECT
    [id],
    [jurisdiction.JSON],
    [jurisdiction.id],
    [jurisdiction.extension],
    [jurisdiction.coding],
    [jurisdiction.text]
FROM openrowset (
        BULK 'Citation/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [jurisdiction.JSON]  VARCHAR(MAX) '$.jurisdiction'
    ) AS rowset
    CROSS APPLY openjson (rowset.[jurisdiction.JSON]) with (
        [jurisdiction.id]              NVARCHAR(100)       '$.id',
        [jurisdiction.extension]       NVARCHAR(MAX)       '$.extension',
        [jurisdiction.coding]          NVARCHAR(MAX)       '$.coding' AS JSON,
        [jurisdiction.text]            NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.CitationTopic AS
SELECT
    [id],
    [topic.JSON],
    [topic.id],
    [topic.extension],
    [topic.coding],
    [topic.text]
FROM openrowset (
        BULK 'Citation/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [topic.JSON]  VARCHAR(MAX) '$.topic'
    ) AS rowset
    CROSS APPLY openjson (rowset.[topic.JSON]) with (
        [topic.id]                     NVARCHAR(100)       '$.id',
        [topic.extension]              NVARCHAR(MAX)       '$.extension',
        [topic.coding]                 NVARCHAR(MAX)       '$.coding' AS JSON,
        [topic.text]                   NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.CitationAuthor AS
SELECT
    [id],
    [author.JSON],
    [author.id],
    [author.extension],
    [author.name],
    [author.telecom]
FROM openrowset (
        BULK 'Citation/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [author.JSON]  VARCHAR(MAX) '$.author'
    ) AS rowset
    CROSS APPLY openjson (rowset.[author.JSON]) with (
        [author.id]                    NVARCHAR(100)       '$.id',
        [author.extension]             NVARCHAR(MAX)       '$.extension',
        [author.name]                  NVARCHAR(500)       '$.name',
        [author.telecom]               NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.CitationEditor AS
SELECT
    [id],
    [editor.JSON],
    [editor.id],
    [editor.extension],
    [editor.name],
    [editor.telecom]
FROM openrowset (
        BULK 'Citation/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [editor.JSON]  VARCHAR(MAX) '$.editor'
    ) AS rowset
    CROSS APPLY openjson (rowset.[editor.JSON]) with (
        [editor.id]                    NVARCHAR(100)       '$.id',
        [editor.extension]             NVARCHAR(MAX)       '$.extension',
        [editor.name]                  NVARCHAR(500)       '$.name',
        [editor.telecom]               NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.CitationReviewer AS
SELECT
    [id],
    [reviewer.JSON],
    [reviewer.id],
    [reviewer.extension],
    [reviewer.name],
    [reviewer.telecom]
FROM openrowset (
        BULK 'Citation/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [reviewer.JSON]  VARCHAR(MAX) '$.reviewer'
    ) AS rowset
    CROSS APPLY openjson (rowset.[reviewer.JSON]) with (
        [reviewer.id]                  NVARCHAR(100)       '$.id',
        [reviewer.extension]           NVARCHAR(MAX)       '$.extension',
        [reviewer.name]                NVARCHAR(500)       '$.name',
        [reviewer.telecom]             NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.CitationEndorser AS
SELECT
    [id],
    [endorser.JSON],
    [endorser.id],
    [endorser.extension],
    [endorser.name],
    [endorser.telecom]
FROM openrowset (
        BULK 'Citation/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [endorser.JSON]  VARCHAR(MAX) '$.endorser'
    ) AS rowset
    CROSS APPLY openjson (rowset.[endorser.JSON]) with (
        [endorser.id]                  NVARCHAR(100)       '$.id',
        [endorser.extension]           NVARCHAR(MAX)       '$.extension',
        [endorser.name]                NVARCHAR(500)       '$.name',
        [endorser.telecom]             NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.CitationRelatedArtifact AS
SELECT
    [id],
    [relatedArtifact.JSON],
    [relatedArtifact.id],
    [relatedArtifact.extension],
    [relatedArtifact.type],
    [relatedArtifact.classifier],
    [relatedArtifact.label],
    [relatedArtifact.display],
    [relatedArtifact.citation],
    [relatedArtifact.document.id],
    [relatedArtifact.document.extension],
    [relatedArtifact.document.contentType],
    [relatedArtifact.document.language],
    [relatedArtifact.document.data],
    [relatedArtifact.document.url],
    [relatedArtifact.document.size],
    [relatedArtifact.document.hash],
    [relatedArtifact.document.title],
    [relatedArtifact.document.creation],
    [relatedArtifact.document.height],
    [relatedArtifact.document.width],
    [relatedArtifact.document.frames],
    [relatedArtifact.document.duration],
    [relatedArtifact.document.pages],
    [relatedArtifact.resource],
    [relatedArtifact.resourceReference.id],
    [relatedArtifact.resourceReference.extension],
    [relatedArtifact.resourceReference.reference],
    [relatedArtifact.resourceReference.type],
    [relatedArtifact.resourceReference.identifier],
    [relatedArtifact.resourceReference.display]
FROM openrowset (
        BULK 'Citation/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [relatedArtifact.JSON]  VARCHAR(MAX) '$.relatedArtifact'
    ) AS rowset
    CROSS APPLY openjson (rowset.[relatedArtifact.JSON]) with (
        [relatedArtifact.id]           NVARCHAR(100)       '$.id',
        [relatedArtifact.extension]    NVARCHAR(MAX)       '$.extension',
        [relatedArtifact.type]         NVARCHAR(64)        '$.type',
        [relatedArtifact.classifier]   NVARCHAR(MAX)       '$.classifier' AS JSON,
        [relatedArtifact.label]        NVARCHAR(100)       '$.label',
        [relatedArtifact.display]      NVARCHAR(4000)      '$.display',
        [relatedArtifact.citation]     NVARCHAR(MAX)       '$.citation',
        [relatedArtifact.document.id]  NVARCHAR(100)       '$.document.id',
        [relatedArtifact.document.extension] NVARCHAR(MAX)       '$.document.extension',
        [relatedArtifact.document.contentType] NVARCHAR(100)       '$.document.contentType',
        [relatedArtifact.document.language] NVARCHAR(100)       '$.document.language',
        [relatedArtifact.document.data] NVARCHAR(MAX)       '$.document.data',
        [relatedArtifact.document.url] VARCHAR(256)        '$.document.url',
        [relatedArtifact.document.size] NVARCHAR(MAX)       '$.document.size',
        [relatedArtifact.document.hash] NVARCHAR(MAX)       '$.document.hash',
        [relatedArtifact.document.title] NVARCHAR(4000)      '$.document.title',
        [relatedArtifact.document.creation] VARCHAR(64)         '$.document.creation',
        [relatedArtifact.document.height] bigint              '$.document.height',
        [relatedArtifact.document.width] bigint              '$.document.width',
        [relatedArtifact.document.frames] bigint              '$.document.frames',
        [relatedArtifact.document.duration] float               '$.document.duration',
        [relatedArtifact.document.pages] bigint              '$.document.pages',
        [relatedArtifact.resource]     VARCHAR(256)        '$.resource',
        [relatedArtifact.resourceReference.id] NVARCHAR(100)       '$.resourceReference.id',
        [relatedArtifact.resourceReference.extension] NVARCHAR(MAX)       '$.resourceReference.extension',
        [relatedArtifact.resourceReference.reference] NVARCHAR(4000)      '$.resourceReference.reference',
        [relatedArtifact.resourceReference.type] VARCHAR(256)        '$.resourceReference.type',
        [relatedArtifact.resourceReference.identifier] NVARCHAR(MAX)       '$.resourceReference.identifier',
        [relatedArtifact.resourceReference.display] NVARCHAR(4000)      '$.resourceReference.display'
    ) j

GO

CREATE VIEW fhir.CitationSummary AS
SELECT
    [id],
    [summary.JSON],
    [summary.id],
    [summary.extension],
    [summary.modifierExtension],
    [summary.style.id],
    [summary.style.extension],
    [summary.style.coding],
    [summary.style.text],
    [summary.text]
FROM openrowset (
        BULK 'Citation/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [summary.JSON]  VARCHAR(MAX) '$.summary'
    ) AS rowset
    CROSS APPLY openjson (rowset.[summary.JSON]) with (
        [summary.id]                   NVARCHAR(100)       '$.id',
        [summary.extension]            NVARCHAR(MAX)       '$.extension',
        [summary.modifierExtension]    NVARCHAR(MAX)       '$.modifierExtension',
        [summary.style.id]             NVARCHAR(100)       '$.style.id',
        [summary.style.extension]      NVARCHAR(MAX)       '$.style.extension',
        [summary.style.coding]         NVARCHAR(MAX)       '$.style.coding',
        [summary.style.text]           NVARCHAR(4000)      '$.style.text',
        [summary.text]                 NVARCHAR(MAX)       '$.text'
    ) j

GO

CREATE VIEW fhir.CitationClassification AS
SELECT
    [id],
    [classification.JSON],
    [classification.id],
    [classification.extension],
    [classification.modifierExtension],
    [classification.type.id],
    [classification.type.extension],
    [classification.type.coding],
    [classification.type.text],
    [classification.classifier]
FROM openrowset (
        BULK 'Citation/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [classification.JSON]  VARCHAR(MAX) '$.classification'
    ) AS rowset
    CROSS APPLY openjson (rowset.[classification.JSON]) with (
        [classification.id]            NVARCHAR(100)       '$.id',
        [classification.extension]     NVARCHAR(MAX)       '$.extension',
        [classification.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [classification.type.id]       NVARCHAR(100)       '$.type.id',
        [classification.type.extension] NVARCHAR(MAX)       '$.type.extension',
        [classification.type.coding]   NVARCHAR(MAX)       '$.type.coding',
        [classification.type.text]     NVARCHAR(4000)      '$.type.text',
        [classification.classifier]    NVARCHAR(MAX)       '$.classifier' AS JSON
    ) j

GO

CREATE VIEW fhir.CitationNote AS
SELECT
    [id],
    [note.JSON],
    [note.id],
    [note.extension],
    [note.time],
    [note.text],
    [note.author.reference.id],
    [note.author.reference.extension],
    [note.author.reference.reference],
    [note.author.reference.type],
    [note.author.reference.identifier],
    [note.author.reference.display],
    [note.author.string]
FROM openrowset (
        BULK 'Citation/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [note.JSON]  VARCHAR(MAX) '$.note'
    ) AS rowset
    CROSS APPLY openjson (rowset.[note.JSON]) with (
        [note.id]                      NVARCHAR(100)       '$.id',
        [note.extension]               NVARCHAR(MAX)       '$.extension',
        [note.time]                    VARCHAR(64)         '$.time',
        [note.text]                    NVARCHAR(MAX)       '$.text',
        [note.author.reference.id]     NVARCHAR(100)       '$.author.reference.id',
        [note.author.reference.extension] NVARCHAR(MAX)       '$.author.reference.extension',
        [note.author.reference.reference] NVARCHAR(4000)      '$.author.reference.reference',
        [note.author.reference.type]   VARCHAR(256)        '$.author.reference.type',
        [note.author.reference.identifier] NVARCHAR(MAX)       '$.author.reference.identifier',
        [note.author.reference.display] NVARCHAR(4000)      '$.author.reference.display',
        [note.author.string]           NVARCHAR(4000)      '$.author.string'
    ) j

GO

CREATE VIEW fhir.CitationCurrentState AS
SELECT
    [id],
    [currentState.JSON],
    [currentState.id],
    [currentState.extension],
    [currentState.coding],
    [currentState.text]
FROM openrowset (
        BULK 'Citation/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [currentState.JSON]  VARCHAR(MAX) '$.currentState'
    ) AS rowset
    CROSS APPLY openjson (rowset.[currentState.JSON]) with (
        [currentState.id]              NVARCHAR(100)       '$.id',
        [currentState.extension]       NVARCHAR(MAX)       '$.extension',
        [currentState.coding]          NVARCHAR(MAX)       '$.coding' AS JSON,
        [currentState.text]            NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.CitationStatusDate AS
SELECT
    [id],
    [statusDate.JSON],
    [statusDate.id],
    [statusDate.extension],
    [statusDate.modifierExtension],
    [statusDate.activity.id],
    [statusDate.activity.extension],
    [statusDate.activity.coding],
    [statusDate.activity.text],
    [statusDate.actual],
    [statusDate.period.id],
    [statusDate.period.extension],
    [statusDate.period.start],
    [statusDate.period.end]
FROM openrowset (
        BULK 'Citation/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [statusDate.JSON]  VARCHAR(MAX) '$.statusDate'
    ) AS rowset
    CROSS APPLY openjson (rowset.[statusDate.JSON]) with (
        [statusDate.id]                NVARCHAR(100)       '$.id',
        [statusDate.extension]         NVARCHAR(MAX)       '$.extension',
        [statusDate.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [statusDate.activity.id]       NVARCHAR(100)       '$.activity.id',
        [statusDate.activity.extension] NVARCHAR(MAX)       '$.activity.extension',
        [statusDate.activity.coding]   NVARCHAR(MAX)       '$.activity.coding',
        [statusDate.activity.text]     NVARCHAR(4000)      '$.activity.text',
        [statusDate.actual]            bit                 '$.actual',
        [statusDate.period.id]         NVARCHAR(100)       '$.period.id',
        [statusDate.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [statusDate.period.start]      VARCHAR(64)         '$.period.start',
        [statusDate.period.end]        VARCHAR(64)         '$.period.end'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[Claim] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [status] NVARCHAR(100),
    [type.id] NVARCHAR(100),
    [type.extension] NVARCHAR(MAX),
    [type.coding] VARCHAR(MAX),
    [type.text] NVARCHAR(4000),
    [subType.id] NVARCHAR(100),
    [subType.extension] NVARCHAR(MAX),
    [subType.coding] VARCHAR(MAX),
    [subType.text] NVARCHAR(4000),
    [use] NVARCHAR(100),
    [patient.id] NVARCHAR(100),
    [patient.extension] NVARCHAR(MAX),
    [patient.reference] NVARCHAR(4000),
    [patient.type] VARCHAR(256),
    [patient.identifier.id] NVARCHAR(100),
    [patient.identifier.extension] NVARCHAR(MAX),
    [patient.identifier.use] NVARCHAR(64),
    [patient.identifier.type] NVARCHAR(MAX),
    [patient.identifier.system] VARCHAR(256),
    [patient.identifier.value] NVARCHAR(4000),
    [patient.identifier.period] NVARCHAR(MAX),
    [patient.identifier.assigner] NVARCHAR(MAX),
    [patient.display] NVARCHAR(4000),
    [billablePeriod.id] NVARCHAR(100),
    [billablePeriod.extension] NVARCHAR(MAX),
    [billablePeriod.start] VARCHAR(64),
    [billablePeriod.end] VARCHAR(64),
    [created] VARCHAR(64),
    [enterer.id] NVARCHAR(100),
    [enterer.extension] NVARCHAR(MAX),
    [enterer.reference] NVARCHAR(4000),
    [enterer.type] VARCHAR(256),
    [enterer.identifier.id] NVARCHAR(100),
    [enterer.identifier.extension] NVARCHAR(MAX),
    [enterer.identifier.use] NVARCHAR(64),
    [enterer.identifier.type] NVARCHAR(MAX),
    [enterer.identifier.system] VARCHAR(256),
    [enterer.identifier.value] NVARCHAR(4000),
    [enterer.identifier.period] NVARCHAR(MAX),
    [enterer.identifier.assigner] NVARCHAR(MAX),
    [enterer.display] NVARCHAR(4000),
    [insurer.id] NVARCHAR(100),
    [insurer.extension] NVARCHAR(MAX),
    [insurer.reference] NVARCHAR(4000),
    [insurer.type] VARCHAR(256),
    [insurer.identifier.id] NVARCHAR(100),
    [insurer.identifier.extension] NVARCHAR(MAX),
    [insurer.identifier.use] NVARCHAR(64),
    [insurer.identifier.type] NVARCHAR(MAX),
    [insurer.identifier.system] VARCHAR(256),
    [insurer.identifier.value] NVARCHAR(4000),
    [insurer.identifier.period] NVARCHAR(MAX),
    [insurer.identifier.assigner] NVARCHAR(MAX),
    [insurer.display] NVARCHAR(4000),
    [provider.id] NVARCHAR(100),
    [provider.extension] NVARCHAR(MAX),
    [provider.reference] NVARCHAR(4000),
    [provider.type] VARCHAR(256),
    [provider.identifier.id] NVARCHAR(100),
    [provider.identifier.extension] NVARCHAR(MAX),
    [provider.identifier.use] NVARCHAR(64),
    [provider.identifier.type] NVARCHAR(MAX),
    [provider.identifier.system] VARCHAR(256),
    [provider.identifier.value] NVARCHAR(4000),
    [provider.identifier.period] NVARCHAR(MAX),
    [provider.identifier.assigner] NVARCHAR(MAX),
    [provider.display] NVARCHAR(4000),
    [priority.id] NVARCHAR(100),
    [priority.extension] NVARCHAR(MAX),
    [priority.coding] VARCHAR(MAX),
    [priority.text] NVARCHAR(4000),
    [fundsReserve.id] NVARCHAR(100),
    [fundsReserve.extension] NVARCHAR(MAX),
    [fundsReserve.coding] VARCHAR(MAX),
    [fundsReserve.text] NVARCHAR(4000),
    [related] VARCHAR(MAX),
    [prescription.id] NVARCHAR(100),
    [prescription.extension] NVARCHAR(MAX),
    [prescription.reference] NVARCHAR(4000),
    [prescription.type] VARCHAR(256),
    [prescription.identifier.id] NVARCHAR(100),
    [prescription.identifier.extension] NVARCHAR(MAX),
    [prescription.identifier.use] NVARCHAR(64),
    [prescription.identifier.type] NVARCHAR(MAX),
    [prescription.identifier.system] VARCHAR(256),
    [prescription.identifier.value] NVARCHAR(4000),
    [prescription.identifier.period] NVARCHAR(MAX),
    [prescription.identifier.assigner] NVARCHAR(MAX),
    [prescription.display] NVARCHAR(4000),
    [originalPrescription.id] NVARCHAR(100),
    [originalPrescription.extension] NVARCHAR(MAX),
    [originalPrescription.reference] NVARCHAR(4000),
    [originalPrescription.type] VARCHAR(256),
    [originalPrescription.identifier.id] NVARCHAR(100),
    [originalPrescription.identifier.extension] NVARCHAR(MAX),
    [originalPrescription.identifier.use] NVARCHAR(64),
    [originalPrescription.identifier.type] NVARCHAR(MAX),
    [originalPrescription.identifier.system] VARCHAR(256),
    [originalPrescription.identifier.value] NVARCHAR(4000),
    [originalPrescription.identifier.period] NVARCHAR(MAX),
    [originalPrescription.identifier.assigner] NVARCHAR(MAX),
    [originalPrescription.display] NVARCHAR(4000),
    [payee.id] NVARCHAR(100),
    [payee.extension] NVARCHAR(MAX),
    [payee.modifierExtension] NVARCHAR(MAX),
    [payee.type.id] NVARCHAR(100),
    [payee.type.extension] NVARCHAR(MAX),
    [payee.type.coding] NVARCHAR(MAX),
    [payee.type.text] NVARCHAR(4000),
    [payee.party.id] NVARCHAR(100),
    [payee.party.extension] NVARCHAR(MAX),
    [payee.party.reference] NVARCHAR(4000),
    [payee.party.type] VARCHAR(256),
    [payee.party.identifier] NVARCHAR(MAX),
    [payee.party.display] NVARCHAR(4000),
    [referral.id] NVARCHAR(100),
    [referral.extension] NVARCHAR(MAX),
    [referral.reference] NVARCHAR(4000),
    [referral.type] VARCHAR(256),
    [referral.identifier.id] NVARCHAR(100),
    [referral.identifier.extension] NVARCHAR(MAX),
    [referral.identifier.use] NVARCHAR(64),
    [referral.identifier.type] NVARCHAR(MAX),
    [referral.identifier.system] VARCHAR(256),
    [referral.identifier.value] NVARCHAR(4000),
    [referral.identifier.period] NVARCHAR(MAX),
    [referral.identifier.assigner] NVARCHAR(MAX),
    [referral.display] NVARCHAR(4000),
    [facility.id] NVARCHAR(100),
    [facility.extension] NVARCHAR(MAX),
    [facility.reference] NVARCHAR(4000),
    [facility.type] VARCHAR(256),
    [facility.identifier.id] NVARCHAR(100),
    [facility.identifier.extension] NVARCHAR(MAX),
    [facility.identifier.use] NVARCHAR(64),
    [facility.identifier.type] NVARCHAR(MAX),
    [facility.identifier.system] VARCHAR(256),
    [facility.identifier.value] NVARCHAR(4000),
    [facility.identifier.period] NVARCHAR(MAX),
    [facility.identifier.assigner] NVARCHAR(MAX),
    [facility.display] NVARCHAR(4000),
    [careTeam] VARCHAR(MAX),
    [supportingInfo] VARCHAR(MAX),
    [diagnosis] VARCHAR(MAX),
    [procedure] VARCHAR(MAX),
    [insurance] VARCHAR(MAX),
    [accident.id] NVARCHAR(100),
    [accident.extension] NVARCHAR(MAX),
    [accident.modifierExtension] NVARCHAR(MAX),
    [accident.date] VARCHAR(64),
    [accident.type.id] NVARCHAR(100),
    [accident.type.extension] NVARCHAR(MAX),
    [accident.type.coding] NVARCHAR(MAX),
    [accident.type.text] NVARCHAR(4000),
    [accident.location.address.id] NVARCHAR(100),
    [accident.location.address.extension] NVARCHAR(MAX),
    [accident.location.address.use] NVARCHAR(64),
    [accident.location.address.type] NVARCHAR(64),
    [accident.location.address.text] NVARCHAR(4000),
    [accident.location.address.line] NVARCHAR(MAX),
    [accident.location.address.city] NVARCHAR(500),
    [accident.location.address.district] NVARCHAR(500),
    [accident.location.address.state] NVARCHAR(500),
    [accident.location.address.postalCode] NVARCHAR(100),
    [accident.location.address.country] NVARCHAR(500),
    [accident.location.address.period] NVARCHAR(MAX),
    [accident.location.reference.id] NVARCHAR(100),
    [accident.location.reference.extension] NVARCHAR(MAX),
    [accident.location.reference.reference] NVARCHAR(4000),
    [accident.location.reference.type] VARCHAR(256),
    [accident.location.reference.identifier] NVARCHAR(MAX),
    [accident.location.reference.display] NVARCHAR(4000),
    [item] VARCHAR(MAX),
    [total.id] NVARCHAR(100),
    [total.extension] NVARCHAR(MAX),
    [total.value] float,
    [total.currency] NVARCHAR(100),
) WITH (
    LOCATION='/Claim/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.ClaimIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'Claim/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.ClaimRelated AS
SELECT
    [id],
    [related.JSON],
    [related.id],
    [related.extension],
    [related.modifierExtension],
    [related.claim.id],
    [related.claim.extension],
    [related.claim.reference],
    [related.claim.type],
    [related.claim.identifier],
    [related.claim.display],
    [related.relationship.id],
    [related.relationship.extension],
    [related.relationship.coding],
    [related.relationship.text],
    [related.reference.id],
    [related.reference.extension],
    [related.reference.use],
    [related.reference.type],
    [related.reference.system],
    [related.reference.value],
    [related.reference.period],
    [related.reference.assigner]
FROM openrowset (
        BULK 'Claim/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [related.JSON]  VARCHAR(MAX) '$.related'
    ) AS rowset
    CROSS APPLY openjson (rowset.[related.JSON]) with (
        [related.id]                   NVARCHAR(100)       '$.id',
        [related.extension]            NVARCHAR(MAX)       '$.extension',
        [related.modifierExtension]    NVARCHAR(MAX)       '$.modifierExtension',
        [related.claim.id]             NVARCHAR(100)       '$.claim.id',
        [related.claim.extension]      NVARCHAR(MAX)       '$.claim.extension',
        [related.claim.reference]      NVARCHAR(4000)      '$.claim.reference',
        [related.claim.type]           VARCHAR(256)        '$.claim.type',
        [related.claim.identifier]     NVARCHAR(MAX)       '$.claim.identifier',
        [related.claim.display]        NVARCHAR(4000)      '$.claim.display',
        [related.relationship.id]      NVARCHAR(100)       '$.relationship.id',
        [related.relationship.extension] NVARCHAR(MAX)       '$.relationship.extension',
        [related.relationship.coding]  NVARCHAR(MAX)       '$.relationship.coding',
        [related.relationship.text]    NVARCHAR(4000)      '$.relationship.text',
        [related.reference.id]         NVARCHAR(100)       '$.reference.id',
        [related.reference.extension]  NVARCHAR(MAX)       '$.reference.extension',
        [related.reference.use]        NVARCHAR(64)        '$.reference.use',
        [related.reference.type]       NVARCHAR(MAX)       '$.reference.type',
        [related.reference.system]     VARCHAR(256)        '$.reference.system',
        [related.reference.value]      NVARCHAR(4000)      '$.reference.value',
        [related.reference.period]     NVARCHAR(MAX)       '$.reference.period',
        [related.reference.assigner]   NVARCHAR(MAX)       '$.reference.assigner'
    ) j

GO

CREATE VIEW fhir.ClaimCareTeam AS
SELECT
    [id],
    [careTeam.JSON],
    [careTeam.id],
    [careTeam.extension],
    [careTeam.modifierExtension],
    [careTeam.sequence],
    [careTeam.provider.id],
    [careTeam.provider.extension],
    [careTeam.provider.reference],
    [careTeam.provider.type],
    [careTeam.provider.identifier],
    [careTeam.provider.display],
    [careTeam.responsible],
    [careTeam.role.id],
    [careTeam.role.extension],
    [careTeam.role.coding],
    [careTeam.role.text],
    [careTeam.qualification.id],
    [careTeam.qualification.extension],
    [careTeam.qualification.coding],
    [careTeam.qualification.text]
FROM openrowset (
        BULK 'Claim/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [careTeam.JSON]  VARCHAR(MAX) '$.careTeam'
    ) AS rowset
    CROSS APPLY openjson (rowset.[careTeam.JSON]) with (
        [careTeam.id]                  NVARCHAR(100)       '$.id',
        [careTeam.extension]           NVARCHAR(MAX)       '$.extension',
        [careTeam.modifierExtension]   NVARCHAR(MAX)       '$.modifierExtension',
        [careTeam.sequence]            bigint              '$.sequence',
        [careTeam.provider.id]         NVARCHAR(100)       '$.provider.id',
        [careTeam.provider.extension]  NVARCHAR(MAX)       '$.provider.extension',
        [careTeam.provider.reference]  NVARCHAR(4000)      '$.provider.reference',
        [careTeam.provider.type]       VARCHAR(256)        '$.provider.type',
        [careTeam.provider.identifier] NVARCHAR(MAX)       '$.provider.identifier',
        [careTeam.provider.display]    NVARCHAR(4000)      '$.provider.display',
        [careTeam.responsible]         bit                 '$.responsible',
        [careTeam.role.id]             NVARCHAR(100)       '$.role.id',
        [careTeam.role.extension]      NVARCHAR(MAX)       '$.role.extension',
        [careTeam.role.coding]         NVARCHAR(MAX)       '$.role.coding',
        [careTeam.role.text]           NVARCHAR(4000)      '$.role.text',
        [careTeam.qualification.id]    NVARCHAR(100)       '$.qualification.id',
        [careTeam.qualification.extension] NVARCHAR(MAX)       '$.qualification.extension',
        [careTeam.qualification.coding] NVARCHAR(MAX)       '$.qualification.coding',
        [careTeam.qualification.text]  NVARCHAR(4000)      '$.qualification.text'
    ) j

GO

CREATE VIEW fhir.ClaimSupportingInfo AS
SELECT
    [id],
    [supportingInfo.JSON],
    [supportingInfo.id],
    [supportingInfo.extension],
    [supportingInfo.modifierExtension],
    [supportingInfo.sequence],
    [supportingInfo.category.id],
    [supportingInfo.category.extension],
    [supportingInfo.category.coding],
    [supportingInfo.category.text],
    [supportingInfo.code.id],
    [supportingInfo.code.extension],
    [supportingInfo.code.coding],
    [supportingInfo.code.text],
    [supportingInfo.reason.id],
    [supportingInfo.reason.extension],
    [supportingInfo.reason.coding],
    [supportingInfo.reason.text],
    [supportingInfo.timing.date],
    [supportingInfo.timing.period.id],
    [supportingInfo.timing.period.extension],
    [supportingInfo.timing.period.start],
    [supportingInfo.timing.period.end],
    [supportingInfo.value.boolean],
    [supportingInfo.value.string],
    [supportingInfo.value.quantity.id],
    [supportingInfo.value.quantity.extension],
    [supportingInfo.value.quantity.value],
    [supportingInfo.value.quantity.comparator],
    [supportingInfo.value.quantity.unit],
    [supportingInfo.value.quantity.system],
    [supportingInfo.value.quantity.code],
    [supportingInfo.value.attachment.id],
    [supportingInfo.value.attachment.extension],
    [supportingInfo.value.attachment.contentType],
    [supportingInfo.value.attachment.language],
    [supportingInfo.value.attachment.data],
    [supportingInfo.value.attachment.url],
    [supportingInfo.value.attachment.size],
    [supportingInfo.value.attachment.hash],
    [supportingInfo.value.attachment.title],
    [supportingInfo.value.attachment.creation],
    [supportingInfo.value.attachment.height],
    [supportingInfo.value.attachment.width],
    [supportingInfo.value.attachment.frames],
    [supportingInfo.value.attachment.duration],
    [supportingInfo.value.attachment.pages],
    [supportingInfo.value.reference.id],
    [supportingInfo.value.reference.extension],
    [supportingInfo.value.reference.reference],
    [supportingInfo.value.reference.type],
    [supportingInfo.value.reference.identifier],
    [supportingInfo.value.reference.display]
FROM openrowset (
        BULK 'Claim/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [supportingInfo.JSON]  VARCHAR(MAX) '$.supportingInfo'
    ) AS rowset
    CROSS APPLY openjson (rowset.[supportingInfo.JSON]) with (
        [supportingInfo.id]            NVARCHAR(100)       '$.id',
        [supportingInfo.extension]     NVARCHAR(MAX)       '$.extension',
        [supportingInfo.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [supportingInfo.sequence]      bigint              '$.sequence',
        [supportingInfo.category.id]   NVARCHAR(100)       '$.category.id',
        [supportingInfo.category.extension] NVARCHAR(MAX)       '$.category.extension',
        [supportingInfo.category.coding] NVARCHAR(MAX)       '$.category.coding',
        [supportingInfo.category.text] NVARCHAR(4000)      '$.category.text',
        [supportingInfo.code.id]       NVARCHAR(100)       '$.code.id',
        [supportingInfo.code.extension] NVARCHAR(MAX)       '$.code.extension',
        [supportingInfo.code.coding]   NVARCHAR(MAX)       '$.code.coding',
        [supportingInfo.code.text]     NVARCHAR(4000)      '$.code.text',
        [supportingInfo.reason.id]     NVARCHAR(100)       '$.reason.id',
        [supportingInfo.reason.extension] NVARCHAR(MAX)       '$.reason.extension',
        [supportingInfo.reason.coding] NVARCHAR(MAX)       '$.reason.coding',
        [supportingInfo.reason.text]   NVARCHAR(4000)      '$.reason.text',
        [supportingInfo.timing.date]   VARCHAR(64)         '$.timing.date',
        [supportingInfo.timing.period.id] NVARCHAR(100)       '$.timing.period.id',
        [supportingInfo.timing.period.extension] NVARCHAR(MAX)       '$.timing.period.extension',
        [supportingInfo.timing.period.start] VARCHAR(64)         '$.timing.period.start',
        [supportingInfo.timing.period.end] VARCHAR(64)         '$.timing.period.end',
        [supportingInfo.value.boolean] bit                 '$.value.boolean',
        [supportingInfo.value.string]  NVARCHAR(4000)      '$.value.string',
        [supportingInfo.value.quantity.id] NVARCHAR(100)       '$.value.quantity.id',
        [supportingInfo.value.quantity.extension] NVARCHAR(MAX)       '$.value.quantity.extension',
        [supportingInfo.value.quantity.value] float               '$.value.quantity.value',
        [supportingInfo.value.quantity.comparator] NVARCHAR(64)        '$.value.quantity.comparator',
        [supportingInfo.value.quantity.unit] NVARCHAR(100)       '$.value.quantity.unit',
        [supportingInfo.value.quantity.system] VARCHAR(256)        '$.value.quantity.system',
        [supportingInfo.value.quantity.code] NVARCHAR(4000)      '$.value.quantity.code',
        [supportingInfo.value.attachment.id] NVARCHAR(100)       '$.value.attachment.id',
        [supportingInfo.value.attachment.extension] NVARCHAR(MAX)       '$.value.attachment.extension',
        [supportingInfo.value.attachment.contentType] NVARCHAR(100)       '$.value.attachment.contentType',
        [supportingInfo.value.attachment.language] NVARCHAR(100)       '$.value.attachment.language',
        [supportingInfo.value.attachment.data] NVARCHAR(MAX)       '$.value.attachment.data',
        [supportingInfo.value.attachment.url] VARCHAR(256)        '$.value.attachment.url',
        [supportingInfo.value.attachment.size] NVARCHAR(MAX)       '$.value.attachment.size',
        [supportingInfo.value.attachment.hash] NVARCHAR(MAX)       '$.value.attachment.hash',
        [supportingInfo.value.attachment.title] NVARCHAR(4000)      '$.value.attachment.title',
        [supportingInfo.value.attachment.creation] VARCHAR(64)         '$.value.attachment.creation',
        [supportingInfo.value.attachment.height] bigint              '$.value.attachment.height',
        [supportingInfo.value.attachment.width] bigint              '$.value.attachment.width',
        [supportingInfo.value.attachment.frames] bigint              '$.value.attachment.frames',
        [supportingInfo.value.attachment.duration] float               '$.value.attachment.duration',
        [supportingInfo.value.attachment.pages] bigint              '$.value.attachment.pages',
        [supportingInfo.value.reference.id] NVARCHAR(100)       '$.value.reference.id',
        [supportingInfo.value.reference.extension] NVARCHAR(MAX)       '$.value.reference.extension',
        [supportingInfo.value.reference.reference] NVARCHAR(4000)      '$.value.reference.reference',
        [supportingInfo.value.reference.type] VARCHAR(256)        '$.value.reference.type',
        [supportingInfo.value.reference.identifier] NVARCHAR(MAX)       '$.value.reference.identifier',
        [supportingInfo.value.reference.display] NVARCHAR(4000)      '$.value.reference.display'
    ) j

GO

CREATE VIEW fhir.ClaimDiagnosis AS
SELECT
    [id],
    [diagnosis.JSON],
    [diagnosis.id],
    [diagnosis.extension],
    [diagnosis.modifierExtension],
    [diagnosis.sequence],
    [diagnosis.type],
    [diagnosis.onAdmission.id],
    [diagnosis.onAdmission.extension],
    [diagnosis.onAdmission.coding],
    [diagnosis.onAdmission.text],
    [diagnosis.packageCode.id],
    [diagnosis.packageCode.extension],
    [diagnosis.packageCode.coding],
    [diagnosis.packageCode.text],
    [diagnosis.diagnosis.codeableConcept.id],
    [diagnosis.diagnosis.codeableConcept.extension],
    [diagnosis.diagnosis.codeableConcept.coding],
    [diagnosis.diagnosis.codeableConcept.text],
    [diagnosis.diagnosis.reference.id],
    [diagnosis.diagnosis.reference.extension],
    [diagnosis.diagnosis.reference.reference],
    [diagnosis.diagnosis.reference.type],
    [diagnosis.diagnosis.reference.identifier],
    [diagnosis.diagnosis.reference.display]
FROM openrowset (
        BULK 'Claim/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [diagnosis.JSON]  VARCHAR(MAX) '$.diagnosis'
    ) AS rowset
    CROSS APPLY openjson (rowset.[diagnosis.JSON]) with (
        [diagnosis.id]                 NVARCHAR(100)       '$.id',
        [diagnosis.extension]          NVARCHAR(MAX)       '$.extension',
        [diagnosis.modifierExtension]  NVARCHAR(MAX)       '$.modifierExtension',
        [diagnosis.sequence]           bigint              '$.sequence',
        [diagnosis.type]               NVARCHAR(MAX)       '$.type' AS JSON,
        [diagnosis.onAdmission.id]     NVARCHAR(100)       '$.onAdmission.id',
        [diagnosis.onAdmission.extension] NVARCHAR(MAX)       '$.onAdmission.extension',
        [diagnosis.onAdmission.coding] NVARCHAR(MAX)       '$.onAdmission.coding',
        [diagnosis.onAdmission.text]   NVARCHAR(4000)      '$.onAdmission.text',
        [diagnosis.packageCode.id]     NVARCHAR(100)       '$.packageCode.id',
        [diagnosis.packageCode.extension] NVARCHAR(MAX)       '$.packageCode.extension',
        [diagnosis.packageCode.coding] NVARCHAR(MAX)       '$.packageCode.coding',
        [diagnosis.packageCode.text]   NVARCHAR(4000)      '$.packageCode.text',
        [diagnosis.diagnosis.codeableConcept.id] NVARCHAR(100)       '$.diagnosis.codeableConcept.id',
        [diagnosis.diagnosis.codeableConcept.extension] NVARCHAR(MAX)       '$.diagnosis.codeableConcept.extension',
        [diagnosis.diagnosis.codeableConcept.coding] NVARCHAR(MAX)       '$.diagnosis.codeableConcept.coding',
        [diagnosis.diagnosis.codeableConcept.text] NVARCHAR(4000)      '$.diagnosis.codeableConcept.text',
        [diagnosis.diagnosis.reference.id] NVARCHAR(100)       '$.diagnosis.reference.id',
        [diagnosis.diagnosis.reference.extension] NVARCHAR(MAX)       '$.diagnosis.reference.extension',
        [diagnosis.diagnosis.reference.reference] NVARCHAR(4000)      '$.diagnosis.reference.reference',
        [diagnosis.diagnosis.reference.type] VARCHAR(256)        '$.diagnosis.reference.type',
        [diagnosis.diagnosis.reference.identifier] NVARCHAR(MAX)       '$.diagnosis.reference.identifier',
        [diagnosis.diagnosis.reference.display] NVARCHAR(4000)      '$.diagnosis.reference.display'
    ) j

GO

CREATE VIEW fhir.ClaimProcedure AS
SELECT
    [id],
    [procedure.JSON],
    [procedure.id],
    [procedure.extension],
    [procedure.modifierExtension],
    [procedure.sequence],
    [procedure.type],
    [procedure.date],
    [procedure.udi],
    [procedure.procedure.codeableConcept.id],
    [procedure.procedure.codeableConcept.extension],
    [procedure.procedure.codeableConcept.coding],
    [procedure.procedure.codeableConcept.text],
    [procedure.procedure.reference.id],
    [procedure.procedure.reference.extension],
    [procedure.procedure.reference.reference],
    [procedure.procedure.reference.type],
    [procedure.procedure.reference.identifier],
    [procedure.procedure.reference.display]
FROM openrowset (
        BULK 'Claim/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [procedure.JSON]  VARCHAR(MAX) '$.procedure'
    ) AS rowset
    CROSS APPLY openjson (rowset.[procedure.JSON]) with (
        [procedure.id]                 NVARCHAR(100)       '$.id',
        [procedure.extension]          NVARCHAR(MAX)       '$.extension',
        [procedure.modifierExtension]  NVARCHAR(MAX)       '$.modifierExtension',
        [procedure.sequence]           bigint              '$.sequence',
        [procedure.type]               NVARCHAR(MAX)       '$.type' AS JSON,
        [procedure.date]               VARCHAR(64)         '$.date',
        [procedure.udi]                NVARCHAR(MAX)       '$.udi' AS JSON,
        [procedure.procedure.codeableConcept.id] NVARCHAR(100)       '$.procedure.codeableConcept.id',
        [procedure.procedure.codeableConcept.extension] NVARCHAR(MAX)       '$.procedure.codeableConcept.extension',
        [procedure.procedure.codeableConcept.coding] NVARCHAR(MAX)       '$.procedure.codeableConcept.coding',
        [procedure.procedure.codeableConcept.text] NVARCHAR(4000)      '$.procedure.codeableConcept.text',
        [procedure.procedure.reference.id] NVARCHAR(100)       '$.procedure.reference.id',
        [procedure.procedure.reference.extension] NVARCHAR(MAX)       '$.procedure.reference.extension',
        [procedure.procedure.reference.reference] NVARCHAR(4000)      '$.procedure.reference.reference',
        [procedure.procedure.reference.type] VARCHAR(256)        '$.procedure.reference.type',
        [procedure.procedure.reference.identifier] NVARCHAR(MAX)       '$.procedure.reference.identifier',
        [procedure.procedure.reference.display] NVARCHAR(4000)      '$.procedure.reference.display'
    ) j

GO

CREATE VIEW fhir.ClaimInsurance AS
SELECT
    [id],
    [insurance.JSON],
    [insurance.id],
    [insurance.extension],
    [insurance.modifierExtension],
    [insurance.sequence],
    [insurance.focal],
    [insurance.identifier.id],
    [insurance.identifier.extension],
    [insurance.identifier.use],
    [insurance.identifier.type],
    [insurance.identifier.system],
    [insurance.identifier.value],
    [insurance.identifier.period],
    [insurance.identifier.assigner],
    [insurance.coverage.id],
    [insurance.coverage.extension],
    [insurance.coverage.reference],
    [insurance.coverage.type],
    [insurance.coverage.identifier],
    [insurance.coverage.display],
    [insurance.businessArrangement],
    [insurance.preAuthRef],
    [insurance.claimResponse.id],
    [insurance.claimResponse.extension],
    [insurance.claimResponse.reference],
    [insurance.claimResponse.type],
    [insurance.claimResponse.identifier],
    [insurance.claimResponse.display]
FROM openrowset (
        BULK 'Claim/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [insurance.JSON]  VARCHAR(MAX) '$.insurance'
    ) AS rowset
    CROSS APPLY openjson (rowset.[insurance.JSON]) with (
        [insurance.id]                 NVARCHAR(100)       '$.id',
        [insurance.extension]          NVARCHAR(MAX)       '$.extension',
        [insurance.modifierExtension]  NVARCHAR(MAX)       '$.modifierExtension',
        [insurance.sequence]           bigint              '$.sequence',
        [insurance.focal]              bit                 '$.focal',
        [insurance.identifier.id]      NVARCHAR(100)       '$.identifier.id',
        [insurance.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [insurance.identifier.use]     NVARCHAR(64)        '$.identifier.use',
        [insurance.identifier.type]    NVARCHAR(MAX)       '$.identifier.type',
        [insurance.identifier.system]  VARCHAR(256)        '$.identifier.system',
        [insurance.identifier.value]   NVARCHAR(4000)      '$.identifier.value',
        [insurance.identifier.period]  NVARCHAR(MAX)       '$.identifier.period',
        [insurance.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [insurance.coverage.id]        NVARCHAR(100)       '$.coverage.id',
        [insurance.coverage.extension] NVARCHAR(MAX)       '$.coverage.extension',
        [insurance.coverage.reference] NVARCHAR(4000)      '$.coverage.reference',
        [insurance.coverage.type]      VARCHAR(256)        '$.coverage.type',
        [insurance.coverage.identifier] NVARCHAR(MAX)       '$.coverage.identifier',
        [insurance.coverage.display]   NVARCHAR(4000)      '$.coverage.display',
        [insurance.businessArrangement] NVARCHAR(4000)      '$.businessArrangement',
        [insurance.preAuthRef]         NVARCHAR(MAX)       '$.preAuthRef' AS JSON,
        [insurance.claimResponse.id]   NVARCHAR(100)       '$.claimResponse.id',
        [insurance.claimResponse.extension] NVARCHAR(MAX)       '$.claimResponse.extension',
        [insurance.claimResponse.reference] NVARCHAR(4000)      '$.claimResponse.reference',
        [insurance.claimResponse.type] VARCHAR(256)        '$.claimResponse.type',
        [insurance.claimResponse.identifier] NVARCHAR(MAX)       '$.claimResponse.identifier',
        [insurance.claimResponse.display] NVARCHAR(4000)      '$.claimResponse.display'
    ) j

GO

CREATE VIEW fhir.ClaimItem AS
SELECT
    [id],
    [item.JSON],
    [item.id],
    [item.extension],
    [item.modifierExtension],
    [item.sequence],
    [item.careTeamSequence],
    [item.diagnosisSequence],
    [item.procedureSequence],
    [item.informationSequence],
    [item.revenue.id],
    [item.revenue.extension],
    [item.revenue.coding],
    [item.revenue.text],
    [item.category.id],
    [item.category.extension],
    [item.category.coding],
    [item.category.text],
    [item.productOrService.id],
    [item.productOrService.extension],
    [item.productOrService.coding],
    [item.productOrService.text],
    [item.modifier],
    [item.programCode],
    [item.quantity.id],
    [item.quantity.extension],
    [item.quantity.value],
    [item.quantity.comparator],
    [item.quantity.unit],
    [item.quantity.system],
    [item.quantity.code],
    [item.unitPrice.id],
    [item.unitPrice.extension],
    [item.unitPrice.value],
    [item.unitPrice.currency],
    [item.factor],
    [item.net.id],
    [item.net.extension],
    [item.net.value],
    [item.net.currency],
    [item.udi],
    [item.bodySite.id],
    [item.bodySite.extension],
    [item.bodySite.coding],
    [item.bodySite.text],
    [item.subSite],
    [item.encounter],
    [item.detail],
    [item.serviced.date],
    [item.serviced.period.id],
    [item.serviced.period.extension],
    [item.serviced.period.start],
    [item.serviced.period.end],
    [item.location.codeableConcept.id],
    [item.location.codeableConcept.extension],
    [item.location.codeableConcept.coding],
    [item.location.codeableConcept.text],
    [item.location.address.id],
    [item.location.address.extension],
    [item.location.address.use],
    [item.location.address.type],
    [item.location.address.text],
    [item.location.address.line],
    [item.location.address.city],
    [item.location.address.district],
    [item.location.address.state],
    [item.location.address.postalCode],
    [item.location.address.country],
    [item.location.address.period],
    [item.location.reference.id],
    [item.location.reference.extension],
    [item.location.reference.reference],
    [item.location.reference.type],
    [item.location.reference.identifier],
    [item.location.reference.display]
FROM openrowset (
        BULK 'Claim/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [item.JSON]  VARCHAR(MAX) '$.item'
    ) AS rowset
    CROSS APPLY openjson (rowset.[item.JSON]) with (
        [item.id]                      NVARCHAR(100)       '$.id',
        [item.extension]               NVARCHAR(MAX)       '$.extension',
        [item.modifierExtension]       NVARCHAR(MAX)       '$.modifierExtension',
        [item.sequence]                bigint              '$.sequence',
        [item.careTeamSequence]        NVARCHAR(MAX)       '$.careTeamSequence' AS JSON,
        [item.diagnosisSequence]       NVARCHAR(MAX)       '$.diagnosisSequence' AS JSON,
        [item.procedureSequence]       NVARCHAR(MAX)       '$.procedureSequence' AS JSON,
        [item.informationSequence]     NVARCHAR(MAX)       '$.informationSequence' AS JSON,
        [item.revenue.id]              NVARCHAR(100)       '$.revenue.id',
        [item.revenue.extension]       NVARCHAR(MAX)       '$.revenue.extension',
        [item.revenue.coding]          NVARCHAR(MAX)       '$.revenue.coding',
        [item.revenue.text]            NVARCHAR(4000)      '$.revenue.text',
        [item.category.id]             NVARCHAR(100)       '$.category.id',
        [item.category.extension]      NVARCHAR(MAX)       '$.category.extension',
        [item.category.coding]         NVARCHAR(MAX)       '$.category.coding',
        [item.category.text]           NVARCHAR(4000)      '$.category.text',
        [item.productOrService.id]     NVARCHAR(100)       '$.productOrService.id',
        [item.productOrService.extension] NVARCHAR(MAX)       '$.productOrService.extension',
        [item.productOrService.coding] NVARCHAR(MAX)       '$.productOrService.coding',
        [item.productOrService.text]   NVARCHAR(4000)      '$.productOrService.text',
        [item.modifier]                NVARCHAR(MAX)       '$.modifier' AS JSON,
        [item.programCode]             NVARCHAR(MAX)       '$.programCode' AS JSON,
        [item.quantity.id]             NVARCHAR(100)       '$.quantity.id',
        [item.quantity.extension]      NVARCHAR(MAX)       '$.quantity.extension',
        [item.quantity.value]          float               '$.quantity.value',
        [item.quantity.comparator]     NVARCHAR(64)        '$.quantity.comparator',
        [item.quantity.unit]           NVARCHAR(100)       '$.quantity.unit',
        [item.quantity.system]         VARCHAR(256)        '$.quantity.system',
        [item.quantity.code]           NVARCHAR(4000)      '$.quantity.code',
        [item.unitPrice.id]            NVARCHAR(100)       '$.unitPrice.id',
        [item.unitPrice.extension]     NVARCHAR(MAX)       '$.unitPrice.extension',
        [item.unitPrice.value]         float               '$.unitPrice.value',
        [item.unitPrice.currency]      NVARCHAR(100)       '$.unitPrice.currency',
        [item.factor]                  float               '$.factor',
        [item.net.id]                  NVARCHAR(100)       '$.net.id',
        [item.net.extension]           NVARCHAR(MAX)       '$.net.extension',
        [item.net.value]               float               '$.net.value',
        [item.net.currency]            NVARCHAR(100)       '$.net.currency',
        [item.udi]                     NVARCHAR(MAX)       '$.udi' AS JSON,
        [item.bodySite.id]             NVARCHAR(100)       '$.bodySite.id',
        [item.bodySite.extension]      NVARCHAR(MAX)       '$.bodySite.extension',
        [item.bodySite.coding]         NVARCHAR(MAX)       '$.bodySite.coding',
        [item.bodySite.text]           NVARCHAR(4000)      '$.bodySite.text',
        [item.subSite]                 NVARCHAR(MAX)       '$.subSite' AS JSON,
        [item.encounter]               NVARCHAR(MAX)       '$.encounter' AS JSON,
        [item.detail]                  NVARCHAR(MAX)       '$.detail' AS JSON,
        [item.serviced.date]           VARCHAR(64)         '$.serviced.date',
        [item.serviced.period.id]      NVARCHAR(100)       '$.serviced.period.id',
        [item.serviced.period.extension] NVARCHAR(MAX)       '$.serviced.period.extension',
        [item.serviced.period.start]   VARCHAR(64)         '$.serviced.period.start',
        [item.serviced.period.end]     VARCHAR(64)         '$.serviced.period.end',
        [item.location.codeableConcept.id] NVARCHAR(100)       '$.location.codeableConcept.id',
        [item.location.codeableConcept.extension] NVARCHAR(MAX)       '$.location.codeableConcept.extension',
        [item.location.codeableConcept.coding] NVARCHAR(MAX)       '$.location.codeableConcept.coding',
        [item.location.codeableConcept.text] NVARCHAR(4000)      '$.location.codeableConcept.text',
        [item.location.address.id]     NVARCHAR(100)       '$.location.address.id',
        [item.location.address.extension] NVARCHAR(MAX)       '$.location.address.extension',
        [item.location.address.use]    NVARCHAR(64)        '$.location.address.use',
        [item.location.address.type]   NVARCHAR(64)        '$.location.address.type',
        [item.location.address.text]   NVARCHAR(4000)      '$.location.address.text',
        [item.location.address.line]   NVARCHAR(MAX)       '$.location.address.line',
        [item.location.address.city]   NVARCHAR(500)       '$.location.address.city',
        [item.location.address.district] NVARCHAR(500)       '$.location.address.district',
        [item.location.address.state]  NVARCHAR(500)       '$.location.address.state',
        [item.location.address.postalCode] NVARCHAR(100)       '$.location.address.postalCode',
        [item.location.address.country] NVARCHAR(500)       '$.location.address.country',
        [item.location.address.period] NVARCHAR(MAX)       '$.location.address.period',
        [item.location.reference.id]   NVARCHAR(100)       '$.location.reference.id',
        [item.location.reference.extension] NVARCHAR(MAX)       '$.location.reference.extension',
        [item.location.reference.reference] NVARCHAR(4000)      '$.location.reference.reference',
        [item.location.reference.type] VARCHAR(256)        '$.location.reference.type',
        [item.location.reference.identifier] NVARCHAR(MAX)       '$.location.reference.identifier',
        [item.location.reference.display] NVARCHAR(4000)      '$.location.reference.display'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[ClaimResponse] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [status] NVARCHAR(100),
    [type.id] NVARCHAR(100),
    [type.extension] NVARCHAR(MAX),
    [type.coding] VARCHAR(MAX),
    [type.text] NVARCHAR(4000),
    [subType.id] NVARCHAR(100),
    [subType.extension] NVARCHAR(MAX),
    [subType.coding] VARCHAR(MAX),
    [subType.text] NVARCHAR(4000),
    [use] NVARCHAR(100),
    [patient.id] NVARCHAR(100),
    [patient.extension] NVARCHAR(MAX),
    [patient.reference] NVARCHAR(4000),
    [patient.type] VARCHAR(256),
    [patient.identifier.id] NVARCHAR(100),
    [patient.identifier.extension] NVARCHAR(MAX),
    [patient.identifier.use] NVARCHAR(64),
    [patient.identifier.type] NVARCHAR(MAX),
    [patient.identifier.system] VARCHAR(256),
    [patient.identifier.value] NVARCHAR(4000),
    [patient.identifier.period] NVARCHAR(MAX),
    [patient.identifier.assigner] NVARCHAR(MAX),
    [patient.display] NVARCHAR(4000),
    [created] VARCHAR(64),
    [insurer.id] NVARCHAR(100),
    [insurer.extension] NVARCHAR(MAX),
    [insurer.reference] NVARCHAR(4000),
    [insurer.type] VARCHAR(256),
    [insurer.identifier.id] NVARCHAR(100),
    [insurer.identifier.extension] NVARCHAR(MAX),
    [insurer.identifier.use] NVARCHAR(64),
    [insurer.identifier.type] NVARCHAR(MAX),
    [insurer.identifier.system] VARCHAR(256),
    [insurer.identifier.value] NVARCHAR(4000),
    [insurer.identifier.period] NVARCHAR(MAX),
    [insurer.identifier.assigner] NVARCHAR(MAX),
    [insurer.display] NVARCHAR(4000),
    [requestor.id] NVARCHAR(100),
    [requestor.extension] NVARCHAR(MAX),
    [requestor.reference] NVARCHAR(4000),
    [requestor.type] VARCHAR(256),
    [requestor.identifier.id] NVARCHAR(100),
    [requestor.identifier.extension] NVARCHAR(MAX),
    [requestor.identifier.use] NVARCHAR(64),
    [requestor.identifier.type] NVARCHAR(MAX),
    [requestor.identifier.system] VARCHAR(256),
    [requestor.identifier.value] NVARCHAR(4000),
    [requestor.identifier.period] NVARCHAR(MAX),
    [requestor.identifier.assigner] NVARCHAR(MAX),
    [requestor.display] NVARCHAR(4000),
    [request.id] NVARCHAR(100),
    [request.extension] NVARCHAR(MAX),
    [request.reference] NVARCHAR(4000),
    [request.type] VARCHAR(256),
    [request.identifier.id] NVARCHAR(100),
    [request.identifier.extension] NVARCHAR(MAX),
    [request.identifier.use] NVARCHAR(64),
    [request.identifier.type] NVARCHAR(MAX),
    [request.identifier.system] VARCHAR(256),
    [request.identifier.value] NVARCHAR(4000),
    [request.identifier.period] NVARCHAR(MAX),
    [request.identifier.assigner] NVARCHAR(MAX),
    [request.display] NVARCHAR(4000),
    [outcome] NVARCHAR(100),
    [disposition] NVARCHAR(4000),
    [preAuthRef] NVARCHAR(4000),
    [preAuthPeriod.id] NVARCHAR(100),
    [preAuthPeriod.extension] NVARCHAR(MAX),
    [preAuthPeriod.start] VARCHAR(64),
    [preAuthPeriod.end] VARCHAR(64),
    [payeeType.id] NVARCHAR(100),
    [payeeType.extension] NVARCHAR(MAX),
    [payeeType.coding] VARCHAR(MAX),
    [payeeType.text] NVARCHAR(4000),
    [item] VARCHAR(MAX),
    [addItem] VARCHAR(MAX),
    [adjudication] VARCHAR(MAX),
    [total] VARCHAR(MAX),
    [payment.id] NVARCHAR(100),
    [payment.extension] NVARCHAR(MAX),
    [payment.modifierExtension] NVARCHAR(MAX),
    [payment.type.id] NVARCHAR(100),
    [payment.type.extension] NVARCHAR(MAX),
    [payment.type.coding] NVARCHAR(MAX),
    [payment.type.text] NVARCHAR(4000),
    [payment.adjustment.id] NVARCHAR(100),
    [payment.adjustment.extension] NVARCHAR(MAX),
    [payment.adjustment.value] float,
    [payment.adjustment.currency] NVARCHAR(100),
    [payment.adjustmentReason.id] NVARCHAR(100),
    [payment.adjustmentReason.extension] NVARCHAR(MAX),
    [payment.adjustmentReason.coding] NVARCHAR(MAX),
    [payment.adjustmentReason.text] NVARCHAR(4000),
    [payment.date] VARCHAR(64),
    [payment.amount.id] NVARCHAR(100),
    [payment.amount.extension] NVARCHAR(MAX),
    [payment.amount.value] float,
    [payment.amount.currency] NVARCHAR(100),
    [payment.identifier.id] NVARCHAR(100),
    [payment.identifier.extension] NVARCHAR(MAX),
    [payment.identifier.use] NVARCHAR(64),
    [payment.identifier.type] NVARCHAR(MAX),
    [payment.identifier.system] VARCHAR(256),
    [payment.identifier.value] NVARCHAR(4000),
    [payment.identifier.period] NVARCHAR(MAX),
    [payment.identifier.assigner] NVARCHAR(MAX),
    [fundsReserve.id] NVARCHAR(100),
    [fundsReserve.extension] NVARCHAR(MAX),
    [fundsReserve.coding] VARCHAR(MAX),
    [fundsReserve.text] NVARCHAR(4000),
    [formCode.id] NVARCHAR(100),
    [formCode.extension] NVARCHAR(MAX),
    [formCode.coding] VARCHAR(MAX),
    [formCode.text] NVARCHAR(4000),
    [form.id] NVARCHAR(100),
    [form.extension] NVARCHAR(MAX),
    [form.contentType] NVARCHAR(100),
    [form.language] NVARCHAR(100),
    [form.data] NVARCHAR(MAX),
    [form.url] VARCHAR(256),
    [form.size] NVARCHAR(MAX),
    [form.hash] NVARCHAR(MAX),
    [form.title] NVARCHAR(4000),
    [form.creation] VARCHAR(64),
    [form.height] bigint,
    [form.width] bigint,
    [form.frames] bigint,
    [form.duration] float,
    [form.pages] bigint,
    [processNote] VARCHAR(MAX),
    [communicationRequest] VARCHAR(MAX),
    [insurance] VARCHAR(MAX),
    [error] VARCHAR(MAX),
) WITH (
    LOCATION='/ClaimResponse/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.ClaimResponseIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'ClaimResponse/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.ClaimResponseItem AS
SELECT
    [id],
    [item.JSON],
    [item.id],
    [item.extension],
    [item.modifierExtension],
    [item.itemSequence],
    [item.noteNumber],
    [item.adjudication],
    [item.detail]
FROM openrowset (
        BULK 'ClaimResponse/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [item.JSON]  VARCHAR(MAX) '$.item'
    ) AS rowset
    CROSS APPLY openjson (rowset.[item.JSON]) with (
        [item.id]                      NVARCHAR(100)       '$.id',
        [item.extension]               NVARCHAR(MAX)       '$.extension',
        [item.modifierExtension]       NVARCHAR(MAX)       '$.modifierExtension',
        [item.itemSequence]            bigint              '$.itemSequence',
        [item.noteNumber]              NVARCHAR(MAX)       '$.noteNumber' AS JSON,
        [item.adjudication]            NVARCHAR(MAX)       '$.adjudication' AS JSON,
        [item.detail]                  NVARCHAR(MAX)       '$.detail' AS JSON
    ) j

GO

CREATE VIEW fhir.ClaimResponseAddItem AS
SELECT
    [id],
    [addItem.JSON],
    [addItem.id],
    [addItem.extension],
    [addItem.modifierExtension],
    [addItem.itemSequence],
    [addItem.detailSequence],
    [addItem.subdetailSequence],
    [addItem.provider],
    [addItem.productOrService.id],
    [addItem.productOrService.extension],
    [addItem.productOrService.coding],
    [addItem.productOrService.text],
    [addItem.modifier],
    [addItem.programCode],
    [addItem.quantity.id],
    [addItem.quantity.extension],
    [addItem.quantity.value],
    [addItem.quantity.comparator],
    [addItem.quantity.unit],
    [addItem.quantity.system],
    [addItem.quantity.code],
    [addItem.unitPrice.id],
    [addItem.unitPrice.extension],
    [addItem.unitPrice.value],
    [addItem.unitPrice.currency],
    [addItem.factor],
    [addItem.net.id],
    [addItem.net.extension],
    [addItem.net.value],
    [addItem.net.currency],
    [addItem.bodySite.id],
    [addItem.bodySite.extension],
    [addItem.bodySite.coding],
    [addItem.bodySite.text],
    [addItem.subSite],
    [addItem.noteNumber],
    [addItem.adjudication],
    [addItem.detail],
    [addItem.serviced.date],
    [addItem.serviced.period.id],
    [addItem.serviced.period.extension],
    [addItem.serviced.period.start],
    [addItem.serviced.period.end],
    [addItem.location.codeableConcept.id],
    [addItem.location.codeableConcept.extension],
    [addItem.location.codeableConcept.coding],
    [addItem.location.codeableConcept.text],
    [addItem.location.address.id],
    [addItem.location.address.extension],
    [addItem.location.address.use],
    [addItem.location.address.type],
    [addItem.location.address.text],
    [addItem.location.address.line],
    [addItem.location.address.city],
    [addItem.location.address.district],
    [addItem.location.address.state],
    [addItem.location.address.postalCode],
    [addItem.location.address.country],
    [addItem.location.address.period],
    [addItem.location.reference.id],
    [addItem.location.reference.extension],
    [addItem.location.reference.reference],
    [addItem.location.reference.type],
    [addItem.location.reference.identifier],
    [addItem.location.reference.display]
FROM openrowset (
        BULK 'ClaimResponse/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [addItem.JSON]  VARCHAR(MAX) '$.addItem'
    ) AS rowset
    CROSS APPLY openjson (rowset.[addItem.JSON]) with (
        [addItem.id]                   NVARCHAR(100)       '$.id',
        [addItem.extension]            NVARCHAR(MAX)       '$.extension',
        [addItem.modifierExtension]    NVARCHAR(MAX)       '$.modifierExtension',
        [addItem.itemSequence]         NVARCHAR(MAX)       '$.itemSequence' AS JSON,
        [addItem.detailSequence]       NVARCHAR(MAX)       '$.detailSequence' AS JSON,
        [addItem.subdetailSequence]    NVARCHAR(MAX)       '$.subdetailSequence' AS JSON,
        [addItem.provider]             NVARCHAR(MAX)       '$.provider' AS JSON,
        [addItem.productOrService.id]  NVARCHAR(100)       '$.productOrService.id',
        [addItem.productOrService.extension] NVARCHAR(MAX)       '$.productOrService.extension',
        [addItem.productOrService.coding] NVARCHAR(MAX)       '$.productOrService.coding',
        [addItem.productOrService.text] NVARCHAR(4000)      '$.productOrService.text',
        [addItem.modifier]             NVARCHAR(MAX)       '$.modifier' AS JSON,
        [addItem.programCode]          NVARCHAR(MAX)       '$.programCode' AS JSON,
        [addItem.quantity.id]          NVARCHAR(100)       '$.quantity.id',
        [addItem.quantity.extension]   NVARCHAR(MAX)       '$.quantity.extension',
        [addItem.quantity.value]       float               '$.quantity.value',
        [addItem.quantity.comparator]  NVARCHAR(64)        '$.quantity.comparator',
        [addItem.quantity.unit]        NVARCHAR(100)       '$.quantity.unit',
        [addItem.quantity.system]      VARCHAR(256)        '$.quantity.system',
        [addItem.quantity.code]        NVARCHAR(4000)      '$.quantity.code',
        [addItem.unitPrice.id]         NVARCHAR(100)       '$.unitPrice.id',
        [addItem.unitPrice.extension]  NVARCHAR(MAX)       '$.unitPrice.extension',
        [addItem.unitPrice.value]      float               '$.unitPrice.value',
        [addItem.unitPrice.currency]   NVARCHAR(100)       '$.unitPrice.currency',
        [addItem.factor]               float               '$.factor',
        [addItem.net.id]               NVARCHAR(100)       '$.net.id',
        [addItem.net.extension]        NVARCHAR(MAX)       '$.net.extension',
        [addItem.net.value]            float               '$.net.value',
        [addItem.net.currency]         NVARCHAR(100)       '$.net.currency',
        [addItem.bodySite.id]          NVARCHAR(100)       '$.bodySite.id',
        [addItem.bodySite.extension]   NVARCHAR(MAX)       '$.bodySite.extension',
        [addItem.bodySite.coding]      NVARCHAR(MAX)       '$.bodySite.coding',
        [addItem.bodySite.text]        NVARCHAR(4000)      '$.bodySite.text',
        [addItem.subSite]              NVARCHAR(MAX)       '$.subSite' AS JSON,
        [addItem.noteNumber]           NVARCHAR(MAX)       '$.noteNumber' AS JSON,
        [addItem.adjudication]         NVARCHAR(MAX)       '$.adjudication' AS JSON,
        [addItem.detail]               NVARCHAR(MAX)       '$.detail' AS JSON,
        [addItem.serviced.date]        VARCHAR(64)         '$.serviced.date',
        [addItem.serviced.period.id]   NVARCHAR(100)       '$.serviced.period.id',
        [addItem.serviced.period.extension] NVARCHAR(MAX)       '$.serviced.period.extension',
        [addItem.serviced.period.start] VARCHAR(64)         '$.serviced.period.start',
        [addItem.serviced.period.end]  VARCHAR(64)         '$.serviced.period.end',
        [addItem.location.codeableConcept.id] NVARCHAR(100)       '$.location.codeableConcept.id',
        [addItem.location.codeableConcept.extension] NVARCHAR(MAX)       '$.location.codeableConcept.extension',
        [addItem.location.codeableConcept.coding] NVARCHAR(MAX)       '$.location.codeableConcept.coding',
        [addItem.location.codeableConcept.text] NVARCHAR(4000)      '$.location.codeableConcept.text',
        [addItem.location.address.id]  NVARCHAR(100)       '$.location.address.id',
        [addItem.location.address.extension] NVARCHAR(MAX)       '$.location.address.extension',
        [addItem.location.address.use] NVARCHAR(64)        '$.location.address.use',
        [addItem.location.address.type] NVARCHAR(64)        '$.location.address.type',
        [addItem.location.address.text] NVARCHAR(4000)      '$.location.address.text',
        [addItem.location.address.line] NVARCHAR(MAX)       '$.location.address.line',
        [addItem.location.address.city] NVARCHAR(500)       '$.location.address.city',
        [addItem.location.address.district] NVARCHAR(500)       '$.location.address.district',
        [addItem.location.address.state] NVARCHAR(500)       '$.location.address.state',
        [addItem.location.address.postalCode] NVARCHAR(100)       '$.location.address.postalCode',
        [addItem.location.address.country] NVARCHAR(500)       '$.location.address.country',
        [addItem.location.address.period] NVARCHAR(MAX)       '$.location.address.period',
        [addItem.location.reference.id] NVARCHAR(100)       '$.location.reference.id',
        [addItem.location.reference.extension] NVARCHAR(MAX)       '$.location.reference.extension',
        [addItem.location.reference.reference] NVARCHAR(4000)      '$.location.reference.reference',
        [addItem.location.reference.type] VARCHAR(256)        '$.location.reference.type',
        [addItem.location.reference.identifier] NVARCHAR(MAX)       '$.location.reference.identifier',
        [addItem.location.reference.display] NVARCHAR(4000)      '$.location.reference.display'
    ) j

GO

CREATE VIEW fhir.ClaimResponseAdjudication AS
SELECT
    [id],
    [adjudication.JSON],
    [adjudication.id],
    [adjudication.extension],
    [adjudication.modifierExtension],
    [adjudication.category.id],
    [adjudication.category.extension],
    [adjudication.category.coding],
    [adjudication.category.text],
    [adjudication.reason.id],
    [adjudication.reason.extension],
    [adjudication.reason.coding],
    [adjudication.reason.text],
    [adjudication.amount.id],
    [adjudication.amount.extension],
    [adjudication.amount.value],
    [adjudication.amount.currency],
    [adjudication.value]
FROM openrowset (
        BULK 'ClaimResponse/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [adjudication.JSON]  VARCHAR(MAX) '$.adjudication'
    ) AS rowset
    CROSS APPLY openjson (rowset.[adjudication.JSON]) with (
        [adjudication.id]              NVARCHAR(100)       '$.id',
        [adjudication.extension]       NVARCHAR(MAX)       '$.extension',
        [adjudication.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [adjudication.category.id]     NVARCHAR(100)       '$.category.id',
        [adjudication.category.extension] NVARCHAR(MAX)       '$.category.extension',
        [adjudication.category.coding] NVARCHAR(MAX)       '$.category.coding',
        [adjudication.category.text]   NVARCHAR(4000)      '$.category.text',
        [adjudication.reason.id]       NVARCHAR(100)       '$.reason.id',
        [adjudication.reason.extension] NVARCHAR(MAX)       '$.reason.extension',
        [adjudication.reason.coding]   NVARCHAR(MAX)       '$.reason.coding',
        [adjudication.reason.text]     NVARCHAR(4000)      '$.reason.text',
        [adjudication.amount.id]       NVARCHAR(100)       '$.amount.id',
        [adjudication.amount.extension] NVARCHAR(MAX)       '$.amount.extension',
        [adjudication.amount.value]    float               '$.amount.value',
        [adjudication.amount.currency] NVARCHAR(100)       '$.amount.currency',
        [adjudication.value]           float               '$.value'
    ) j

GO

CREATE VIEW fhir.ClaimResponseTotal AS
SELECT
    [id],
    [total.JSON],
    [total.id],
    [total.extension],
    [total.modifierExtension],
    [total.category.id],
    [total.category.extension],
    [total.category.coding],
    [total.category.text],
    [total.amount.id],
    [total.amount.extension],
    [total.amount.value],
    [total.amount.currency]
FROM openrowset (
        BULK 'ClaimResponse/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [total.JSON]  VARCHAR(MAX) '$.total'
    ) AS rowset
    CROSS APPLY openjson (rowset.[total.JSON]) with (
        [total.id]                     NVARCHAR(100)       '$.id',
        [total.extension]              NVARCHAR(MAX)       '$.extension',
        [total.modifierExtension]      NVARCHAR(MAX)       '$.modifierExtension',
        [total.category.id]            NVARCHAR(100)       '$.category.id',
        [total.category.extension]     NVARCHAR(MAX)       '$.category.extension',
        [total.category.coding]        NVARCHAR(MAX)       '$.category.coding',
        [total.category.text]          NVARCHAR(4000)      '$.category.text',
        [total.amount.id]              NVARCHAR(100)       '$.amount.id',
        [total.amount.extension]       NVARCHAR(MAX)       '$.amount.extension',
        [total.amount.value]           float               '$.amount.value',
        [total.amount.currency]        NVARCHAR(100)       '$.amount.currency'
    ) j

GO

CREATE VIEW fhir.ClaimResponseProcessNote AS
SELECT
    [id],
    [processNote.JSON],
    [processNote.id],
    [processNote.extension],
    [processNote.modifierExtension],
    [processNote.number],
    [processNote.type],
    [processNote.text],
    [processNote.language.id],
    [processNote.language.extension],
    [processNote.language.coding],
    [processNote.language.text]
FROM openrowset (
        BULK 'ClaimResponse/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [processNote.JSON]  VARCHAR(MAX) '$.processNote'
    ) AS rowset
    CROSS APPLY openjson (rowset.[processNote.JSON]) with (
        [processNote.id]               NVARCHAR(100)       '$.id',
        [processNote.extension]        NVARCHAR(MAX)       '$.extension',
        [processNote.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [processNote.number]           bigint              '$.number',
        [processNote.type]             NVARCHAR(100)       '$.type',
        [processNote.text]             NVARCHAR(4000)      '$.text',
        [processNote.language.id]      NVARCHAR(100)       '$.language.id',
        [processNote.language.extension] NVARCHAR(MAX)       '$.language.extension',
        [processNote.language.coding]  NVARCHAR(MAX)       '$.language.coding',
        [processNote.language.text]    NVARCHAR(4000)      '$.language.text'
    ) j

GO

CREATE VIEW fhir.ClaimResponseCommunicationRequest AS
SELECT
    [id],
    [communicationRequest.JSON],
    [communicationRequest.id],
    [communicationRequest.extension],
    [communicationRequest.reference],
    [communicationRequest.type],
    [communicationRequest.identifier.id],
    [communicationRequest.identifier.extension],
    [communicationRequest.identifier.use],
    [communicationRequest.identifier.type],
    [communicationRequest.identifier.system],
    [communicationRequest.identifier.value],
    [communicationRequest.identifier.period],
    [communicationRequest.identifier.assigner],
    [communicationRequest.display]
FROM openrowset (
        BULK 'ClaimResponse/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [communicationRequest.JSON]  VARCHAR(MAX) '$.communicationRequest'
    ) AS rowset
    CROSS APPLY openjson (rowset.[communicationRequest.JSON]) with (
        [communicationRequest.id]      NVARCHAR(100)       '$.id',
        [communicationRequest.extension] NVARCHAR(MAX)       '$.extension',
        [communicationRequest.reference] NVARCHAR(4000)      '$.reference',
        [communicationRequest.type]    VARCHAR(256)        '$.type',
        [communicationRequest.identifier.id] NVARCHAR(100)       '$.identifier.id',
        [communicationRequest.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [communicationRequest.identifier.use] NVARCHAR(64)        '$.identifier.use',
        [communicationRequest.identifier.type] NVARCHAR(MAX)       '$.identifier.type',
        [communicationRequest.identifier.system] VARCHAR(256)        '$.identifier.system',
        [communicationRequest.identifier.value] NVARCHAR(4000)      '$.identifier.value',
        [communicationRequest.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [communicationRequest.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [communicationRequest.display] NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.ClaimResponseInsurance AS
SELECT
    [id],
    [insurance.JSON],
    [insurance.id],
    [insurance.extension],
    [insurance.modifierExtension],
    [insurance.sequence],
    [insurance.focal],
    [insurance.coverage.id],
    [insurance.coverage.extension],
    [insurance.coverage.reference],
    [insurance.coverage.type],
    [insurance.coverage.identifier],
    [insurance.coverage.display],
    [insurance.businessArrangement],
    [insurance.claimResponse.id],
    [insurance.claimResponse.extension],
    [insurance.claimResponse.reference],
    [insurance.claimResponse.type],
    [insurance.claimResponse.identifier],
    [insurance.claimResponse.display]
FROM openrowset (
        BULK 'ClaimResponse/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [insurance.JSON]  VARCHAR(MAX) '$.insurance'
    ) AS rowset
    CROSS APPLY openjson (rowset.[insurance.JSON]) with (
        [insurance.id]                 NVARCHAR(100)       '$.id',
        [insurance.extension]          NVARCHAR(MAX)       '$.extension',
        [insurance.modifierExtension]  NVARCHAR(MAX)       '$.modifierExtension',
        [insurance.sequence]           bigint              '$.sequence',
        [insurance.focal]              bit                 '$.focal',
        [insurance.coverage.id]        NVARCHAR(100)       '$.coverage.id',
        [insurance.coverage.extension] NVARCHAR(MAX)       '$.coverage.extension',
        [insurance.coverage.reference] NVARCHAR(4000)      '$.coverage.reference',
        [insurance.coverage.type]      VARCHAR(256)        '$.coverage.type',
        [insurance.coverage.identifier] NVARCHAR(MAX)       '$.coverage.identifier',
        [insurance.coverage.display]   NVARCHAR(4000)      '$.coverage.display',
        [insurance.businessArrangement] NVARCHAR(4000)      '$.businessArrangement',
        [insurance.claimResponse.id]   NVARCHAR(100)       '$.claimResponse.id',
        [insurance.claimResponse.extension] NVARCHAR(MAX)       '$.claimResponse.extension',
        [insurance.claimResponse.reference] NVARCHAR(4000)      '$.claimResponse.reference',
        [insurance.claimResponse.type] VARCHAR(256)        '$.claimResponse.type',
        [insurance.claimResponse.identifier] NVARCHAR(MAX)       '$.claimResponse.identifier',
        [insurance.claimResponse.display] NVARCHAR(4000)      '$.claimResponse.display'
    ) j

GO

CREATE VIEW fhir.ClaimResponseError AS
SELECT
    [id],
    [error.JSON],
    [error.id],
    [error.extension],
    [error.modifierExtension],
    [error.itemSequence],
    [error.detailSequence],
    [error.subDetailSequence],
    [error.code.id],
    [error.code.extension],
    [error.code.coding],
    [error.code.text]
FROM openrowset (
        BULK 'ClaimResponse/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [error.JSON]  VARCHAR(MAX) '$.error'
    ) AS rowset
    CROSS APPLY openjson (rowset.[error.JSON]) with (
        [error.id]                     NVARCHAR(100)       '$.id',
        [error.extension]              NVARCHAR(MAX)       '$.extension',
        [error.modifierExtension]      NVARCHAR(MAX)       '$.modifierExtension',
        [error.itemSequence]           bigint              '$.itemSequence',
        [error.detailSequence]         bigint              '$.detailSequence',
        [error.subDetailSequence]      bigint              '$.subDetailSequence',
        [error.code.id]                NVARCHAR(100)       '$.code.id',
        [error.code.extension]         NVARCHAR(MAX)       '$.code.extension',
        [error.code.coding]            NVARCHAR(MAX)       '$.code.coding',
        [error.code.text]              NVARCHAR(4000)      '$.code.text'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[ClinicalImpression] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [status] NVARCHAR(100),
    [statusReason.id] NVARCHAR(100),
    [statusReason.extension] NVARCHAR(MAX),
    [statusReason.coding] VARCHAR(MAX),
    [statusReason.text] NVARCHAR(4000),
    [description] NVARCHAR(4000),
    [subject.id] NVARCHAR(100),
    [subject.extension] NVARCHAR(MAX),
    [subject.reference] NVARCHAR(4000),
    [subject.type] VARCHAR(256),
    [subject.identifier.id] NVARCHAR(100),
    [subject.identifier.extension] NVARCHAR(MAX),
    [subject.identifier.use] NVARCHAR(64),
    [subject.identifier.type] NVARCHAR(MAX),
    [subject.identifier.system] VARCHAR(256),
    [subject.identifier.value] NVARCHAR(4000),
    [subject.identifier.period] NVARCHAR(MAX),
    [subject.identifier.assigner] NVARCHAR(MAX),
    [subject.display] NVARCHAR(4000),
    [encounter.id] NVARCHAR(100),
    [encounter.extension] NVARCHAR(MAX),
    [encounter.reference] NVARCHAR(4000),
    [encounter.type] VARCHAR(256),
    [encounter.identifier.id] NVARCHAR(100),
    [encounter.identifier.extension] NVARCHAR(MAX),
    [encounter.identifier.use] NVARCHAR(64),
    [encounter.identifier.type] NVARCHAR(MAX),
    [encounter.identifier.system] VARCHAR(256),
    [encounter.identifier.value] NVARCHAR(4000),
    [encounter.identifier.period] NVARCHAR(MAX),
    [encounter.identifier.assigner] NVARCHAR(MAX),
    [encounter.display] NVARCHAR(4000),
    [date] VARCHAR(64),
    [performer.id] NVARCHAR(100),
    [performer.extension] NVARCHAR(MAX),
    [performer.reference] NVARCHAR(4000),
    [performer.type] VARCHAR(256),
    [performer.identifier.id] NVARCHAR(100),
    [performer.identifier.extension] NVARCHAR(MAX),
    [performer.identifier.use] NVARCHAR(64),
    [performer.identifier.type] NVARCHAR(MAX),
    [performer.identifier.system] VARCHAR(256),
    [performer.identifier.value] NVARCHAR(4000),
    [performer.identifier.period] NVARCHAR(MAX),
    [performer.identifier.assigner] NVARCHAR(MAX),
    [performer.display] NVARCHAR(4000),
    [previous.id] NVARCHAR(100),
    [previous.extension] NVARCHAR(MAX),
    [previous.reference] NVARCHAR(4000),
    [previous.type] VARCHAR(256),
    [previous.identifier.id] NVARCHAR(100),
    [previous.identifier.extension] NVARCHAR(MAX),
    [previous.identifier.use] NVARCHAR(64),
    [previous.identifier.type] NVARCHAR(MAX),
    [previous.identifier.system] VARCHAR(256),
    [previous.identifier.value] NVARCHAR(4000),
    [previous.identifier.period] NVARCHAR(MAX),
    [previous.identifier.assigner] NVARCHAR(MAX),
    [previous.display] NVARCHAR(4000),
    [problem] VARCHAR(MAX),
    [protocol] VARCHAR(MAX),
    [summary] NVARCHAR(4000),
    [finding] VARCHAR(MAX),
    [prognosisCodeableConcept] VARCHAR(MAX),
    [prognosisReference] VARCHAR(MAX),
    [supportingInfo] VARCHAR(MAX),
    [note] VARCHAR(MAX),
    [effective.dateTime] VARCHAR(64),
    [effective.period.id] NVARCHAR(100),
    [effective.period.extension] NVARCHAR(MAX),
    [effective.period.start] VARCHAR(64),
    [effective.period.end] VARCHAR(64),
) WITH (
    LOCATION='/ClinicalImpression/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.ClinicalImpressionIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'ClinicalImpression/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.ClinicalImpressionProblem AS
SELECT
    [id],
    [problem.JSON],
    [problem.id],
    [problem.extension],
    [problem.reference],
    [problem.type],
    [problem.identifier.id],
    [problem.identifier.extension],
    [problem.identifier.use],
    [problem.identifier.type],
    [problem.identifier.system],
    [problem.identifier.value],
    [problem.identifier.period],
    [problem.identifier.assigner],
    [problem.display]
FROM openrowset (
        BULK 'ClinicalImpression/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [problem.JSON]  VARCHAR(MAX) '$.problem'
    ) AS rowset
    CROSS APPLY openjson (rowset.[problem.JSON]) with (
        [problem.id]                   NVARCHAR(100)       '$.id',
        [problem.extension]            NVARCHAR(MAX)       '$.extension',
        [problem.reference]            NVARCHAR(4000)      '$.reference',
        [problem.type]                 VARCHAR(256)        '$.type',
        [problem.identifier.id]        NVARCHAR(100)       '$.identifier.id',
        [problem.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [problem.identifier.use]       NVARCHAR(64)        '$.identifier.use',
        [problem.identifier.type]      NVARCHAR(MAX)       '$.identifier.type',
        [problem.identifier.system]    VARCHAR(256)        '$.identifier.system',
        [problem.identifier.value]     NVARCHAR(4000)      '$.identifier.value',
        [problem.identifier.period]    NVARCHAR(MAX)       '$.identifier.period',
        [problem.identifier.assigner]  NVARCHAR(MAX)       '$.identifier.assigner',
        [problem.display]              NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.ClinicalImpressionProtocol AS
SELECT
    [id],
    [protocol.JSON],
    [protocol]
FROM openrowset (
        BULK 'ClinicalImpression/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [protocol.JSON]  VARCHAR(MAX) '$.protocol'
    ) AS rowset
    CROSS APPLY openjson (rowset.[protocol.JSON]) with (
        [protocol]                     NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.ClinicalImpressionFinding AS
SELECT
    [id],
    [finding.JSON],
    [finding.id],
    [finding.extension],
    [finding.modifierExtension],
    [finding.item.id],
    [finding.item.extension],
    [finding.item.concept],
    [finding.item.reference],
    [finding.basis]
FROM openrowset (
        BULK 'ClinicalImpression/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [finding.JSON]  VARCHAR(MAX) '$.finding'
    ) AS rowset
    CROSS APPLY openjson (rowset.[finding.JSON]) with (
        [finding.id]                   NVARCHAR(100)       '$.id',
        [finding.extension]            NVARCHAR(MAX)       '$.extension',
        [finding.modifierExtension]    NVARCHAR(MAX)       '$.modifierExtension',
        [finding.item.id]              NVARCHAR(100)       '$.item.id',
        [finding.item.extension]       NVARCHAR(MAX)       '$.item.extension',
        [finding.item.concept]         NVARCHAR(MAX)       '$.item.concept',
        [finding.item.reference]       NVARCHAR(MAX)       '$.item.reference',
        [finding.basis]                NVARCHAR(4000)      '$.basis'
    ) j

GO

CREATE VIEW fhir.ClinicalImpressionPrognosisCodeableConcept AS
SELECT
    [id],
    [prognosisCodeableConcept.JSON],
    [prognosisCodeableConcept.id],
    [prognosisCodeableConcept.extension],
    [prognosisCodeableConcept.coding],
    [prognosisCodeableConcept.text]
FROM openrowset (
        BULK 'ClinicalImpression/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [prognosisCodeableConcept.JSON]  VARCHAR(MAX) '$.prognosisCodeableConcept'
    ) AS rowset
    CROSS APPLY openjson (rowset.[prognosisCodeableConcept.JSON]) with (
        [prognosisCodeableConcept.id]  NVARCHAR(100)       '$.id',
        [prognosisCodeableConcept.extension] NVARCHAR(MAX)       '$.extension',
        [prognosisCodeableConcept.coding] NVARCHAR(MAX)       '$.coding' AS JSON,
        [prognosisCodeableConcept.text] NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.ClinicalImpressionPrognosisReference AS
SELECT
    [id],
    [prognosisReference.JSON],
    [prognosisReference.id],
    [prognosisReference.extension],
    [prognosisReference.reference],
    [prognosisReference.type],
    [prognosisReference.identifier.id],
    [prognosisReference.identifier.extension],
    [prognosisReference.identifier.use],
    [prognosisReference.identifier.type],
    [prognosisReference.identifier.system],
    [prognosisReference.identifier.value],
    [prognosisReference.identifier.period],
    [prognosisReference.identifier.assigner],
    [prognosisReference.display]
FROM openrowset (
        BULK 'ClinicalImpression/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [prognosisReference.JSON]  VARCHAR(MAX) '$.prognosisReference'
    ) AS rowset
    CROSS APPLY openjson (rowset.[prognosisReference.JSON]) with (
        [prognosisReference.id]        NVARCHAR(100)       '$.id',
        [prognosisReference.extension] NVARCHAR(MAX)       '$.extension',
        [prognosisReference.reference] NVARCHAR(4000)      '$.reference',
        [prognosisReference.type]      VARCHAR(256)        '$.type',
        [prognosisReference.identifier.id] NVARCHAR(100)       '$.identifier.id',
        [prognosisReference.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [prognosisReference.identifier.use] NVARCHAR(64)        '$.identifier.use',
        [prognosisReference.identifier.type] NVARCHAR(MAX)       '$.identifier.type',
        [prognosisReference.identifier.system] VARCHAR(256)        '$.identifier.system',
        [prognosisReference.identifier.value] NVARCHAR(4000)      '$.identifier.value',
        [prognosisReference.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [prognosisReference.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [prognosisReference.display]   NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.ClinicalImpressionSupportingInfo AS
SELECT
    [id],
    [supportingInfo.JSON],
    [supportingInfo.id],
    [supportingInfo.extension],
    [supportingInfo.reference],
    [supportingInfo.type],
    [supportingInfo.identifier.id],
    [supportingInfo.identifier.extension],
    [supportingInfo.identifier.use],
    [supportingInfo.identifier.type],
    [supportingInfo.identifier.system],
    [supportingInfo.identifier.value],
    [supportingInfo.identifier.period],
    [supportingInfo.identifier.assigner],
    [supportingInfo.display]
FROM openrowset (
        BULK 'ClinicalImpression/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [supportingInfo.JSON]  VARCHAR(MAX) '$.supportingInfo'
    ) AS rowset
    CROSS APPLY openjson (rowset.[supportingInfo.JSON]) with (
        [supportingInfo.id]            NVARCHAR(100)       '$.id',
        [supportingInfo.extension]     NVARCHAR(MAX)       '$.extension',
        [supportingInfo.reference]     NVARCHAR(4000)      '$.reference',
        [supportingInfo.type]          VARCHAR(256)        '$.type',
        [supportingInfo.identifier.id] NVARCHAR(100)       '$.identifier.id',
        [supportingInfo.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [supportingInfo.identifier.use] NVARCHAR(64)        '$.identifier.use',
        [supportingInfo.identifier.type] NVARCHAR(MAX)       '$.identifier.type',
        [supportingInfo.identifier.system] VARCHAR(256)        '$.identifier.system',
        [supportingInfo.identifier.value] NVARCHAR(4000)      '$.identifier.value',
        [supportingInfo.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [supportingInfo.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [supportingInfo.display]       NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.ClinicalImpressionNote AS
SELECT
    [id],
    [note.JSON],
    [note.id],
    [note.extension],
    [note.time],
    [note.text],
    [note.author.reference.id],
    [note.author.reference.extension],
    [note.author.reference.reference],
    [note.author.reference.type],
    [note.author.reference.identifier],
    [note.author.reference.display],
    [note.author.string]
FROM openrowset (
        BULK 'ClinicalImpression/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [note.JSON]  VARCHAR(MAX) '$.note'
    ) AS rowset
    CROSS APPLY openjson (rowset.[note.JSON]) with (
        [note.id]                      NVARCHAR(100)       '$.id',
        [note.extension]               NVARCHAR(MAX)       '$.extension',
        [note.time]                    VARCHAR(64)         '$.time',
        [note.text]                    NVARCHAR(MAX)       '$.text',
        [note.author.reference.id]     NVARCHAR(100)       '$.author.reference.id',
        [note.author.reference.extension] NVARCHAR(MAX)       '$.author.reference.extension',
        [note.author.reference.reference] NVARCHAR(4000)      '$.author.reference.reference',
        [note.author.reference.type]   VARCHAR(256)        '$.author.reference.type',
        [note.author.reference.identifier] NVARCHAR(MAX)       '$.author.reference.identifier',
        [note.author.reference.display] NVARCHAR(4000)      '$.author.reference.display',
        [note.author.string]           NVARCHAR(4000)      '$.author.string'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[ClinicalUseDefinition] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [type] NVARCHAR(100),
    [category] VARCHAR(MAX),
    [subject] VARCHAR(MAX),
    [status.id] NVARCHAR(100),
    [status.extension] NVARCHAR(MAX),
    [status.coding] VARCHAR(MAX),
    [status.text] NVARCHAR(4000),
    [contraindication.id] NVARCHAR(100),
    [contraindication.extension] NVARCHAR(MAX),
    [contraindication.modifierExtension] NVARCHAR(MAX),
    [contraindication.diseaseSymptomProcedure.id] NVARCHAR(100),
    [contraindication.diseaseSymptomProcedure.extension] NVARCHAR(MAX),
    [contraindication.diseaseSymptomProcedure.concept] NVARCHAR(MAX),
    [contraindication.diseaseSymptomProcedure.reference] NVARCHAR(MAX),
    [contraindication.diseaseStatus.id] NVARCHAR(100),
    [contraindication.diseaseStatus.extension] NVARCHAR(MAX),
    [contraindication.diseaseStatus.concept] NVARCHAR(MAX),
    [contraindication.diseaseStatus.reference] NVARCHAR(MAX),
    [contraindication.comorbidity] VARCHAR(MAX),
    [contraindication.indication] VARCHAR(MAX),
    [contraindication.otherTherapy] VARCHAR(MAX),
    [indication.id] NVARCHAR(100),
    [indication.extension] NVARCHAR(MAX),
    [indication.modifierExtension] NVARCHAR(MAX),
    [indication.diseaseSymptomProcedure.id] NVARCHAR(100),
    [indication.diseaseSymptomProcedure.extension] NVARCHAR(MAX),
    [indication.diseaseSymptomProcedure.concept] NVARCHAR(MAX),
    [indication.diseaseSymptomProcedure.reference] NVARCHAR(MAX),
    [indication.diseaseStatus.id] NVARCHAR(100),
    [indication.diseaseStatus.extension] NVARCHAR(MAX),
    [indication.diseaseStatus.concept] NVARCHAR(MAX),
    [indication.diseaseStatus.reference] NVARCHAR(MAX),
    [indication.comorbidity] VARCHAR(MAX),
    [indication.intendedEffect.id] NVARCHAR(100),
    [indication.intendedEffect.extension] NVARCHAR(MAX),
    [indication.intendedEffect.concept] NVARCHAR(MAX),
    [indication.intendedEffect.reference] NVARCHAR(MAX),
    [indication.duration.id] NVARCHAR(100),
    [indication.duration.extension] NVARCHAR(MAX),
    [indication.duration.value] float,
    [indication.duration.comparator] NVARCHAR(64),
    [indication.duration.unit] NVARCHAR(100),
    [indication.duration.system] VARCHAR(256),
    [indication.duration.code] NVARCHAR(4000),
    [indication.undesirableEffect] VARCHAR(MAX),
    [indication.otherTherapy] VARCHAR(MAX),
    [interaction.id] NVARCHAR(100),
    [interaction.extension] NVARCHAR(MAX),
    [interaction.modifierExtension] NVARCHAR(MAX),
    [interaction.interactant] VARCHAR(MAX),
    [interaction.type.id] NVARCHAR(100),
    [interaction.type.extension] NVARCHAR(MAX),
    [interaction.type.coding] NVARCHAR(MAX),
    [interaction.type.text] NVARCHAR(4000),
    [interaction.effect.id] NVARCHAR(100),
    [interaction.effect.extension] NVARCHAR(MAX),
    [interaction.effect.concept] NVARCHAR(MAX),
    [interaction.effect.reference] NVARCHAR(MAX),
    [interaction.incidence.id] NVARCHAR(100),
    [interaction.incidence.extension] NVARCHAR(MAX),
    [interaction.incidence.coding] NVARCHAR(MAX),
    [interaction.incidence.text] NVARCHAR(4000),
    [interaction.management] VARCHAR(MAX),
    [population] VARCHAR(MAX),
    [undesirableEffect.id] NVARCHAR(100),
    [undesirableEffect.extension] NVARCHAR(MAX),
    [undesirableEffect.modifierExtension] NVARCHAR(MAX),
    [undesirableEffect.symptomConditionEffect.id] NVARCHAR(100),
    [undesirableEffect.symptomConditionEffect.extension] NVARCHAR(MAX),
    [undesirableEffect.symptomConditionEffect.concept] NVARCHAR(MAX),
    [undesirableEffect.symptomConditionEffect.reference] NVARCHAR(MAX),
    [undesirableEffect.classification.id] NVARCHAR(100),
    [undesirableEffect.classification.extension] NVARCHAR(MAX),
    [undesirableEffect.classification.coding] NVARCHAR(MAX),
    [undesirableEffect.classification.text] NVARCHAR(4000),
    [undesirableEffect.frequencyOfOccurrence.id] NVARCHAR(100),
    [undesirableEffect.frequencyOfOccurrence.extension] NVARCHAR(MAX),
    [undesirableEffect.frequencyOfOccurrence.coding] NVARCHAR(MAX),
    [undesirableEffect.frequencyOfOccurrence.text] NVARCHAR(4000),
    [warning.id] NVARCHAR(100),
    [warning.extension] NVARCHAR(MAX),
    [warning.modifierExtension] NVARCHAR(MAX),
    [warning.description] NVARCHAR(MAX),
    [warning.code.id] NVARCHAR(100),
    [warning.code.extension] NVARCHAR(MAX),
    [warning.code.coding] NVARCHAR(MAX),
    [warning.code.text] NVARCHAR(4000),
) WITH (
    LOCATION='/ClinicalUseDefinition/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.ClinicalUseDefinitionIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'ClinicalUseDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.ClinicalUseDefinitionCategory AS
SELECT
    [id],
    [category.JSON],
    [category.id],
    [category.extension],
    [category.coding],
    [category.text]
FROM openrowset (
        BULK 'ClinicalUseDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [category.JSON]  VARCHAR(MAX) '$.category'
    ) AS rowset
    CROSS APPLY openjson (rowset.[category.JSON]) with (
        [category.id]                  NVARCHAR(100)       '$.id',
        [category.extension]           NVARCHAR(MAX)       '$.extension',
        [category.coding]              NVARCHAR(MAX)       '$.coding' AS JSON,
        [category.text]                NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.ClinicalUseDefinitionSubject AS
SELECT
    [id],
    [subject.JSON],
    [subject.id],
    [subject.extension],
    [subject.reference],
    [subject.type],
    [subject.identifier.id],
    [subject.identifier.extension],
    [subject.identifier.use],
    [subject.identifier.type],
    [subject.identifier.system],
    [subject.identifier.value],
    [subject.identifier.period],
    [subject.identifier.assigner],
    [subject.display]
FROM openrowset (
        BULK 'ClinicalUseDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [subject.JSON]  VARCHAR(MAX) '$.subject'
    ) AS rowset
    CROSS APPLY openjson (rowset.[subject.JSON]) with (
        [subject.id]                   NVARCHAR(100)       '$.id',
        [subject.extension]            NVARCHAR(MAX)       '$.extension',
        [subject.reference]            NVARCHAR(4000)      '$.reference',
        [subject.type]                 VARCHAR(256)        '$.type',
        [subject.identifier.id]        NVARCHAR(100)       '$.identifier.id',
        [subject.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [subject.identifier.use]       NVARCHAR(64)        '$.identifier.use',
        [subject.identifier.type]      NVARCHAR(MAX)       '$.identifier.type',
        [subject.identifier.system]    VARCHAR(256)        '$.identifier.system',
        [subject.identifier.value]     NVARCHAR(4000)      '$.identifier.value',
        [subject.identifier.period]    NVARCHAR(MAX)       '$.identifier.period',
        [subject.identifier.assigner]  NVARCHAR(MAX)       '$.identifier.assigner',
        [subject.display]              NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.ClinicalUseDefinitionPopulation AS
SELECT
    [id],
    [population.JSON],
    [population.id],
    [population.extension],
    [population.reference],
    [population.type],
    [population.identifier.id],
    [population.identifier.extension],
    [population.identifier.use],
    [population.identifier.type],
    [population.identifier.system],
    [population.identifier.value],
    [population.identifier.period],
    [population.identifier.assigner],
    [population.display]
FROM openrowset (
        BULK 'ClinicalUseDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [population.JSON]  VARCHAR(MAX) '$.population'
    ) AS rowset
    CROSS APPLY openjson (rowset.[population.JSON]) with (
        [population.id]                NVARCHAR(100)       '$.id',
        [population.extension]         NVARCHAR(MAX)       '$.extension',
        [population.reference]         NVARCHAR(4000)      '$.reference',
        [population.type]              VARCHAR(256)        '$.type',
        [population.identifier.id]     NVARCHAR(100)       '$.identifier.id',
        [population.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [population.identifier.use]    NVARCHAR(64)        '$.identifier.use',
        [population.identifier.type]   NVARCHAR(MAX)       '$.identifier.type',
        [population.identifier.system] VARCHAR(256)        '$.identifier.system',
        [population.identifier.value]  NVARCHAR(4000)      '$.identifier.value',
        [population.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [population.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [population.display]           NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[ClinicalUseIssue] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [type] NVARCHAR(100),
    [category] VARCHAR(MAX),
    [subject] VARCHAR(MAX),
    [status.id] NVARCHAR(100),
    [status.extension] NVARCHAR(MAX),
    [status.coding] VARCHAR(MAX),
    [status.text] NVARCHAR(4000),
    [description] NVARCHAR(MAX),
    [contraindication.id] NVARCHAR(100),
    [contraindication.extension] NVARCHAR(MAX),
    [contraindication.modifierExtension] NVARCHAR(MAX),
    [contraindication.diseaseSymptomProcedure.id] NVARCHAR(100),
    [contraindication.diseaseSymptomProcedure.extension] NVARCHAR(MAX),
    [contraindication.diseaseSymptomProcedure.concept] NVARCHAR(MAX),
    [contraindication.diseaseSymptomProcedure.reference] NVARCHAR(MAX),
    [contraindication.diseaseStatus.id] NVARCHAR(100),
    [contraindication.diseaseStatus.extension] NVARCHAR(MAX),
    [contraindication.diseaseStatus.concept] NVARCHAR(MAX),
    [contraindication.diseaseStatus.reference] NVARCHAR(MAX),
    [contraindication.comorbidity] VARCHAR(MAX),
    [contraindication.indication] VARCHAR(MAX),
    [contraindication.otherTherapy] VARCHAR(MAX),
    [indication.id] NVARCHAR(100),
    [indication.extension] NVARCHAR(MAX),
    [indication.modifierExtension] NVARCHAR(MAX),
    [indication.diseaseSymptomProcedure.id] NVARCHAR(100),
    [indication.diseaseSymptomProcedure.extension] NVARCHAR(MAX),
    [indication.diseaseSymptomProcedure.concept] NVARCHAR(MAX),
    [indication.diseaseSymptomProcedure.reference] NVARCHAR(MAX),
    [indication.diseaseStatus.id] NVARCHAR(100),
    [indication.diseaseStatus.extension] NVARCHAR(MAX),
    [indication.diseaseStatus.concept] NVARCHAR(MAX),
    [indication.diseaseStatus.reference] NVARCHAR(MAX),
    [indication.comorbidity] VARCHAR(MAX),
    [indication.intendedEffect.id] NVARCHAR(100),
    [indication.intendedEffect.extension] NVARCHAR(MAX),
    [indication.intendedEffect.concept] NVARCHAR(MAX),
    [indication.intendedEffect.reference] NVARCHAR(MAX),
    [indication.duration.id] NVARCHAR(100),
    [indication.duration.extension] NVARCHAR(MAX),
    [indication.duration.value] float,
    [indication.duration.comparator] NVARCHAR(64),
    [indication.duration.unit] NVARCHAR(100),
    [indication.duration.system] VARCHAR(256),
    [indication.duration.code] NVARCHAR(4000),
    [indication.undesirableEffect] VARCHAR(MAX),
    [indication.otherTherapy] VARCHAR(MAX),
    [interaction.id] NVARCHAR(100),
    [interaction.extension] NVARCHAR(MAX),
    [interaction.modifierExtension] NVARCHAR(MAX),
    [interaction.interactant] VARCHAR(MAX),
    [interaction.type.id] NVARCHAR(100),
    [interaction.type.extension] NVARCHAR(MAX),
    [interaction.type.coding] NVARCHAR(MAX),
    [interaction.type.text] NVARCHAR(4000),
    [interaction.effect.id] NVARCHAR(100),
    [interaction.effect.extension] NVARCHAR(MAX),
    [interaction.effect.concept] NVARCHAR(MAX),
    [interaction.effect.reference] NVARCHAR(MAX),
    [interaction.incidence.id] NVARCHAR(100),
    [interaction.incidence.extension] NVARCHAR(MAX),
    [interaction.incidence.coding] NVARCHAR(MAX),
    [interaction.incidence.text] NVARCHAR(4000),
    [interaction.management] VARCHAR(MAX),
    [population] VARCHAR(MAX),
    [undesirableEffect.id] NVARCHAR(100),
    [undesirableEffect.extension] NVARCHAR(MAX),
    [undesirableEffect.modifierExtension] NVARCHAR(MAX),
    [undesirableEffect.symptomConditionEffect.id] NVARCHAR(100),
    [undesirableEffect.symptomConditionEffect.extension] NVARCHAR(MAX),
    [undesirableEffect.symptomConditionEffect.concept] NVARCHAR(MAX),
    [undesirableEffect.symptomConditionEffect.reference] NVARCHAR(MAX),
    [undesirableEffect.classification.id] NVARCHAR(100),
    [undesirableEffect.classification.extension] NVARCHAR(MAX),
    [undesirableEffect.classification.coding] NVARCHAR(MAX),
    [undesirableEffect.classification.text] NVARCHAR(4000),
    [undesirableEffect.frequencyOfOccurrence.id] NVARCHAR(100),
    [undesirableEffect.frequencyOfOccurrence.extension] NVARCHAR(MAX),
    [undesirableEffect.frequencyOfOccurrence.coding] NVARCHAR(MAX),
    [undesirableEffect.frequencyOfOccurrence.text] NVARCHAR(4000),
) WITH (
    LOCATION='/ClinicalUseIssue/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.ClinicalUseIssueIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'ClinicalUseIssue/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.ClinicalUseIssueCategory AS
SELECT
    [id],
    [category.JSON],
    [category.id],
    [category.extension],
    [category.coding],
    [category.text]
FROM openrowset (
        BULK 'ClinicalUseIssue/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [category.JSON]  VARCHAR(MAX) '$.category'
    ) AS rowset
    CROSS APPLY openjson (rowset.[category.JSON]) with (
        [category.id]                  NVARCHAR(100)       '$.id',
        [category.extension]           NVARCHAR(MAX)       '$.extension',
        [category.coding]              NVARCHAR(MAX)       '$.coding' AS JSON,
        [category.text]                NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.ClinicalUseIssueSubject AS
SELECT
    [id],
    [subject.JSON],
    [subject.id],
    [subject.extension],
    [subject.reference],
    [subject.type],
    [subject.identifier.id],
    [subject.identifier.extension],
    [subject.identifier.use],
    [subject.identifier.type],
    [subject.identifier.system],
    [subject.identifier.value],
    [subject.identifier.period],
    [subject.identifier.assigner],
    [subject.display]
FROM openrowset (
        BULK 'ClinicalUseIssue/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [subject.JSON]  VARCHAR(MAX) '$.subject'
    ) AS rowset
    CROSS APPLY openjson (rowset.[subject.JSON]) with (
        [subject.id]                   NVARCHAR(100)       '$.id',
        [subject.extension]            NVARCHAR(MAX)       '$.extension',
        [subject.reference]            NVARCHAR(4000)      '$.reference',
        [subject.type]                 VARCHAR(256)        '$.type',
        [subject.identifier.id]        NVARCHAR(100)       '$.identifier.id',
        [subject.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [subject.identifier.use]       NVARCHAR(64)        '$.identifier.use',
        [subject.identifier.type]      NVARCHAR(MAX)       '$.identifier.type',
        [subject.identifier.system]    VARCHAR(256)        '$.identifier.system',
        [subject.identifier.value]     NVARCHAR(4000)      '$.identifier.value',
        [subject.identifier.period]    NVARCHAR(MAX)       '$.identifier.period',
        [subject.identifier.assigner]  NVARCHAR(MAX)       '$.identifier.assigner',
        [subject.display]              NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.ClinicalUseIssuePopulation AS
SELECT
    [id],
    [population.JSON],
    [population.id],
    [population.extension],
    [population.modifierExtension],
    [population.gender.id],
    [population.gender.extension],
    [population.gender.coding],
    [population.gender.text],
    [population.race.id],
    [population.race.extension],
    [population.race.coding],
    [population.race.text],
    [population.physiologicalCondition.id],
    [population.physiologicalCondition.extension],
    [population.physiologicalCondition.coding],
    [population.physiologicalCondition.text],
    [population.age.range.id],
    [population.age.range.extension],
    [population.age.range.low],
    [population.age.range.high],
    [population.age.codeableConcept.id],
    [population.age.codeableConcept.extension],
    [population.age.codeableConcept.coding],
    [population.age.codeableConcept.text]
FROM openrowset (
        BULK 'ClinicalUseIssue/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [population.JSON]  VARCHAR(MAX) '$.population'
    ) AS rowset
    CROSS APPLY openjson (rowset.[population.JSON]) with (
        [population.id]                NVARCHAR(100)       '$.id',
        [population.extension]         NVARCHAR(MAX)       '$.extension',
        [population.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [population.gender.id]         NVARCHAR(100)       '$.gender.id',
        [population.gender.extension]  NVARCHAR(MAX)       '$.gender.extension',
        [population.gender.coding]     NVARCHAR(MAX)       '$.gender.coding',
        [population.gender.text]       NVARCHAR(4000)      '$.gender.text',
        [population.race.id]           NVARCHAR(100)       '$.race.id',
        [population.race.extension]    NVARCHAR(MAX)       '$.race.extension',
        [population.race.coding]       NVARCHAR(MAX)       '$.race.coding',
        [population.race.text]         NVARCHAR(4000)      '$.race.text',
        [population.physiologicalCondition.id] NVARCHAR(100)       '$.physiologicalCondition.id',
        [population.physiologicalCondition.extension] NVARCHAR(MAX)       '$.physiologicalCondition.extension',
        [population.physiologicalCondition.coding] NVARCHAR(MAX)       '$.physiologicalCondition.coding',
        [population.physiologicalCondition.text] NVARCHAR(4000)      '$.physiologicalCondition.text',
        [population.age.range.id]      NVARCHAR(100)       '$.age.range.id',
        [population.age.range.extension] NVARCHAR(MAX)       '$.age.range.extension',
        [population.age.range.low]     NVARCHAR(MAX)       '$.age.range.low',
        [population.age.range.high]    NVARCHAR(MAX)       '$.age.range.high',
        [population.age.codeableConcept.id] NVARCHAR(100)       '$.age.codeableConcept.id',
        [population.age.codeableConcept.extension] NVARCHAR(MAX)       '$.age.codeableConcept.extension',
        [population.age.codeableConcept.coding] NVARCHAR(MAX)       '$.age.codeableConcept.coding',
        [population.age.codeableConcept.text] NVARCHAR(4000)      '$.age.codeableConcept.text'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[CodeSystem] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [url] VARCHAR(256),
    [identifier] VARCHAR(MAX),
    [version] NVARCHAR(100),
    [name] NVARCHAR(500),
    [title] NVARCHAR(4000),
    [status] NVARCHAR(100),
    [experimental] bit,
    [date] VARCHAR(64),
    [publisher] NVARCHAR(500),
    [contact] VARCHAR(MAX),
    [description] NVARCHAR(MAX),
    [useContext] VARCHAR(MAX),
    [jurisdiction] VARCHAR(MAX),
    [purpose] NVARCHAR(MAX),
    [copyright] NVARCHAR(MAX),
    [caseSensitive] bit,
    [valueSet] VARCHAR(256),
    [hierarchyMeaning] NVARCHAR(4000),
    [compositional] bit,
    [versionNeeded] bit,
    [content] NVARCHAR(4000),
    [supplements] VARCHAR(256),
    [count] bigint,
    [filter] VARCHAR(MAX),
    [property] VARCHAR(MAX),
    [concept] VARCHAR(MAX),
) WITH (
    LOCATION='/CodeSystem/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.CodeSystemIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'CodeSystem/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.CodeSystemContact AS
SELECT
    [id],
    [contact.JSON],
    [contact.id],
    [contact.extension],
    [contact.name],
    [contact.telecom]
FROM openrowset (
        BULK 'CodeSystem/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [contact.JSON]  VARCHAR(MAX) '$.contact'
    ) AS rowset
    CROSS APPLY openjson (rowset.[contact.JSON]) with (
        [contact.id]                   NVARCHAR(100)       '$.id',
        [contact.extension]            NVARCHAR(MAX)       '$.extension',
        [contact.name]                 NVARCHAR(500)       '$.name',
        [contact.telecom]              NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.CodeSystemUseContext AS
SELECT
    [id],
    [useContext.JSON],
    [useContext.id],
    [useContext.extension],
    [useContext.code.id],
    [useContext.code.extension],
    [useContext.code.system],
    [useContext.code.version],
    [useContext.code.code],
    [useContext.code.display],
    [useContext.code.userSelected],
    [useContext.value.codeableConcept.id],
    [useContext.value.codeableConcept.extension],
    [useContext.value.codeableConcept.coding],
    [useContext.value.codeableConcept.text],
    [useContext.value.quantity.id],
    [useContext.value.quantity.extension],
    [useContext.value.quantity.value],
    [useContext.value.quantity.comparator],
    [useContext.value.quantity.unit],
    [useContext.value.quantity.system],
    [useContext.value.quantity.code],
    [useContext.value.range.id],
    [useContext.value.range.extension],
    [useContext.value.range.low],
    [useContext.value.range.high],
    [useContext.value.reference.id],
    [useContext.value.reference.extension],
    [useContext.value.reference.reference],
    [useContext.value.reference.type],
    [useContext.value.reference.identifier],
    [useContext.value.reference.display]
FROM openrowset (
        BULK 'CodeSystem/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [useContext.JSON]  VARCHAR(MAX) '$.useContext'
    ) AS rowset
    CROSS APPLY openjson (rowset.[useContext.JSON]) with (
        [useContext.id]                NVARCHAR(100)       '$.id',
        [useContext.extension]         NVARCHAR(MAX)       '$.extension',
        [useContext.code.id]           NVARCHAR(100)       '$.code.id',
        [useContext.code.extension]    NVARCHAR(MAX)       '$.code.extension',
        [useContext.code.system]       VARCHAR(256)        '$.code.system',
        [useContext.code.version]      NVARCHAR(100)       '$.code.version',
        [useContext.code.code]         NVARCHAR(4000)      '$.code.code',
        [useContext.code.display]      NVARCHAR(4000)      '$.code.display',
        [useContext.code.userSelected] bit                 '$.code.userSelected',
        [useContext.value.codeableConcept.id] NVARCHAR(100)       '$.value.codeableConcept.id',
        [useContext.value.codeableConcept.extension] NVARCHAR(MAX)       '$.value.codeableConcept.extension',
        [useContext.value.codeableConcept.coding] NVARCHAR(MAX)       '$.value.codeableConcept.coding',
        [useContext.value.codeableConcept.text] NVARCHAR(4000)      '$.value.codeableConcept.text',
        [useContext.value.quantity.id] NVARCHAR(100)       '$.value.quantity.id',
        [useContext.value.quantity.extension] NVARCHAR(MAX)       '$.value.quantity.extension',
        [useContext.value.quantity.value] float               '$.value.quantity.value',
        [useContext.value.quantity.comparator] NVARCHAR(64)        '$.value.quantity.comparator',
        [useContext.value.quantity.unit] NVARCHAR(100)       '$.value.quantity.unit',
        [useContext.value.quantity.system] VARCHAR(256)        '$.value.quantity.system',
        [useContext.value.quantity.code] NVARCHAR(4000)      '$.value.quantity.code',
        [useContext.value.range.id]    NVARCHAR(100)       '$.value.range.id',
        [useContext.value.range.extension] NVARCHAR(MAX)       '$.value.range.extension',
        [useContext.value.range.low]   NVARCHAR(MAX)       '$.value.range.low',
        [useContext.value.range.high]  NVARCHAR(MAX)       '$.value.range.high',
        [useContext.value.reference.id] NVARCHAR(100)       '$.value.reference.id',
        [useContext.value.reference.extension] NVARCHAR(MAX)       '$.value.reference.extension',
        [useContext.value.reference.reference] NVARCHAR(4000)      '$.value.reference.reference',
        [useContext.value.reference.type] VARCHAR(256)        '$.value.reference.type',
        [useContext.value.reference.identifier] NVARCHAR(MAX)       '$.value.reference.identifier',
        [useContext.value.reference.display] NVARCHAR(4000)      '$.value.reference.display'
    ) j

GO

CREATE VIEW fhir.CodeSystemJurisdiction AS
SELECT
    [id],
    [jurisdiction.JSON],
    [jurisdiction.id],
    [jurisdiction.extension],
    [jurisdiction.coding],
    [jurisdiction.text]
FROM openrowset (
        BULK 'CodeSystem/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [jurisdiction.JSON]  VARCHAR(MAX) '$.jurisdiction'
    ) AS rowset
    CROSS APPLY openjson (rowset.[jurisdiction.JSON]) with (
        [jurisdiction.id]              NVARCHAR(100)       '$.id',
        [jurisdiction.extension]       NVARCHAR(MAX)       '$.extension',
        [jurisdiction.coding]          NVARCHAR(MAX)       '$.coding' AS JSON,
        [jurisdiction.text]            NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.CodeSystemFilter AS
SELECT
    [id],
    [filter.JSON],
    [filter.id],
    [filter.extension],
    [filter.modifierExtension],
    [filter.code],
    [filter.description],
    [filter.operator],
    [filter.value]
FROM openrowset (
        BULK 'CodeSystem/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [filter.JSON]  VARCHAR(MAX) '$.filter'
    ) AS rowset
    CROSS APPLY openjson (rowset.[filter.JSON]) with (
        [filter.id]                    NVARCHAR(100)       '$.id',
        [filter.extension]             NVARCHAR(MAX)       '$.extension',
        [filter.modifierExtension]     NVARCHAR(MAX)       '$.modifierExtension',
        [filter.code]                  NVARCHAR(4000)      '$.code',
        [filter.description]           NVARCHAR(4000)      '$.description',
        [filter.operator]              NVARCHAR(MAX)       '$.operator' AS JSON,
        [filter.value]                 NVARCHAR(4000)      '$.value'
    ) j

GO

CREATE VIEW fhir.CodeSystemProperty AS
SELECT
    [id],
    [property.JSON],
    [property.id],
    [property.extension],
    [property.modifierExtension],
    [property.code],
    [property.uri],
    [property.description],
    [property.type]
FROM openrowset (
        BULK 'CodeSystem/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [property.JSON]  VARCHAR(MAX) '$.property'
    ) AS rowset
    CROSS APPLY openjson (rowset.[property.JSON]) with (
        [property.id]                  NVARCHAR(100)       '$.id',
        [property.extension]           NVARCHAR(MAX)       '$.extension',
        [property.modifierExtension]   NVARCHAR(MAX)       '$.modifierExtension',
        [property.code]                NVARCHAR(4000)      '$.code',
        [property.uri]                 VARCHAR(256)        '$.uri',
        [property.description]         NVARCHAR(4000)      '$.description',
        [property.type]                NVARCHAR(100)       '$.type'
    ) j

GO

CREATE VIEW fhir.CodeSystemConcept AS
SELECT
    [id],
    [concept.JSON],
    [concept.id],
    [concept.extension],
    [concept.modifierExtension],
    [concept.code],
    [concept.display],
    [concept.definition],
    [concept.designation],
    [concept.property],
    [concept.concept]
FROM openrowset (
        BULK 'CodeSystem/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [concept.JSON]  VARCHAR(MAX) '$.concept'
    ) AS rowset
    CROSS APPLY openjson (rowset.[concept.JSON]) with (
        [concept.id]                   NVARCHAR(100)       '$.id',
        [concept.extension]            NVARCHAR(MAX)       '$.extension',
        [concept.modifierExtension]    NVARCHAR(MAX)       '$.modifierExtension',
        [concept.code]                 NVARCHAR(4000)      '$.code',
        [concept.display]              NVARCHAR(4000)      '$.display',
        [concept.definition]           NVARCHAR(4000)      '$.definition',
        [concept.designation]          NVARCHAR(MAX)       '$.designation' AS JSON,
        [concept.property]             NVARCHAR(MAX)       '$.property' AS JSON,
        [concept.concept]              NVARCHAR(MAX)       '$.concept' AS JSON
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[Communication] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [instantiatesCanonical] VARCHAR(MAX),
    [instantiatesUri] VARCHAR(MAX),
    [basedOn] VARCHAR(MAX),
    [partOf] VARCHAR(MAX),
    [inResponseTo] VARCHAR(MAX),
    [status] NVARCHAR(100),
    [statusReason.id] NVARCHAR(100),
    [statusReason.extension] NVARCHAR(MAX),
    [statusReason.coding] VARCHAR(MAX),
    [statusReason.text] NVARCHAR(4000),
    [category] VARCHAR(MAX),
    [priority] NVARCHAR(100),
    [medium] VARCHAR(MAX),
    [subject.id] NVARCHAR(100),
    [subject.extension] NVARCHAR(MAX),
    [subject.reference] NVARCHAR(4000),
    [subject.type] VARCHAR(256),
    [subject.identifier.id] NVARCHAR(100),
    [subject.identifier.extension] NVARCHAR(MAX),
    [subject.identifier.use] NVARCHAR(64),
    [subject.identifier.type] NVARCHAR(MAX),
    [subject.identifier.system] VARCHAR(256),
    [subject.identifier.value] NVARCHAR(4000),
    [subject.identifier.period] NVARCHAR(MAX),
    [subject.identifier.assigner] NVARCHAR(MAX),
    [subject.display] NVARCHAR(4000),
    [topic.id] NVARCHAR(100),
    [topic.extension] NVARCHAR(MAX),
    [topic.coding] VARCHAR(MAX),
    [topic.text] NVARCHAR(4000),
    [about] VARCHAR(MAX),
    [encounter.id] NVARCHAR(100),
    [encounter.extension] NVARCHAR(MAX),
    [encounter.reference] NVARCHAR(4000),
    [encounter.type] VARCHAR(256),
    [encounter.identifier.id] NVARCHAR(100),
    [encounter.identifier.extension] NVARCHAR(MAX),
    [encounter.identifier.use] NVARCHAR(64),
    [encounter.identifier.type] NVARCHAR(MAX),
    [encounter.identifier.system] VARCHAR(256),
    [encounter.identifier.value] NVARCHAR(4000),
    [encounter.identifier.period] NVARCHAR(MAX),
    [encounter.identifier.assigner] NVARCHAR(MAX),
    [encounter.display] NVARCHAR(4000),
    [sent] VARCHAR(64),
    [received] VARCHAR(64),
    [recipient] VARCHAR(MAX),
    [sender.id] NVARCHAR(100),
    [sender.extension] NVARCHAR(MAX),
    [sender.reference] NVARCHAR(4000),
    [sender.type] VARCHAR(256),
    [sender.identifier.id] NVARCHAR(100),
    [sender.identifier.extension] NVARCHAR(MAX),
    [sender.identifier.use] NVARCHAR(64),
    [sender.identifier.type] NVARCHAR(MAX),
    [sender.identifier.system] VARCHAR(256),
    [sender.identifier.value] NVARCHAR(4000),
    [sender.identifier.period] NVARCHAR(MAX),
    [sender.identifier.assigner] NVARCHAR(MAX),
    [sender.display] NVARCHAR(4000),
    [reason] VARCHAR(MAX),
    [payload] VARCHAR(MAX),
    [note] VARCHAR(MAX),
) WITH (
    LOCATION='/Communication/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.CommunicationIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'Communication/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.CommunicationInstantiatesCanonical AS
SELECT
    [id],
    [instantiatesCanonical.JSON],
    [instantiatesCanonical]
FROM openrowset (
        BULK 'Communication/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [instantiatesCanonical.JSON]  VARCHAR(MAX) '$.instantiatesCanonical'
    ) AS rowset
    CROSS APPLY openjson (rowset.[instantiatesCanonical.JSON]) with (
        [instantiatesCanonical]        NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.CommunicationInstantiatesUri AS
SELECT
    [id],
    [instantiatesUri.JSON],
    [instantiatesUri]
FROM openrowset (
        BULK 'Communication/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [instantiatesUri.JSON]  VARCHAR(MAX) '$.instantiatesUri'
    ) AS rowset
    CROSS APPLY openjson (rowset.[instantiatesUri.JSON]) with (
        [instantiatesUri]              NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.CommunicationBasedOn AS
SELECT
    [id],
    [basedOn.JSON],
    [basedOn.id],
    [basedOn.extension],
    [basedOn.reference],
    [basedOn.type],
    [basedOn.identifier.id],
    [basedOn.identifier.extension],
    [basedOn.identifier.use],
    [basedOn.identifier.type],
    [basedOn.identifier.system],
    [basedOn.identifier.value],
    [basedOn.identifier.period],
    [basedOn.identifier.assigner],
    [basedOn.display]
FROM openrowset (
        BULK 'Communication/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [basedOn.JSON]  VARCHAR(MAX) '$.basedOn'
    ) AS rowset
    CROSS APPLY openjson (rowset.[basedOn.JSON]) with (
        [basedOn.id]                   NVARCHAR(100)       '$.id',
        [basedOn.extension]            NVARCHAR(MAX)       '$.extension',
        [basedOn.reference]            NVARCHAR(4000)      '$.reference',
        [basedOn.type]                 VARCHAR(256)        '$.type',
        [basedOn.identifier.id]        NVARCHAR(100)       '$.identifier.id',
        [basedOn.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [basedOn.identifier.use]       NVARCHAR(64)        '$.identifier.use',
        [basedOn.identifier.type]      NVARCHAR(MAX)       '$.identifier.type',
        [basedOn.identifier.system]    VARCHAR(256)        '$.identifier.system',
        [basedOn.identifier.value]     NVARCHAR(4000)      '$.identifier.value',
        [basedOn.identifier.period]    NVARCHAR(MAX)       '$.identifier.period',
        [basedOn.identifier.assigner]  NVARCHAR(MAX)       '$.identifier.assigner',
        [basedOn.display]              NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.CommunicationPartOf AS
SELECT
    [id],
    [partOf.JSON],
    [partOf.id],
    [partOf.extension],
    [partOf.reference],
    [partOf.type],
    [partOf.identifier.id],
    [partOf.identifier.extension],
    [partOf.identifier.use],
    [partOf.identifier.type],
    [partOf.identifier.system],
    [partOf.identifier.value],
    [partOf.identifier.period],
    [partOf.identifier.assigner],
    [partOf.display]
FROM openrowset (
        BULK 'Communication/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [partOf.JSON]  VARCHAR(MAX) '$.partOf'
    ) AS rowset
    CROSS APPLY openjson (rowset.[partOf.JSON]) with (
        [partOf.id]                    NVARCHAR(100)       '$.id',
        [partOf.extension]             NVARCHAR(MAX)       '$.extension',
        [partOf.reference]             NVARCHAR(4000)      '$.reference',
        [partOf.type]                  VARCHAR(256)        '$.type',
        [partOf.identifier.id]         NVARCHAR(100)       '$.identifier.id',
        [partOf.identifier.extension]  NVARCHAR(MAX)       '$.identifier.extension',
        [partOf.identifier.use]        NVARCHAR(64)        '$.identifier.use',
        [partOf.identifier.type]       NVARCHAR(MAX)       '$.identifier.type',
        [partOf.identifier.system]     VARCHAR(256)        '$.identifier.system',
        [partOf.identifier.value]      NVARCHAR(4000)      '$.identifier.value',
        [partOf.identifier.period]     NVARCHAR(MAX)       '$.identifier.period',
        [partOf.identifier.assigner]   NVARCHAR(MAX)       '$.identifier.assigner',
        [partOf.display]               NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.CommunicationInResponseTo AS
SELECT
    [id],
    [inResponseTo.JSON],
    [inResponseTo.id],
    [inResponseTo.extension],
    [inResponseTo.reference],
    [inResponseTo.type],
    [inResponseTo.identifier.id],
    [inResponseTo.identifier.extension],
    [inResponseTo.identifier.use],
    [inResponseTo.identifier.type],
    [inResponseTo.identifier.system],
    [inResponseTo.identifier.value],
    [inResponseTo.identifier.period],
    [inResponseTo.identifier.assigner],
    [inResponseTo.display]
FROM openrowset (
        BULK 'Communication/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [inResponseTo.JSON]  VARCHAR(MAX) '$.inResponseTo'
    ) AS rowset
    CROSS APPLY openjson (rowset.[inResponseTo.JSON]) with (
        [inResponseTo.id]              NVARCHAR(100)       '$.id',
        [inResponseTo.extension]       NVARCHAR(MAX)       '$.extension',
        [inResponseTo.reference]       NVARCHAR(4000)      '$.reference',
        [inResponseTo.type]            VARCHAR(256)        '$.type',
        [inResponseTo.identifier.id]   NVARCHAR(100)       '$.identifier.id',
        [inResponseTo.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [inResponseTo.identifier.use]  NVARCHAR(64)        '$.identifier.use',
        [inResponseTo.identifier.type] NVARCHAR(MAX)       '$.identifier.type',
        [inResponseTo.identifier.system] VARCHAR(256)        '$.identifier.system',
        [inResponseTo.identifier.value] NVARCHAR(4000)      '$.identifier.value',
        [inResponseTo.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [inResponseTo.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [inResponseTo.display]         NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.CommunicationCategory AS
SELECT
    [id],
    [category.JSON],
    [category.id],
    [category.extension],
    [category.coding],
    [category.text]
FROM openrowset (
        BULK 'Communication/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [category.JSON]  VARCHAR(MAX) '$.category'
    ) AS rowset
    CROSS APPLY openjson (rowset.[category.JSON]) with (
        [category.id]                  NVARCHAR(100)       '$.id',
        [category.extension]           NVARCHAR(MAX)       '$.extension',
        [category.coding]              NVARCHAR(MAX)       '$.coding' AS JSON,
        [category.text]                NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.CommunicationMedium AS
SELECT
    [id],
    [medium.JSON],
    [medium.id],
    [medium.extension],
    [medium.coding],
    [medium.text]
FROM openrowset (
        BULK 'Communication/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [medium.JSON]  VARCHAR(MAX) '$.medium'
    ) AS rowset
    CROSS APPLY openjson (rowset.[medium.JSON]) with (
        [medium.id]                    NVARCHAR(100)       '$.id',
        [medium.extension]             NVARCHAR(MAX)       '$.extension',
        [medium.coding]                NVARCHAR(MAX)       '$.coding' AS JSON,
        [medium.text]                  NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.CommunicationAbout AS
SELECT
    [id],
    [about.JSON],
    [about.id],
    [about.extension],
    [about.reference],
    [about.type],
    [about.identifier.id],
    [about.identifier.extension],
    [about.identifier.use],
    [about.identifier.type],
    [about.identifier.system],
    [about.identifier.value],
    [about.identifier.period],
    [about.identifier.assigner],
    [about.display]
FROM openrowset (
        BULK 'Communication/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [about.JSON]  VARCHAR(MAX) '$.about'
    ) AS rowset
    CROSS APPLY openjson (rowset.[about.JSON]) with (
        [about.id]                     NVARCHAR(100)       '$.id',
        [about.extension]              NVARCHAR(MAX)       '$.extension',
        [about.reference]              NVARCHAR(4000)      '$.reference',
        [about.type]                   VARCHAR(256)        '$.type',
        [about.identifier.id]          NVARCHAR(100)       '$.identifier.id',
        [about.identifier.extension]   NVARCHAR(MAX)       '$.identifier.extension',
        [about.identifier.use]         NVARCHAR(64)        '$.identifier.use',
        [about.identifier.type]        NVARCHAR(MAX)       '$.identifier.type',
        [about.identifier.system]      VARCHAR(256)        '$.identifier.system',
        [about.identifier.value]       NVARCHAR(4000)      '$.identifier.value',
        [about.identifier.period]      NVARCHAR(MAX)       '$.identifier.period',
        [about.identifier.assigner]    NVARCHAR(MAX)       '$.identifier.assigner',
        [about.display]                NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.CommunicationRecipient AS
SELECT
    [id],
    [recipient.JSON],
    [recipient.id],
    [recipient.extension],
    [recipient.reference],
    [recipient.type],
    [recipient.identifier.id],
    [recipient.identifier.extension],
    [recipient.identifier.use],
    [recipient.identifier.type],
    [recipient.identifier.system],
    [recipient.identifier.value],
    [recipient.identifier.period],
    [recipient.identifier.assigner],
    [recipient.display]
FROM openrowset (
        BULK 'Communication/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [recipient.JSON]  VARCHAR(MAX) '$.recipient'
    ) AS rowset
    CROSS APPLY openjson (rowset.[recipient.JSON]) with (
        [recipient.id]                 NVARCHAR(100)       '$.id',
        [recipient.extension]          NVARCHAR(MAX)       '$.extension',
        [recipient.reference]          NVARCHAR(4000)      '$.reference',
        [recipient.type]               VARCHAR(256)        '$.type',
        [recipient.identifier.id]      NVARCHAR(100)       '$.identifier.id',
        [recipient.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [recipient.identifier.use]     NVARCHAR(64)        '$.identifier.use',
        [recipient.identifier.type]    NVARCHAR(MAX)       '$.identifier.type',
        [recipient.identifier.system]  VARCHAR(256)        '$.identifier.system',
        [recipient.identifier.value]   NVARCHAR(4000)      '$.identifier.value',
        [recipient.identifier.period]  NVARCHAR(MAX)       '$.identifier.period',
        [recipient.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [recipient.display]            NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.CommunicationReason AS
SELECT
    [id],
    [reason.JSON],
    [reason.id],
    [reason.extension],
    [reason.concept.id],
    [reason.concept.extension],
    [reason.concept.coding],
    [reason.concept.text],
    [reason.reference.id],
    [reason.reference.extension],
    [reason.reference.reference],
    [reason.reference.type],
    [reason.reference.identifier],
    [reason.reference.display]
FROM openrowset (
        BULK 'Communication/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [reason.JSON]  VARCHAR(MAX) '$.reason'
    ) AS rowset
    CROSS APPLY openjson (rowset.[reason.JSON]) with (
        [reason.id]                    NVARCHAR(100)       '$.id',
        [reason.extension]             NVARCHAR(MAX)       '$.extension',
        [reason.concept.id]            NVARCHAR(100)       '$.concept.id',
        [reason.concept.extension]     NVARCHAR(MAX)       '$.concept.extension',
        [reason.concept.coding]        NVARCHAR(MAX)       '$.concept.coding',
        [reason.concept.text]          NVARCHAR(4000)      '$.concept.text',
        [reason.reference.id]          NVARCHAR(100)       '$.reference.id',
        [reason.reference.extension]   NVARCHAR(MAX)       '$.reference.extension',
        [reason.reference.reference]   NVARCHAR(4000)      '$.reference.reference',
        [reason.reference.type]        VARCHAR(256)        '$.reference.type',
        [reason.reference.identifier]  NVARCHAR(MAX)       '$.reference.identifier',
        [reason.reference.display]     NVARCHAR(4000)      '$.reference.display'
    ) j

GO

CREATE VIEW fhir.CommunicationPayload AS
SELECT
    [id],
    [payload.JSON],
    [payload.id],
    [payload.extension],
    [payload.modifierExtension],
    [payload.content.attachment.id],
    [payload.content.attachment.extension],
    [payload.content.attachment.contentType],
    [payload.content.attachment.language],
    [payload.content.attachment.data],
    [payload.content.attachment.url],
    [payload.content.attachment.size],
    [payload.content.attachment.hash],
    [payload.content.attachment.title],
    [payload.content.attachment.creation],
    [payload.content.attachment.height],
    [payload.content.attachment.width],
    [payload.content.attachment.frames],
    [payload.content.attachment.duration],
    [payload.content.attachment.pages],
    [payload.content.reference.id],
    [payload.content.reference.extension],
    [payload.content.reference.reference],
    [payload.content.reference.type],
    [payload.content.reference.identifier],
    [payload.content.reference.display],
    [payload.content.codeableConcept.id],
    [payload.content.codeableConcept.extension],
    [payload.content.codeableConcept.coding],
    [payload.content.codeableConcept.text]
FROM openrowset (
        BULK 'Communication/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [payload.JSON]  VARCHAR(MAX) '$.payload'
    ) AS rowset
    CROSS APPLY openjson (rowset.[payload.JSON]) with (
        [payload.id]                   NVARCHAR(100)       '$.id',
        [payload.extension]            NVARCHAR(MAX)       '$.extension',
        [payload.modifierExtension]    NVARCHAR(MAX)       '$.modifierExtension',
        [payload.content.attachment.id] NVARCHAR(100)       '$.content.attachment.id',
        [payload.content.attachment.extension] NVARCHAR(MAX)       '$.content.attachment.extension',
        [payload.content.attachment.contentType] NVARCHAR(100)       '$.content.attachment.contentType',
        [payload.content.attachment.language] NVARCHAR(100)       '$.content.attachment.language',
        [payload.content.attachment.data] NVARCHAR(MAX)       '$.content.attachment.data',
        [payload.content.attachment.url] VARCHAR(256)        '$.content.attachment.url',
        [payload.content.attachment.size] NVARCHAR(MAX)       '$.content.attachment.size',
        [payload.content.attachment.hash] NVARCHAR(MAX)       '$.content.attachment.hash',
        [payload.content.attachment.title] NVARCHAR(4000)      '$.content.attachment.title',
        [payload.content.attachment.creation] VARCHAR(64)         '$.content.attachment.creation',
        [payload.content.attachment.height] bigint              '$.content.attachment.height',
        [payload.content.attachment.width] bigint              '$.content.attachment.width',
        [payload.content.attachment.frames] bigint              '$.content.attachment.frames',
        [payload.content.attachment.duration] float               '$.content.attachment.duration',
        [payload.content.attachment.pages] bigint              '$.content.attachment.pages',
        [payload.content.reference.id] NVARCHAR(100)       '$.content.reference.id',
        [payload.content.reference.extension] NVARCHAR(MAX)       '$.content.reference.extension',
        [payload.content.reference.reference] NVARCHAR(4000)      '$.content.reference.reference',
        [payload.content.reference.type] VARCHAR(256)        '$.content.reference.type',
        [payload.content.reference.identifier] NVARCHAR(MAX)       '$.content.reference.identifier',
        [payload.content.reference.display] NVARCHAR(4000)      '$.content.reference.display',
        [payload.content.codeableConcept.id] NVARCHAR(100)       '$.content.codeableConcept.id',
        [payload.content.codeableConcept.extension] NVARCHAR(MAX)       '$.content.codeableConcept.extension',
        [payload.content.codeableConcept.coding] NVARCHAR(MAX)       '$.content.codeableConcept.coding',
        [payload.content.codeableConcept.text] NVARCHAR(4000)      '$.content.codeableConcept.text'
    ) j

GO

CREATE VIEW fhir.CommunicationNote AS
SELECT
    [id],
    [note.JSON],
    [note.id],
    [note.extension],
    [note.time],
    [note.text],
    [note.author.reference.id],
    [note.author.reference.extension],
    [note.author.reference.reference],
    [note.author.reference.type],
    [note.author.reference.identifier],
    [note.author.reference.display],
    [note.author.string]
FROM openrowset (
        BULK 'Communication/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [note.JSON]  VARCHAR(MAX) '$.note'
    ) AS rowset
    CROSS APPLY openjson (rowset.[note.JSON]) with (
        [note.id]                      NVARCHAR(100)       '$.id',
        [note.extension]               NVARCHAR(MAX)       '$.extension',
        [note.time]                    VARCHAR(64)         '$.time',
        [note.text]                    NVARCHAR(MAX)       '$.text',
        [note.author.reference.id]     NVARCHAR(100)       '$.author.reference.id',
        [note.author.reference.extension] NVARCHAR(MAX)       '$.author.reference.extension',
        [note.author.reference.reference] NVARCHAR(4000)      '$.author.reference.reference',
        [note.author.reference.type]   VARCHAR(256)        '$.author.reference.type',
        [note.author.reference.identifier] NVARCHAR(MAX)       '$.author.reference.identifier',
        [note.author.reference.display] NVARCHAR(4000)      '$.author.reference.display',
        [note.author.string]           NVARCHAR(4000)      '$.author.string'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[CommunicationRequest] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [basedOn] VARCHAR(MAX),
    [replaces] VARCHAR(MAX),
    [groupIdentifier.id] NVARCHAR(100),
    [groupIdentifier.extension] NVARCHAR(MAX),
    [groupIdentifier.use] NVARCHAR(64),
    [groupIdentifier.type.id] NVARCHAR(100),
    [groupIdentifier.type.extension] NVARCHAR(MAX),
    [groupIdentifier.type.coding] NVARCHAR(MAX),
    [groupIdentifier.type.text] NVARCHAR(4000),
    [groupIdentifier.system] VARCHAR(256),
    [groupIdentifier.value] NVARCHAR(4000),
    [groupIdentifier.period.id] NVARCHAR(100),
    [groupIdentifier.period.extension] NVARCHAR(MAX),
    [groupIdentifier.period.start] VARCHAR(64),
    [groupIdentifier.period.end] VARCHAR(64),
    [groupIdentifier.assigner.id] NVARCHAR(100),
    [groupIdentifier.assigner.extension] NVARCHAR(MAX),
    [groupIdentifier.assigner.reference] NVARCHAR(4000),
    [groupIdentifier.assigner.type] VARCHAR(256),
    [groupIdentifier.assigner.identifier] NVARCHAR(MAX),
    [groupIdentifier.assigner.display] NVARCHAR(4000),
    [status] NVARCHAR(100),
    [statusReason.id] NVARCHAR(100),
    [statusReason.extension] NVARCHAR(MAX),
    [statusReason.coding] VARCHAR(MAX),
    [statusReason.text] NVARCHAR(4000),
    [intent] NVARCHAR(100),
    [category] VARCHAR(MAX),
    [priority] NVARCHAR(100),
    [doNotPerform] bit,
    [medium] VARCHAR(MAX),
    [subject.id] NVARCHAR(100),
    [subject.extension] NVARCHAR(MAX),
    [subject.reference] NVARCHAR(4000),
    [subject.type] VARCHAR(256),
    [subject.identifier.id] NVARCHAR(100),
    [subject.identifier.extension] NVARCHAR(MAX),
    [subject.identifier.use] NVARCHAR(64),
    [subject.identifier.type] NVARCHAR(MAX),
    [subject.identifier.system] VARCHAR(256),
    [subject.identifier.value] NVARCHAR(4000),
    [subject.identifier.period] NVARCHAR(MAX),
    [subject.identifier.assigner] NVARCHAR(MAX),
    [subject.display] NVARCHAR(4000),
    [about] VARCHAR(MAX),
    [encounter.id] NVARCHAR(100),
    [encounter.extension] NVARCHAR(MAX),
    [encounter.reference] NVARCHAR(4000),
    [encounter.type] VARCHAR(256),
    [encounter.identifier.id] NVARCHAR(100),
    [encounter.identifier.extension] NVARCHAR(MAX),
    [encounter.identifier.use] NVARCHAR(64),
    [encounter.identifier.type] NVARCHAR(MAX),
    [encounter.identifier.system] VARCHAR(256),
    [encounter.identifier.value] NVARCHAR(4000),
    [encounter.identifier.period] NVARCHAR(MAX),
    [encounter.identifier.assigner] NVARCHAR(MAX),
    [encounter.display] NVARCHAR(4000),
    [payload] VARCHAR(MAX),
    [authoredOn] VARCHAR(64),
    [requester.id] NVARCHAR(100),
    [requester.extension] NVARCHAR(MAX),
    [requester.reference] NVARCHAR(4000),
    [requester.type] VARCHAR(256),
    [requester.identifier.id] NVARCHAR(100),
    [requester.identifier.extension] NVARCHAR(MAX),
    [requester.identifier.use] NVARCHAR(64),
    [requester.identifier.type] NVARCHAR(MAX),
    [requester.identifier.system] VARCHAR(256),
    [requester.identifier.value] NVARCHAR(4000),
    [requester.identifier.period] NVARCHAR(MAX),
    [requester.identifier.assigner] NVARCHAR(MAX),
    [requester.display] NVARCHAR(4000),
    [recipient] VARCHAR(MAX),
    [informationProvider] VARCHAR(MAX),
    [reason] VARCHAR(MAX),
    [note] VARCHAR(MAX),
    [occurrence.dateTime] VARCHAR(64),
    [occurrence.period.id] NVARCHAR(100),
    [occurrence.period.extension] NVARCHAR(MAX),
    [occurrence.period.start] VARCHAR(64),
    [occurrence.period.end] VARCHAR(64),
) WITH (
    LOCATION='/CommunicationRequest/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.CommunicationRequestIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'CommunicationRequest/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.CommunicationRequestBasedOn AS
SELECT
    [id],
    [basedOn.JSON],
    [basedOn.id],
    [basedOn.extension],
    [basedOn.reference],
    [basedOn.type],
    [basedOn.identifier.id],
    [basedOn.identifier.extension],
    [basedOn.identifier.use],
    [basedOn.identifier.type],
    [basedOn.identifier.system],
    [basedOn.identifier.value],
    [basedOn.identifier.period],
    [basedOn.identifier.assigner],
    [basedOn.display]
FROM openrowset (
        BULK 'CommunicationRequest/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [basedOn.JSON]  VARCHAR(MAX) '$.basedOn'
    ) AS rowset
    CROSS APPLY openjson (rowset.[basedOn.JSON]) with (
        [basedOn.id]                   NVARCHAR(100)       '$.id',
        [basedOn.extension]            NVARCHAR(MAX)       '$.extension',
        [basedOn.reference]            NVARCHAR(4000)      '$.reference',
        [basedOn.type]                 VARCHAR(256)        '$.type',
        [basedOn.identifier.id]        NVARCHAR(100)       '$.identifier.id',
        [basedOn.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [basedOn.identifier.use]       NVARCHAR(64)        '$.identifier.use',
        [basedOn.identifier.type]      NVARCHAR(MAX)       '$.identifier.type',
        [basedOn.identifier.system]    VARCHAR(256)        '$.identifier.system',
        [basedOn.identifier.value]     NVARCHAR(4000)      '$.identifier.value',
        [basedOn.identifier.period]    NVARCHAR(MAX)       '$.identifier.period',
        [basedOn.identifier.assigner]  NVARCHAR(MAX)       '$.identifier.assigner',
        [basedOn.display]              NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.CommunicationRequestReplaces AS
SELECT
    [id],
    [replaces.JSON],
    [replaces.id],
    [replaces.extension],
    [replaces.reference],
    [replaces.type],
    [replaces.identifier.id],
    [replaces.identifier.extension],
    [replaces.identifier.use],
    [replaces.identifier.type],
    [replaces.identifier.system],
    [replaces.identifier.value],
    [replaces.identifier.period],
    [replaces.identifier.assigner],
    [replaces.display]
FROM openrowset (
        BULK 'CommunicationRequest/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [replaces.JSON]  VARCHAR(MAX) '$.replaces'
    ) AS rowset
    CROSS APPLY openjson (rowset.[replaces.JSON]) with (
        [replaces.id]                  NVARCHAR(100)       '$.id',
        [replaces.extension]           NVARCHAR(MAX)       '$.extension',
        [replaces.reference]           NVARCHAR(4000)      '$.reference',
        [replaces.type]                VARCHAR(256)        '$.type',
        [replaces.identifier.id]       NVARCHAR(100)       '$.identifier.id',
        [replaces.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [replaces.identifier.use]      NVARCHAR(64)        '$.identifier.use',
        [replaces.identifier.type]     NVARCHAR(MAX)       '$.identifier.type',
        [replaces.identifier.system]   VARCHAR(256)        '$.identifier.system',
        [replaces.identifier.value]    NVARCHAR(4000)      '$.identifier.value',
        [replaces.identifier.period]   NVARCHAR(MAX)       '$.identifier.period',
        [replaces.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [replaces.display]             NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.CommunicationRequestCategory AS
SELECT
    [id],
    [category.JSON],
    [category.id],
    [category.extension],
    [category.coding],
    [category.text]
FROM openrowset (
        BULK 'CommunicationRequest/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [category.JSON]  VARCHAR(MAX) '$.category'
    ) AS rowset
    CROSS APPLY openjson (rowset.[category.JSON]) with (
        [category.id]                  NVARCHAR(100)       '$.id',
        [category.extension]           NVARCHAR(MAX)       '$.extension',
        [category.coding]              NVARCHAR(MAX)       '$.coding' AS JSON,
        [category.text]                NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.CommunicationRequestMedium AS
SELECT
    [id],
    [medium.JSON],
    [medium.id],
    [medium.extension],
    [medium.coding],
    [medium.text]
FROM openrowset (
        BULK 'CommunicationRequest/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [medium.JSON]  VARCHAR(MAX) '$.medium'
    ) AS rowset
    CROSS APPLY openjson (rowset.[medium.JSON]) with (
        [medium.id]                    NVARCHAR(100)       '$.id',
        [medium.extension]             NVARCHAR(MAX)       '$.extension',
        [medium.coding]                NVARCHAR(MAX)       '$.coding' AS JSON,
        [medium.text]                  NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.CommunicationRequestAbout AS
SELECT
    [id],
    [about.JSON],
    [about.id],
    [about.extension],
    [about.reference],
    [about.type],
    [about.identifier.id],
    [about.identifier.extension],
    [about.identifier.use],
    [about.identifier.type],
    [about.identifier.system],
    [about.identifier.value],
    [about.identifier.period],
    [about.identifier.assigner],
    [about.display]
FROM openrowset (
        BULK 'CommunicationRequest/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [about.JSON]  VARCHAR(MAX) '$.about'
    ) AS rowset
    CROSS APPLY openjson (rowset.[about.JSON]) with (
        [about.id]                     NVARCHAR(100)       '$.id',
        [about.extension]              NVARCHAR(MAX)       '$.extension',
        [about.reference]              NVARCHAR(4000)      '$.reference',
        [about.type]                   VARCHAR(256)        '$.type',
        [about.identifier.id]          NVARCHAR(100)       '$.identifier.id',
        [about.identifier.extension]   NVARCHAR(MAX)       '$.identifier.extension',
        [about.identifier.use]         NVARCHAR(64)        '$.identifier.use',
        [about.identifier.type]        NVARCHAR(MAX)       '$.identifier.type',
        [about.identifier.system]      VARCHAR(256)        '$.identifier.system',
        [about.identifier.value]       NVARCHAR(4000)      '$.identifier.value',
        [about.identifier.period]      NVARCHAR(MAX)       '$.identifier.period',
        [about.identifier.assigner]    NVARCHAR(MAX)       '$.identifier.assigner',
        [about.display]                NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.CommunicationRequestPayload AS
SELECT
    [id],
    [payload.JSON],
    [payload.id],
    [payload.extension],
    [payload.modifierExtension],
    [payload.content.attachment.id],
    [payload.content.attachment.extension],
    [payload.content.attachment.contentType],
    [payload.content.attachment.language],
    [payload.content.attachment.data],
    [payload.content.attachment.url],
    [payload.content.attachment.size],
    [payload.content.attachment.hash],
    [payload.content.attachment.title],
    [payload.content.attachment.creation],
    [payload.content.attachment.height],
    [payload.content.attachment.width],
    [payload.content.attachment.frames],
    [payload.content.attachment.duration],
    [payload.content.attachment.pages],
    [payload.content.reference.id],
    [payload.content.reference.extension],
    [payload.content.reference.reference],
    [payload.content.reference.type],
    [payload.content.reference.identifier],
    [payload.content.reference.display],
    [payload.content.codeableConcept.id],
    [payload.content.codeableConcept.extension],
    [payload.content.codeableConcept.coding],
    [payload.content.codeableConcept.text]
FROM openrowset (
        BULK 'CommunicationRequest/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [payload.JSON]  VARCHAR(MAX) '$.payload'
    ) AS rowset
    CROSS APPLY openjson (rowset.[payload.JSON]) with (
        [payload.id]                   NVARCHAR(100)       '$.id',
        [payload.extension]            NVARCHAR(MAX)       '$.extension',
        [payload.modifierExtension]    NVARCHAR(MAX)       '$.modifierExtension',
        [payload.content.attachment.id] NVARCHAR(100)       '$.content.attachment.id',
        [payload.content.attachment.extension] NVARCHAR(MAX)       '$.content.attachment.extension',
        [payload.content.attachment.contentType] NVARCHAR(100)       '$.content.attachment.contentType',
        [payload.content.attachment.language] NVARCHAR(100)       '$.content.attachment.language',
        [payload.content.attachment.data] NVARCHAR(MAX)       '$.content.attachment.data',
        [payload.content.attachment.url] VARCHAR(256)        '$.content.attachment.url',
        [payload.content.attachment.size] NVARCHAR(MAX)       '$.content.attachment.size',
        [payload.content.attachment.hash] NVARCHAR(MAX)       '$.content.attachment.hash',
        [payload.content.attachment.title] NVARCHAR(4000)      '$.content.attachment.title',
        [payload.content.attachment.creation] VARCHAR(64)         '$.content.attachment.creation',
        [payload.content.attachment.height] bigint              '$.content.attachment.height',
        [payload.content.attachment.width] bigint              '$.content.attachment.width',
        [payload.content.attachment.frames] bigint              '$.content.attachment.frames',
        [payload.content.attachment.duration] float               '$.content.attachment.duration',
        [payload.content.attachment.pages] bigint              '$.content.attachment.pages',
        [payload.content.reference.id] NVARCHAR(100)       '$.content.reference.id',
        [payload.content.reference.extension] NVARCHAR(MAX)       '$.content.reference.extension',
        [payload.content.reference.reference] NVARCHAR(4000)      '$.content.reference.reference',
        [payload.content.reference.type] VARCHAR(256)        '$.content.reference.type',
        [payload.content.reference.identifier] NVARCHAR(MAX)       '$.content.reference.identifier',
        [payload.content.reference.display] NVARCHAR(4000)      '$.content.reference.display',
        [payload.content.codeableConcept.id] NVARCHAR(100)       '$.content.codeableConcept.id',
        [payload.content.codeableConcept.extension] NVARCHAR(MAX)       '$.content.codeableConcept.extension',
        [payload.content.codeableConcept.coding] NVARCHAR(MAX)       '$.content.codeableConcept.coding',
        [payload.content.codeableConcept.text] NVARCHAR(4000)      '$.content.codeableConcept.text'
    ) j

GO

CREATE VIEW fhir.CommunicationRequestRecipient AS
SELECT
    [id],
    [recipient.JSON],
    [recipient.id],
    [recipient.extension],
    [recipient.reference],
    [recipient.type],
    [recipient.identifier.id],
    [recipient.identifier.extension],
    [recipient.identifier.use],
    [recipient.identifier.type],
    [recipient.identifier.system],
    [recipient.identifier.value],
    [recipient.identifier.period],
    [recipient.identifier.assigner],
    [recipient.display]
FROM openrowset (
        BULK 'CommunicationRequest/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [recipient.JSON]  VARCHAR(MAX) '$.recipient'
    ) AS rowset
    CROSS APPLY openjson (rowset.[recipient.JSON]) with (
        [recipient.id]                 NVARCHAR(100)       '$.id',
        [recipient.extension]          NVARCHAR(MAX)       '$.extension',
        [recipient.reference]          NVARCHAR(4000)      '$.reference',
        [recipient.type]               VARCHAR(256)        '$.type',
        [recipient.identifier.id]      NVARCHAR(100)       '$.identifier.id',
        [recipient.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [recipient.identifier.use]     NVARCHAR(64)        '$.identifier.use',
        [recipient.identifier.type]    NVARCHAR(MAX)       '$.identifier.type',
        [recipient.identifier.system]  VARCHAR(256)        '$.identifier.system',
        [recipient.identifier.value]   NVARCHAR(4000)      '$.identifier.value',
        [recipient.identifier.period]  NVARCHAR(MAX)       '$.identifier.period',
        [recipient.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [recipient.display]            NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.CommunicationRequestInformationProvider AS
SELECT
    [id],
    [informationProvider.JSON],
    [informationProvider.id],
    [informationProvider.extension],
    [informationProvider.reference],
    [informationProvider.type],
    [informationProvider.identifier.id],
    [informationProvider.identifier.extension],
    [informationProvider.identifier.use],
    [informationProvider.identifier.type],
    [informationProvider.identifier.system],
    [informationProvider.identifier.value],
    [informationProvider.identifier.period],
    [informationProvider.identifier.assigner],
    [informationProvider.display]
FROM openrowset (
        BULK 'CommunicationRequest/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [informationProvider.JSON]  VARCHAR(MAX) '$.informationProvider'
    ) AS rowset
    CROSS APPLY openjson (rowset.[informationProvider.JSON]) with (
        [informationProvider.id]       NVARCHAR(100)       '$.id',
        [informationProvider.extension] NVARCHAR(MAX)       '$.extension',
        [informationProvider.reference] NVARCHAR(4000)      '$.reference',
        [informationProvider.type]     VARCHAR(256)        '$.type',
        [informationProvider.identifier.id] NVARCHAR(100)       '$.identifier.id',
        [informationProvider.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [informationProvider.identifier.use] NVARCHAR(64)        '$.identifier.use',
        [informationProvider.identifier.type] NVARCHAR(MAX)       '$.identifier.type',
        [informationProvider.identifier.system] VARCHAR(256)        '$.identifier.system',
        [informationProvider.identifier.value] NVARCHAR(4000)      '$.identifier.value',
        [informationProvider.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [informationProvider.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [informationProvider.display]  NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.CommunicationRequestReason AS
SELECT
    [id],
    [reason.JSON],
    [reason.id],
    [reason.extension],
    [reason.concept.id],
    [reason.concept.extension],
    [reason.concept.coding],
    [reason.concept.text],
    [reason.reference.id],
    [reason.reference.extension],
    [reason.reference.reference],
    [reason.reference.type],
    [reason.reference.identifier],
    [reason.reference.display]
FROM openrowset (
        BULK 'CommunicationRequest/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [reason.JSON]  VARCHAR(MAX) '$.reason'
    ) AS rowset
    CROSS APPLY openjson (rowset.[reason.JSON]) with (
        [reason.id]                    NVARCHAR(100)       '$.id',
        [reason.extension]             NVARCHAR(MAX)       '$.extension',
        [reason.concept.id]            NVARCHAR(100)       '$.concept.id',
        [reason.concept.extension]     NVARCHAR(MAX)       '$.concept.extension',
        [reason.concept.coding]        NVARCHAR(MAX)       '$.concept.coding',
        [reason.concept.text]          NVARCHAR(4000)      '$.concept.text',
        [reason.reference.id]          NVARCHAR(100)       '$.reference.id',
        [reason.reference.extension]   NVARCHAR(MAX)       '$.reference.extension',
        [reason.reference.reference]   NVARCHAR(4000)      '$.reference.reference',
        [reason.reference.type]        VARCHAR(256)        '$.reference.type',
        [reason.reference.identifier]  NVARCHAR(MAX)       '$.reference.identifier',
        [reason.reference.display]     NVARCHAR(4000)      '$.reference.display'
    ) j

GO

CREATE VIEW fhir.CommunicationRequestNote AS
SELECT
    [id],
    [note.JSON],
    [note.id],
    [note.extension],
    [note.time],
    [note.text],
    [note.author.reference.id],
    [note.author.reference.extension],
    [note.author.reference.reference],
    [note.author.reference.type],
    [note.author.reference.identifier],
    [note.author.reference.display],
    [note.author.string]
FROM openrowset (
        BULK 'CommunicationRequest/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [note.JSON]  VARCHAR(MAX) '$.note'
    ) AS rowset
    CROSS APPLY openjson (rowset.[note.JSON]) with (
        [note.id]                      NVARCHAR(100)       '$.id',
        [note.extension]               NVARCHAR(MAX)       '$.extension',
        [note.time]                    VARCHAR(64)         '$.time',
        [note.text]                    NVARCHAR(MAX)       '$.text',
        [note.author.reference.id]     NVARCHAR(100)       '$.author.reference.id',
        [note.author.reference.extension] NVARCHAR(MAX)       '$.author.reference.extension',
        [note.author.reference.reference] NVARCHAR(4000)      '$.author.reference.reference',
        [note.author.reference.type]   VARCHAR(256)        '$.author.reference.type',
        [note.author.reference.identifier] NVARCHAR(MAX)       '$.author.reference.identifier',
        [note.author.reference.display] NVARCHAR(4000)      '$.author.reference.display',
        [note.author.string]           NVARCHAR(4000)      '$.author.string'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[CompartmentDefinition] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [url] VARCHAR(256),
    [identifier] VARCHAR(MAX),
    [version] NVARCHAR(100),
    [name] NVARCHAR(500),
    [title] NVARCHAR(4000),
    [status] NVARCHAR(100),
    [experimental] bit,
    [date] VARCHAR(64),
    [publisher] NVARCHAR(500),
    [contact] VARCHAR(MAX),
    [description] NVARCHAR(MAX),
    [useContext] VARCHAR(MAX),
    [jurisdiction] VARCHAR(MAX),
    [purpose] NVARCHAR(MAX),
    [copyright] NVARCHAR(MAX),
    [code] NVARCHAR(4000),
    [search] bit,
    [resource] VARCHAR(MAX),
) WITH (
    LOCATION='/CompartmentDefinition/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.CompartmentDefinitionIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'CompartmentDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.CompartmentDefinitionContact AS
SELECT
    [id],
    [contact.JSON],
    [contact.id],
    [contact.extension],
    [contact.name],
    [contact.telecom]
FROM openrowset (
        BULK 'CompartmentDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [contact.JSON]  VARCHAR(MAX) '$.contact'
    ) AS rowset
    CROSS APPLY openjson (rowset.[contact.JSON]) with (
        [contact.id]                   NVARCHAR(100)       '$.id',
        [contact.extension]            NVARCHAR(MAX)       '$.extension',
        [contact.name]                 NVARCHAR(500)       '$.name',
        [contact.telecom]              NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.CompartmentDefinitionUseContext AS
SELECT
    [id],
    [useContext.JSON],
    [useContext.id],
    [useContext.extension],
    [useContext.code.id],
    [useContext.code.extension],
    [useContext.code.system],
    [useContext.code.version],
    [useContext.code.code],
    [useContext.code.display],
    [useContext.code.userSelected],
    [useContext.value.codeableConcept.id],
    [useContext.value.codeableConcept.extension],
    [useContext.value.codeableConcept.coding],
    [useContext.value.codeableConcept.text],
    [useContext.value.quantity.id],
    [useContext.value.quantity.extension],
    [useContext.value.quantity.value],
    [useContext.value.quantity.comparator],
    [useContext.value.quantity.unit],
    [useContext.value.quantity.system],
    [useContext.value.quantity.code],
    [useContext.value.range.id],
    [useContext.value.range.extension],
    [useContext.value.range.low],
    [useContext.value.range.high],
    [useContext.value.reference.id],
    [useContext.value.reference.extension],
    [useContext.value.reference.reference],
    [useContext.value.reference.type],
    [useContext.value.reference.identifier],
    [useContext.value.reference.display]
FROM openrowset (
        BULK 'CompartmentDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [useContext.JSON]  VARCHAR(MAX) '$.useContext'
    ) AS rowset
    CROSS APPLY openjson (rowset.[useContext.JSON]) with (
        [useContext.id]                NVARCHAR(100)       '$.id',
        [useContext.extension]         NVARCHAR(MAX)       '$.extension',
        [useContext.code.id]           NVARCHAR(100)       '$.code.id',
        [useContext.code.extension]    NVARCHAR(MAX)       '$.code.extension',
        [useContext.code.system]       VARCHAR(256)        '$.code.system',
        [useContext.code.version]      NVARCHAR(100)       '$.code.version',
        [useContext.code.code]         NVARCHAR(4000)      '$.code.code',
        [useContext.code.display]      NVARCHAR(4000)      '$.code.display',
        [useContext.code.userSelected] bit                 '$.code.userSelected',
        [useContext.value.codeableConcept.id] NVARCHAR(100)       '$.value.codeableConcept.id',
        [useContext.value.codeableConcept.extension] NVARCHAR(MAX)       '$.value.codeableConcept.extension',
        [useContext.value.codeableConcept.coding] NVARCHAR(MAX)       '$.value.codeableConcept.coding',
        [useContext.value.codeableConcept.text] NVARCHAR(4000)      '$.value.codeableConcept.text',
        [useContext.value.quantity.id] NVARCHAR(100)       '$.value.quantity.id',
        [useContext.value.quantity.extension] NVARCHAR(MAX)       '$.value.quantity.extension',
        [useContext.value.quantity.value] float               '$.value.quantity.value',
        [useContext.value.quantity.comparator] NVARCHAR(64)        '$.value.quantity.comparator',
        [useContext.value.quantity.unit] NVARCHAR(100)       '$.value.quantity.unit',
        [useContext.value.quantity.system] VARCHAR(256)        '$.value.quantity.system',
        [useContext.value.quantity.code] NVARCHAR(4000)      '$.value.quantity.code',
        [useContext.value.range.id]    NVARCHAR(100)       '$.value.range.id',
        [useContext.value.range.extension] NVARCHAR(MAX)       '$.value.range.extension',
        [useContext.value.range.low]   NVARCHAR(MAX)       '$.value.range.low',
        [useContext.value.range.high]  NVARCHAR(MAX)       '$.value.range.high',
        [useContext.value.reference.id] NVARCHAR(100)       '$.value.reference.id',
        [useContext.value.reference.extension] NVARCHAR(MAX)       '$.value.reference.extension',
        [useContext.value.reference.reference] NVARCHAR(4000)      '$.value.reference.reference',
        [useContext.value.reference.type] VARCHAR(256)        '$.value.reference.type',
        [useContext.value.reference.identifier] NVARCHAR(MAX)       '$.value.reference.identifier',
        [useContext.value.reference.display] NVARCHAR(4000)      '$.value.reference.display'
    ) j

GO

CREATE VIEW fhir.CompartmentDefinitionJurisdiction AS
SELECT
    [id],
    [jurisdiction.JSON],
    [jurisdiction.id],
    [jurisdiction.extension],
    [jurisdiction.coding],
    [jurisdiction.text]
FROM openrowset (
        BULK 'CompartmentDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [jurisdiction.JSON]  VARCHAR(MAX) '$.jurisdiction'
    ) AS rowset
    CROSS APPLY openjson (rowset.[jurisdiction.JSON]) with (
        [jurisdiction.id]              NVARCHAR(100)       '$.id',
        [jurisdiction.extension]       NVARCHAR(MAX)       '$.extension',
        [jurisdiction.coding]          NVARCHAR(MAX)       '$.coding' AS JSON,
        [jurisdiction.text]            NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.CompartmentDefinitionResource AS
SELECT
    [id],
    [resource.JSON],
    [resource.id],
    [resource.extension],
    [resource.modifierExtension],
    [resource.code],
    [resource.param],
    [resource.documentation]
FROM openrowset (
        BULK 'CompartmentDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [resource.JSON]  VARCHAR(MAX) '$.resource'
    ) AS rowset
    CROSS APPLY openjson (rowset.[resource.JSON]) with (
        [resource.id]                  NVARCHAR(100)       '$.id',
        [resource.extension]           NVARCHAR(MAX)       '$.extension',
        [resource.modifierExtension]   NVARCHAR(MAX)       '$.modifierExtension',
        [resource.code]                NVARCHAR(4000)      '$.code',
        [resource.param]               NVARCHAR(MAX)       '$.param' AS JSON,
        [resource.documentation]       NVARCHAR(4000)      '$.documentation'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[Composition] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier.id] NVARCHAR(100),
    [identifier.extension] NVARCHAR(MAX),
    [identifier.use] NVARCHAR(64),
    [identifier.type.id] NVARCHAR(100),
    [identifier.type.extension] NVARCHAR(MAX),
    [identifier.type.coding] NVARCHAR(MAX),
    [identifier.type.text] NVARCHAR(4000),
    [identifier.system] VARCHAR(256),
    [identifier.value] NVARCHAR(4000),
    [identifier.period.id] NVARCHAR(100),
    [identifier.period.extension] NVARCHAR(MAX),
    [identifier.period.start] VARCHAR(64),
    [identifier.period.end] VARCHAR(64),
    [identifier.assigner.id] NVARCHAR(100),
    [identifier.assigner.extension] NVARCHAR(MAX),
    [identifier.assigner.reference] NVARCHAR(4000),
    [identifier.assigner.type] VARCHAR(256),
    [identifier.assigner.identifier] NVARCHAR(MAX),
    [identifier.assigner.display] NVARCHAR(4000),
    [status] NVARCHAR(100),
    [type.id] NVARCHAR(100),
    [type.extension] NVARCHAR(MAX),
    [type.coding] VARCHAR(MAX),
    [type.text] NVARCHAR(4000),
    [category] VARCHAR(MAX),
    [subject.id] NVARCHAR(100),
    [subject.extension] NVARCHAR(MAX),
    [subject.reference] NVARCHAR(4000),
    [subject.type] VARCHAR(256),
    [subject.identifier.id] NVARCHAR(100),
    [subject.identifier.extension] NVARCHAR(MAX),
    [subject.identifier.use] NVARCHAR(64),
    [subject.identifier.type] NVARCHAR(MAX),
    [subject.identifier.system] VARCHAR(256),
    [subject.identifier.value] NVARCHAR(4000),
    [subject.identifier.period] NVARCHAR(MAX),
    [subject.identifier.assigner] NVARCHAR(MAX),
    [subject.display] NVARCHAR(4000),
    [encounter.id] NVARCHAR(100),
    [encounter.extension] NVARCHAR(MAX),
    [encounter.reference] NVARCHAR(4000),
    [encounter.type] VARCHAR(256),
    [encounter.identifier.id] NVARCHAR(100),
    [encounter.identifier.extension] NVARCHAR(MAX),
    [encounter.identifier.use] NVARCHAR(64),
    [encounter.identifier.type] NVARCHAR(MAX),
    [encounter.identifier.system] VARCHAR(256),
    [encounter.identifier.value] NVARCHAR(4000),
    [encounter.identifier.period] NVARCHAR(MAX),
    [encounter.identifier.assigner] NVARCHAR(MAX),
    [encounter.display] NVARCHAR(4000),
    [date] VARCHAR(64),
    [author] VARCHAR(MAX),
    [title] NVARCHAR(4000),
    [confidentiality] NVARCHAR(100),
    [attester] VARCHAR(MAX),
    [custodian.id] NVARCHAR(100),
    [custodian.extension] NVARCHAR(MAX),
    [custodian.reference] NVARCHAR(4000),
    [custodian.type] VARCHAR(256),
    [custodian.identifier.id] NVARCHAR(100),
    [custodian.identifier.extension] NVARCHAR(MAX),
    [custodian.identifier.use] NVARCHAR(64),
    [custodian.identifier.type] NVARCHAR(MAX),
    [custodian.identifier.system] VARCHAR(256),
    [custodian.identifier.value] NVARCHAR(4000),
    [custodian.identifier.period] NVARCHAR(MAX),
    [custodian.identifier.assigner] NVARCHAR(MAX),
    [custodian.display] NVARCHAR(4000),
    [relatesTo] VARCHAR(MAX),
    [event] VARCHAR(MAX),
    [section] VARCHAR(MAX),
) WITH (
    LOCATION='/Composition/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.CompositionCategory AS
SELECT
    [id],
    [category.JSON],
    [category.id],
    [category.extension],
    [category.coding],
    [category.text]
FROM openrowset (
        BULK 'Composition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [category.JSON]  VARCHAR(MAX) '$.category'
    ) AS rowset
    CROSS APPLY openjson (rowset.[category.JSON]) with (
        [category.id]                  NVARCHAR(100)       '$.id',
        [category.extension]           NVARCHAR(MAX)       '$.extension',
        [category.coding]              NVARCHAR(MAX)       '$.coding' AS JSON,
        [category.text]                NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.CompositionAuthor AS
SELECT
    [id],
    [author.JSON],
    [author.id],
    [author.extension],
    [author.reference],
    [author.type],
    [author.identifier.id],
    [author.identifier.extension],
    [author.identifier.use],
    [author.identifier.type],
    [author.identifier.system],
    [author.identifier.value],
    [author.identifier.period],
    [author.identifier.assigner],
    [author.display]
FROM openrowset (
        BULK 'Composition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [author.JSON]  VARCHAR(MAX) '$.author'
    ) AS rowset
    CROSS APPLY openjson (rowset.[author.JSON]) with (
        [author.id]                    NVARCHAR(100)       '$.id',
        [author.extension]             NVARCHAR(MAX)       '$.extension',
        [author.reference]             NVARCHAR(4000)      '$.reference',
        [author.type]                  VARCHAR(256)        '$.type',
        [author.identifier.id]         NVARCHAR(100)       '$.identifier.id',
        [author.identifier.extension]  NVARCHAR(MAX)       '$.identifier.extension',
        [author.identifier.use]        NVARCHAR(64)        '$.identifier.use',
        [author.identifier.type]       NVARCHAR(MAX)       '$.identifier.type',
        [author.identifier.system]     VARCHAR(256)        '$.identifier.system',
        [author.identifier.value]      NVARCHAR(4000)      '$.identifier.value',
        [author.identifier.period]     NVARCHAR(MAX)       '$.identifier.period',
        [author.identifier.assigner]   NVARCHAR(MAX)       '$.identifier.assigner',
        [author.display]               NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.CompositionAttester AS
SELECT
    [id],
    [attester.JSON],
    [attester.id],
    [attester.extension],
    [attester.modifierExtension],
    [attester.mode.id],
    [attester.mode.extension],
    [attester.mode.coding],
    [attester.mode.text],
    [attester.time],
    [attester.party.id],
    [attester.party.extension],
    [attester.party.reference],
    [attester.party.type],
    [attester.party.identifier],
    [attester.party.display]
FROM openrowset (
        BULK 'Composition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [attester.JSON]  VARCHAR(MAX) '$.attester'
    ) AS rowset
    CROSS APPLY openjson (rowset.[attester.JSON]) with (
        [attester.id]                  NVARCHAR(100)       '$.id',
        [attester.extension]           NVARCHAR(MAX)       '$.extension',
        [attester.modifierExtension]   NVARCHAR(MAX)       '$.modifierExtension',
        [attester.mode.id]             NVARCHAR(100)       '$.mode.id',
        [attester.mode.extension]      NVARCHAR(MAX)       '$.mode.extension',
        [attester.mode.coding]         NVARCHAR(MAX)       '$.mode.coding',
        [attester.mode.text]           NVARCHAR(4000)      '$.mode.text',
        [attester.time]                VARCHAR(64)         '$.time',
        [attester.party.id]            NVARCHAR(100)       '$.party.id',
        [attester.party.extension]     NVARCHAR(MAX)       '$.party.extension',
        [attester.party.reference]     NVARCHAR(4000)      '$.party.reference',
        [attester.party.type]          VARCHAR(256)        '$.party.type',
        [attester.party.identifier]    NVARCHAR(MAX)       '$.party.identifier',
        [attester.party.display]       NVARCHAR(4000)      '$.party.display'
    ) j

GO

CREATE VIEW fhir.CompositionRelatesTo AS
SELECT
    [id],
    [relatesTo.JSON],
    [relatesTo.id],
    [relatesTo.extension],
    [relatesTo.type],
    [relatesTo.classifier],
    [relatesTo.label],
    [relatesTo.display],
    [relatesTo.citation],
    [relatesTo.document.id],
    [relatesTo.document.extension],
    [relatesTo.document.contentType],
    [relatesTo.document.language],
    [relatesTo.document.data],
    [relatesTo.document.url],
    [relatesTo.document.size],
    [relatesTo.document.hash],
    [relatesTo.document.title],
    [relatesTo.document.creation],
    [relatesTo.document.height],
    [relatesTo.document.width],
    [relatesTo.document.frames],
    [relatesTo.document.duration],
    [relatesTo.document.pages],
    [relatesTo.resource],
    [relatesTo.resourceReference.id],
    [relatesTo.resourceReference.extension],
    [relatesTo.resourceReference.reference],
    [relatesTo.resourceReference.type],
    [relatesTo.resourceReference.identifier],
    [relatesTo.resourceReference.display]
FROM openrowset (
        BULK 'Composition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [relatesTo.JSON]  VARCHAR(MAX) '$.relatesTo'
    ) AS rowset
    CROSS APPLY openjson (rowset.[relatesTo.JSON]) with (
        [relatesTo.id]                 NVARCHAR(100)       '$.id',
        [relatesTo.extension]          NVARCHAR(MAX)       '$.extension',
        [relatesTo.type]               NVARCHAR(64)        '$.type',
        [relatesTo.classifier]         NVARCHAR(MAX)       '$.classifier' AS JSON,
        [relatesTo.label]              NVARCHAR(100)       '$.label',
        [relatesTo.display]            NVARCHAR(4000)      '$.display',
        [relatesTo.citation]           NVARCHAR(MAX)       '$.citation',
        [relatesTo.document.id]        NVARCHAR(100)       '$.document.id',
        [relatesTo.document.extension] NVARCHAR(MAX)       '$.document.extension',
        [relatesTo.document.contentType] NVARCHAR(100)       '$.document.contentType',
        [relatesTo.document.language]  NVARCHAR(100)       '$.document.language',
        [relatesTo.document.data]      NVARCHAR(MAX)       '$.document.data',
        [relatesTo.document.url]       VARCHAR(256)        '$.document.url',
        [relatesTo.document.size]      NVARCHAR(MAX)       '$.document.size',
        [relatesTo.document.hash]      NVARCHAR(MAX)       '$.document.hash',
        [relatesTo.document.title]     NVARCHAR(4000)      '$.document.title',
        [relatesTo.document.creation]  VARCHAR(64)         '$.document.creation',
        [relatesTo.document.height]    bigint              '$.document.height',
        [relatesTo.document.width]     bigint              '$.document.width',
        [relatesTo.document.frames]    bigint              '$.document.frames',
        [relatesTo.document.duration]  float               '$.document.duration',
        [relatesTo.document.pages]     bigint              '$.document.pages',
        [relatesTo.resource]           VARCHAR(256)        '$.resource',
        [relatesTo.resourceReference.id] NVARCHAR(100)       '$.resourceReference.id',
        [relatesTo.resourceReference.extension] NVARCHAR(MAX)       '$.resourceReference.extension',
        [relatesTo.resourceReference.reference] NVARCHAR(4000)      '$.resourceReference.reference',
        [relatesTo.resourceReference.type] VARCHAR(256)        '$.resourceReference.type',
        [relatesTo.resourceReference.identifier] NVARCHAR(MAX)       '$.resourceReference.identifier',
        [relatesTo.resourceReference.display] NVARCHAR(4000)      '$.resourceReference.display'
    ) j

GO

CREATE VIEW fhir.CompositionEvent AS
SELECT
    [id],
    [event.JSON],
    [event.id],
    [event.extension],
    [event.modifierExtension],
    [event.code],
    [event.period.id],
    [event.period.extension],
    [event.period.start],
    [event.period.end],
    [event.detail]
FROM openrowset (
        BULK 'Composition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [event.JSON]  VARCHAR(MAX) '$.event'
    ) AS rowset
    CROSS APPLY openjson (rowset.[event.JSON]) with (
        [event.id]                     NVARCHAR(100)       '$.id',
        [event.extension]              NVARCHAR(MAX)       '$.extension',
        [event.modifierExtension]      NVARCHAR(MAX)       '$.modifierExtension',
        [event.code]                   NVARCHAR(MAX)       '$.code' AS JSON,
        [event.period.id]              NVARCHAR(100)       '$.period.id',
        [event.period.extension]       NVARCHAR(MAX)       '$.period.extension',
        [event.period.start]           VARCHAR(64)         '$.period.start',
        [event.period.end]             VARCHAR(64)         '$.period.end',
        [event.detail]                 NVARCHAR(MAX)       '$.detail' AS JSON
    ) j

GO

CREATE VIEW fhir.CompositionSection AS
SELECT
    [id],
    [section.JSON],
    [section.id],
    [section.extension],
    [section.modifierExtension],
    [section.title],
    [section.code.id],
    [section.code.extension],
    [section.code.coding],
    [section.code.text],
    [section.author],
    [section.focus.id],
    [section.focus.extension],
    [section.focus.reference],
    [section.focus.type],
    [section.focus.identifier],
    [section.focus.display],
    [section.text.id],
    [section.text.extension],
    [section.text.status],
    [section.text.div],
    [section.mode],
    [section.orderedBy.id],
    [section.orderedBy.extension],
    [section.orderedBy.coding],
    [section.orderedBy.text],
    [section.entry],
    [section.emptyReason.id],
    [section.emptyReason.extension],
    [section.emptyReason.coding],
    [section.emptyReason.text],
    [section.section]
FROM openrowset (
        BULK 'Composition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [section.JSON]  VARCHAR(MAX) '$.section'
    ) AS rowset
    CROSS APPLY openjson (rowset.[section.JSON]) with (
        [section.id]                   NVARCHAR(100)       '$.id',
        [section.extension]            NVARCHAR(MAX)       '$.extension',
        [section.modifierExtension]    NVARCHAR(MAX)       '$.modifierExtension',
        [section.title]                NVARCHAR(4000)      '$.title',
        [section.code.id]              NVARCHAR(100)       '$.code.id',
        [section.code.extension]       NVARCHAR(MAX)       '$.code.extension',
        [section.code.coding]          NVARCHAR(MAX)       '$.code.coding',
        [section.code.text]            NVARCHAR(4000)      '$.code.text',
        [section.author]               NVARCHAR(MAX)       '$.author' AS JSON,
        [section.focus.id]             NVARCHAR(100)       '$.focus.id',
        [section.focus.extension]      NVARCHAR(MAX)       '$.focus.extension',
        [section.focus.reference]      NVARCHAR(4000)      '$.focus.reference',
        [section.focus.type]           VARCHAR(256)        '$.focus.type',
        [section.focus.identifier]     NVARCHAR(MAX)       '$.focus.identifier',
        [section.focus.display]        NVARCHAR(4000)      '$.focus.display',
        [section.text.id]              NVARCHAR(100)       '$.text.id',
        [section.text.extension]       NVARCHAR(MAX)       '$.text.extension',
        [section.text.status]          NVARCHAR(64)        '$.text.status',
        [section.text.div]             NVARCHAR(MAX)       '$.text.div',
        [section.mode]                 NVARCHAR(100)       '$.mode',
        [section.orderedBy.id]         NVARCHAR(100)       '$.orderedBy.id',
        [section.orderedBy.extension]  NVARCHAR(MAX)       '$.orderedBy.extension',
        [section.orderedBy.coding]     NVARCHAR(MAX)       '$.orderedBy.coding',
        [section.orderedBy.text]       NVARCHAR(4000)      '$.orderedBy.text',
        [section.entry]                NVARCHAR(MAX)       '$.entry' AS JSON,
        [section.emptyReason.id]       NVARCHAR(100)       '$.emptyReason.id',
        [section.emptyReason.extension] NVARCHAR(MAX)       '$.emptyReason.extension',
        [section.emptyReason.coding]   NVARCHAR(MAX)       '$.emptyReason.coding',
        [section.emptyReason.text]     NVARCHAR(4000)      '$.emptyReason.text',
        [section.section]              NVARCHAR(MAX)       '$.section' AS JSON
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[ConceptMap] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [url] VARCHAR(256),
    [identifier] VARCHAR(MAX),
    [version] NVARCHAR(100),
    [name] NVARCHAR(500),
    [title] NVARCHAR(4000),
    [status] NVARCHAR(100),
    [experimental] bit,
    [date] VARCHAR(64),
    [publisher] NVARCHAR(500),
    [contact] VARCHAR(MAX),
    [description] NVARCHAR(MAX),
    [useContext] VARCHAR(MAX),
    [jurisdiction] VARCHAR(MAX),
    [purpose] NVARCHAR(MAX),
    [copyright] NVARCHAR(MAX),
    [group] VARCHAR(MAX),
    [source.uri] VARCHAR(256),
    [source.canonical] VARCHAR(256),
    [target.uri] VARCHAR(256),
    [target.canonical] VARCHAR(256),
) WITH (
    LOCATION='/ConceptMap/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.ConceptMapIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'ConceptMap/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.ConceptMapContact AS
SELECT
    [id],
    [contact.JSON],
    [contact.id],
    [contact.extension],
    [contact.name],
    [contact.telecom]
FROM openrowset (
        BULK 'ConceptMap/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [contact.JSON]  VARCHAR(MAX) '$.contact'
    ) AS rowset
    CROSS APPLY openjson (rowset.[contact.JSON]) with (
        [contact.id]                   NVARCHAR(100)       '$.id',
        [contact.extension]            NVARCHAR(MAX)       '$.extension',
        [contact.name]                 NVARCHAR(500)       '$.name',
        [contact.telecom]              NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.ConceptMapUseContext AS
SELECT
    [id],
    [useContext.JSON],
    [useContext.id],
    [useContext.extension],
    [useContext.code.id],
    [useContext.code.extension],
    [useContext.code.system],
    [useContext.code.version],
    [useContext.code.code],
    [useContext.code.display],
    [useContext.code.userSelected],
    [useContext.value.codeableConcept.id],
    [useContext.value.codeableConcept.extension],
    [useContext.value.codeableConcept.coding],
    [useContext.value.codeableConcept.text],
    [useContext.value.quantity.id],
    [useContext.value.quantity.extension],
    [useContext.value.quantity.value],
    [useContext.value.quantity.comparator],
    [useContext.value.quantity.unit],
    [useContext.value.quantity.system],
    [useContext.value.quantity.code],
    [useContext.value.range.id],
    [useContext.value.range.extension],
    [useContext.value.range.low],
    [useContext.value.range.high],
    [useContext.value.reference.id],
    [useContext.value.reference.extension],
    [useContext.value.reference.reference],
    [useContext.value.reference.type],
    [useContext.value.reference.identifier],
    [useContext.value.reference.display]
FROM openrowset (
        BULK 'ConceptMap/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [useContext.JSON]  VARCHAR(MAX) '$.useContext'
    ) AS rowset
    CROSS APPLY openjson (rowset.[useContext.JSON]) with (
        [useContext.id]                NVARCHAR(100)       '$.id',
        [useContext.extension]         NVARCHAR(MAX)       '$.extension',
        [useContext.code.id]           NVARCHAR(100)       '$.code.id',
        [useContext.code.extension]    NVARCHAR(MAX)       '$.code.extension',
        [useContext.code.system]       VARCHAR(256)        '$.code.system',
        [useContext.code.version]      NVARCHAR(100)       '$.code.version',
        [useContext.code.code]         NVARCHAR(4000)      '$.code.code',
        [useContext.code.display]      NVARCHAR(4000)      '$.code.display',
        [useContext.code.userSelected] bit                 '$.code.userSelected',
        [useContext.value.codeableConcept.id] NVARCHAR(100)       '$.value.codeableConcept.id',
        [useContext.value.codeableConcept.extension] NVARCHAR(MAX)       '$.value.codeableConcept.extension',
        [useContext.value.codeableConcept.coding] NVARCHAR(MAX)       '$.value.codeableConcept.coding',
        [useContext.value.codeableConcept.text] NVARCHAR(4000)      '$.value.codeableConcept.text',
        [useContext.value.quantity.id] NVARCHAR(100)       '$.value.quantity.id',
        [useContext.value.quantity.extension] NVARCHAR(MAX)       '$.value.quantity.extension',
        [useContext.value.quantity.value] float               '$.value.quantity.value',
        [useContext.value.quantity.comparator] NVARCHAR(64)        '$.value.quantity.comparator',
        [useContext.value.quantity.unit] NVARCHAR(100)       '$.value.quantity.unit',
        [useContext.value.quantity.system] VARCHAR(256)        '$.value.quantity.system',
        [useContext.value.quantity.code] NVARCHAR(4000)      '$.value.quantity.code',
        [useContext.value.range.id]    NVARCHAR(100)       '$.value.range.id',
        [useContext.value.range.extension] NVARCHAR(MAX)       '$.value.range.extension',
        [useContext.value.range.low]   NVARCHAR(MAX)       '$.value.range.low',
        [useContext.value.range.high]  NVARCHAR(MAX)       '$.value.range.high',
        [useContext.value.reference.id] NVARCHAR(100)       '$.value.reference.id',
        [useContext.value.reference.extension] NVARCHAR(MAX)       '$.value.reference.extension',
        [useContext.value.reference.reference] NVARCHAR(4000)      '$.value.reference.reference',
        [useContext.value.reference.type] VARCHAR(256)        '$.value.reference.type',
        [useContext.value.reference.identifier] NVARCHAR(MAX)       '$.value.reference.identifier',
        [useContext.value.reference.display] NVARCHAR(4000)      '$.value.reference.display'
    ) j

GO

CREATE VIEW fhir.ConceptMapJurisdiction AS
SELECT
    [id],
    [jurisdiction.JSON],
    [jurisdiction.id],
    [jurisdiction.extension],
    [jurisdiction.coding],
    [jurisdiction.text]
FROM openrowset (
        BULK 'ConceptMap/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [jurisdiction.JSON]  VARCHAR(MAX) '$.jurisdiction'
    ) AS rowset
    CROSS APPLY openjson (rowset.[jurisdiction.JSON]) with (
        [jurisdiction.id]              NVARCHAR(100)       '$.id',
        [jurisdiction.extension]       NVARCHAR(MAX)       '$.extension',
        [jurisdiction.coding]          NVARCHAR(MAX)       '$.coding' AS JSON,
        [jurisdiction.text]            NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.ConceptMapGroup AS
SELECT
    [id],
    [group.JSON],
    [group.id],
    [group.extension],
    [group.modifierExtension],
    [group.source],
    [group.target],
    [group.element],
    [group.unmapped.id],
    [group.unmapped.extension],
    [group.unmapped.modifierExtension],
    [group.unmapped.mode],
    [group.unmapped.code],
    [group.unmapped.display],
    [group.unmapped.url]
FROM openrowset (
        BULK 'ConceptMap/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [group.JSON]  VARCHAR(MAX) '$.group'
    ) AS rowset
    CROSS APPLY openjson (rowset.[group.JSON]) with (
        [group.id]                     NVARCHAR(100)       '$.id',
        [group.extension]              NVARCHAR(MAX)       '$.extension',
        [group.modifierExtension]      NVARCHAR(MAX)       '$.modifierExtension',
        [group.source]                 VARCHAR(256)        '$.source',
        [group.target]                 VARCHAR(256)        '$.target',
        [group.element]                NVARCHAR(MAX)       '$.element' AS JSON,
        [group.unmapped.id]            NVARCHAR(100)       '$.unmapped.id',
        [group.unmapped.extension]     NVARCHAR(MAX)       '$.unmapped.extension',
        [group.unmapped.modifierExtension] NVARCHAR(MAX)       '$.unmapped.modifierExtension',
        [group.unmapped.mode]          NVARCHAR(100)       '$.unmapped.mode',
        [group.unmapped.code]          NVARCHAR(4000)      '$.unmapped.code',
        [group.unmapped.display]       NVARCHAR(4000)      '$.unmapped.display',
        [group.unmapped.url]           VARCHAR(256)        '$.unmapped.url'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[ConceptMap2] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [url] VARCHAR(256),
    [identifier] VARCHAR(MAX),
    [version] NVARCHAR(100),
    [name] NVARCHAR(500),
    [title] NVARCHAR(4000),
    [status] NVARCHAR(100),
    [experimental] bit,
    [date] VARCHAR(64),
    [publisher] NVARCHAR(500),
    [contact] VARCHAR(MAX),
    [description] NVARCHAR(MAX),
    [useContext] VARCHAR(MAX),
    [jurisdiction] VARCHAR(MAX),
    [purpose] NVARCHAR(MAX),
    [copyright] NVARCHAR(MAX),
    [group] VARCHAR(MAX),
    [source.uri] VARCHAR(256),
    [source.canonical] VARCHAR(256),
    [target.uri] VARCHAR(256),
    [target.canonical] VARCHAR(256),
) WITH (
    LOCATION='/ConceptMap2/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.ConceptMap2Identifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'ConceptMap2/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.ConceptMap2Contact AS
SELECT
    [id],
    [contact.JSON],
    [contact.id],
    [contact.extension],
    [contact.name],
    [contact.telecom]
FROM openrowset (
        BULK 'ConceptMap2/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [contact.JSON]  VARCHAR(MAX) '$.contact'
    ) AS rowset
    CROSS APPLY openjson (rowset.[contact.JSON]) with (
        [contact.id]                   NVARCHAR(100)       '$.id',
        [contact.extension]            NVARCHAR(MAX)       '$.extension',
        [contact.name]                 NVARCHAR(500)       '$.name',
        [contact.telecom]              NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.ConceptMap2UseContext AS
SELECT
    [id],
    [useContext.JSON],
    [useContext.id],
    [useContext.extension],
    [useContext.code.id],
    [useContext.code.extension],
    [useContext.code.system],
    [useContext.code.version],
    [useContext.code.code],
    [useContext.code.display],
    [useContext.code.userSelected],
    [useContext.value.codeableConcept.id],
    [useContext.value.codeableConcept.extension],
    [useContext.value.codeableConcept.coding],
    [useContext.value.codeableConcept.text],
    [useContext.value.quantity.id],
    [useContext.value.quantity.extension],
    [useContext.value.quantity.value],
    [useContext.value.quantity.comparator],
    [useContext.value.quantity.unit],
    [useContext.value.quantity.system],
    [useContext.value.quantity.code],
    [useContext.value.range.id],
    [useContext.value.range.extension],
    [useContext.value.range.low],
    [useContext.value.range.high],
    [useContext.value.reference.id],
    [useContext.value.reference.extension],
    [useContext.value.reference.reference],
    [useContext.value.reference.type],
    [useContext.value.reference.identifier],
    [useContext.value.reference.display]
FROM openrowset (
        BULK 'ConceptMap2/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [useContext.JSON]  VARCHAR(MAX) '$.useContext'
    ) AS rowset
    CROSS APPLY openjson (rowset.[useContext.JSON]) with (
        [useContext.id]                NVARCHAR(100)       '$.id',
        [useContext.extension]         NVARCHAR(MAX)       '$.extension',
        [useContext.code.id]           NVARCHAR(100)       '$.code.id',
        [useContext.code.extension]    NVARCHAR(MAX)       '$.code.extension',
        [useContext.code.system]       VARCHAR(256)        '$.code.system',
        [useContext.code.version]      NVARCHAR(100)       '$.code.version',
        [useContext.code.code]         NVARCHAR(4000)      '$.code.code',
        [useContext.code.display]      NVARCHAR(4000)      '$.code.display',
        [useContext.code.userSelected] bit                 '$.code.userSelected',
        [useContext.value.codeableConcept.id] NVARCHAR(100)       '$.value.codeableConcept.id',
        [useContext.value.codeableConcept.extension] NVARCHAR(MAX)       '$.value.codeableConcept.extension',
        [useContext.value.codeableConcept.coding] NVARCHAR(MAX)       '$.value.codeableConcept.coding',
        [useContext.value.codeableConcept.text] NVARCHAR(4000)      '$.value.codeableConcept.text',
        [useContext.value.quantity.id] NVARCHAR(100)       '$.value.quantity.id',
        [useContext.value.quantity.extension] NVARCHAR(MAX)       '$.value.quantity.extension',
        [useContext.value.quantity.value] float               '$.value.quantity.value',
        [useContext.value.quantity.comparator] NVARCHAR(64)        '$.value.quantity.comparator',
        [useContext.value.quantity.unit] NVARCHAR(100)       '$.value.quantity.unit',
        [useContext.value.quantity.system] VARCHAR(256)        '$.value.quantity.system',
        [useContext.value.quantity.code] NVARCHAR(4000)      '$.value.quantity.code',
        [useContext.value.range.id]    NVARCHAR(100)       '$.value.range.id',
        [useContext.value.range.extension] NVARCHAR(MAX)       '$.value.range.extension',
        [useContext.value.range.low]   NVARCHAR(MAX)       '$.value.range.low',
        [useContext.value.range.high]  NVARCHAR(MAX)       '$.value.range.high',
        [useContext.value.reference.id] NVARCHAR(100)       '$.value.reference.id',
        [useContext.value.reference.extension] NVARCHAR(MAX)       '$.value.reference.extension',
        [useContext.value.reference.reference] NVARCHAR(4000)      '$.value.reference.reference',
        [useContext.value.reference.type] VARCHAR(256)        '$.value.reference.type',
        [useContext.value.reference.identifier] NVARCHAR(MAX)       '$.value.reference.identifier',
        [useContext.value.reference.display] NVARCHAR(4000)      '$.value.reference.display'
    ) j

GO

CREATE VIEW fhir.ConceptMap2Jurisdiction AS
SELECT
    [id],
    [jurisdiction.JSON],
    [jurisdiction.id],
    [jurisdiction.extension],
    [jurisdiction.coding],
    [jurisdiction.text]
FROM openrowset (
        BULK 'ConceptMap2/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [jurisdiction.JSON]  VARCHAR(MAX) '$.jurisdiction'
    ) AS rowset
    CROSS APPLY openjson (rowset.[jurisdiction.JSON]) with (
        [jurisdiction.id]              NVARCHAR(100)       '$.id',
        [jurisdiction.extension]       NVARCHAR(MAX)       '$.extension',
        [jurisdiction.coding]          NVARCHAR(MAX)       '$.coding' AS JSON,
        [jurisdiction.text]            NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.ConceptMap2Group AS
SELECT
    [id],
    [group.JSON],
    [group.id],
    [group.extension],
    [group.modifierExtension],
    [group.source],
    [group.target],
    [group.element],
    [group.unmapped.id],
    [group.unmapped.extension],
    [group.unmapped.modifierExtension],
    [group.unmapped.mode],
    [group.unmapped.code],
    [group.unmapped.display],
    [group.unmapped.valueSet],
    [group.unmapped.url]
FROM openrowset (
        BULK 'ConceptMap2/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [group.JSON]  VARCHAR(MAX) '$.group'
    ) AS rowset
    CROSS APPLY openjson (rowset.[group.JSON]) with (
        [group.id]                     NVARCHAR(100)       '$.id',
        [group.extension]              NVARCHAR(MAX)       '$.extension',
        [group.modifierExtension]      NVARCHAR(MAX)       '$.modifierExtension',
        [group.source]                 VARCHAR(256)        '$.source',
        [group.target]                 VARCHAR(256)        '$.target',
        [group.element]                NVARCHAR(MAX)       '$.element' AS JSON,
        [group.unmapped.id]            NVARCHAR(100)       '$.unmapped.id',
        [group.unmapped.extension]     NVARCHAR(MAX)       '$.unmapped.extension',
        [group.unmapped.modifierExtension] NVARCHAR(MAX)       '$.unmapped.modifierExtension',
        [group.unmapped.mode]          NVARCHAR(100)       '$.unmapped.mode',
        [group.unmapped.code]          NVARCHAR(4000)      '$.unmapped.code',
        [group.unmapped.display]       NVARCHAR(4000)      '$.unmapped.display',
        [group.unmapped.valueSet]      VARCHAR(256)        '$.unmapped.valueSet',
        [group.unmapped.url]           VARCHAR(256)        '$.unmapped.url'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[Condition] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [clinicalStatus.id] NVARCHAR(100),
    [clinicalStatus.extension] NVARCHAR(MAX),
    [clinicalStatus.coding] VARCHAR(MAX),
    [clinicalStatus.text] NVARCHAR(4000),
    [verificationStatus.id] NVARCHAR(100),
    [verificationStatus.extension] NVARCHAR(MAX),
    [verificationStatus.coding] VARCHAR(MAX),
    [verificationStatus.text] NVARCHAR(4000),
    [category] VARCHAR(MAX),
    [severity.id] NVARCHAR(100),
    [severity.extension] NVARCHAR(MAX),
    [severity.coding] VARCHAR(MAX),
    [severity.text] NVARCHAR(4000),
    [code.id] NVARCHAR(100),
    [code.extension] NVARCHAR(MAX),
    [code.coding] VARCHAR(MAX),
    [code.text] NVARCHAR(4000),
    [bodySite] VARCHAR(MAX),
    [subject.id] NVARCHAR(100),
    [subject.extension] NVARCHAR(MAX),
    [subject.reference] NVARCHAR(4000),
    [subject.type] VARCHAR(256),
    [subject.identifier.id] NVARCHAR(100),
    [subject.identifier.extension] NVARCHAR(MAX),
    [subject.identifier.use] NVARCHAR(64),
    [subject.identifier.type] NVARCHAR(MAX),
    [subject.identifier.system] VARCHAR(256),
    [subject.identifier.value] NVARCHAR(4000),
    [subject.identifier.period] NVARCHAR(MAX),
    [subject.identifier.assigner] NVARCHAR(MAX),
    [subject.display] NVARCHAR(4000),
    [encounter.id] NVARCHAR(100),
    [encounter.extension] NVARCHAR(MAX),
    [encounter.reference] NVARCHAR(4000),
    [encounter.type] VARCHAR(256),
    [encounter.identifier.id] NVARCHAR(100),
    [encounter.identifier.extension] NVARCHAR(MAX),
    [encounter.identifier.use] NVARCHAR(64),
    [encounter.identifier.type] NVARCHAR(MAX),
    [encounter.identifier.system] VARCHAR(256),
    [encounter.identifier.value] NVARCHAR(4000),
    [encounter.identifier.period] NVARCHAR(MAX),
    [encounter.identifier.assigner] NVARCHAR(MAX),
    [encounter.display] NVARCHAR(4000),
    [recordedDate] VARCHAR(64),
    [recorder.id] NVARCHAR(100),
    [recorder.extension] NVARCHAR(MAX),
    [recorder.reference] NVARCHAR(4000),
    [recorder.type] VARCHAR(256),
    [recorder.identifier.id] NVARCHAR(100),
    [recorder.identifier.extension] NVARCHAR(MAX),
    [recorder.identifier.use] NVARCHAR(64),
    [recorder.identifier.type] NVARCHAR(MAX),
    [recorder.identifier.system] VARCHAR(256),
    [recorder.identifier.value] NVARCHAR(4000),
    [recorder.identifier.period] NVARCHAR(MAX),
    [recorder.identifier.assigner] NVARCHAR(MAX),
    [recorder.display] NVARCHAR(4000),
    [asserter.id] NVARCHAR(100),
    [asserter.extension] NVARCHAR(MAX),
    [asserter.reference] NVARCHAR(4000),
    [asserter.type] VARCHAR(256),
    [asserter.identifier.id] NVARCHAR(100),
    [asserter.identifier.extension] NVARCHAR(MAX),
    [asserter.identifier.use] NVARCHAR(64),
    [asserter.identifier.type] NVARCHAR(MAX),
    [asserter.identifier.system] VARCHAR(256),
    [asserter.identifier.value] NVARCHAR(4000),
    [asserter.identifier.period] NVARCHAR(MAX),
    [asserter.identifier.assigner] NVARCHAR(MAX),
    [asserter.display] NVARCHAR(4000),
    [stage] VARCHAR(MAX),
    [evidence] VARCHAR(MAX),
    [note] VARCHAR(MAX),
    [onset.dateTime] VARCHAR(64),
    [onset.age.id] NVARCHAR(100),
    [onset.age.extension] NVARCHAR(MAX),
    [onset.age.value] float,
    [onset.age.comparator] NVARCHAR(64),
    [onset.age.unit] NVARCHAR(100),
    [onset.age.system] VARCHAR(256),
    [onset.age.code] NVARCHAR(4000),
    [onset.period.id] NVARCHAR(100),
    [onset.period.extension] NVARCHAR(MAX),
    [onset.period.start] VARCHAR(64),
    [onset.period.end] VARCHAR(64),
    [onset.range.id] NVARCHAR(100),
    [onset.range.extension] NVARCHAR(MAX),
    [onset.range.low.id] NVARCHAR(100),
    [onset.range.low.extension] NVARCHAR(MAX),
    [onset.range.low.value] float,
    [onset.range.low.comparator] NVARCHAR(64),
    [onset.range.low.unit] NVARCHAR(100),
    [onset.range.low.system] VARCHAR(256),
    [onset.range.low.code] NVARCHAR(4000),
    [onset.range.high.id] NVARCHAR(100),
    [onset.range.high.extension] NVARCHAR(MAX),
    [onset.range.high.value] float,
    [onset.range.high.comparator] NVARCHAR(64),
    [onset.range.high.unit] NVARCHAR(100),
    [onset.range.high.system] VARCHAR(256),
    [onset.range.high.code] NVARCHAR(4000),
    [onset.string] NVARCHAR(4000),
    [abatement.dateTime] VARCHAR(64),
    [abatement.age.id] NVARCHAR(100),
    [abatement.age.extension] NVARCHAR(MAX),
    [abatement.age.value] float,
    [abatement.age.comparator] NVARCHAR(64),
    [abatement.age.unit] NVARCHAR(100),
    [abatement.age.system] VARCHAR(256),
    [abatement.age.code] NVARCHAR(4000),
    [abatement.period.id] NVARCHAR(100),
    [abatement.period.extension] NVARCHAR(MAX),
    [abatement.period.start] VARCHAR(64),
    [abatement.period.end] VARCHAR(64),
    [abatement.range.id] NVARCHAR(100),
    [abatement.range.extension] NVARCHAR(MAX),
    [abatement.range.low.id] NVARCHAR(100),
    [abatement.range.low.extension] NVARCHAR(MAX),
    [abatement.range.low.value] float,
    [abatement.range.low.comparator] NVARCHAR(64),
    [abatement.range.low.unit] NVARCHAR(100),
    [abatement.range.low.system] VARCHAR(256),
    [abatement.range.low.code] NVARCHAR(4000),
    [abatement.range.high.id] NVARCHAR(100),
    [abatement.range.high.extension] NVARCHAR(MAX),
    [abatement.range.high.value] float,
    [abatement.range.high.comparator] NVARCHAR(64),
    [abatement.range.high.unit] NVARCHAR(100),
    [abatement.range.high.system] VARCHAR(256),
    [abatement.range.high.code] NVARCHAR(4000),
    [abatement.string] NVARCHAR(4000),
) WITH (
    LOCATION='/Condition/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.ConditionIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'Condition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.ConditionCategory AS
SELECT
    [id],
    [category.JSON],
    [category.id],
    [category.extension],
    [category.coding],
    [category.text]
FROM openrowset (
        BULK 'Condition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [category.JSON]  VARCHAR(MAX) '$.category'
    ) AS rowset
    CROSS APPLY openjson (rowset.[category.JSON]) with (
        [category.id]                  NVARCHAR(100)       '$.id',
        [category.extension]           NVARCHAR(MAX)       '$.extension',
        [category.coding]              NVARCHAR(MAX)       '$.coding' AS JSON,
        [category.text]                NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.ConditionBodySite AS
SELECT
    [id],
    [bodySite.JSON],
    [bodySite.id],
    [bodySite.extension],
    [bodySite.coding],
    [bodySite.text]
FROM openrowset (
        BULK 'Condition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [bodySite.JSON]  VARCHAR(MAX) '$.bodySite'
    ) AS rowset
    CROSS APPLY openjson (rowset.[bodySite.JSON]) with (
        [bodySite.id]                  NVARCHAR(100)       '$.id',
        [bodySite.extension]           NVARCHAR(MAX)       '$.extension',
        [bodySite.coding]              NVARCHAR(MAX)       '$.coding' AS JSON,
        [bodySite.text]                NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.ConditionStage AS
SELECT
    [id],
    [stage.JSON],
    [stage.id],
    [stage.extension],
    [stage.modifierExtension],
    [stage.summary.id],
    [stage.summary.extension],
    [stage.summary.coding],
    [stage.summary.text],
    [stage.assessment],
    [stage.type.id],
    [stage.type.extension],
    [stage.type.coding],
    [stage.type.text]
FROM openrowset (
        BULK 'Condition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [stage.JSON]  VARCHAR(MAX) '$.stage'
    ) AS rowset
    CROSS APPLY openjson (rowset.[stage.JSON]) with (
        [stage.id]                     NVARCHAR(100)       '$.id',
        [stage.extension]              NVARCHAR(MAX)       '$.extension',
        [stage.modifierExtension]      NVARCHAR(MAX)       '$.modifierExtension',
        [stage.summary.id]             NVARCHAR(100)       '$.summary.id',
        [stage.summary.extension]      NVARCHAR(MAX)       '$.summary.extension',
        [stage.summary.coding]         NVARCHAR(MAX)       '$.summary.coding',
        [stage.summary.text]           NVARCHAR(4000)      '$.summary.text',
        [stage.assessment]             NVARCHAR(MAX)       '$.assessment' AS JSON,
        [stage.type.id]                NVARCHAR(100)       '$.type.id',
        [stage.type.extension]         NVARCHAR(MAX)       '$.type.extension',
        [stage.type.coding]            NVARCHAR(MAX)       '$.type.coding',
        [stage.type.text]              NVARCHAR(4000)      '$.type.text'
    ) j

GO

CREATE VIEW fhir.ConditionEvidence AS
SELECT
    [id],
    [evidence.JSON],
    [evidence.id],
    [evidence.extension],
    [evidence.modifierExtension],
    [evidence.code],
    [evidence.detail]
FROM openrowset (
        BULK 'Condition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [evidence.JSON]  VARCHAR(MAX) '$.evidence'
    ) AS rowset
    CROSS APPLY openjson (rowset.[evidence.JSON]) with (
        [evidence.id]                  NVARCHAR(100)       '$.id',
        [evidence.extension]           NVARCHAR(MAX)       '$.extension',
        [evidence.modifierExtension]   NVARCHAR(MAX)       '$.modifierExtension',
        [evidence.code]                NVARCHAR(MAX)       '$.code' AS JSON,
        [evidence.detail]              NVARCHAR(MAX)       '$.detail' AS JSON
    ) j

GO

CREATE VIEW fhir.ConditionNote AS
SELECT
    [id],
    [note.JSON],
    [note.id],
    [note.extension],
    [note.time],
    [note.text],
    [note.author.reference.id],
    [note.author.reference.extension],
    [note.author.reference.reference],
    [note.author.reference.type],
    [note.author.reference.identifier],
    [note.author.reference.display],
    [note.author.string]
FROM openrowset (
        BULK 'Condition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [note.JSON]  VARCHAR(MAX) '$.note'
    ) AS rowset
    CROSS APPLY openjson (rowset.[note.JSON]) with (
        [note.id]                      NVARCHAR(100)       '$.id',
        [note.extension]               NVARCHAR(MAX)       '$.extension',
        [note.time]                    VARCHAR(64)         '$.time',
        [note.text]                    NVARCHAR(MAX)       '$.text',
        [note.author.reference.id]     NVARCHAR(100)       '$.author.reference.id',
        [note.author.reference.extension] NVARCHAR(MAX)       '$.author.reference.extension',
        [note.author.reference.reference] NVARCHAR(4000)      '$.author.reference.reference',
        [note.author.reference.type]   VARCHAR(256)        '$.author.reference.type',
        [note.author.reference.identifier] NVARCHAR(MAX)       '$.author.reference.identifier',
        [note.author.reference.display] NVARCHAR(4000)      '$.author.reference.display',
        [note.author.string]           NVARCHAR(4000)      '$.author.string'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[ConditionDefinition] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [url] VARCHAR(256),
    [identifier] VARCHAR(MAX),
    [version] NVARCHAR(100),
    [name] NVARCHAR(500),
    [title] NVARCHAR(4000),
    [status] NVARCHAR(100),
    [experimental] bit,
    [date] VARCHAR(64),
    [publisher] NVARCHAR(500),
    [contact] VARCHAR(MAX),
    [description] NVARCHAR(MAX),
    [useContext] VARCHAR(MAX),
    [jurisdiction] VARCHAR(MAX),
    [purpose] NVARCHAR(MAX),
    [copyright] NVARCHAR(MAX),
    [approvalDate] VARCHAR(64),
    [lastReviewDate] VARCHAR(64),
    [effectivePeriod.id] NVARCHAR(100),
    [effectivePeriod.extension] NVARCHAR(MAX),
    [effectivePeriod.start] VARCHAR(64),
    [effectivePeriod.end] VARCHAR(64),
    [topic] VARCHAR(MAX),
    [author] VARCHAR(MAX),
    [editor] VARCHAR(MAX),
    [reviewer] VARCHAR(MAX),
    [endorser] VARCHAR(MAX),
    [relatedArtifact] VARCHAR(MAX),
    [subtitle] NVARCHAR(4000),
    [code.id] NVARCHAR(100),
    [code.extension] NVARCHAR(MAX),
    [code.coding] VARCHAR(MAX),
    [code.text] NVARCHAR(4000),
    [severity.id] NVARCHAR(100),
    [severity.extension] NVARCHAR(MAX),
    [severity.coding] VARCHAR(MAX),
    [severity.text] NVARCHAR(4000),
    [bodySite.id] NVARCHAR(100),
    [bodySite.extension] NVARCHAR(MAX),
    [bodySite.coding] VARCHAR(MAX),
    [bodySite.text] NVARCHAR(4000),
    [stage.id] NVARCHAR(100),
    [stage.extension] NVARCHAR(MAX),
    [stage.coding] VARCHAR(MAX),
    [stage.text] NVARCHAR(4000),
    [hasSeverity] bit,
    [hasBodySite] bit,
    [hasStage] bit,
    [definition] VARCHAR(MAX),
    [observation] VARCHAR(MAX),
    [medication] VARCHAR(MAX),
    [precondition] VARCHAR(MAX),
    [team] VARCHAR(MAX),
    [questionnaire] VARCHAR(MAX),
    [plan] VARCHAR(MAX),
) WITH (
    LOCATION='/ConditionDefinition/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.ConditionDefinitionIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'ConditionDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.ConditionDefinitionContact AS
SELECT
    [id],
    [contact.JSON],
    [contact.id],
    [contact.extension],
    [contact.name],
    [contact.telecom]
FROM openrowset (
        BULK 'ConditionDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [contact.JSON]  VARCHAR(MAX) '$.contact'
    ) AS rowset
    CROSS APPLY openjson (rowset.[contact.JSON]) with (
        [contact.id]                   NVARCHAR(100)       '$.id',
        [contact.extension]            NVARCHAR(MAX)       '$.extension',
        [contact.name]                 NVARCHAR(500)       '$.name',
        [contact.telecom]              NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.ConditionDefinitionUseContext AS
SELECT
    [id],
    [useContext.JSON],
    [useContext.id],
    [useContext.extension],
    [useContext.code.id],
    [useContext.code.extension],
    [useContext.code.system],
    [useContext.code.version],
    [useContext.code.code],
    [useContext.code.display],
    [useContext.code.userSelected],
    [useContext.value.codeableConcept.id],
    [useContext.value.codeableConcept.extension],
    [useContext.value.codeableConcept.coding],
    [useContext.value.codeableConcept.text],
    [useContext.value.quantity.id],
    [useContext.value.quantity.extension],
    [useContext.value.quantity.value],
    [useContext.value.quantity.comparator],
    [useContext.value.quantity.unit],
    [useContext.value.quantity.system],
    [useContext.value.quantity.code],
    [useContext.value.range.id],
    [useContext.value.range.extension],
    [useContext.value.range.low],
    [useContext.value.range.high],
    [useContext.value.reference.id],
    [useContext.value.reference.extension],
    [useContext.value.reference.reference],
    [useContext.value.reference.type],
    [useContext.value.reference.identifier],
    [useContext.value.reference.display]
FROM openrowset (
        BULK 'ConditionDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [useContext.JSON]  VARCHAR(MAX) '$.useContext'
    ) AS rowset
    CROSS APPLY openjson (rowset.[useContext.JSON]) with (
        [useContext.id]                NVARCHAR(100)       '$.id',
        [useContext.extension]         NVARCHAR(MAX)       '$.extension',
        [useContext.code.id]           NVARCHAR(100)       '$.code.id',
        [useContext.code.extension]    NVARCHAR(MAX)       '$.code.extension',
        [useContext.code.system]       VARCHAR(256)        '$.code.system',
        [useContext.code.version]      NVARCHAR(100)       '$.code.version',
        [useContext.code.code]         NVARCHAR(4000)      '$.code.code',
        [useContext.code.display]      NVARCHAR(4000)      '$.code.display',
        [useContext.code.userSelected] bit                 '$.code.userSelected',
        [useContext.value.codeableConcept.id] NVARCHAR(100)       '$.value.codeableConcept.id',
        [useContext.value.codeableConcept.extension] NVARCHAR(MAX)       '$.value.codeableConcept.extension',
        [useContext.value.codeableConcept.coding] NVARCHAR(MAX)       '$.value.codeableConcept.coding',
        [useContext.value.codeableConcept.text] NVARCHAR(4000)      '$.value.codeableConcept.text',
        [useContext.value.quantity.id] NVARCHAR(100)       '$.value.quantity.id',
        [useContext.value.quantity.extension] NVARCHAR(MAX)       '$.value.quantity.extension',
        [useContext.value.quantity.value] float               '$.value.quantity.value',
        [useContext.value.quantity.comparator] NVARCHAR(64)        '$.value.quantity.comparator',
        [useContext.value.quantity.unit] NVARCHAR(100)       '$.value.quantity.unit',
        [useContext.value.quantity.system] VARCHAR(256)        '$.value.quantity.system',
        [useContext.value.quantity.code] NVARCHAR(4000)      '$.value.quantity.code',
        [useContext.value.range.id]    NVARCHAR(100)       '$.value.range.id',
        [useContext.value.range.extension] NVARCHAR(MAX)       '$.value.range.extension',
        [useContext.value.range.low]   NVARCHAR(MAX)       '$.value.range.low',
        [useContext.value.range.high]  NVARCHAR(MAX)       '$.value.range.high',
        [useContext.value.reference.id] NVARCHAR(100)       '$.value.reference.id',
        [useContext.value.reference.extension] NVARCHAR(MAX)       '$.value.reference.extension',
        [useContext.value.reference.reference] NVARCHAR(4000)      '$.value.reference.reference',
        [useContext.value.reference.type] VARCHAR(256)        '$.value.reference.type',
        [useContext.value.reference.identifier] NVARCHAR(MAX)       '$.value.reference.identifier',
        [useContext.value.reference.display] NVARCHAR(4000)      '$.value.reference.display'
    ) j

GO

CREATE VIEW fhir.ConditionDefinitionJurisdiction AS
SELECT
    [id],
    [jurisdiction.JSON],
    [jurisdiction.id],
    [jurisdiction.extension],
    [jurisdiction.coding],
    [jurisdiction.text]
FROM openrowset (
        BULK 'ConditionDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [jurisdiction.JSON]  VARCHAR(MAX) '$.jurisdiction'
    ) AS rowset
    CROSS APPLY openjson (rowset.[jurisdiction.JSON]) with (
        [jurisdiction.id]              NVARCHAR(100)       '$.id',
        [jurisdiction.extension]       NVARCHAR(MAX)       '$.extension',
        [jurisdiction.coding]          NVARCHAR(MAX)       '$.coding' AS JSON,
        [jurisdiction.text]            NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.ConditionDefinitionTopic AS
SELECT
    [id],
    [topic.JSON],
    [topic.id],
    [topic.extension],
    [topic.coding],
    [topic.text]
FROM openrowset (
        BULK 'ConditionDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [topic.JSON]  VARCHAR(MAX) '$.topic'
    ) AS rowset
    CROSS APPLY openjson (rowset.[topic.JSON]) with (
        [topic.id]                     NVARCHAR(100)       '$.id',
        [topic.extension]              NVARCHAR(MAX)       '$.extension',
        [topic.coding]                 NVARCHAR(MAX)       '$.coding' AS JSON,
        [topic.text]                   NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.ConditionDefinitionAuthor AS
SELECT
    [id],
    [author.JSON],
    [author.id],
    [author.extension],
    [author.name],
    [author.telecom]
FROM openrowset (
        BULK 'ConditionDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [author.JSON]  VARCHAR(MAX) '$.author'
    ) AS rowset
    CROSS APPLY openjson (rowset.[author.JSON]) with (
        [author.id]                    NVARCHAR(100)       '$.id',
        [author.extension]             NVARCHAR(MAX)       '$.extension',
        [author.name]                  NVARCHAR(500)       '$.name',
        [author.telecom]               NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.ConditionDefinitionEditor AS
SELECT
    [id],
    [editor.JSON],
    [editor.id],
    [editor.extension],
    [editor.name],
    [editor.telecom]
FROM openrowset (
        BULK 'ConditionDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [editor.JSON]  VARCHAR(MAX) '$.editor'
    ) AS rowset
    CROSS APPLY openjson (rowset.[editor.JSON]) with (
        [editor.id]                    NVARCHAR(100)       '$.id',
        [editor.extension]             NVARCHAR(MAX)       '$.extension',
        [editor.name]                  NVARCHAR(500)       '$.name',
        [editor.telecom]               NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.ConditionDefinitionReviewer AS
SELECT
    [id],
    [reviewer.JSON],
    [reviewer.id],
    [reviewer.extension],
    [reviewer.name],
    [reviewer.telecom]
FROM openrowset (
        BULK 'ConditionDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [reviewer.JSON]  VARCHAR(MAX) '$.reviewer'
    ) AS rowset
    CROSS APPLY openjson (rowset.[reviewer.JSON]) with (
        [reviewer.id]                  NVARCHAR(100)       '$.id',
        [reviewer.extension]           NVARCHAR(MAX)       '$.extension',
        [reviewer.name]                NVARCHAR(500)       '$.name',
        [reviewer.telecom]             NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.ConditionDefinitionEndorser AS
SELECT
    [id],
    [endorser.JSON],
    [endorser.id],
    [endorser.extension],
    [endorser.name],
    [endorser.telecom]
FROM openrowset (
        BULK 'ConditionDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [endorser.JSON]  VARCHAR(MAX) '$.endorser'
    ) AS rowset
    CROSS APPLY openjson (rowset.[endorser.JSON]) with (
        [endorser.id]                  NVARCHAR(100)       '$.id',
        [endorser.extension]           NVARCHAR(MAX)       '$.extension',
        [endorser.name]                NVARCHAR(500)       '$.name',
        [endorser.telecom]             NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.ConditionDefinitionRelatedArtifact AS
SELECT
    [id],
    [relatedArtifact.JSON],
    [relatedArtifact.id],
    [relatedArtifact.extension],
    [relatedArtifact.type],
    [relatedArtifact.classifier],
    [relatedArtifact.label],
    [relatedArtifact.display],
    [relatedArtifact.citation],
    [relatedArtifact.document.id],
    [relatedArtifact.document.extension],
    [relatedArtifact.document.contentType],
    [relatedArtifact.document.language],
    [relatedArtifact.document.data],
    [relatedArtifact.document.url],
    [relatedArtifact.document.size],
    [relatedArtifact.document.hash],
    [relatedArtifact.document.title],
    [relatedArtifact.document.creation],
    [relatedArtifact.document.height],
    [relatedArtifact.document.width],
    [relatedArtifact.document.frames],
    [relatedArtifact.document.duration],
    [relatedArtifact.document.pages],
    [relatedArtifact.resource],
    [relatedArtifact.resourceReference.id],
    [relatedArtifact.resourceReference.extension],
    [relatedArtifact.resourceReference.reference],
    [relatedArtifact.resourceReference.type],
    [relatedArtifact.resourceReference.identifier],
    [relatedArtifact.resourceReference.display]
FROM openrowset (
        BULK 'ConditionDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [relatedArtifact.JSON]  VARCHAR(MAX) '$.relatedArtifact'
    ) AS rowset
    CROSS APPLY openjson (rowset.[relatedArtifact.JSON]) with (
        [relatedArtifact.id]           NVARCHAR(100)       '$.id',
        [relatedArtifact.extension]    NVARCHAR(MAX)       '$.extension',
        [relatedArtifact.type]         NVARCHAR(64)        '$.type',
        [relatedArtifact.classifier]   NVARCHAR(MAX)       '$.classifier' AS JSON,
        [relatedArtifact.label]        NVARCHAR(100)       '$.label',
        [relatedArtifact.display]      NVARCHAR(4000)      '$.display',
        [relatedArtifact.citation]     NVARCHAR(MAX)       '$.citation',
        [relatedArtifact.document.id]  NVARCHAR(100)       '$.document.id',
        [relatedArtifact.document.extension] NVARCHAR(MAX)       '$.document.extension',
        [relatedArtifact.document.contentType] NVARCHAR(100)       '$.document.contentType',
        [relatedArtifact.document.language] NVARCHAR(100)       '$.document.language',
        [relatedArtifact.document.data] NVARCHAR(MAX)       '$.document.data',
        [relatedArtifact.document.url] VARCHAR(256)        '$.document.url',
        [relatedArtifact.document.size] NVARCHAR(MAX)       '$.document.size',
        [relatedArtifact.document.hash] NVARCHAR(MAX)       '$.document.hash',
        [relatedArtifact.document.title] NVARCHAR(4000)      '$.document.title',
        [relatedArtifact.document.creation] VARCHAR(64)         '$.document.creation',
        [relatedArtifact.document.height] bigint              '$.document.height',
        [relatedArtifact.document.width] bigint              '$.document.width',
        [relatedArtifact.document.frames] bigint              '$.document.frames',
        [relatedArtifact.document.duration] float               '$.document.duration',
        [relatedArtifact.document.pages] bigint              '$.document.pages',
        [relatedArtifact.resource]     VARCHAR(256)        '$.resource',
        [relatedArtifact.resourceReference.id] NVARCHAR(100)       '$.resourceReference.id',
        [relatedArtifact.resourceReference.extension] NVARCHAR(MAX)       '$.resourceReference.extension',
        [relatedArtifact.resourceReference.reference] NVARCHAR(4000)      '$.resourceReference.reference',
        [relatedArtifact.resourceReference.type] VARCHAR(256)        '$.resourceReference.type',
        [relatedArtifact.resourceReference.identifier] NVARCHAR(MAX)       '$.resourceReference.identifier',
        [relatedArtifact.resourceReference.display] NVARCHAR(4000)      '$.resourceReference.display'
    ) j

GO

CREATE VIEW fhir.ConditionDefinitionDefinition AS
SELECT
    [id],
    [definition.JSON],
    [definition]
FROM openrowset (
        BULK 'ConditionDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [definition.JSON]  VARCHAR(MAX) '$.definition'
    ) AS rowset
    CROSS APPLY openjson (rowset.[definition.JSON]) with (
        [definition]                   NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.ConditionDefinitionObservation AS
SELECT
    [id],
    [observation.JSON],
    [observation.id],
    [observation.extension],
    [observation.modifierExtension],
    [observation.category.id],
    [observation.category.extension],
    [observation.category.coding],
    [observation.category.text],
    [observation.code.id],
    [observation.code.extension],
    [observation.code.coding],
    [observation.code.text]
FROM openrowset (
        BULK 'ConditionDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [observation.JSON]  VARCHAR(MAX) '$.observation'
    ) AS rowset
    CROSS APPLY openjson (rowset.[observation.JSON]) with (
        [observation.id]               NVARCHAR(100)       '$.id',
        [observation.extension]        NVARCHAR(MAX)       '$.extension',
        [observation.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [observation.category.id]      NVARCHAR(100)       '$.category.id',
        [observation.category.extension] NVARCHAR(MAX)       '$.category.extension',
        [observation.category.coding]  NVARCHAR(MAX)       '$.category.coding',
        [observation.category.text]    NVARCHAR(4000)      '$.category.text',
        [observation.code.id]          NVARCHAR(100)       '$.code.id',
        [observation.code.extension]   NVARCHAR(MAX)       '$.code.extension',
        [observation.code.coding]      NVARCHAR(MAX)       '$.code.coding',
        [observation.code.text]        NVARCHAR(4000)      '$.code.text'
    ) j

GO

CREATE VIEW fhir.ConditionDefinitionMedication AS
SELECT
    [id],
    [medication.JSON],
    [medication.id],
    [medication.extension],
    [medication.modifierExtension],
    [medication.category.id],
    [medication.category.extension],
    [medication.category.coding],
    [medication.category.text],
    [medication.code.id],
    [medication.code.extension],
    [medication.code.coding],
    [medication.code.text]
FROM openrowset (
        BULK 'ConditionDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [medication.JSON]  VARCHAR(MAX) '$.medication'
    ) AS rowset
    CROSS APPLY openjson (rowset.[medication.JSON]) with (
        [medication.id]                NVARCHAR(100)       '$.id',
        [medication.extension]         NVARCHAR(MAX)       '$.extension',
        [medication.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [medication.category.id]       NVARCHAR(100)       '$.category.id',
        [medication.category.extension] NVARCHAR(MAX)       '$.category.extension',
        [medication.category.coding]   NVARCHAR(MAX)       '$.category.coding',
        [medication.category.text]     NVARCHAR(4000)      '$.category.text',
        [medication.code.id]           NVARCHAR(100)       '$.code.id',
        [medication.code.extension]    NVARCHAR(MAX)       '$.code.extension',
        [medication.code.coding]       NVARCHAR(MAX)       '$.code.coding',
        [medication.code.text]         NVARCHAR(4000)      '$.code.text'
    ) j

GO

CREATE VIEW fhir.ConditionDefinitionPrecondition AS
SELECT
    [id],
    [precondition.JSON],
    [precondition.id],
    [precondition.extension],
    [precondition.modifierExtension],
    [precondition.type],
    [precondition.code.id],
    [precondition.code.extension],
    [precondition.code.coding],
    [precondition.code.text],
    [precondition.value.codeableConcept.id],
    [precondition.value.codeableConcept.extension],
    [precondition.value.codeableConcept.coding],
    [precondition.value.codeableConcept.text],
    [precondition.value.quantity.id],
    [precondition.value.quantity.extension],
    [precondition.value.quantity.value],
    [precondition.value.quantity.comparator],
    [precondition.value.quantity.unit],
    [precondition.value.quantity.system],
    [precondition.value.quantity.code]
FROM openrowset (
        BULK 'ConditionDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [precondition.JSON]  VARCHAR(MAX) '$.precondition'
    ) AS rowset
    CROSS APPLY openjson (rowset.[precondition.JSON]) with (
        [precondition.id]              NVARCHAR(100)       '$.id',
        [precondition.extension]       NVARCHAR(MAX)       '$.extension',
        [precondition.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [precondition.type]            NVARCHAR(100)       '$.type',
        [precondition.code.id]         NVARCHAR(100)       '$.code.id',
        [precondition.code.extension]  NVARCHAR(MAX)       '$.code.extension',
        [precondition.code.coding]     NVARCHAR(MAX)       '$.code.coding',
        [precondition.code.text]       NVARCHAR(4000)      '$.code.text',
        [precondition.value.codeableConcept.id] NVARCHAR(100)       '$.value.codeableConcept.id',
        [precondition.value.codeableConcept.extension] NVARCHAR(MAX)       '$.value.codeableConcept.extension',
        [precondition.value.codeableConcept.coding] NVARCHAR(MAX)       '$.value.codeableConcept.coding',
        [precondition.value.codeableConcept.text] NVARCHAR(4000)      '$.value.codeableConcept.text',
        [precondition.value.quantity.id] NVARCHAR(100)       '$.value.quantity.id',
        [precondition.value.quantity.extension] NVARCHAR(MAX)       '$.value.quantity.extension',
        [precondition.value.quantity.value] float               '$.value.quantity.value',
        [precondition.value.quantity.comparator] NVARCHAR(64)        '$.value.quantity.comparator',
        [precondition.value.quantity.unit] NVARCHAR(100)       '$.value.quantity.unit',
        [precondition.value.quantity.system] VARCHAR(256)        '$.value.quantity.system',
        [precondition.value.quantity.code] NVARCHAR(4000)      '$.value.quantity.code'
    ) j

GO

CREATE VIEW fhir.ConditionDefinitionTeam AS
SELECT
    [id],
    [team.JSON],
    [team.id],
    [team.extension],
    [team.reference],
    [team.type],
    [team.identifier.id],
    [team.identifier.extension],
    [team.identifier.use],
    [team.identifier.type],
    [team.identifier.system],
    [team.identifier.value],
    [team.identifier.period],
    [team.identifier.assigner],
    [team.display]
FROM openrowset (
        BULK 'ConditionDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [team.JSON]  VARCHAR(MAX) '$.team'
    ) AS rowset
    CROSS APPLY openjson (rowset.[team.JSON]) with (
        [team.id]                      NVARCHAR(100)       '$.id',
        [team.extension]               NVARCHAR(MAX)       '$.extension',
        [team.reference]               NVARCHAR(4000)      '$.reference',
        [team.type]                    VARCHAR(256)        '$.type',
        [team.identifier.id]           NVARCHAR(100)       '$.identifier.id',
        [team.identifier.extension]    NVARCHAR(MAX)       '$.identifier.extension',
        [team.identifier.use]          NVARCHAR(64)        '$.identifier.use',
        [team.identifier.type]         NVARCHAR(MAX)       '$.identifier.type',
        [team.identifier.system]       VARCHAR(256)        '$.identifier.system',
        [team.identifier.value]        NVARCHAR(4000)      '$.identifier.value',
        [team.identifier.period]       NVARCHAR(MAX)       '$.identifier.period',
        [team.identifier.assigner]     NVARCHAR(MAX)       '$.identifier.assigner',
        [team.display]                 NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.ConditionDefinitionQuestionnaire AS
SELECT
    [id],
    [questionnaire.JSON],
    [questionnaire.id],
    [questionnaire.extension],
    [questionnaire.modifierExtension],
    [questionnaire.purpose],
    [questionnaire.reference.id],
    [questionnaire.reference.extension],
    [questionnaire.reference.reference],
    [questionnaire.reference.type],
    [questionnaire.reference.identifier],
    [questionnaire.reference.display]
FROM openrowset (
        BULK 'ConditionDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [questionnaire.JSON]  VARCHAR(MAX) '$.questionnaire'
    ) AS rowset
    CROSS APPLY openjson (rowset.[questionnaire.JSON]) with (
        [questionnaire.id]             NVARCHAR(100)       '$.id',
        [questionnaire.extension]      NVARCHAR(MAX)       '$.extension',
        [questionnaire.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [questionnaire.purpose]        NVARCHAR(4000)      '$.purpose',
        [questionnaire.reference.id]   NVARCHAR(100)       '$.reference.id',
        [questionnaire.reference.extension] NVARCHAR(MAX)       '$.reference.extension',
        [questionnaire.reference.reference] NVARCHAR(4000)      '$.reference.reference',
        [questionnaire.reference.type] VARCHAR(256)        '$.reference.type',
        [questionnaire.reference.identifier] NVARCHAR(MAX)       '$.reference.identifier',
        [questionnaire.reference.display] NVARCHAR(4000)      '$.reference.display'
    ) j

GO

CREATE VIEW fhir.ConditionDefinitionPlan AS
SELECT
    [id],
    [plan.JSON],
    [plan.id],
    [plan.extension],
    [plan.modifierExtension],
    [plan.role.id],
    [plan.role.extension],
    [plan.role.coding],
    [plan.role.text],
    [plan.reference.id],
    [plan.reference.extension],
    [plan.reference.reference],
    [plan.reference.type],
    [plan.reference.identifier],
    [plan.reference.display]
FROM openrowset (
        BULK 'ConditionDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [plan.JSON]  VARCHAR(MAX) '$.plan'
    ) AS rowset
    CROSS APPLY openjson (rowset.[plan.JSON]) with (
        [plan.id]                      NVARCHAR(100)       '$.id',
        [plan.extension]               NVARCHAR(MAX)       '$.extension',
        [plan.modifierExtension]       NVARCHAR(MAX)       '$.modifierExtension',
        [plan.role.id]                 NVARCHAR(100)       '$.role.id',
        [plan.role.extension]          NVARCHAR(MAX)       '$.role.extension',
        [plan.role.coding]             NVARCHAR(MAX)       '$.role.coding',
        [plan.role.text]               NVARCHAR(4000)      '$.role.text',
        [plan.reference.id]            NVARCHAR(100)       '$.reference.id',
        [plan.reference.extension]     NVARCHAR(MAX)       '$.reference.extension',
        [plan.reference.reference]     NVARCHAR(4000)      '$.reference.reference',
        [plan.reference.type]          VARCHAR(256)        '$.reference.type',
        [plan.reference.identifier]    NVARCHAR(MAX)       '$.reference.identifier',
        [plan.reference.display]       NVARCHAR(4000)      '$.reference.display'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[Consent] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [status] NVARCHAR(100),
    [category] VARCHAR(MAX),
    [subject.id] NVARCHAR(100),
    [subject.extension] NVARCHAR(MAX),
    [subject.reference] NVARCHAR(4000),
    [subject.type] VARCHAR(256),
    [subject.identifier.id] NVARCHAR(100),
    [subject.identifier.extension] NVARCHAR(MAX),
    [subject.identifier.use] NVARCHAR(64),
    [subject.identifier.type] NVARCHAR(MAX),
    [subject.identifier.system] VARCHAR(256),
    [subject.identifier.value] NVARCHAR(4000),
    [subject.identifier.period] NVARCHAR(MAX),
    [subject.identifier.assigner] NVARCHAR(MAX),
    [subject.display] NVARCHAR(4000),
    [dateTime] VARCHAR(64),
    [grantor] VARCHAR(MAX),
    [grantee] VARCHAR(MAX),
    [manager] VARCHAR(MAX),
    [controller] VARCHAR(MAX),
    [sourceAttachment] VARCHAR(MAX),
    [sourceReference] VARCHAR(MAX),
    [policy] VARCHAR(MAX),
    [policyRule.id] NVARCHAR(100),
    [policyRule.extension] NVARCHAR(MAX),
    [policyRule.coding] VARCHAR(MAX),
    [policyRule.text] NVARCHAR(4000),
    [verification] VARCHAR(MAX),
    [provision.id] NVARCHAR(100),
    [provision.extension] NVARCHAR(MAX),
    [provision.modifierExtension] NVARCHAR(MAX),
    [provision.type] NVARCHAR(100),
    [provision.period.id] NVARCHAR(100),
    [provision.period.extension] NVARCHAR(MAX),
    [provision.period.start] VARCHAR(64),
    [provision.period.end] VARCHAR(64),
    [provision.actor] VARCHAR(MAX),
    [provision.action] VARCHAR(MAX),
    [provision.securityLabel] VARCHAR(MAX),
    [provision.purpose] VARCHAR(MAX),
    [provision.class] VARCHAR(MAX),
    [provision.code] VARCHAR(MAX),
    [provision.dataPeriod.id] NVARCHAR(100),
    [provision.dataPeriod.extension] NVARCHAR(MAX),
    [provision.dataPeriod.start] VARCHAR(64),
    [provision.dataPeriod.end] VARCHAR(64),
    [provision.data] VARCHAR(MAX),
    [provision.expression.id] NVARCHAR(100),
    [provision.expression.extension] NVARCHAR(MAX),
    [provision.expression.description] NVARCHAR(4000),
    [provision.expression.name] VARCHAR(64),
    [provision.expression.language] NVARCHAR(100),
    [provision.expression.expression] NVARCHAR(4000),
    [provision.expression.reference] VARCHAR(256),
    [provision.provision] VARCHAR(MAX),
) WITH (
    LOCATION='/Consent/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.ConsentIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'Consent/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.ConsentCategory AS
SELECT
    [id],
    [category.JSON],
    [category.id],
    [category.extension],
    [category.coding],
    [category.text]
FROM openrowset (
        BULK 'Consent/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [category.JSON]  VARCHAR(MAX) '$.category'
    ) AS rowset
    CROSS APPLY openjson (rowset.[category.JSON]) with (
        [category.id]                  NVARCHAR(100)       '$.id',
        [category.extension]           NVARCHAR(MAX)       '$.extension',
        [category.coding]              NVARCHAR(MAX)       '$.coding' AS JSON,
        [category.text]                NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.ConsentGrantor AS
SELECT
    [id],
    [grantor.JSON],
    [grantor.id],
    [grantor.extension],
    [grantor.reference],
    [grantor.type],
    [grantor.identifier.id],
    [grantor.identifier.extension],
    [grantor.identifier.use],
    [grantor.identifier.type],
    [grantor.identifier.system],
    [grantor.identifier.value],
    [grantor.identifier.period],
    [grantor.identifier.assigner],
    [grantor.display]
FROM openrowset (
        BULK 'Consent/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [grantor.JSON]  VARCHAR(MAX) '$.grantor'
    ) AS rowset
    CROSS APPLY openjson (rowset.[grantor.JSON]) with (
        [grantor.id]                   NVARCHAR(100)       '$.id',
        [grantor.extension]            NVARCHAR(MAX)       '$.extension',
        [grantor.reference]            NVARCHAR(4000)      '$.reference',
        [grantor.type]                 VARCHAR(256)        '$.type',
        [grantor.identifier.id]        NVARCHAR(100)       '$.identifier.id',
        [grantor.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [grantor.identifier.use]       NVARCHAR(64)        '$.identifier.use',
        [grantor.identifier.type]      NVARCHAR(MAX)       '$.identifier.type',
        [grantor.identifier.system]    VARCHAR(256)        '$.identifier.system',
        [grantor.identifier.value]     NVARCHAR(4000)      '$.identifier.value',
        [grantor.identifier.period]    NVARCHAR(MAX)       '$.identifier.period',
        [grantor.identifier.assigner]  NVARCHAR(MAX)       '$.identifier.assigner',
        [grantor.display]              NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.ConsentGrantee AS
SELECT
    [id],
    [grantee.JSON],
    [grantee.id],
    [grantee.extension],
    [grantee.reference],
    [grantee.type],
    [grantee.identifier.id],
    [grantee.identifier.extension],
    [grantee.identifier.use],
    [grantee.identifier.type],
    [grantee.identifier.system],
    [grantee.identifier.value],
    [grantee.identifier.period],
    [grantee.identifier.assigner],
    [grantee.display]
FROM openrowset (
        BULK 'Consent/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [grantee.JSON]  VARCHAR(MAX) '$.grantee'
    ) AS rowset
    CROSS APPLY openjson (rowset.[grantee.JSON]) with (
        [grantee.id]                   NVARCHAR(100)       '$.id',
        [grantee.extension]            NVARCHAR(MAX)       '$.extension',
        [grantee.reference]            NVARCHAR(4000)      '$.reference',
        [grantee.type]                 VARCHAR(256)        '$.type',
        [grantee.identifier.id]        NVARCHAR(100)       '$.identifier.id',
        [grantee.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [grantee.identifier.use]       NVARCHAR(64)        '$.identifier.use',
        [grantee.identifier.type]      NVARCHAR(MAX)       '$.identifier.type',
        [grantee.identifier.system]    VARCHAR(256)        '$.identifier.system',
        [grantee.identifier.value]     NVARCHAR(4000)      '$.identifier.value',
        [grantee.identifier.period]    NVARCHAR(MAX)       '$.identifier.period',
        [grantee.identifier.assigner]  NVARCHAR(MAX)       '$.identifier.assigner',
        [grantee.display]              NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.ConsentManager AS
SELECT
    [id],
    [manager.JSON],
    [manager.id],
    [manager.extension],
    [manager.reference],
    [manager.type],
    [manager.identifier.id],
    [manager.identifier.extension],
    [manager.identifier.use],
    [manager.identifier.type],
    [manager.identifier.system],
    [manager.identifier.value],
    [manager.identifier.period],
    [manager.identifier.assigner],
    [manager.display]
FROM openrowset (
        BULK 'Consent/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [manager.JSON]  VARCHAR(MAX) '$.manager'
    ) AS rowset
    CROSS APPLY openjson (rowset.[manager.JSON]) with (
        [manager.id]                   NVARCHAR(100)       '$.id',
        [manager.extension]            NVARCHAR(MAX)       '$.extension',
        [manager.reference]            NVARCHAR(4000)      '$.reference',
        [manager.type]                 VARCHAR(256)        '$.type',
        [manager.identifier.id]        NVARCHAR(100)       '$.identifier.id',
        [manager.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [manager.identifier.use]       NVARCHAR(64)        '$.identifier.use',
        [manager.identifier.type]      NVARCHAR(MAX)       '$.identifier.type',
        [manager.identifier.system]    VARCHAR(256)        '$.identifier.system',
        [manager.identifier.value]     NVARCHAR(4000)      '$.identifier.value',
        [manager.identifier.period]    NVARCHAR(MAX)       '$.identifier.period',
        [manager.identifier.assigner]  NVARCHAR(MAX)       '$.identifier.assigner',
        [manager.display]              NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.ConsentController AS
SELECT
    [id],
    [controller.JSON],
    [controller.id],
    [controller.extension],
    [controller.reference],
    [controller.type],
    [controller.identifier.id],
    [controller.identifier.extension],
    [controller.identifier.use],
    [controller.identifier.type],
    [controller.identifier.system],
    [controller.identifier.value],
    [controller.identifier.period],
    [controller.identifier.assigner],
    [controller.display]
FROM openrowset (
        BULK 'Consent/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [controller.JSON]  VARCHAR(MAX) '$.controller'
    ) AS rowset
    CROSS APPLY openjson (rowset.[controller.JSON]) with (
        [controller.id]                NVARCHAR(100)       '$.id',
        [controller.extension]         NVARCHAR(MAX)       '$.extension',
        [controller.reference]         NVARCHAR(4000)      '$.reference',
        [controller.type]              VARCHAR(256)        '$.type',
        [controller.identifier.id]     NVARCHAR(100)       '$.identifier.id',
        [controller.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [controller.identifier.use]    NVARCHAR(64)        '$.identifier.use',
        [controller.identifier.type]   NVARCHAR(MAX)       '$.identifier.type',
        [controller.identifier.system] VARCHAR(256)        '$.identifier.system',
        [controller.identifier.value]  NVARCHAR(4000)      '$.identifier.value',
        [controller.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [controller.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [controller.display]           NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.ConsentSourceAttachment AS
SELECT
    [id],
    [sourceAttachment.JSON],
    [sourceAttachment.id],
    [sourceAttachment.extension],
    [sourceAttachment.contentType],
    [sourceAttachment.language],
    [sourceAttachment.data],
    [sourceAttachment.url],
    [sourceAttachment.size],
    [sourceAttachment.hash],
    [sourceAttachment.title],
    [sourceAttachment.creation],
    [sourceAttachment.height],
    [sourceAttachment.width],
    [sourceAttachment.frames],
    [sourceAttachment.duration],
    [sourceAttachment.pages]
FROM openrowset (
        BULK 'Consent/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [sourceAttachment.JSON]  VARCHAR(MAX) '$.sourceAttachment'
    ) AS rowset
    CROSS APPLY openjson (rowset.[sourceAttachment.JSON]) with (
        [sourceAttachment.id]          NVARCHAR(100)       '$.id',
        [sourceAttachment.extension]   NVARCHAR(MAX)       '$.extension',
        [sourceAttachment.contentType] NVARCHAR(100)       '$.contentType',
        [sourceAttachment.language]    NVARCHAR(100)       '$.language',
        [sourceAttachment.data]        NVARCHAR(MAX)       '$.data',
        [sourceAttachment.url]         VARCHAR(256)        '$.url',
        [sourceAttachment.size]        NVARCHAR(MAX)       '$.size',
        [sourceAttachment.hash]        NVARCHAR(MAX)       '$.hash',
        [sourceAttachment.title]       NVARCHAR(4000)      '$.title',
        [sourceAttachment.creation]    VARCHAR(64)         '$.creation',
        [sourceAttachment.height]      bigint              '$.height',
        [sourceAttachment.width]       bigint              '$.width',
        [sourceAttachment.frames]      bigint              '$.frames',
        [sourceAttachment.duration]    float               '$.duration',
        [sourceAttachment.pages]       bigint              '$.pages'
    ) j

GO

CREATE VIEW fhir.ConsentSourceReference AS
SELECT
    [id],
    [sourceReference.JSON],
    [sourceReference.id],
    [sourceReference.extension],
    [sourceReference.reference],
    [sourceReference.type],
    [sourceReference.identifier.id],
    [sourceReference.identifier.extension],
    [sourceReference.identifier.use],
    [sourceReference.identifier.type],
    [sourceReference.identifier.system],
    [sourceReference.identifier.value],
    [sourceReference.identifier.period],
    [sourceReference.identifier.assigner],
    [sourceReference.display]
FROM openrowset (
        BULK 'Consent/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [sourceReference.JSON]  VARCHAR(MAX) '$.sourceReference'
    ) AS rowset
    CROSS APPLY openjson (rowset.[sourceReference.JSON]) with (
        [sourceReference.id]           NVARCHAR(100)       '$.id',
        [sourceReference.extension]    NVARCHAR(MAX)       '$.extension',
        [sourceReference.reference]    NVARCHAR(4000)      '$.reference',
        [sourceReference.type]         VARCHAR(256)        '$.type',
        [sourceReference.identifier.id] NVARCHAR(100)       '$.identifier.id',
        [sourceReference.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [sourceReference.identifier.use] NVARCHAR(64)        '$.identifier.use',
        [sourceReference.identifier.type] NVARCHAR(MAX)       '$.identifier.type',
        [sourceReference.identifier.system] VARCHAR(256)        '$.identifier.system',
        [sourceReference.identifier.value] NVARCHAR(4000)      '$.identifier.value',
        [sourceReference.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [sourceReference.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [sourceReference.display]      NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.ConsentPolicy AS
SELECT
    [id],
    [policy.JSON],
    [policy.id],
    [policy.extension],
    [policy.modifierExtension],
    [policy.authority],
    [policy.uri]
FROM openrowset (
        BULK 'Consent/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [policy.JSON]  VARCHAR(MAX) '$.policy'
    ) AS rowset
    CROSS APPLY openjson (rowset.[policy.JSON]) with (
        [policy.id]                    NVARCHAR(100)       '$.id',
        [policy.extension]             NVARCHAR(MAX)       '$.extension',
        [policy.modifierExtension]     NVARCHAR(MAX)       '$.modifierExtension',
        [policy.authority]             VARCHAR(256)        '$.authority',
        [policy.uri]                   VARCHAR(256)        '$.uri'
    ) j

GO

CREATE VIEW fhir.ConsentVerification AS
SELECT
    [id],
    [verification.JSON],
    [verification.id],
    [verification.extension],
    [verification.modifierExtension],
    [verification.verified],
    [verification.verificationType.id],
    [verification.verificationType.extension],
    [verification.verificationType.coding],
    [verification.verificationType.text],
    [verification.verifiedBy.id],
    [verification.verifiedBy.extension],
    [verification.verifiedBy.reference],
    [verification.verifiedBy.type],
    [verification.verifiedBy.identifier],
    [verification.verifiedBy.display],
    [verification.verifiedWith.id],
    [verification.verifiedWith.extension],
    [verification.verifiedWith.reference],
    [verification.verifiedWith.type],
    [verification.verifiedWith.identifier],
    [verification.verifiedWith.display],
    [verification.verificationDate]
FROM openrowset (
        BULK 'Consent/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [verification.JSON]  VARCHAR(MAX) '$.verification'
    ) AS rowset
    CROSS APPLY openjson (rowset.[verification.JSON]) with (
        [verification.id]              NVARCHAR(100)       '$.id',
        [verification.extension]       NVARCHAR(MAX)       '$.extension',
        [verification.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [verification.verified]        bit                 '$.verified',
        [verification.verificationType.id] NVARCHAR(100)       '$.verificationType.id',
        [verification.verificationType.extension] NVARCHAR(MAX)       '$.verificationType.extension',
        [verification.verificationType.coding] NVARCHAR(MAX)       '$.verificationType.coding',
        [verification.verificationType.text] NVARCHAR(4000)      '$.verificationType.text',
        [verification.verifiedBy.id]   NVARCHAR(100)       '$.verifiedBy.id',
        [verification.verifiedBy.extension] NVARCHAR(MAX)       '$.verifiedBy.extension',
        [verification.verifiedBy.reference] NVARCHAR(4000)      '$.verifiedBy.reference',
        [verification.verifiedBy.type] VARCHAR(256)        '$.verifiedBy.type',
        [verification.verifiedBy.identifier] NVARCHAR(MAX)       '$.verifiedBy.identifier',
        [verification.verifiedBy.display] NVARCHAR(4000)      '$.verifiedBy.display',
        [verification.verifiedWith.id] NVARCHAR(100)       '$.verifiedWith.id',
        [verification.verifiedWith.extension] NVARCHAR(MAX)       '$.verifiedWith.extension',
        [verification.verifiedWith.reference] NVARCHAR(4000)      '$.verifiedWith.reference',
        [verification.verifiedWith.type] VARCHAR(256)        '$.verifiedWith.type',
        [verification.verifiedWith.identifier] NVARCHAR(MAX)       '$.verifiedWith.identifier',
        [verification.verifiedWith.display] NVARCHAR(4000)      '$.verifiedWith.display',
        [verification.verificationDate] NVARCHAR(MAX)       '$.verificationDate' AS JSON
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[Contract] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [url] VARCHAR(256),
    [version] NVARCHAR(100),
    [status] NVARCHAR(100),
    [legalState.id] NVARCHAR(100),
    [legalState.extension] NVARCHAR(MAX),
    [legalState.coding] VARCHAR(MAX),
    [legalState.text] NVARCHAR(4000),
    [instantiatesCanonical.id] NVARCHAR(100),
    [instantiatesCanonical.extension] NVARCHAR(MAX),
    [instantiatesCanonical.reference] NVARCHAR(4000),
    [instantiatesCanonical.type] VARCHAR(256),
    [instantiatesCanonical.identifier.id] NVARCHAR(100),
    [instantiatesCanonical.identifier.extension] NVARCHAR(MAX),
    [instantiatesCanonical.identifier.use] NVARCHAR(64),
    [instantiatesCanonical.identifier.type] NVARCHAR(MAX),
    [instantiatesCanonical.identifier.system] VARCHAR(256),
    [instantiatesCanonical.identifier.value] NVARCHAR(4000),
    [instantiatesCanonical.identifier.period] NVARCHAR(MAX),
    [instantiatesCanonical.identifier.assigner] NVARCHAR(MAX),
    [instantiatesCanonical.display] NVARCHAR(4000),
    [instantiatesUri] VARCHAR(256),
    [contentDerivative.id] NVARCHAR(100),
    [contentDerivative.extension] NVARCHAR(MAX),
    [contentDerivative.coding] VARCHAR(MAX),
    [contentDerivative.text] NVARCHAR(4000),
    [issued] VARCHAR(64),
    [applies.id] NVARCHAR(100),
    [applies.extension] NVARCHAR(MAX),
    [applies.start] VARCHAR(64),
    [applies.end] VARCHAR(64),
    [expirationType.id] NVARCHAR(100),
    [expirationType.extension] NVARCHAR(MAX),
    [expirationType.coding] VARCHAR(MAX),
    [expirationType.text] NVARCHAR(4000),
    [subject] VARCHAR(MAX),
    [authority] VARCHAR(MAX),
    [domain] VARCHAR(MAX),
    [site] VARCHAR(MAX),
    [name] NVARCHAR(500),
    [title] NVARCHAR(4000),
    [subtitle] NVARCHAR(4000),
    [alias] VARCHAR(MAX),
    [author.id] NVARCHAR(100),
    [author.extension] NVARCHAR(MAX),
    [author.reference] NVARCHAR(4000),
    [author.type] VARCHAR(256),
    [author.identifier.id] NVARCHAR(100),
    [author.identifier.extension] NVARCHAR(MAX),
    [author.identifier.use] NVARCHAR(64),
    [author.identifier.type] NVARCHAR(MAX),
    [author.identifier.system] VARCHAR(256),
    [author.identifier.value] NVARCHAR(4000),
    [author.identifier.period] NVARCHAR(MAX),
    [author.identifier.assigner] NVARCHAR(MAX),
    [author.display] NVARCHAR(4000),
    [scope.id] NVARCHAR(100),
    [scope.extension] NVARCHAR(MAX),
    [scope.coding] VARCHAR(MAX),
    [scope.text] NVARCHAR(4000),
    [type.id] NVARCHAR(100),
    [type.extension] NVARCHAR(MAX),
    [type.coding] VARCHAR(MAX),
    [type.text] NVARCHAR(4000),
    [subType] VARCHAR(MAX),
    [contentDefinition.id] NVARCHAR(100),
    [contentDefinition.extension] NVARCHAR(MAX),
    [contentDefinition.modifierExtension] NVARCHAR(MAX),
    [contentDefinition.type.id] NVARCHAR(100),
    [contentDefinition.type.extension] NVARCHAR(MAX),
    [contentDefinition.type.coding] NVARCHAR(MAX),
    [contentDefinition.type.text] NVARCHAR(4000),
    [contentDefinition.subType.id] NVARCHAR(100),
    [contentDefinition.subType.extension] NVARCHAR(MAX),
    [contentDefinition.subType.coding] NVARCHAR(MAX),
    [contentDefinition.subType.text] NVARCHAR(4000),
    [contentDefinition.publisher.id] NVARCHAR(100),
    [contentDefinition.publisher.extension] NVARCHAR(MAX),
    [contentDefinition.publisher.reference] NVARCHAR(4000),
    [contentDefinition.publisher.type] VARCHAR(256),
    [contentDefinition.publisher.identifier] NVARCHAR(MAX),
    [contentDefinition.publisher.display] NVARCHAR(4000),
    [contentDefinition.publicationDate] VARCHAR(64),
    [contentDefinition.publicationStatus] NVARCHAR(100),
    [contentDefinition.copyright] NVARCHAR(MAX),
    [term] VARCHAR(MAX),
    [supportingInfo] VARCHAR(MAX),
    [relevantHistory] VARCHAR(MAX),
    [signer] VARCHAR(MAX),
    [friendly] VARCHAR(MAX),
    [legal] VARCHAR(MAX),
    [rule] VARCHAR(MAX),
    [topic.codeableConcept.id] NVARCHAR(100),
    [topic.codeableConcept.extension] NVARCHAR(MAX),
    [topic.codeableConcept.coding] VARCHAR(MAX),
    [topic.codeableConcept.text] NVARCHAR(4000),
    [topic.reference.id] NVARCHAR(100),
    [topic.reference.extension] NVARCHAR(MAX),
    [topic.reference.reference] NVARCHAR(4000),
    [topic.reference.type] VARCHAR(256),
    [topic.reference.identifier.id] NVARCHAR(100),
    [topic.reference.identifier.extension] NVARCHAR(MAX),
    [topic.reference.identifier.use] NVARCHAR(64),
    [topic.reference.identifier.type] NVARCHAR(MAX),
    [topic.reference.identifier.system] VARCHAR(256),
    [topic.reference.identifier.value] NVARCHAR(4000),
    [topic.reference.identifier.period] NVARCHAR(MAX),
    [topic.reference.identifier.assigner] NVARCHAR(MAX),
    [topic.reference.display] NVARCHAR(4000),
    [legallyBinding.attachment.id] NVARCHAR(100),
    [legallyBinding.attachment.extension] NVARCHAR(MAX),
    [legallyBinding.attachment.contentType] NVARCHAR(100),
    [legallyBinding.attachment.language] NVARCHAR(100),
    [legallyBinding.attachment.data] NVARCHAR(MAX),
    [legallyBinding.attachment.url] VARCHAR(256),
    [legallyBinding.attachment.size] NVARCHAR(MAX),
    [legallyBinding.attachment.hash] NVARCHAR(MAX),
    [legallyBinding.attachment.title] NVARCHAR(4000),
    [legallyBinding.attachment.creation] VARCHAR(64),
    [legallyBinding.attachment.height] bigint,
    [legallyBinding.attachment.width] bigint,
    [legallyBinding.attachment.frames] bigint,
    [legallyBinding.attachment.duration] float,
    [legallyBinding.attachment.pages] bigint,
    [legallyBinding.reference.id] NVARCHAR(100),
    [legallyBinding.reference.extension] NVARCHAR(MAX),
    [legallyBinding.reference.reference] NVARCHAR(4000),
    [legallyBinding.reference.type] VARCHAR(256),
    [legallyBinding.reference.identifier.id] NVARCHAR(100),
    [legallyBinding.reference.identifier.extension] NVARCHAR(MAX),
    [legallyBinding.reference.identifier.use] NVARCHAR(64),
    [legallyBinding.reference.identifier.type] NVARCHAR(MAX),
    [legallyBinding.reference.identifier.system] VARCHAR(256),
    [legallyBinding.reference.identifier.value] NVARCHAR(4000),
    [legallyBinding.reference.identifier.period] NVARCHAR(MAX),
    [legallyBinding.reference.identifier.assigner] NVARCHAR(MAX),
    [legallyBinding.reference.display] NVARCHAR(4000),
) WITH (
    LOCATION='/Contract/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.ContractIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'Contract/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.ContractSubject AS
SELECT
    [id],
    [subject.JSON],
    [subject.id],
    [subject.extension],
    [subject.reference],
    [subject.type],
    [subject.identifier.id],
    [subject.identifier.extension],
    [subject.identifier.use],
    [subject.identifier.type],
    [subject.identifier.system],
    [subject.identifier.value],
    [subject.identifier.period],
    [subject.identifier.assigner],
    [subject.display]
FROM openrowset (
        BULK 'Contract/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [subject.JSON]  VARCHAR(MAX) '$.subject'
    ) AS rowset
    CROSS APPLY openjson (rowset.[subject.JSON]) with (
        [subject.id]                   NVARCHAR(100)       '$.id',
        [subject.extension]            NVARCHAR(MAX)       '$.extension',
        [subject.reference]            NVARCHAR(4000)      '$.reference',
        [subject.type]                 VARCHAR(256)        '$.type',
        [subject.identifier.id]        NVARCHAR(100)       '$.identifier.id',
        [subject.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [subject.identifier.use]       NVARCHAR(64)        '$.identifier.use',
        [subject.identifier.type]      NVARCHAR(MAX)       '$.identifier.type',
        [subject.identifier.system]    VARCHAR(256)        '$.identifier.system',
        [subject.identifier.value]     NVARCHAR(4000)      '$.identifier.value',
        [subject.identifier.period]    NVARCHAR(MAX)       '$.identifier.period',
        [subject.identifier.assigner]  NVARCHAR(MAX)       '$.identifier.assigner',
        [subject.display]              NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.ContractAuthority AS
SELECT
    [id],
    [authority.JSON],
    [authority.id],
    [authority.extension],
    [authority.reference],
    [authority.type],
    [authority.identifier.id],
    [authority.identifier.extension],
    [authority.identifier.use],
    [authority.identifier.type],
    [authority.identifier.system],
    [authority.identifier.value],
    [authority.identifier.period],
    [authority.identifier.assigner],
    [authority.display]
FROM openrowset (
        BULK 'Contract/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [authority.JSON]  VARCHAR(MAX) '$.authority'
    ) AS rowset
    CROSS APPLY openjson (rowset.[authority.JSON]) with (
        [authority.id]                 NVARCHAR(100)       '$.id',
        [authority.extension]          NVARCHAR(MAX)       '$.extension',
        [authority.reference]          NVARCHAR(4000)      '$.reference',
        [authority.type]               VARCHAR(256)        '$.type',
        [authority.identifier.id]      NVARCHAR(100)       '$.identifier.id',
        [authority.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [authority.identifier.use]     NVARCHAR(64)        '$.identifier.use',
        [authority.identifier.type]    NVARCHAR(MAX)       '$.identifier.type',
        [authority.identifier.system]  VARCHAR(256)        '$.identifier.system',
        [authority.identifier.value]   NVARCHAR(4000)      '$.identifier.value',
        [authority.identifier.period]  NVARCHAR(MAX)       '$.identifier.period',
        [authority.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [authority.display]            NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.ContractDomain AS
SELECT
    [id],
    [domain.JSON],
    [domain.id],
    [domain.extension],
    [domain.reference],
    [domain.type],
    [domain.identifier.id],
    [domain.identifier.extension],
    [domain.identifier.use],
    [domain.identifier.type],
    [domain.identifier.system],
    [domain.identifier.value],
    [domain.identifier.period],
    [domain.identifier.assigner],
    [domain.display]
FROM openrowset (
        BULK 'Contract/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [domain.JSON]  VARCHAR(MAX) '$.domain'
    ) AS rowset
    CROSS APPLY openjson (rowset.[domain.JSON]) with (
        [domain.id]                    NVARCHAR(100)       '$.id',
        [domain.extension]             NVARCHAR(MAX)       '$.extension',
        [domain.reference]             NVARCHAR(4000)      '$.reference',
        [domain.type]                  VARCHAR(256)        '$.type',
        [domain.identifier.id]         NVARCHAR(100)       '$.identifier.id',
        [domain.identifier.extension]  NVARCHAR(MAX)       '$.identifier.extension',
        [domain.identifier.use]        NVARCHAR(64)        '$.identifier.use',
        [domain.identifier.type]       NVARCHAR(MAX)       '$.identifier.type',
        [domain.identifier.system]     VARCHAR(256)        '$.identifier.system',
        [domain.identifier.value]      NVARCHAR(4000)      '$.identifier.value',
        [domain.identifier.period]     NVARCHAR(MAX)       '$.identifier.period',
        [domain.identifier.assigner]   NVARCHAR(MAX)       '$.identifier.assigner',
        [domain.display]               NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.ContractSite AS
SELECT
    [id],
    [site.JSON],
    [site.id],
    [site.extension],
    [site.reference],
    [site.type],
    [site.identifier.id],
    [site.identifier.extension],
    [site.identifier.use],
    [site.identifier.type],
    [site.identifier.system],
    [site.identifier.value],
    [site.identifier.period],
    [site.identifier.assigner],
    [site.display]
FROM openrowset (
        BULK 'Contract/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [site.JSON]  VARCHAR(MAX) '$.site'
    ) AS rowset
    CROSS APPLY openjson (rowset.[site.JSON]) with (
        [site.id]                      NVARCHAR(100)       '$.id',
        [site.extension]               NVARCHAR(MAX)       '$.extension',
        [site.reference]               NVARCHAR(4000)      '$.reference',
        [site.type]                    VARCHAR(256)        '$.type',
        [site.identifier.id]           NVARCHAR(100)       '$.identifier.id',
        [site.identifier.extension]    NVARCHAR(MAX)       '$.identifier.extension',
        [site.identifier.use]          NVARCHAR(64)        '$.identifier.use',
        [site.identifier.type]         NVARCHAR(MAX)       '$.identifier.type',
        [site.identifier.system]       VARCHAR(256)        '$.identifier.system',
        [site.identifier.value]        NVARCHAR(4000)      '$.identifier.value',
        [site.identifier.period]       NVARCHAR(MAX)       '$.identifier.period',
        [site.identifier.assigner]     NVARCHAR(MAX)       '$.identifier.assigner',
        [site.display]                 NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.ContractAlias AS
SELECT
    [id],
    [alias.JSON],
    [alias]
FROM openrowset (
        BULK 'Contract/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [alias.JSON]  VARCHAR(MAX) '$.alias'
    ) AS rowset
    CROSS APPLY openjson (rowset.[alias.JSON]) with (
        [alias]                        NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.ContractSubType AS
SELECT
    [id],
    [subType.JSON],
    [subType.id],
    [subType.extension],
    [subType.coding],
    [subType.text]
FROM openrowset (
        BULK 'Contract/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [subType.JSON]  VARCHAR(MAX) '$.subType'
    ) AS rowset
    CROSS APPLY openjson (rowset.[subType.JSON]) with (
        [subType.id]                   NVARCHAR(100)       '$.id',
        [subType.extension]            NVARCHAR(MAX)       '$.extension',
        [subType.coding]               NVARCHAR(MAX)       '$.coding' AS JSON,
        [subType.text]                 NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.ContractTerm AS
SELECT
    [id],
    [term.JSON],
    [term.id],
    [term.extension],
    [term.modifierExtension],
    [term.identifier.id],
    [term.identifier.extension],
    [term.identifier.use],
    [term.identifier.type],
    [term.identifier.system],
    [term.identifier.value],
    [term.identifier.period],
    [term.identifier.assigner],
    [term.issued],
    [term.applies.id],
    [term.applies.extension],
    [term.applies.start],
    [term.applies.end],
    [term.type.id],
    [term.type.extension],
    [term.type.coding],
    [term.type.text],
    [term.subType.id],
    [term.subType.extension],
    [term.subType.coding],
    [term.subType.text],
    [term.text],
    [term.securityLabel],
    [term.offer.id],
    [term.offer.extension],
    [term.offer.modifierExtension],
    [term.offer.identifier],
    [term.offer.party],
    [term.offer.topic],
    [term.offer.type],
    [term.offer.decision],
    [term.offer.decisionMode],
    [term.offer.answer],
    [term.offer.text],
    [term.offer.linkId],
    [term.offer.securityLabelNumber],
    [term.asset],
    [term.action],
    [term.group],
    [term.topic.codeableConcept.id],
    [term.topic.codeableConcept.extension],
    [term.topic.codeableConcept.coding],
    [term.topic.codeableConcept.text],
    [term.topic.reference.id],
    [term.topic.reference.extension],
    [term.topic.reference.reference],
    [term.topic.reference.type],
    [term.topic.reference.identifier],
    [term.topic.reference.display]
FROM openrowset (
        BULK 'Contract/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [term.JSON]  VARCHAR(MAX) '$.term'
    ) AS rowset
    CROSS APPLY openjson (rowset.[term.JSON]) with (
        [term.id]                      NVARCHAR(100)       '$.id',
        [term.extension]               NVARCHAR(MAX)       '$.extension',
        [term.modifierExtension]       NVARCHAR(MAX)       '$.modifierExtension',
        [term.identifier.id]           NVARCHAR(100)       '$.identifier.id',
        [term.identifier.extension]    NVARCHAR(MAX)       '$.identifier.extension',
        [term.identifier.use]          NVARCHAR(64)        '$.identifier.use',
        [term.identifier.type]         NVARCHAR(MAX)       '$.identifier.type',
        [term.identifier.system]       VARCHAR(256)        '$.identifier.system',
        [term.identifier.value]        NVARCHAR(4000)      '$.identifier.value',
        [term.identifier.period]       NVARCHAR(MAX)       '$.identifier.period',
        [term.identifier.assigner]     NVARCHAR(MAX)       '$.identifier.assigner',
        [term.issued]                  VARCHAR(64)         '$.issued',
        [term.applies.id]              NVARCHAR(100)       '$.applies.id',
        [term.applies.extension]       NVARCHAR(MAX)       '$.applies.extension',
        [term.applies.start]           VARCHAR(64)         '$.applies.start',
        [term.applies.end]             VARCHAR(64)         '$.applies.end',
        [term.type.id]                 NVARCHAR(100)       '$.type.id',
        [term.type.extension]          NVARCHAR(MAX)       '$.type.extension',
        [term.type.coding]             NVARCHAR(MAX)       '$.type.coding',
        [term.type.text]               NVARCHAR(4000)      '$.type.text',
        [term.subType.id]              NVARCHAR(100)       '$.subType.id',
        [term.subType.extension]       NVARCHAR(MAX)       '$.subType.extension',
        [term.subType.coding]          NVARCHAR(MAX)       '$.subType.coding',
        [term.subType.text]            NVARCHAR(4000)      '$.subType.text',
        [term.text]                    NVARCHAR(4000)      '$.text',
        [term.securityLabel]           NVARCHAR(MAX)       '$.securityLabel' AS JSON,
        [term.offer.id]                NVARCHAR(100)       '$.offer.id',
        [term.offer.extension]         NVARCHAR(MAX)       '$.offer.extension',
        [term.offer.modifierExtension] NVARCHAR(MAX)       '$.offer.modifierExtension',
        [term.offer.identifier]        NVARCHAR(MAX)       '$.offer.identifier',
        [term.offer.party]             NVARCHAR(MAX)       '$.offer.party',
        [term.offer.topic]             NVARCHAR(MAX)       '$.offer.topic',
        [term.offer.type]              NVARCHAR(MAX)       '$.offer.type',
        [term.offer.decision]          NVARCHAR(MAX)       '$.offer.decision',
        [term.offer.decisionMode]      NVARCHAR(MAX)       '$.offer.decisionMode',
        [term.offer.answer]            NVARCHAR(MAX)       '$.offer.answer',
        [term.offer.text]              NVARCHAR(4000)      '$.offer.text',
        [term.offer.linkId]            NVARCHAR(MAX)       '$.offer.linkId',
        [term.offer.securityLabelNumber] NVARCHAR(MAX)       '$.offer.securityLabelNumber',
        [term.asset]                   NVARCHAR(MAX)       '$.asset' AS JSON,
        [term.action]                  NVARCHAR(MAX)       '$.action' AS JSON,
        [term.group]                   NVARCHAR(MAX)       '$.group' AS JSON,
        [term.topic.codeableConcept.id] NVARCHAR(100)       '$.topic.codeableConcept.id',
        [term.topic.codeableConcept.extension] NVARCHAR(MAX)       '$.topic.codeableConcept.extension',
        [term.topic.codeableConcept.coding] NVARCHAR(MAX)       '$.topic.codeableConcept.coding',
        [term.topic.codeableConcept.text] NVARCHAR(4000)      '$.topic.codeableConcept.text',
        [term.topic.reference.id]      NVARCHAR(100)       '$.topic.reference.id',
        [term.topic.reference.extension] NVARCHAR(MAX)       '$.topic.reference.extension',
        [term.topic.reference.reference] NVARCHAR(4000)      '$.topic.reference.reference',
        [term.topic.reference.type]    VARCHAR(256)        '$.topic.reference.type',
        [term.topic.reference.identifier] NVARCHAR(MAX)       '$.topic.reference.identifier',
        [term.topic.reference.display] NVARCHAR(4000)      '$.topic.reference.display'
    ) j

GO

CREATE VIEW fhir.ContractSupportingInfo AS
SELECT
    [id],
    [supportingInfo.JSON],
    [supportingInfo.id],
    [supportingInfo.extension],
    [supportingInfo.reference],
    [supportingInfo.type],
    [supportingInfo.identifier.id],
    [supportingInfo.identifier.extension],
    [supportingInfo.identifier.use],
    [supportingInfo.identifier.type],
    [supportingInfo.identifier.system],
    [supportingInfo.identifier.value],
    [supportingInfo.identifier.period],
    [supportingInfo.identifier.assigner],
    [supportingInfo.display]
FROM openrowset (
        BULK 'Contract/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [supportingInfo.JSON]  VARCHAR(MAX) '$.supportingInfo'
    ) AS rowset
    CROSS APPLY openjson (rowset.[supportingInfo.JSON]) with (
        [supportingInfo.id]            NVARCHAR(100)       '$.id',
        [supportingInfo.extension]     NVARCHAR(MAX)       '$.extension',
        [supportingInfo.reference]     NVARCHAR(4000)      '$.reference',
        [supportingInfo.type]          VARCHAR(256)        '$.type',
        [supportingInfo.identifier.id] NVARCHAR(100)       '$.identifier.id',
        [supportingInfo.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [supportingInfo.identifier.use] NVARCHAR(64)        '$.identifier.use',
        [supportingInfo.identifier.type] NVARCHAR(MAX)       '$.identifier.type',
        [supportingInfo.identifier.system] VARCHAR(256)        '$.identifier.system',
        [supportingInfo.identifier.value] NVARCHAR(4000)      '$.identifier.value',
        [supportingInfo.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [supportingInfo.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [supportingInfo.display]       NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.ContractRelevantHistory AS
SELECT
    [id],
    [relevantHistory.JSON],
    [relevantHistory.id],
    [relevantHistory.extension],
    [relevantHistory.reference],
    [relevantHistory.type],
    [relevantHistory.identifier.id],
    [relevantHistory.identifier.extension],
    [relevantHistory.identifier.use],
    [relevantHistory.identifier.type],
    [relevantHistory.identifier.system],
    [relevantHistory.identifier.value],
    [relevantHistory.identifier.period],
    [relevantHistory.identifier.assigner],
    [relevantHistory.display]
FROM openrowset (
        BULK 'Contract/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [relevantHistory.JSON]  VARCHAR(MAX) '$.relevantHistory'
    ) AS rowset
    CROSS APPLY openjson (rowset.[relevantHistory.JSON]) with (
        [relevantHistory.id]           NVARCHAR(100)       '$.id',
        [relevantHistory.extension]    NVARCHAR(MAX)       '$.extension',
        [relevantHistory.reference]    NVARCHAR(4000)      '$.reference',
        [relevantHistory.type]         VARCHAR(256)        '$.type',
        [relevantHistory.identifier.id] NVARCHAR(100)       '$.identifier.id',
        [relevantHistory.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [relevantHistory.identifier.use] NVARCHAR(64)        '$.identifier.use',
        [relevantHistory.identifier.type] NVARCHAR(MAX)       '$.identifier.type',
        [relevantHistory.identifier.system] VARCHAR(256)        '$.identifier.system',
        [relevantHistory.identifier.value] NVARCHAR(4000)      '$.identifier.value',
        [relevantHistory.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [relevantHistory.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [relevantHistory.display]      NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.ContractSigner AS
SELECT
    [id],
    [signer.JSON],
    [signer.id],
    [signer.extension],
    [signer.modifierExtension],
    [signer.type.id],
    [signer.type.extension],
    [signer.type.system],
    [signer.type.version],
    [signer.type.code],
    [signer.type.display],
    [signer.type.userSelected],
    [signer.party.id],
    [signer.party.extension],
    [signer.party.reference],
    [signer.party.type],
    [signer.party.identifier],
    [signer.party.display],
    [signer.signature]
FROM openrowset (
        BULK 'Contract/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [signer.JSON]  VARCHAR(MAX) '$.signer'
    ) AS rowset
    CROSS APPLY openjson (rowset.[signer.JSON]) with (
        [signer.id]                    NVARCHAR(100)       '$.id',
        [signer.extension]             NVARCHAR(MAX)       '$.extension',
        [signer.modifierExtension]     NVARCHAR(MAX)       '$.modifierExtension',
        [signer.type.id]               NVARCHAR(100)       '$.type.id',
        [signer.type.extension]        NVARCHAR(MAX)       '$.type.extension',
        [signer.type.system]           VARCHAR(256)        '$.type.system',
        [signer.type.version]          NVARCHAR(100)       '$.type.version',
        [signer.type.code]             NVARCHAR(4000)      '$.type.code',
        [signer.type.display]          NVARCHAR(4000)      '$.type.display',
        [signer.type.userSelected]     bit                 '$.type.userSelected',
        [signer.party.id]              NVARCHAR(100)       '$.party.id',
        [signer.party.extension]       NVARCHAR(MAX)       '$.party.extension',
        [signer.party.reference]       NVARCHAR(4000)      '$.party.reference',
        [signer.party.type]            VARCHAR(256)        '$.party.type',
        [signer.party.identifier]      NVARCHAR(MAX)       '$.party.identifier',
        [signer.party.display]         NVARCHAR(4000)      '$.party.display',
        [signer.signature]             NVARCHAR(MAX)       '$.signature' AS JSON
    ) j

GO

CREATE VIEW fhir.ContractFriendly AS
SELECT
    [id],
    [friendly.JSON],
    [friendly.id],
    [friendly.extension],
    [friendly.modifierExtension],
    [friendly.content.attachment.id],
    [friendly.content.attachment.extension],
    [friendly.content.attachment.contentType],
    [friendly.content.attachment.language],
    [friendly.content.attachment.data],
    [friendly.content.attachment.url],
    [friendly.content.attachment.size],
    [friendly.content.attachment.hash],
    [friendly.content.attachment.title],
    [friendly.content.attachment.creation],
    [friendly.content.attachment.height],
    [friendly.content.attachment.width],
    [friendly.content.attachment.frames],
    [friendly.content.attachment.duration],
    [friendly.content.attachment.pages],
    [friendly.content.reference.id],
    [friendly.content.reference.extension],
    [friendly.content.reference.reference],
    [friendly.content.reference.type],
    [friendly.content.reference.identifier],
    [friendly.content.reference.display]
FROM openrowset (
        BULK 'Contract/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [friendly.JSON]  VARCHAR(MAX) '$.friendly'
    ) AS rowset
    CROSS APPLY openjson (rowset.[friendly.JSON]) with (
        [friendly.id]                  NVARCHAR(100)       '$.id',
        [friendly.extension]           NVARCHAR(MAX)       '$.extension',
        [friendly.modifierExtension]   NVARCHAR(MAX)       '$.modifierExtension',
        [friendly.content.attachment.id] NVARCHAR(100)       '$.content.attachment.id',
        [friendly.content.attachment.extension] NVARCHAR(MAX)       '$.content.attachment.extension',
        [friendly.content.attachment.contentType] NVARCHAR(100)       '$.content.attachment.contentType',
        [friendly.content.attachment.language] NVARCHAR(100)       '$.content.attachment.language',
        [friendly.content.attachment.data] NVARCHAR(MAX)       '$.content.attachment.data',
        [friendly.content.attachment.url] VARCHAR(256)        '$.content.attachment.url',
        [friendly.content.attachment.size] NVARCHAR(MAX)       '$.content.attachment.size',
        [friendly.content.attachment.hash] NVARCHAR(MAX)       '$.content.attachment.hash',
        [friendly.content.attachment.title] NVARCHAR(4000)      '$.content.attachment.title',
        [friendly.content.attachment.creation] VARCHAR(64)         '$.content.attachment.creation',
        [friendly.content.attachment.height] bigint              '$.content.attachment.height',
        [friendly.content.attachment.width] bigint              '$.content.attachment.width',
        [friendly.content.attachment.frames] bigint              '$.content.attachment.frames',
        [friendly.content.attachment.duration] float               '$.content.attachment.duration',
        [friendly.content.attachment.pages] bigint              '$.content.attachment.pages',
        [friendly.content.reference.id] NVARCHAR(100)       '$.content.reference.id',
        [friendly.content.reference.extension] NVARCHAR(MAX)       '$.content.reference.extension',
        [friendly.content.reference.reference] NVARCHAR(4000)      '$.content.reference.reference',
        [friendly.content.reference.type] VARCHAR(256)        '$.content.reference.type',
        [friendly.content.reference.identifier] NVARCHAR(MAX)       '$.content.reference.identifier',
        [friendly.content.reference.display] NVARCHAR(4000)      '$.content.reference.display'
    ) j

GO

CREATE VIEW fhir.ContractLegal AS
SELECT
    [id],
    [legal.JSON],
    [legal.id],
    [legal.extension],
    [legal.modifierExtension],
    [legal.content.attachment.id],
    [legal.content.attachment.extension],
    [legal.content.attachment.contentType],
    [legal.content.attachment.language],
    [legal.content.attachment.data],
    [legal.content.attachment.url],
    [legal.content.attachment.size],
    [legal.content.attachment.hash],
    [legal.content.attachment.title],
    [legal.content.attachment.creation],
    [legal.content.attachment.height],
    [legal.content.attachment.width],
    [legal.content.attachment.frames],
    [legal.content.attachment.duration],
    [legal.content.attachment.pages],
    [legal.content.reference.id],
    [legal.content.reference.extension],
    [legal.content.reference.reference],
    [legal.content.reference.type],
    [legal.content.reference.identifier],
    [legal.content.reference.display]
FROM openrowset (
        BULK 'Contract/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [legal.JSON]  VARCHAR(MAX) '$.legal'
    ) AS rowset
    CROSS APPLY openjson (rowset.[legal.JSON]) with (
        [legal.id]                     NVARCHAR(100)       '$.id',
        [legal.extension]              NVARCHAR(MAX)       '$.extension',
        [legal.modifierExtension]      NVARCHAR(MAX)       '$.modifierExtension',
        [legal.content.attachment.id]  NVARCHAR(100)       '$.content.attachment.id',
        [legal.content.attachment.extension] NVARCHAR(MAX)       '$.content.attachment.extension',
        [legal.content.attachment.contentType] NVARCHAR(100)       '$.content.attachment.contentType',
        [legal.content.attachment.language] NVARCHAR(100)       '$.content.attachment.language',
        [legal.content.attachment.data] NVARCHAR(MAX)       '$.content.attachment.data',
        [legal.content.attachment.url] VARCHAR(256)        '$.content.attachment.url',
        [legal.content.attachment.size] NVARCHAR(MAX)       '$.content.attachment.size',
        [legal.content.attachment.hash] NVARCHAR(MAX)       '$.content.attachment.hash',
        [legal.content.attachment.title] NVARCHAR(4000)      '$.content.attachment.title',
        [legal.content.attachment.creation] VARCHAR(64)         '$.content.attachment.creation',
        [legal.content.attachment.height] bigint              '$.content.attachment.height',
        [legal.content.attachment.width] bigint              '$.content.attachment.width',
        [legal.content.attachment.frames] bigint              '$.content.attachment.frames',
        [legal.content.attachment.duration] float               '$.content.attachment.duration',
        [legal.content.attachment.pages] bigint              '$.content.attachment.pages',
        [legal.content.reference.id]   NVARCHAR(100)       '$.content.reference.id',
        [legal.content.reference.extension] NVARCHAR(MAX)       '$.content.reference.extension',
        [legal.content.reference.reference] NVARCHAR(4000)      '$.content.reference.reference',
        [legal.content.reference.type] VARCHAR(256)        '$.content.reference.type',
        [legal.content.reference.identifier] NVARCHAR(MAX)       '$.content.reference.identifier',
        [legal.content.reference.display] NVARCHAR(4000)      '$.content.reference.display'
    ) j

GO

CREATE VIEW fhir.ContractRule AS
SELECT
    [id],
    [rule.JSON],
    [rule.id],
    [rule.extension],
    [rule.modifierExtension],
    [rule.content.attachment.id],
    [rule.content.attachment.extension],
    [rule.content.attachment.contentType],
    [rule.content.attachment.language],
    [rule.content.attachment.data],
    [rule.content.attachment.url],
    [rule.content.attachment.size],
    [rule.content.attachment.hash],
    [rule.content.attachment.title],
    [rule.content.attachment.creation],
    [rule.content.attachment.height],
    [rule.content.attachment.width],
    [rule.content.attachment.frames],
    [rule.content.attachment.duration],
    [rule.content.attachment.pages],
    [rule.content.reference.id],
    [rule.content.reference.extension],
    [rule.content.reference.reference],
    [rule.content.reference.type],
    [rule.content.reference.identifier],
    [rule.content.reference.display]
FROM openrowset (
        BULK 'Contract/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [rule.JSON]  VARCHAR(MAX) '$.rule'
    ) AS rowset
    CROSS APPLY openjson (rowset.[rule.JSON]) with (
        [rule.id]                      NVARCHAR(100)       '$.id',
        [rule.extension]               NVARCHAR(MAX)       '$.extension',
        [rule.modifierExtension]       NVARCHAR(MAX)       '$.modifierExtension',
        [rule.content.attachment.id]   NVARCHAR(100)       '$.content.attachment.id',
        [rule.content.attachment.extension] NVARCHAR(MAX)       '$.content.attachment.extension',
        [rule.content.attachment.contentType] NVARCHAR(100)       '$.content.attachment.contentType',
        [rule.content.attachment.language] NVARCHAR(100)       '$.content.attachment.language',
        [rule.content.attachment.data] NVARCHAR(MAX)       '$.content.attachment.data',
        [rule.content.attachment.url]  VARCHAR(256)        '$.content.attachment.url',
        [rule.content.attachment.size] NVARCHAR(MAX)       '$.content.attachment.size',
        [rule.content.attachment.hash] NVARCHAR(MAX)       '$.content.attachment.hash',
        [rule.content.attachment.title] NVARCHAR(4000)      '$.content.attachment.title',
        [rule.content.attachment.creation] VARCHAR(64)         '$.content.attachment.creation',
        [rule.content.attachment.height] bigint              '$.content.attachment.height',
        [rule.content.attachment.width] bigint              '$.content.attachment.width',
        [rule.content.attachment.frames] bigint              '$.content.attachment.frames',
        [rule.content.attachment.duration] float               '$.content.attachment.duration',
        [rule.content.attachment.pages] bigint              '$.content.attachment.pages',
        [rule.content.reference.id]    NVARCHAR(100)       '$.content.reference.id',
        [rule.content.reference.extension] NVARCHAR(MAX)       '$.content.reference.extension',
        [rule.content.reference.reference] NVARCHAR(4000)      '$.content.reference.reference',
        [rule.content.reference.type]  VARCHAR(256)        '$.content.reference.type',
        [rule.content.reference.identifier] NVARCHAR(MAX)       '$.content.reference.identifier',
        [rule.content.reference.display] NVARCHAR(4000)      '$.content.reference.display'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[Coverage] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [status] NVARCHAR(100),
    [type.id] NVARCHAR(100),
    [type.extension] NVARCHAR(MAX),
    [type.coding] VARCHAR(MAX),
    [type.text] NVARCHAR(4000),
    [policyHolder.id] NVARCHAR(100),
    [policyHolder.extension] NVARCHAR(MAX),
    [policyHolder.reference] NVARCHAR(4000),
    [policyHolder.type] VARCHAR(256),
    [policyHolder.identifier.id] NVARCHAR(100),
    [policyHolder.identifier.extension] NVARCHAR(MAX),
    [policyHolder.identifier.use] NVARCHAR(64),
    [policyHolder.identifier.type] NVARCHAR(MAX),
    [policyHolder.identifier.system] VARCHAR(256),
    [policyHolder.identifier.value] NVARCHAR(4000),
    [policyHolder.identifier.period] NVARCHAR(MAX),
    [policyHolder.identifier.assigner] NVARCHAR(MAX),
    [policyHolder.display] NVARCHAR(4000),
    [subscriber.id] NVARCHAR(100),
    [subscriber.extension] NVARCHAR(MAX),
    [subscriber.reference] NVARCHAR(4000),
    [subscriber.type] VARCHAR(256),
    [subscriber.identifier.id] NVARCHAR(100),
    [subscriber.identifier.extension] NVARCHAR(MAX),
    [subscriber.identifier.use] NVARCHAR(64),
    [subscriber.identifier.type] NVARCHAR(MAX),
    [subscriber.identifier.system] VARCHAR(256),
    [subscriber.identifier.value] NVARCHAR(4000),
    [subscriber.identifier.period] NVARCHAR(MAX),
    [subscriber.identifier.assigner] NVARCHAR(MAX),
    [subscriber.display] NVARCHAR(4000),
    [subscriberId.id] NVARCHAR(100),
    [subscriberId.extension] NVARCHAR(MAX),
    [subscriberId.use] NVARCHAR(64),
    [subscriberId.type.id] NVARCHAR(100),
    [subscriberId.type.extension] NVARCHAR(MAX),
    [subscriberId.type.coding] NVARCHAR(MAX),
    [subscriberId.type.text] NVARCHAR(4000),
    [subscriberId.system] VARCHAR(256),
    [subscriberId.value] NVARCHAR(4000),
    [subscriberId.period.id] NVARCHAR(100),
    [subscriberId.period.extension] NVARCHAR(MAX),
    [subscriberId.period.start] VARCHAR(64),
    [subscriberId.period.end] VARCHAR(64),
    [subscriberId.assigner.id] NVARCHAR(100),
    [subscriberId.assigner.extension] NVARCHAR(MAX),
    [subscriberId.assigner.reference] NVARCHAR(4000),
    [subscriberId.assigner.type] VARCHAR(256),
    [subscriberId.assigner.identifier] NVARCHAR(MAX),
    [subscriberId.assigner.display] NVARCHAR(4000),
    [beneficiary.id] NVARCHAR(100),
    [beneficiary.extension] NVARCHAR(MAX),
    [beneficiary.reference] NVARCHAR(4000),
    [beneficiary.type] VARCHAR(256),
    [beneficiary.identifier.id] NVARCHAR(100),
    [beneficiary.identifier.extension] NVARCHAR(MAX),
    [beneficiary.identifier.use] NVARCHAR(64),
    [beneficiary.identifier.type] NVARCHAR(MAX),
    [beneficiary.identifier.system] VARCHAR(256),
    [beneficiary.identifier.value] NVARCHAR(4000),
    [beneficiary.identifier.period] NVARCHAR(MAX),
    [beneficiary.identifier.assigner] NVARCHAR(MAX),
    [beneficiary.display] NVARCHAR(4000),
    [dependent] NVARCHAR(500),
    [relationship.id] NVARCHAR(100),
    [relationship.extension] NVARCHAR(MAX),
    [relationship.coding] VARCHAR(MAX),
    [relationship.text] NVARCHAR(4000),
    [period.id] NVARCHAR(100),
    [period.extension] NVARCHAR(MAX),
    [period.start] VARCHAR(64),
    [period.end] VARCHAR(64),
    [payor] VARCHAR(MAX),
    [class] VARCHAR(MAX),
    [order] bigint,
    [network] NVARCHAR(500),
    [costToBeneficiary] VARCHAR(MAX),
    [subrogation] bit,
    [contract] VARCHAR(MAX),
) WITH (
    LOCATION='/Coverage/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.CoverageIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'Coverage/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.CoveragePayor AS
SELECT
    [id],
    [payor.JSON],
    [payor.id],
    [payor.extension],
    [payor.reference],
    [payor.type],
    [payor.identifier.id],
    [payor.identifier.extension],
    [payor.identifier.use],
    [payor.identifier.type],
    [payor.identifier.system],
    [payor.identifier.value],
    [payor.identifier.period],
    [payor.identifier.assigner],
    [payor.display]
FROM openrowset (
        BULK 'Coverage/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [payor.JSON]  VARCHAR(MAX) '$.payor'
    ) AS rowset
    CROSS APPLY openjson (rowset.[payor.JSON]) with (
        [payor.id]                     NVARCHAR(100)       '$.id',
        [payor.extension]              NVARCHAR(MAX)       '$.extension',
        [payor.reference]              NVARCHAR(4000)      '$.reference',
        [payor.type]                   VARCHAR(256)        '$.type',
        [payor.identifier.id]          NVARCHAR(100)       '$.identifier.id',
        [payor.identifier.extension]   NVARCHAR(MAX)       '$.identifier.extension',
        [payor.identifier.use]         NVARCHAR(64)        '$.identifier.use',
        [payor.identifier.type]        NVARCHAR(MAX)       '$.identifier.type',
        [payor.identifier.system]      VARCHAR(256)        '$.identifier.system',
        [payor.identifier.value]       NVARCHAR(4000)      '$.identifier.value',
        [payor.identifier.period]      NVARCHAR(MAX)       '$.identifier.period',
        [payor.identifier.assigner]    NVARCHAR(MAX)       '$.identifier.assigner',
        [payor.display]                NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.CoverageClass AS
SELECT
    [id],
    [class.JSON],
    [class.id],
    [class.extension],
    [class.modifierExtension],
    [class.type.id],
    [class.type.extension],
    [class.type.coding],
    [class.type.text],
    [class.value],
    [class.name]
FROM openrowset (
        BULK 'Coverage/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [class.JSON]  VARCHAR(MAX) '$.class'
    ) AS rowset
    CROSS APPLY openjson (rowset.[class.JSON]) with (
        [class.id]                     NVARCHAR(100)       '$.id',
        [class.extension]              NVARCHAR(MAX)       '$.extension',
        [class.modifierExtension]      NVARCHAR(MAX)       '$.modifierExtension',
        [class.type.id]                NVARCHAR(100)       '$.type.id',
        [class.type.extension]         NVARCHAR(MAX)       '$.type.extension',
        [class.type.coding]            NVARCHAR(MAX)       '$.type.coding',
        [class.type.text]              NVARCHAR(4000)      '$.type.text',
        [class.value]                  NVARCHAR(4000)      '$.value',
        [class.name]                   NVARCHAR(500)       '$.name'
    ) j

GO

CREATE VIEW fhir.CoverageCostToBeneficiary AS
SELECT
    [id],
    [costToBeneficiary.JSON],
    [costToBeneficiary.id],
    [costToBeneficiary.extension],
    [costToBeneficiary.modifierExtension],
    [costToBeneficiary.type.id],
    [costToBeneficiary.type.extension],
    [costToBeneficiary.type.coding],
    [costToBeneficiary.type.text],
    [costToBeneficiary.valueQuantity.id],
    [costToBeneficiary.valueQuantity.extension],
    [costToBeneficiary.valueQuantity.value],
    [costToBeneficiary.valueQuantity.comparator],
    [costToBeneficiary.valueQuantity.unit],
    [costToBeneficiary.valueQuantity.system],
    [costToBeneficiary.valueQuantity.code],
    [costToBeneficiary.exception],
    [costToBeneficiary.value.quantity.id],
    [costToBeneficiary.value.quantity.extension],
    [costToBeneficiary.value.quantity.value],
    [costToBeneficiary.value.quantity.comparator],
    [costToBeneficiary.value.quantity.unit],
    [costToBeneficiary.value.quantity.system],
    [costToBeneficiary.value.quantity.code],
    [costToBeneficiary.value.money.id],
    [costToBeneficiary.value.money.extension],
    [costToBeneficiary.value.money.value],
    [costToBeneficiary.value.money.currency]
FROM openrowset (
        BULK 'Coverage/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [costToBeneficiary.JSON]  VARCHAR(MAX) '$.costToBeneficiary'
    ) AS rowset
    CROSS APPLY openjson (rowset.[costToBeneficiary.JSON]) with (
        [costToBeneficiary.id]         NVARCHAR(100)       '$.id',
        [costToBeneficiary.extension]  NVARCHAR(MAX)       '$.extension',
        [costToBeneficiary.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [costToBeneficiary.type.id]    NVARCHAR(100)       '$.type.id',
        [costToBeneficiary.type.extension] NVARCHAR(MAX)       '$.type.extension',
        [costToBeneficiary.type.coding] NVARCHAR(MAX)       '$.type.coding',
        [costToBeneficiary.type.text]  NVARCHAR(4000)      '$.type.text',
        [costToBeneficiary.valueQuantity.id] NVARCHAR(100)       '$.valueQuantity.id',
        [costToBeneficiary.valueQuantity.extension] NVARCHAR(MAX)       '$.valueQuantity.extension',
        [costToBeneficiary.valueQuantity.value] float               '$.valueQuantity.value',
        [costToBeneficiary.valueQuantity.comparator] NVARCHAR(64)        '$.valueQuantity.comparator',
        [costToBeneficiary.valueQuantity.unit] NVARCHAR(100)       '$.valueQuantity.unit',
        [costToBeneficiary.valueQuantity.system] VARCHAR(256)        '$.valueQuantity.system',
        [costToBeneficiary.valueQuantity.code] NVARCHAR(4000)      '$.valueQuantity.code',
        [costToBeneficiary.exception]  NVARCHAR(MAX)       '$.exception' AS JSON,
        [costToBeneficiary.value.quantity.id] NVARCHAR(100)       '$.value.quantity.id',
        [costToBeneficiary.value.quantity.extension] NVARCHAR(MAX)       '$.value.quantity.extension',
        [costToBeneficiary.value.quantity.value] float               '$.value.quantity.value',
        [costToBeneficiary.value.quantity.comparator] NVARCHAR(64)        '$.value.quantity.comparator',
        [costToBeneficiary.value.quantity.unit] NVARCHAR(100)       '$.value.quantity.unit',
        [costToBeneficiary.value.quantity.system] VARCHAR(256)        '$.value.quantity.system',
        [costToBeneficiary.value.quantity.code] NVARCHAR(4000)      '$.value.quantity.code',
        [costToBeneficiary.value.money.id] NVARCHAR(100)       '$.value.money.id',
        [costToBeneficiary.value.money.extension] NVARCHAR(MAX)       '$.value.money.extension',
        [costToBeneficiary.value.money.value] float               '$.value.money.value',
        [costToBeneficiary.value.money.currency] NVARCHAR(100)       '$.value.money.currency'
    ) j

GO

CREATE VIEW fhir.CoverageContract AS
SELECT
    [id],
    [contract.JSON],
    [contract.id],
    [contract.extension],
    [contract.reference],
    [contract.type],
    [contract.identifier.id],
    [contract.identifier.extension],
    [contract.identifier.use],
    [contract.identifier.type],
    [contract.identifier.system],
    [contract.identifier.value],
    [contract.identifier.period],
    [contract.identifier.assigner],
    [contract.display]
FROM openrowset (
        BULK 'Coverage/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [contract.JSON]  VARCHAR(MAX) '$.contract'
    ) AS rowset
    CROSS APPLY openjson (rowset.[contract.JSON]) with (
        [contract.id]                  NVARCHAR(100)       '$.id',
        [contract.extension]           NVARCHAR(MAX)       '$.extension',
        [contract.reference]           NVARCHAR(4000)      '$.reference',
        [contract.type]                VARCHAR(256)        '$.type',
        [contract.identifier.id]       NVARCHAR(100)       '$.identifier.id',
        [contract.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [contract.identifier.use]      NVARCHAR(64)        '$.identifier.use',
        [contract.identifier.type]     NVARCHAR(MAX)       '$.identifier.type',
        [contract.identifier.system]   VARCHAR(256)        '$.identifier.system',
        [contract.identifier.value]    NVARCHAR(4000)      '$.identifier.value',
        [contract.identifier.period]   NVARCHAR(MAX)       '$.identifier.period',
        [contract.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [contract.display]             NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[CoverageEligibilityRequest] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [status] NVARCHAR(100),
    [priority.id] NVARCHAR(100),
    [priority.extension] NVARCHAR(MAX),
    [priority.coding] VARCHAR(MAX),
    [priority.text] NVARCHAR(4000),
    [purpose] VARCHAR(MAX),
    [patient.id] NVARCHAR(100),
    [patient.extension] NVARCHAR(MAX),
    [patient.reference] NVARCHAR(4000),
    [patient.type] VARCHAR(256),
    [patient.identifier.id] NVARCHAR(100),
    [patient.identifier.extension] NVARCHAR(MAX),
    [patient.identifier.use] NVARCHAR(64),
    [patient.identifier.type] NVARCHAR(MAX),
    [patient.identifier.system] VARCHAR(256),
    [patient.identifier.value] NVARCHAR(4000),
    [patient.identifier.period] NVARCHAR(MAX),
    [patient.identifier.assigner] NVARCHAR(MAX),
    [patient.display] NVARCHAR(4000),
    [created] VARCHAR(64),
    [enterer.id] NVARCHAR(100),
    [enterer.extension] NVARCHAR(MAX),
    [enterer.reference] NVARCHAR(4000),
    [enterer.type] VARCHAR(256),
    [enterer.identifier.id] NVARCHAR(100),
    [enterer.identifier.extension] NVARCHAR(MAX),
    [enterer.identifier.use] NVARCHAR(64),
    [enterer.identifier.type] NVARCHAR(MAX),
    [enterer.identifier.system] VARCHAR(256),
    [enterer.identifier.value] NVARCHAR(4000),
    [enterer.identifier.period] NVARCHAR(MAX),
    [enterer.identifier.assigner] NVARCHAR(MAX),
    [enterer.display] NVARCHAR(4000),
    [provider.id] NVARCHAR(100),
    [provider.extension] NVARCHAR(MAX),
    [provider.reference] NVARCHAR(4000),
    [provider.type] VARCHAR(256),
    [provider.identifier.id] NVARCHAR(100),
    [provider.identifier.extension] NVARCHAR(MAX),
    [provider.identifier.use] NVARCHAR(64),
    [provider.identifier.type] NVARCHAR(MAX),
    [provider.identifier.system] VARCHAR(256),
    [provider.identifier.value] NVARCHAR(4000),
    [provider.identifier.period] NVARCHAR(MAX),
    [provider.identifier.assigner] NVARCHAR(MAX),
    [provider.display] NVARCHAR(4000),
    [insurer.id] NVARCHAR(100),
    [insurer.extension] NVARCHAR(MAX),
    [insurer.reference] NVARCHAR(4000),
    [insurer.type] VARCHAR(256),
    [insurer.identifier.id] NVARCHAR(100),
    [insurer.identifier.extension] NVARCHAR(MAX),
    [insurer.identifier.use] NVARCHAR(64),
    [insurer.identifier.type] NVARCHAR(MAX),
    [insurer.identifier.system] VARCHAR(256),
    [insurer.identifier.value] NVARCHAR(4000),
    [insurer.identifier.period] NVARCHAR(MAX),
    [insurer.identifier.assigner] NVARCHAR(MAX),
    [insurer.display] NVARCHAR(4000),
    [facility.id] NVARCHAR(100),
    [facility.extension] NVARCHAR(MAX),
    [facility.reference] NVARCHAR(4000),
    [facility.type] VARCHAR(256),
    [facility.identifier.id] NVARCHAR(100),
    [facility.identifier.extension] NVARCHAR(MAX),
    [facility.identifier.use] NVARCHAR(64),
    [facility.identifier.type] NVARCHAR(MAX),
    [facility.identifier.system] VARCHAR(256),
    [facility.identifier.value] NVARCHAR(4000),
    [facility.identifier.period] NVARCHAR(MAX),
    [facility.identifier.assigner] NVARCHAR(MAX),
    [facility.display] NVARCHAR(4000),
    [supportingInfo] VARCHAR(MAX),
    [insurance] VARCHAR(MAX),
    [item] VARCHAR(MAX),
    [serviced.date] VARCHAR(64),
    [serviced.period.id] NVARCHAR(100),
    [serviced.period.extension] NVARCHAR(MAX),
    [serviced.period.start] VARCHAR(64),
    [serviced.period.end] VARCHAR(64),
) WITH (
    LOCATION='/CoverageEligibilityRequest/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.CoverageEligibilityRequestIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'CoverageEligibilityRequest/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.CoverageEligibilityRequestPurpose AS
SELECT
    [id],
    [purpose.JSON],
    [purpose]
FROM openrowset (
        BULK 'CoverageEligibilityRequest/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [purpose.JSON]  VARCHAR(MAX) '$.purpose'
    ) AS rowset
    CROSS APPLY openjson (rowset.[purpose.JSON]) with (
        [purpose]                      NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.CoverageEligibilityRequestSupportingInfo AS
SELECT
    [id],
    [supportingInfo.JSON],
    [supportingInfo.id],
    [supportingInfo.extension],
    [supportingInfo.modifierExtension],
    [supportingInfo.sequence],
    [supportingInfo.information.id],
    [supportingInfo.information.extension],
    [supportingInfo.information.reference],
    [supportingInfo.information.type],
    [supportingInfo.information.identifier],
    [supportingInfo.information.display],
    [supportingInfo.appliesToAll]
FROM openrowset (
        BULK 'CoverageEligibilityRequest/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [supportingInfo.JSON]  VARCHAR(MAX) '$.supportingInfo'
    ) AS rowset
    CROSS APPLY openjson (rowset.[supportingInfo.JSON]) with (
        [supportingInfo.id]            NVARCHAR(100)       '$.id',
        [supportingInfo.extension]     NVARCHAR(MAX)       '$.extension',
        [supportingInfo.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [supportingInfo.sequence]      bigint              '$.sequence',
        [supportingInfo.information.id] NVARCHAR(100)       '$.information.id',
        [supportingInfo.information.extension] NVARCHAR(MAX)       '$.information.extension',
        [supportingInfo.information.reference] NVARCHAR(4000)      '$.information.reference',
        [supportingInfo.information.type] VARCHAR(256)        '$.information.type',
        [supportingInfo.information.identifier] NVARCHAR(MAX)       '$.information.identifier',
        [supportingInfo.information.display] NVARCHAR(4000)      '$.information.display',
        [supportingInfo.appliesToAll]  bit                 '$.appliesToAll'
    ) j

GO

CREATE VIEW fhir.CoverageEligibilityRequestInsurance AS
SELECT
    [id],
    [insurance.JSON],
    [insurance.id],
    [insurance.extension],
    [insurance.modifierExtension],
    [insurance.focal],
    [insurance.coverage.id],
    [insurance.coverage.extension],
    [insurance.coverage.reference],
    [insurance.coverage.type],
    [insurance.coverage.identifier],
    [insurance.coverage.display],
    [insurance.businessArrangement]
FROM openrowset (
        BULK 'CoverageEligibilityRequest/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [insurance.JSON]  VARCHAR(MAX) '$.insurance'
    ) AS rowset
    CROSS APPLY openjson (rowset.[insurance.JSON]) with (
        [insurance.id]                 NVARCHAR(100)       '$.id',
        [insurance.extension]          NVARCHAR(MAX)       '$.extension',
        [insurance.modifierExtension]  NVARCHAR(MAX)       '$.modifierExtension',
        [insurance.focal]              bit                 '$.focal',
        [insurance.coverage.id]        NVARCHAR(100)       '$.coverage.id',
        [insurance.coverage.extension] NVARCHAR(MAX)       '$.coverage.extension',
        [insurance.coverage.reference] NVARCHAR(4000)      '$.coverage.reference',
        [insurance.coverage.type]      VARCHAR(256)        '$.coverage.type',
        [insurance.coverage.identifier] NVARCHAR(MAX)       '$.coverage.identifier',
        [insurance.coverage.display]   NVARCHAR(4000)      '$.coverage.display',
        [insurance.businessArrangement] NVARCHAR(4000)      '$.businessArrangement'
    ) j

GO

CREATE VIEW fhir.CoverageEligibilityRequestItem AS
SELECT
    [id],
    [item.JSON],
    [item.id],
    [item.extension],
    [item.modifierExtension],
    [item.supportingInfoSequence],
    [item.category.id],
    [item.category.extension],
    [item.category.coding],
    [item.category.text],
    [item.productOrService.id],
    [item.productOrService.extension],
    [item.productOrService.coding],
    [item.productOrService.text],
    [item.modifier],
    [item.provider.id],
    [item.provider.extension],
    [item.provider.reference],
    [item.provider.type],
    [item.provider.identifier],
    [item.provider.display],
    [item.quantity.id],
    [item.quantity.extension],
    [item.quantity.value],
    [item.quantity.comparator],
    [item.quantity.unit],
    [item.quantity.system],
    [item.quantity.code],
    [item.unitPrice.id],
    [item.unitPrice.extension],
    [item.unitPrice.value],
    [item.unitPrice.currency],
    [item.facility.id],
    [item.facility.extension],
    [item.facility.reference],
    [item.facility.type],
    [item.facility.identifier],
    [item.facility.display],
    [item.diagnosis],
    [item.detail]
FROM openrowset (
        BULK 'CoverageEligibilityRequest/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [item.JSON]  VARCHAR(MAX) '$.item'
    ) AS rowset
    CROSS APPLY openjson (rowset.[item.JSON]) with (
        [item.id]                      NVARCHAR(100)       '$.id',
        [item.extension]               NVARCHAR(MAX)       '$.extension',
        [item.modifierExtension]       NVARCHAR(MAX)       '$.modifierExtension',
        [item.supportingInfoSequence]  NVARCHAR(MAX)       '$.supportingInfoSequence' AS JSON,
        [item.category.id]             NVARCHAR(100)       '$.category.id',
        [item.category.extension]      NVARCHAR(MAX)       '$.category.extension',
        [item.category.coding]         NVARCHAR(MAX)       '$.category.coding',
        [item.category.text]           NVARCHAR(4000)      '$.category.text',
        [item.productOrService.id]     NVARCHAR(100)       '$.productOrService.id',
        [item.productOrService.extension] NVARCHAR(MAX)       '$.productOrService.extension',
        [item.productOrService.coding] NVARCHAR(MAX)       '$.productOrService.coding',
        [item.productOrService.text]   NVARCHAR(4000)      '$.productOrService.text',
        [item.modifier]                NVARCHAR(MAX)       '$.modifier' AS JSON,
        [item.provider.id]             NVARCHAR(100)       '$.provider.id',
        [item.provider.extension]      NVARCHAR(MAX)       '$.provider.extension',
        [item.provider.reference]      NVARCHAR(4000)      '$.provider.reference',
        [item.provider.type]           VARCHAR(256)        '$.provider.type',
        [item.provider.identifier]     NVARCHAR(MAX)       '$.provider.identifier',
        [item.provider.display]        NVARCHAR(4000)      '$.provider.display',
        [item.quantity.id]             NVARCHAR(100)       '$.quantity.id',
        [item.quantity.extension]      NVARCHAR(MAX)       '$.quantity.extension',
        [item.quantity.value]          float               '$.quantity.value',
        [item.quantity.comparator]     NVARCHAR(64)        '$.quantity.comparator',
        [item.quantity.unit]           NVARCHAR(100)       '$.quantity.unit',
        [item.quantity.system]         VARCHAR(256)        '$.quantity.system',
        [item.quantity.code]           NVARCHAR(4000)      '$.quantity.code',
        [item.unitPrice.id]            NVARCHAR(100)       '$.unitPrice.id',
        [item.unitPrice.extension]     NVARCHAR(MAX)       '$.unitPrice.extension',
        [item.unitPrice.value]         float               '$.unitPrice.value',
        [item.unitPrice.currency]      NVARCHAR(100)       '$.unitPrice.currency',
        [item.facility.id]             NVARCHAR(100)       '$.facility.id',
        [item.facility.extension]      NVARCHAR(MAX)       '$.facility.extension',
        [item.facility.reference]      NVARCHAR(4000)      '$.facility.reference',
        [item.facility.type]           VARCHAR(256)        '$.facility.type',
        [item.facility.identifier]     NVARCHAR(MAX)       '$.facility.identifier',
        [item.facility.display]        NVARCHAR(4000)      '$.facility.display',
        [item.diagnosis]               NVARCHAR(MAX)       '$.diagnosis' AS JSON,
        [item.detail]                  NVARCHAR(MAX)       '$.detail' AS JSON
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[CoverageEligibilityResponse] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [status] NVARCHAR(100),
    [purpose] VARCHAR(MAX),
    [patient.id] NVARCHAR(100),
    [patient.extension] NVARCHAR(MAX),
    [patient.reference] NVARCHAR(4000),
    [patient.type] VARCHAR(256),
    [patient.identifier.id] NVARCHAR(100),
    [patient.identifier.extension] NVARCHAR(MAX),
    [patient.identifier.use] NVARCHAR(64),
    [patient.identifier.type] NVARCHAR(MAX),
    [patient.identifier.system] VARCHAR(256),
    [patient.identifier.value] NVARCHAR(4000),
    [patient.identifier.period] NVARCHAR(MAX),
    [patient.identifier.assigner] NVARCHAR(MAX),
    [patient.display] NVARCHAR(4000),
    [created] VARCHAR(64),
    [requestor.id] NVARCHAR(100),
    [requestor.extension] NVARCHAR(MAX),
    [requestor.reference] NVARCHAR(4000),
    [requestor.type] VARCHAR(256),
    [requestor.identifier.id] NVARCHAR(100),
    [requestor.identifier.extension] NVARCHAR(MAX),
    [requestor.identifier.use] NVARCHAR(64),
    [requestor.identifier.type] NVARCHAR(MAX),
    [requestor.identifier.system] VARCHAR(256),
    [requestor.identifier.value] NVARCHAR(4000),
    [requestor.identifier.period] NVARCHAR(MAX),
    [requestor.identifier.assigner] NVARCHAR(MAX),
    [requestor.display] NVARCHAR(4000),
    [request.id] NVARCHAR(100),
    [request.extension] NVARCHAR(MAX),
    [request.reference] NVARCHAR(4000),
    [request.type] VARCHAR(256),
    [request.identifier.id] NVARCHAR(100),
    [request.identifier.extension] NVARCHAR(MAX),
    [request.identifier.use] NVARCHAR(64),
    [request.identifier.type] NVARCHAR(MAX),
    [request.identifier.system] VARCHAR(256),
    [request.identifier.value] NVARCHAR(4000),
    [request.identifier.period] NVARCHAR(MAX),
    [request.identifier.assigner] NVARCHAR(MAX),
    [request.display] NVARCHAR(4000),
    [outcome] NVARCHAR(100),
    [disposition] NVARCHAR(4000),
    [insurer.id] NVARCHAR(100),
    [insurer.extension] NVARCHAR(MAX),
    [insurer.reference] NVARCHAR(4000),
    [insurer.type] VARCHAR(256),
    [insurer.identifier.id] NVARCHAR(100),
    [insurer.identifier.extension] NVARCHAR(MAX),
    [insurer.identifier.use] NVARCHAR(64),
    [insurer.identifier.type] NVARCHAR(MAX),
    [insurer.identifier.system] VARCHAR(256),
    [insurer.identifier.value] NVARCHAR(4000),
    [insurer.identifier.period] NVARCHAR(MAX),
    [insurer.identifier.assigner] NVARCHAR(MAX),
    [insurer.display] NVARCHAR(4000),
    [insurance] VARCHAR(MAX),
    [preAuthRef] NVARCHAR(4000),
    [form.id] NVARCHAR(100),
    [form.extension] NVARCHAR(MAX),
    [form.coding] VARCHAR(MAX),
    [form.text] NVARCHAR(4000),
    [error] VARCHAR(MAX),
    [serviced.date] VARCHAR(64),
    [serviced.period.id] NVARCHAR(100),
    [serviced.period.extension] NVARCHAR(MAX),
    [serviced.period.start] VARCHAR(64),
    [serviced.period.end] VARCHAR(64),
) WITH (
    LOCATION='/CoverageEligibilityResponse/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.CoverageEligibilityResponseIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'CoverageEligibilityResponse/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.CoverageEligibilityResponsePurpose AS
SELECT
    [id],
    [purpose.JSON],
    [purpose]
FROM openrowset (
        BULK 'CoverageEligibilityResponse/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [purpose.JSON]  VARCHAR(MAX) '$.purpose'
    ) AS rowset
    CROSS APPLY openjson (rowset.[purpose.JSON]) with (
        [purpose]                      NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.CoverageEligibilityResponseInsurance AS
SELECT
    [id],
    [insurance.JSON],
    [insurance.id],
    [insurance.extension],
    [insurance.modifierExtension],
    [insurance.coverage.id],
    [insurance.coverage.extension],
    [insurance.coverage.reference],
    [insurance.coverage.type],
    [insurance.coverage.identifier],
    [insurance.coverage.display],
    [insurance.inforce],
    [insurance.benefitPeriod.id],
    [insurance.benefitPeriod.extension],
    [insurance.benefitPeriod.start],
    [insurance.benefitPeriod.end],
    [insurance.item]
FROM openrowset (
        BULK 'CoverageEligibilityResponse/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [insurance.JSON]  VARCHAR(MAX) '$.insurance'
    ) AS rowset
    CROSS APPLY openjson (rowset.[insurance.JSON]) with (
        [insurance.id]                 NVARCHAR(100)       '$.id',
        [insurance.extension]          NVARCHAR(MAX)       '$.extension',
        [insurance.modifierExtension]  NVARCHAR(MAX)       '$.modifierExtension',
        [insurance.coverage.id]        NVARCHAR(100)       '$.coverage.id',
        [insurance.coverage.extension] NVARCHAR(MAX)       '$.coverage.extension',
        [insurance.coverage.reference] NVARCHAR(4000)      '$.coverage.reference',
        [insurance.coverage.type]      VARCHAR(256)        '$.coverage.type',
        [insurance.coverage.identifier] NVARCHAR(MAX)       '$.coverage.identifier',
        [insurance.coverage.display]   NVARCHAR(4000)      '$.coverage.display',
        [insurance.inforce]            bit                 '$.inforce',
        [insurance.benefitPeriod.id]   NVARCHAR(100)       '$.benefitPeriod.id',
        [insurance.benefitPeriod.extension] NVARCHAR(MAX)       '$.benefitPeriod.extension',
        [insurance.benefitPeriod.start] VARCHAR(64)         '$.benefitPeriod.start',
        [insurance.benefitPeriod.end]  VARCHAR(64)         '$.benefitPeriod.end',
        [insurance.item]               NVARCHAR(MAX)       '$.item' AS JSON
    ) j

GO

CREATE VIEW fhir.CoverageEligibilityResponseError AS
SELECT
    [id],
    [error.JSON],
    [error.id],
    [error.extension],
    [error.modifierExtension],
    [error.code.id],
    [error.code.extension],
    [error.code.coding],
    [error.code.text]
FROM openrowset (
        BULK 'CoverageEligibilityResponse/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [error.JSON]  VARCHAR(MAX) '$.error'
    ) AS rowset
    CROSS APPLY openjson (rowset.[error.JSON]) with (
        [error.id]                     NVARCHAR(100)       '$.id',
        [error.extension]              NVARCHAR(MAX)       '$.extension',
        [error.modifierExtension]      NVARCHAR(MAX)       '$.modifierExtension',
        [error.code.id]                NVARCHAR(100)       '$.code.id',
        [error.code.extension]         NVARCHAR(MAX)       '$.code.extension',
        [error.code.coding]            NVARCHAR(MAX)       '$.code.coding',
        [error.code.text]              NVARCHAR(4000)      '$.code.text'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[DetectedIssue] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [status] NVARCHAR(100),
    [code.id] NVARCHAR(100),
    [code.extension] NVARCHAR(MAX),
    [code.coding] VARCHAR(MAX),
    [code.text] NVARCHAR(4000),
    [severity] NVARCHAR(4000),
    [patient.id] NVARCHAR(100),
    [patient.extension] NVARCHAR(MAX),
    [patient.reference] NVARCHAR(4000),
    [patient.type] VARCHAR(256),
    [patient.identifier.id] NVARCHAR(100),
    [patient.identifier.extension] NVARCHAR(MAX),
    [patient.identifier.use] NVARCHAR(64),
    [patient.identifier.type] NVARCHAR(MAX),
    [patient.identifier.system] VARCHAR(256),
    [patient.identifier.value] NVARCHAR(4000),
    [patient.identifier.period] NVARCHAR(MAX),
    [patient.identifier.assigner] NVARCHAR(MAX),
    [patient.display] NVARCHAR(4000),
    [author.id] NVARCHAR(100),
    [author.extension] NVARCHAR(MAX),
    [author.reference] NVARCHAR(4000),
    [author.type] VARCHAR(256),
    [author.identifier.id] NVARCHAR(100),
    [author.identifier.extension] NVARCHAR(MAX),
    [author.identifier.use] NVARCHAR(64),
    [author.identifier.type] NVARCHAR(MAX),
    [author.identifier.system] VARCHAR(256),
    [author.identifier.value] NVARCHAR(4000),
    [author.identifier.period] NVARCHAR(MAX),
    [author.identifier.assigner] NVARCHAR(MAX),
    [author.display] NVARCHAR(4000),
    [implicated] VARCHAR(MAX),
    [evidence] VARCHAR(MAX),
    [detail] NVARCHAR(4000),
    [reference] VARCHAR(256),
    [mitigation] VARCHAR(MAX),
    [identified.dateTime] VARCHAR(64),
    [identified.period.id] NVARCHAR(100),
    [identified.period.extension] NVARCHAR(MAX),
    [identified.period.start] VARCHAR(64),
    [identified.period.end] VARCHAR(64),
) WITH (
    LOCATION='/DetectedIssue/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.DetectedIssueIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'DetectedIssue/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.DetectedIssueImplicated AS
SELECT
    [id],
    [implicated.JSON],
    [implicated.id],
    [implicated.extension],
    [implicated.reference],
    [implicated.type],
    [implicated.identifier.id],
    [implicated.identifier.extension],
    [implicated.identifier.use],
    [implicated.identifier.type],
    [implicated.identifier.system],
    [implicated.identifier.value],
    [implicated.identifier.period],
    [implicated.identifier.assigner],
    [implicated.display]
FROM openrowset (
        BULK 'DetectedIssue/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [implicated.JSON]  VARCHAR(MAX) '$.implicated'
    ) AS rowset
    CROSS APPLY openjson (rowset.[implicated.JSON]) with (
        [implicated.id]                NVARCHAR(100)       '$.id',
        [implicated.extension]         NVARCHAR(MAX)       '$.extension',
        [implicated.reference]         NVARCHAR(4000)      '$.reference',
        [implicated.type]              VARCHAR(256)        '$.type',
        [implicated.identifier.id]     NVARCHAR(100)       '$.identifier.id',
        [implicated.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [implicated.identifier.use]    NVARCHAR(64)        '$.identifier.use',
        [implicated.identifier.type]   NVARCHAR(MAX)       '$.identifier.type',
        [implicated.identifier.system] VARCHAR(256)        '$.identifier.system',
        [implicated.identifier.value]  NVARCHAR(4000)      '$.identifier.value',
        [implicated.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [implicated.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [implicated.display]           NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.DetectedIssueEvidence AS
SELECT
    [id],
    [evidence.JSON],
    [evidence.id],
    [evidence.extension],
    [evidence.modifierExtension],
    [evidence.code],
    [evidence.detail]
FROM openrowset (
        BULK 'DetectedIssue/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [evidence.JSON]  VARCHAR(MAX) '$.evidence'
    ) AS rowset
    CROSS APPLY openjson (rowset.[evidence.JSON]) with (
        [evidence.id]                  NVARCHAR(100)       '$.id',
        [evidence.extension]           NVARCHAR(MAX)       '$.extension',
        [evidence.modifierExtension]   NVARCHAR(MAX)       '$.modifierExtension',
        [evidence.code]                NVARCHAR(MAX)       '$.code' AS JSON,
        [evidence.detail]              NVARCHAR(MAX)       '$.detail' AS JSON
    ) j

GO

CREATE VIEW fhir.DetectedIssueMitigation AS
SELECT
    [id],
    [mitigation.JSON],
    [mitigation.id],
    [mitigation.extension],
    [mitigation.modifierExtension],
    [mitigation.action.id],
    [mitigation.action.extension],
    [mitigation.action.coding],
    [mitigation.action.text],
    [mitigation.date],
    [mitigation.author.id],
    [mitigation.author.extension],
    [mitigation.author.reference],
    [mitigation.author.type],
    [mitigation.author.identifier],
    [mitigation.author.display]
FROM openrowset (
        BULK 'DetectedIssue/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [mitigation.JSON]  VARCHAR(MAX) '$.mitigation'
    ) AS rowset
    CROSS APPLY openjson (rowset.[mitigation.JSON]) with (
        [mitigation.id]                NVARCHAR(100)       '$.id',
        [mitigation.extension]         NVARCHAR(MAX)       '$.extension',
        [mitigation.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [mitigation.action.id]         NVARCHAR(100)       '$.action.id',
        [mitigation.action.extension]  NVARCHAR(MAX)       '$.action.extension',
        [mitigation.action.coding]     NVARCHAR(MAX)       '$.action.coding',
        [mitigation.action.text]       NVARCHAR(4000)      '$.action.text',
        [mitigation.date]              VARCHAR(64)         '$.date',
        [mitigation.author.id]         NVARCHAR(100)       '$.author.id',
        [mitigation.author.extension]  NVARCHAR(MAX)       '$.author.extension',
        [mitigation.author.reference]  NVARCHAR(4000)      '$.author.reference',
        [mitigation.author.type]       VARCHAR(256)        '$.author.type',
        [mitigation.author.identifier] NVARCHAR(MAX)       '$.author.identifier',
        [mitigation.author.display]    NVARCHAR(4000)      '$.author.display'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[Device] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [displayName] NVARCHAR(4000),
    [definition.id] NVARCHAR(100),
    [definition.extension] NVARCHAR(MAX),
    [definition.concept.id] NVARCHAR(100),
    [definition.concept.extension] NVARCHAR(MAX),
    [definition.concept.coding] NVARCHAR(MAX),
    [definition.concept.text] NVARCHAR(4000),
    [definition.reference.id] NVARCHAR(100),
    [definition.reference.extension] NVARCHAR(MAX),
    [definition.reference.reference] NVARCHAR(4000),
    [definition.reference.type] VARCHAR(256),
    [definition.reference.identifier] NVARCHAR(MAX),
    [definition.reference.display] NVARCHAR(4000),
    [udiCarrier] VARCHAR(MAX),
    [status] NVARCHAR(100),
    [statusReason] VARCHAR(MAX),
    [biologicalSource.id] NVARCHAR(100),
    [biologicalSource.extension] NVARCHAR(MAX),
    [biologicalSource.use] NVARCHAR(64),
    [biologicalSource.type.id] NVARCHAR(100),
    [biologicalSource.type.extension] NVARCHAR(MAX),
    [biologicalSource.type.coding] NVARCHAR(MAX),
    [biologicalSource.type.text] NVARCHAR(4000),
    [biologicalSource.system] VARCHAR(256),
    [biologicalSource.value] NVARCHAR(4000),
    [biologicalSource.period.id] NVARCHAR(100),
    [biologicalSource.period.extension] NVARCHAR(MAX),
    [biologicalSource.period.start] VARCHAR(64),
    [biologicalSource.period.end] VARCHAR(64),
    [biologicalSource.assigner.id] NVARCHAR(100),
    [biologicalSource.assigner.extension] NVARCHAR(MAX),
    [biologicalSource.assigner.reference] NVARCHAR(4000),
    [biologicalSource.assigner.type] VARCHAR(256),
    [biologicalSource.assigner.identifier] NVARCHAR(MAX),
    [biologicalSource.assigner.display] NVARCHAR(4000),
    [manufacturer] NVARCHAR(500),
    [manufactureDate] VARCHAR(64),
    [expirationDate] VARCHAR(64),
    [lotNumber] NVARCHAR(100),
    [serialNumber] NVARCHAR(100),
    [deviceName] VARCHAR(MAX),
    [modelNumber] NVARCHAR(100),
    [partNumber] NVARCHAR(100),
    [type] VARCHAR(MAX),
    [version] VARCHAR(MAX),
    [property] VARCHAR(MAX),
    [subject.id] NVARCHAR(100),
    [subject.extension] NVARCHAR(MAX),
    [subject.reference] NVARCHAR(4000),
    [subject.type] VARCHAR(256),
    [subject.identifier.id] NVARCHAR(100),
    [subject.identifier.extension] NVARCHAR(MAX),
    [subject.identifier.use] NVARCHAR(64),
    [subject.identifier.type] NVARCHAR(MAX),
    [subject.identifier.system] VARCHAR(256),
    [subject.identifier.value] NVARCHAR(4000),
    [subject.identifier.period] NVARCHAR(MAX),
    [subject.identifier.assigner] NVARCHAR(MAX),
    [subject.display] NVARCHAR(4000),
    [operationalStatus.id] NVARCHAR(100),
    [operationalStatus.extension] NVARCHAR(MAX),
    [operationalStatus.modifierExtension] NVARCHAR(MAX),
    [operationalStatus.value.id] NVARCHAR(100),
    [operationalStatus.value.extension] NVARCHAR(MAX),
    [operationalStatus.value.coding] NVARCHAR(MAX),
    [operationalStatus.value.text] NVARCHAR(4000),
    [operationalStatus.reason] VARCHAR(MAX),
    [associationStatus.id] NVARCHAR(100),
    [associationStatus.extension] NVARCHAR(MAX),
    [associationStatus.modifierExtension] NVARCHAR(MAX),
    [associationStatus.value.id] NVARCHAR(100),
    [associationStatus.value.extension] NVARCHAR(MAX),
    [associationStatus.value.coding] NVARCHAR(MAX),
    [associationStatus.value.text] NVARCHAR(4000),
    [associationStatus.reason] VARCHAR(MAX),
    [owner.id] NVARCHAR(100),
    [owner.extension] NVARCHAR(MAX),
    [owner.reference] NVARCHAR(4000),
    [owner.type] VARCHAR(256),
    [owner.identifier.id] NVARCHAR(100),
    [owner.identifier.extension] NVARCHAR(MAX),
    [owner.identifier.use] NVARCHAR(64),
    [owner.identifier.type] NVARCHAR(MAX),
    [owner.identifier.system] VARCHAR(256),
    [owner.identifier.value] NVARCHAR(4000),
    [owner.identifier.period] NVARCHAR(MAX),
    [owner.identifier.assigner] NVARCHAR(MAX),
    [owner.display] NVARCHAR(4000),
    [contact] VARCHAR(MAX),
    [location.id] NVARCHAR(100),
    [location.extension] NVARCHAR(MAX),
    [location.reference] NVARCHAR(4000),
    [location.type] VARCHAR(256),
    [location.identifier.id] NVARCHAR(100),
    [location.identifier.extension] NVARCHAR(MAX),
    [location.identifier.use] NVARCHAR(64),
    [location.identifier.type] NVARCHAR(MAX),
    [location.identifier.system] VARCHAR(256),
    [location.identifier.value] NVARCHAR(4000),
    [location.identifier.period] NVARCHAR(MAX),
    [location.identifier.assigner] NVARCHAR(MAX),
    [location.display] NVARCHAR(4000),
    [url] VARCHAR(256),
    [endpoint] VARCHAR(MAX),
    [link] VARCHAR(MAX),
    [note] VARCHAR(MAX),
    [safety] VARCHAR(MAX),
    [parent.id] NVARCHAR(100),
    [parent.extension] NVARCHAR(MAX),
    [parent.reference] NVARCHAR(4000),
    [parent.type] VARCHAR(256),
    [parent.identifier.id] NVARCHAR(100),
    [parent.identifier.extension] NVARCHAR(MAX),
    [parent.identifier.use] NVARCHAR(64),
    [parent.identifier.type] NVARCHAR(MAX),
    [parent.identifier.system] VARCHAR(256),
    [parent.identifier.value] NVARCHAR(4000),
    [parent.identifier.period] NVARCHAR(MAX),
    [parent.identifier.assigner] NVARCHAR(MAX),
    [parent.display] NVARCHAR(4000),
) WITH (
    LOCATION='/Device/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.DeviceIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'Device/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.DeviceUdiCarrier AS
SELECT
    [id],
    [udiCarrier.JSON],
    [udiCarrier.id],
    [udiCarrier.extension],
    [udiCarrier.modifierExtension],
    [udiCarrier.deviceIdentifier],
    [udiCarrier.issuer],
    [udiCarrier.jurisdiction],
    [udiCarrier.carrierAIDC],
    [udiCarrier.carrierHRF],
    [udiCarrier.entryType]
FROM openrowset (
        BULK 'Device/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [udiCarrier.JSON]  VARCHAR(MAX) '$.udiCarrier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[udiCarrier.JSON]) with (
        [udiCarrier.id]                NVARCHAR(100)       '$.id',
        [udiCarrier.extension]         NVARCHAR(MAX)       '$.extension',
        [udiCarrier.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [udiCarrier.deviceIdentifier]  NVARCHAR(500)       '$.deviceIdentifier',
        [udiCarrier.issuer]            VARCHAR(256)        '$.issuer',
        [udiCarrier.jurisdiction]      VARCHAR(256)        '$.jurisdiction',
        [udiCarrier.carrierAIDC]       NVARCHAR(MAX)       '$.carrierAIDC',
        [udiCarrier.carrierHRF]        NVARCHAR(500)       '$.carrierHRF',
        [udiCarrier.entryType]         NVARCHAR(4000)      '$.entryType'
    ) j

GO

CREATE VIEW fhir.DeviceStatusReason AS
SELECT
    [id],
    [statusReason.JSON],
    [statusReason.id],
    [statusReason.extension],
    [statusReason.coding],
    [statusReason.text]
FROM openrowset (
        BULK 'Device/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [statusReason.JSON]  VARCHAR(MAX) '$.statusReason'
    ) AS rowset
    CROSS APPLY openjson (rowset.[statusReason.JSON]) with (
        [statusReason.id]              NVARCHAR(100)       '$.id',
        [statusReason.extension]       NVARCHAR(MAX)       '$.extension',
        [statusReason.coding]          NVARCHAR(MAX)       '$.coding' AS JSON,
        [statusReason.text]            NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.DeviceDeviceName AS
SELECT
    [id],
    [deviceName.JSON],
    [deviceName.id],
    [deviceName.extension],
    [deviceName.modifierExtension],
    [deviceName.name],
    [deviceName.type]
FROM openrowset (
        BULK 'Device/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [deviceName.JSON]  VARCHAR(MAX) '$.deviceName'
    ) AS rowset
    CROSS APPLY openjson (rowset.[deviceName.JSON]) with (
        [deviceName.id]                NVARCHAR(100)       '$.id',
        [deviceName.extension]         NVARCHAR(MAX)       '$.extension',
        [deviceName.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [deviceName.name]              NVARCHAR(500)       '$.name',
        [deviceName.type]              NVARCHAR(100)       '$.type'
    ) j

GO

CREATE VIEW fhir.DeviceType AS
SELECT
    [id],
    [type.JSON],
    [type.id],
    [type.extension],
    [type.coding],
    [type.text]
FROM openrowset (
        BULK 'Device/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [type.JSON]  VARCHAR(MAX) '$.type'
    ) AS rowset
    CROSS APPLY openjson (rowset.[type.JSON]) with (
        [type.id]                      NVARCHAR(100)       '$.id',
        [type.extension]               NVARCHAR(MAX)       '$.extension',
        [type.coding]                  NVARCHAR(MAX)       '$.coding' AS JSON,
        [type.text]                    NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.DeviceVersion AS
SELECT
    [id],
    [version.JSON],
    [version.id],
    [version.extension],
    [version.modifierExtension],
    [version.type.id],
    [version.type.extension],
    [version.type.coding],
    [version.type.text],
    [version.component.id],
    [version.component.extension],
    [version.component.use],
    [version.component.type],
    [version.component.system],
    [version.component.value],
    [version.component.period],
    [version.component.assigner],
    [version.value]
FROM openrowset (
        BULK 'Device/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [version.JSON]  VARCHAR(MAX) '$.version'
    ) AS rowset
    CROSS APPLY openjson (rowset.[version.JSON]) with (
        [version.id]                   NVARCHAR(100)       '$.id',
        [version.extension]            NVARCHAR(MAX)       '$.extension',
        [version.modifierExtension]    NVARCHAR(MAX)       '$.modifierExtension',
        [version.type.id]              NVARCHAR(100)       '$.type.id',
        [version.type.extension]       NVARCHAR(MAX)       '$.type.extension',
        [version.type.coding]          NVARCHAR(MAX)       '$.type.coding',
        [version.type.text]            NVARCHAR(4000)      '$.type.text',
        [version.component.id]         NVARCHAR(100)       '$.component.id',
        [version.component.extension]  NVARCHAR(MAX)       '$.component.extension',
        [version.component.use]        NVARCHAR(64)        '$.component.use',
        [version.component.type]       NVARCHAR(MAX)       '$.component.type',
        [version.component.system]     VARCHAR(256)        '$.component.system',
        [version.component.value]      NVARCHAR(4000)      '$.component.value',
        [version.component.period]     NVARCHAR(MAX)       '$.component.period',
        [version.component.assigner]   NVARCHAR(MAX)       '$.component.assigner',
        [version.value]                NVARCHAR(4000)      '$.value'
    ) j

GO

CREATE VIEW fhir.DeviceProperty AS
SELECT
    [id],
    [property.JSON],
    [property.id],
    [property.extension],
    [property.modifierExtension],
    [property.type.id],
    [property.type.extension],
    [property.type.coding],
    [property.type.text],
    [property.value.quantity.id],
    [property.value.quantity.extension],
    [property.value.quantity.value],
    [property.value.quantity.comparator],
    [property.value.quantity.unit],
    [property.value.quantity.system],
    [property.value.quantity.code],
    [property.value.codeableConcept.id],
    [property.value.codeableConcept.extension],
    [property.value.codeableConcept.coding],
    [property.value.codeableConcept.text],
    [property.value.string],
    [property.value.boolean],
    [property.value.integer],
    [property.value.range.id],
    [property.value.range.extension],
    [property.value.range.low],
    [property.value.range.high],
    [property.value.attachment.id],
    [property.value.attachment.extension],
    [property.value.attachment.contentType],
    [property.value.attachment.language],
    [property.value.attachment.data],
    [property.value.attachment.url],
    [property.value.attachment.size],
    [property.value.attachment.hash],
    [property.value.attachment.title],
    [property.value.attachment.creation],
    [property.value.attachment.height],
    [property.value.attachment.width],
    [property.value.attachment.frames],
    [property.value.attachment.duration],
    [property.value.attachment.pages]
FROM openrowset (
        BULK 'Device/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [property.JSON]  VARCHAR(MAX) '$.property'
    ) AS rowset
    CROSS APPLY openjson (rowset.[property.JSON]) with (
        [property.id]                  NVARCHAR(100)       '$.id',
        [property.extension]           NVARCHAR(MAX)       '$.extension',
        [property.modifierExtension]   NVARCHAR(MAX)       '$.modifierExtension',
        [property.type.id]             NVARCHAR(100)       '$.type.id',
        [property.type.extension]      NVARCHAR(MAX)       '$.type.extension',
        [property.type.coding]         NVARCHAR(MAX)       '$.type.coding',
        [property.type.text]           NVARCHAR(4000)      '$.type.text',
        [property.value.quantity.id]   NVARCHAR(100)       '$.value.quantity.id',
        [property.value.quantity.extension] NVARCHAR(MAX)       '$.value.quantity.extension',
        [property.value.quantity.value] float               '$.value.quantity.value',
        [property.value.quantity.comparator] NVARCHAR(64)        '$.value.quantity.comparator',
        [property.value.quantity.unit] NVARCHAR(100)       '$.value.quantity.unit',
        [property.value.quantity.system] VARCHAR(256)        '$.value.quantity.system',
        [property.value.quantity.code] NVARCHAR(4000)      '$.value.quantity.code',
        [property.value.codeableConcept.id] NVARCHAR(100)       '$.value.codeableConcept.id',
        [property.value.codeableConcept.extension] NVARCHAR(MAX)       '$.value.codeableConcept.extension',
        [property.value.codeableConcept.coding] NVARCHAR(MAX)       '$.value.codeableConcept.coding',
        [property.value.codeableConcept.text] NVARCHAR(4000)      '$.value.codeableConcept.text',
        [property.value.string]        NVARCHAR(4000)      '$.value.string',
        [property.value.boolean]       bit                 '$.value.boolean',
        [property.value.integer]       bigint              '$.value.integer',
        [property.value.range.id]      NVARCHAR(100)       '$.value.range.id',
        [property.value.range.extension] NVARCHAR(MAX)       '$.value.range.extension',
        [property.value.range.low]     NVARCHAR(MAX)       '$.value.range.low',
        [property.value.range.high]    NVARCHAR(MAX)       '$.value.range.high',
        [property.value.attachment.id] NVARCHAR(100)       '$.value.attachment.id',
        [property.value.attachment.extension] NVARCHAR(MAX)       '$.value.attachment.extension',
        [property.value.attachment.contentType] NVARCHAR(100)       '$.value.attachment.contentType',
        [property.value.attachment.language] NVARCHAR(100)       '$.value.attachment.language',
        [property.value.attachment.data] NVARCHAR(MAX)       '$.value.attachment.data',
        [property.value.attachment.url] VARCHAR(256)        '$.value.attachment.url',
        [property.value.attachment.size] NVARCHAR(MAX)       '$.value.attachment.size',
        [property.value.attachment.hash] NVARCHAR(MAX)       '$.value.attachment.hash',
        [property.value.attachment.title] NVARCHAR(4000)      '$.value.attachment.title',
        [property.value.attachment.creation] VARCHAR(64)         '$.value.attachment.creation',
        [property.value.attachment.height] bigint              '$.value.attachment.height',
        [property.value.attachment.width] bigint              '$.value.attachment.width',
        [property.value.attachment.frames] bigint              '$.value.attachment.frames',
        [property.value.attachment.duration] float               '$.value.attachment.duration',
        [property.value.attachment.pages] bigint              '$.value.attachment.pages'
    ) j

GO

CREATE VIEW fhir.DeviceContact AS
SELECT
    [id],
    [contact.JSON],
    [contact.id],
    [contact.extension],
    [contact.system],
    [contact.value],
    [contact.use],
    [contact.rank],
    [contact.period.id],
    [contact.period.extension],
    [contact.period.start],
    [contact.period.end]
FROM openrowset (
        BULK 'Device/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [contact.JSON]  VARCHAR(MAX) '$.contact'
    ) AS rowset
    CROSS APPLY openjson (rowset.[contact.JSON]) with (
        [contact.id]                   NVARCHAR(100)       '$.id',
        [contact.extension]            NVARCHAR(MAX)       '$.extension',
        [contact.system]               NVARCHAR(64)        '$.system',
        [contact.value]                NVARCHAR(4000)      '$.value',
        [contact.use]                  NVARCHAR(64)        '$.use',
        [contact.rank]                 bigint              '$.rank',
        [contact.period.id]            NVARCHAR(100)       '$.period.id',
        [contact.period.extension]     NVARCHAR(MAX)       '$.period.extension',
        [contact.period.start]         VARCHAR(64)         '$.period.start',
        [contact.period.end]           VARCHAR(64)         '$.period.end'
    ) j

GO

CREATE VIEW fhir.DeviceEndpoint AS
SELECT
    [id],
    [endpoint.JSON],
    [endpoint.id],
    [endpoint.extension],
    [endpoint.reference],
    [endpoint.type],
    [endpoint.identifier.id],
    [endpoint.identifier.extension],
    [endpoint.identifier.use],
    [endpoint.identifier.type],
    [endpoint.identifier.system],
    [endpoint.identifier.value],
    [endpoint.identifier.period],
    [endpoint.identifier.assigner],
    [endpoint.display]
FROM openrowset (
        BULK 'Device/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [endpoint.JSON]  VARCHAR(MAX) '$.endpoint'
    ) AS rowset
    CROSS APPLY openjson (rowset.[endpoint.JSON]) with (
        [endpoint.id]                  NVARCHAR(100)       '$.id',
        [endpoint.extension]           NVARCHAR(MAX)       '$.extension',
        [endpoint.reference]           NVARCHAR(4000)      '$.reference',
        [endpoint.type]                VARCHAR(256)        '$.type',
        [endpoint.identifier.id]       NVARCHAR(100)       '$.identifier.id',
        [endpoint.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [endpoint.identifier.use]      NVARCHAR(64)        '$.identifier.use',
        [endpoint.identifier.type]     NVARCHAR(MAX)       '$.identifier.type',
        [endpoint.identifier.system]   VARCHAR(256)        '$.identifier.system',
        [endpoint.identifier.value]    NVARCHAR(4000)      '$.identifier.value',
        [endpoint.identifier.period]   NVARCHAR(MAX)       '$.identifier.period',
        [endpoint.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [endpoint.display]             NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.DeviceLink AS
SELECT
    [id],
    [link.JSON],
    [link.id],
    [link.extension],
    [link.modifierExtension],
    [link.relation.id],
    [link.relation.extension],
    [link.relation.system],
    [link.relation.version],
    [link.relation.code],
    [link.relation.display],
    [link.relation.userSelected],
    [link.relatedDevice.id],
    [link.relatedDevice.extension],
    [link.relatedDevice.concept],
    [link.relatedDevice.reference]
FROM openrowset (
        BULK 'Device/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [link.JSON]  VARCHAR(MAX) '$.link'
    ) AS rowset
    CROSS APPLY openjson (rowset.[link.JSON]) with (
        [link.id]                      NVARCHAR(100)       '$.id',
        [link.extension]               NVARCHAR(MAX)       '$.extension',
        [link.modifierExtension]       NVARCHAR(MAX)       '$.modifierExtension',
        [link.relation.id]             NVARCHAR(100)       '$.relation.id',
        [link.relation.extension]      NVARCHAR(MAX)       '$.relation.extension',
        [link.relation.system]         VARCHAR(256)        '$.relation.system',
        [link.relation.version]        NVARCHAR(100)       '$.relation.version',
        [link.relation.code]           NVARCHAR(4000)      '$.relation.code',
        [link.relation.display]        NVARCHAR(4000)      '$.relation.display',
        [link.relation.userSelected]   bit                 '$.relation.userSelected',
        [link.relatedDevice.id]        NVARCHAR(100)       '$.relatedDevice.id',
        [link.relatedDevice.extension] NVARCHAR(MAX)       '$.relatedDevice.extension',
        [link.relatedDevice.concept]   NVARCHAR(MAX)       '$.relatedDevice.concept',
        [link.relatedDevice.reference] NVARCHAR(MAX)       '$.relatedDevice.reference'
    ) j

GO

CREATE VIEW fhir.DeviceNote AS
SELECT
    [id],
    [note.JSON],
    [note.id],
    [note.extension],
    [note.time],
    [note.text],
    [note.author.reference.id],
    [note.author.reference.extension],
    [note.author.reference.reference],
    [note.author.reference.type],
    [note.author.reference.identifier],
    [note.author.reference.display],
    [note.author.string]
FROM openrowset (
        BULK 'Device/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [note.JSON]  VARCHAR(MAX) '$.note'
    ) AS rowset
    CROSS APPLY openjson (rowset.[note.JSON]) with (
        [note.id]                      NVARCHAR(100)       '$.id',
        [note.extension]               NVARCHAR(MAX)       '$.extension',
        [note.time]                    VARCHAR(64)         '$.time',
        [note.text]                    NVARCHAR(MAX)       '$.text',
        [note.author.reference.id]     NVARCHAR(100)       '$.author.reference.id',
        [note.author.reference.extension] NVARCHAR(MAX)       '$.author.reference.extension',
        [note.author.reference.reference] NVARCHAR(4000)      '$.author.reference.reference',
        [note.author.reference.type]   VARCHAR(256)        '$.author.reference.type',
        [note.author.reference.identifier] NVARCHAR(MAX)       '$.author.reference.identifier',
        [note.author.reference.display] NVARCHAR(4000)      '$.author.reference.display',
        [note.author.string]           NVARCHAR(4000)      '$.author.string'
    ) j

GO

CREATE VIEW fhir.DeviceSafety AS
SELECT
    [id],
    [safety.JSON],
    [safety.id],
    [safety.extension],
    [safety.coding],
    [safety.text]
FROM openrowset (
        BULK 'Device/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [safety.JSON]  VARCHAR(MAX) '$.safety'
    ) AS rowset
    CROSS APPLY openjson (rowset.[safety.JSON]) with (
        [safety.id]                    NVARCHAR(100)       '$.id',
        [safety.extension]             NVARCHAR(MAX)       '$.extension',
        [safety.coding]                NVARCHAR(MAX)       '$.coding' AS JSON,
        [safety.text]                  NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[DeviceDefinition] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [description] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [udiDeviceIdentifier] VARCHAR(MAX),
    [partNumber] NVARCHAR(100),
    [deviceName] VARCHAR(MAX),
    [modelNumber] NVARCHAR(100),
    [classification] VARCHAR(MAX),
    [specialization] VARCHAR(MAX),
    [hasPart] VARCHAR(MAX),
    [packaging] VARCHAR(MAX),
    [version] VARCHAR(MAX),
    [safety] VARCHAR(MAX),
    [shelfLifeStorage] VARCHAR(MAX),
    [languageCode] VARCHAR(MAX),
    [property] VARCHAR(MAX),
    [owner.id] NVARCHAR(100),
    [owner.extension] NVARCHAR(MAX),
    [owner.reference] NVARCHAR(4000),
    [owner.type] VARCHAR(256),
    [owner.identifier.id] NVARCHAR(100),
    [owner.identifier.extension] NVARCHAR(MAX),
    [owner.identifier.use] NVARCHAR(64),
    [owner.identifier.type] NVARCHAR(MAX),
    [owner.identifier.system] VARCHAR(256),
    [owner.identifier.value] NVARCHAR(4000),
    [owner.identifier.period] NVARCHAR(MAX),
    [owner.identifier.assigner] NVARCHAR(MAX),
    [owner.display] NVARCHAR(4000),
    [contact] VARCHAR(MAX),
    [link] VARCHAR(MAX),
    [note] VARCHAR(MAX),
    [parentDevice.id] NVARCHAR(100),
    [parentDevice.extension] NVARCHAR(MAX),
    [parentDevice.reference] NVARCHAR(4000),
    [parentDevice.type] VARCHAR(256),
    [parentDevice.identifier.id] NVARCHAR(100),
    [parentDevice.identifier.extension] NVARCHAR(MAX),
    [parentDevice.identifier.use] NVARCHAR(64),
    [parentDevice.identifier.type] NVARCHAR(MAX),
    [parentDevice.identifier.system] VARCHAR(256),
    [parentDevice.identifier.value] NVARCHAR(4000),
    [parentDevice.identifier.period] NVARCHAR(MAX),
    [parentDevice.identifier.assigner] NVARCHAR(MAX),
    [parentDevice.display] NVARCHAR(4000),
    [material] VARCHAR(MAX),
    [productionIdentifierInUDI] VARCHAR(MAX),
    [guideline.id] NVARCHAR(100),
    [guideline.extension] NVARCHAR(MAX),
    [guideline.modifierExtension] NVARCHAR(MAX),
    [guideline.useContext] VARCHAR(MAX),
    [guideline.usageInstruction] NVARCHAR(MAX),
    [guideline.relatedArtifact] VARCHAR(MAX),
    [guideline.indication] VARCHAR(MAX),
    [guideline.contraindication] VARCHAR(MAX),
    [guideline.warning] VARCHAR(MAX),
    [guideline.intendedUse] NVARCHAR(4000),
    [correctiveAction.id] NVARCHAR(100),
    [correctiveAction.extension] NVARCHAR(MAX),
    [correctiveAction.modifierExtension] NVARCHAR(MAX),
    [correctiveAction.recall] bit,
    [correctiveAction.scope] NVARCHAR(4000),
    [correctiveAction.period.id] NVARCHAR(100),
    [correctiveAction.period.extension] NVARCHAR(MAX),
    [correctiveAction.period.start] VARCHAR(64),
    [correctiveAction.period.end] VARCHAR(64),
    [chargeItem] VARCHAR(MAX),
    [manufacturer.string] NVARCHAR(4000),
    [manufacturer.reference.id] NVARCHAR(100),
    [manufacturer.reference.extension] NVARCHAR(MAX),
    [manufacturer.reference.reference] NVARCHAR(4000),
    [manufacturer.reference.type] VARCHAR(256),
    [manufacturer.reference.identifier.id] NVARCHAR(100),
    [manufacturer.reference.identifier.extension] NVARCHAR(MAX),
    [manufacturer.reference.identifier.use] NVARCHAR(64),
    [manufacturer.reference.identifier.type] NVARCHAR(MAX),
    [manufacturer.reference.identifier.system] VARCHAR(256),
    [manufacturer.reference.identifier.value] NVARCHAR(4000),
    [manufacturer.reference.identifier.period] NVARCHAR(MAX),
    [manufacturer.reference.identifier.assigner] NVARCHAR(MAX),
    [manufacturer.reference.display] NVARCHAR(4000),
) WITH (
    LOCATION='/DeviceDefinition/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.DeviceDefinitionIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'DeviceDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.DeviceDefinitionUdiDeviceIdentifier AS
SELECT
    [id],
    [udiDeviceIdentifier.JSON],
    [udiDeviceIdentifier.id],
    [udiDeviceIdentifier.extension],
    [udiDeviceIdentifier.modifierExtension],
    [udiDeviceIdentifier.deviceIdentifier],
    [udiDeviceIdentifier.issuer],
    [udiDeviceIdentifier.jurisdiction],
    [udiDeviceIdentifier.marketDistribution]
FROM openrowset (
        BULK 'DeviceDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [udiDeviceIdentifier.JSON]  VARCHAR(MAX) '$.udiDeviceIdentifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[udiDeviceIdentifier.JSON]) with (
        [udiDeviceIdentifier.id]       NVARCHAR(100)       '$.id',
        [udiDeviceIdentifier.extension] NVARCHAR(MAX)       '$.extension',
        [udiDeviceIdentifier.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [udiDeviceIdentifier.deviceIdentifier] NVARCHAR(500)       '$.deviceIdentifier',
        [udiDeviceIdentifier.issuer]   VARCHAR(256)        '$.issuer',
        [udiDeviceIdentifier.jurisdiction] VARCHAR(256)        '$.jurisdiction',
        [udiDeviceIdentifier.marketDistribution] NVARCHAR(MAX)       '$.marketDistribution' AS JSON
    ) j

GO

CREATE VIEW fhir.DeviceDefinitionDeviceName AS
SELECT
    [id],
    [deviceName.JSON],
    [deviceName.id],
    [deviceName.extension],
    [deviceName.modifierExtension],
    [deviceName.name],
    [deviceName.type]
FROM openrowset (
        BULK 'DeviceDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [deviceName.JSON]  VARCHAR(MAX) '$.deviceName'
    ) AS rowset
    CROSS APPLY openjson (rowset.[deviceName.JSON]) with (
        [deviceName.id]                NVARCHAR(100)       '$.id',
        [deviceName.extension]         NVARCHAR(MAX)       '$.extension',
        [deviceName.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [deviceName.name]              NVARCHAR(500)       '$.name',
        [deviceName.type]              NVARCHAR(100)       '$.type'
    ) j

GO

CREATE VIEW fhir.DeviceDefinitionClassification AS
SELECT
    [id],
    [classification.JSON],
    [classification.id],
    [classification.extension],
    [classification.modifierExtension],
    [classification.type.id],
    [classification.type.extension],
    [classification.type.coding],
    [classification.type.text],
    [classification.justification]
FROM openrowset (
        BULK 'DeviceDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [classification.JSON]  VARCHAR(MAX) '$.classification'
    ) AS rowset
    CROSS APPLY openjson (rowset.[classification.JSON]) with (
        [classification.id]            NVARCHAR(100)       '$.id',
        [classification.extension]     NVARCHAR(MAX)       '$.extension',
        [classification.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [classification.type.id]       NVARCHAR(100)       '$.type.id',
        [classification.type.extension] NVARCHAR(MAX)       '$.type.extension',
        [classification.type.coding]   NVARCHAR(MAX)       '$.type.coding',
        [classification.type.text]     NVARCHAR(4000)      '$.type.text',
        [classification.justification] NVARCHAR(MAX)       '$.justification' AS JSON
    ) j

GO

CREATE VIEW fhir.DeviceDefinitionSpecialization AS
SELECT
    [id],
    [specialization.JSON],
    [specialization.id],
    [specialization.extension],
    [specialization.type],
    [specialization.classifier],
    [specialization.label],
    [specialization.display],
    [specialization.citation],
    [specialization.document.id],
    [specialization.document.extension],
    [specialization.document.contentType],
    [specialization.document.language],
    [specialization.document.data],
    [specialization.document.url],
    [specialization.document.size],
    [specialization.document.hash],
    [specialization.document.title],
    [specialization.document.creation],
    [specialization.document.height],
    [specialization.document.width],
    [specialization.document.frames],
    [specialization.document.duration],
    [specialization.document.pages],
    [specialization.resource],
    [specialization.resourceReference.id],
    [specialization.resourceReference.extension],
    [specialization.resourceReference.reference],
    [specialization.resourceReference.type],
    [specialization.resourceReference.identifier],
    [specialization.resourceReference.display]
FROM openrowset (
        BULK 'DeviceDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [specialization.JSON]  VARCHAR(MAX) '$.specialization'
    ) AS rowset
    CROSS APPLY openjson (rowset.[specialization.JSON]) with (
        [specialization.id]            NVARCHAR(100)       '$.id',
        [specialization.extension]     NVARCHAR(MAX)       '$.extension',
        [specialization.type]          NVARCHAR(64)        '$.type',
        [specialization.classifier]    NVARCHAR(MAX)       '$.classifier' AS JSON,
        [specialization.label]         NVARCHAR(100)       '$.label',
        [specialization.display]       NVARCHAR(4000)      '$.display',
        [specialization.citation]      NVARCHAR(MAX)       '$.citation',
        [specialization.document.id]   NVARCHAR(100)       '$.document.id',
        [specialization.document.extension] NVARCHAR(MAX)       '$.document.extension',
        [specialization.document.contentType] NVARCHAR(100)       '$.document.contentType',
        [specialization.document.language] NVARCHAR(100)       '$.document.language',
        [specialization.document.data] NVARCHAR(MAX)       '$.document.data',
        [specialization.document.url]  VARCHAR(256)        '$.document.url',
        [specialization.document.size] NVARCHAR(MAX)       '$.document.size',
        [specialization.document.hash] NVARCHAR(MAX)       '$.document.hash',
        [specialization.document.title] NVARCHAR(4000)      '$.document.title',
        [specialization.document.creation] VARCHAR(64)         '$.document.creation',
        [specialization.document.height] bigint              '$.document.height',
        [specialization.document.width] bigint              '$.document.width',
        [specialization.document.frames] bigint              '$.document.frames',
        [specialization.document.duration] float               '$.document.duration',
        [specialization.document.pages] bigint              '$.document.pages',
        [specialization.resource]      VARCHAR(256)        '$.resource',
        [specialization.resourceReference.id] NVARCHAR(100)       '$.resourceReference.id',
        [specialization.resourceReference.extension] NVARCHAR(MAX)       '$.resourceReference.extension',
        [specialization.resourceReference.reference] NVARCHAR(4000)      '$.resourceReference.reference',
        [specialization.resourceReference.type] VARCHAR(256)        '$.resourceReference.type',
        [specialization.resourceReference.identifier] NVARCHAR(MAX)       '$.resourceReference.identifier',
        [specialization.resourceReference.display] NVARCHAR(4000)      '$.resourceReference.display'
    ) j

GO

CREATE VIEW fhir.DeviceDefinitionHasPart AS
SELECT
    [id],
    [hasPart.JSON],
    [hasPart.id],
    [hasPart.extension],
    [hasPart.modifierExtension],
    [hasPart.reference.id],
    [hasPart.reference.extension],
    [hasPart.reference.reference],
    [hasPart.reference.type],
    [hasPart.reference.identifier],
    [hasPart.reference.display],
    [hasPart.count]
FROM openrowset (
        BULK 'DeviceDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [hasPart.JSON]  VARCHAR(MAX) '$.hasPart'
    ) AS rowset
    CROSS APPLY openjson (rowset.[hasPart.JSON]) with (
        [hasPart.id]                   NVARCHAR(100)       '$.id',
        [hasPart.extension]            NVARCHAR(MAX)       '$.extension',
        [hasPart.modifierExtension]    NVARCHAR(MAX)       '$.modifierExtension',
        [hasPart.reference.id]         NVARCHAR(100)       '$.reference.id',
        [hasPart.reference.extension]  NVARCHAR(MAX)       '$.reference.extension',
        [hasPart.reference.reference]  NVARCHAR(4000)      '$.reference.reference',
        [hasPart.reference.type]       VARCHAR(256)        '$.reference.type',
        [hasPart.reference.identifier] NVARCHAR(MAX)       '$.reference.identifier',
        [hasPart.reference.display]    NVARCHAR(4000)      '$.reference.display',
        [hasPart.count]                bigint              '$.count'
    ) j

GO

CREATE VIEW fhir.DeviceDefinitionPackaging AS
SELECT
    [id],
    [packaging.JSON],
    [packaging.id],
    [packaging.extension],
    [packaging.modifierExtension],
    [packaging.identifier.id],
    [packaging.identifier.extension],
    [packaging.identifier.use],
    [packaging.identifier.type],
    [packaging.identifier.system],
    [packaging.identifier.value],
    [packaging.identifier.period],
    [packaging.identifier.assigner],
    [packaging.type.id],
    [packaging.type.extension],
    [packaging.type.coding],
    [packaging.type.text],
    [packaging.count],
    [packaging.distributor],
    [packaging.udiDeviceIdentifier],
    [packaging.packaging]
FROM openrowset (
        BULK 'DeviceDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [packaging.JSON]  VARCHAR(MAX) '$.packaging'
    ) AS rowset
    CROSS APPLY openjson (rowset.[packaging.JSON]) with (
        [packaging.id]                 NVARCHAR(100)       '$.id',
        [packaging.extension]          NVARCHAR(MAX)       '$.extension',
        [packaging.modifierExtension]  NVARCHAR(MAX)       '$.modifierExtension',
        [packaging.identifier.id]      NVARCHAR(100)       '$.identifier.id',
        [packaging.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [packaging.identifier.use]     NVARCHAR(64)        '$.identifier.use',
        [packaging.identifier.type]    NVARCHAR(MAX)       '$.identifier.type',
        [packaging.identifier.system]  VARCHAR(256)        '$.identifier.system',
        [packaging.identifier.value]   NVARCHAR(4000)      '$.identifier.value',
        [packaging.identifier.period]  NVARCHAR(MAX)       '$.identifier.period',
        [packaging.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [packaging.type.id]            NVARCHAR(100)       '$.type.id',
        [packaging.type.extension]     NVARCHAR(MAX)       '$.type.extension',
        [packaging.type.coding]        NVARCHAR(MAX)       '$.type.coding',
        [packaging.type.text]          NVARCHAR(4000)      '$.type.text',
        [packaging.count]              bigint              '$.count',
        [packaging.distributor]        NVARCHAR(MAX)       '$.distributor' AS JSON,
        [packaging.udiDeviceIdentifier] NVARCHAR(MAX)       '$.udiDeviceIdentifier' AS JSON,
        [packaging.packaging]          NVARCHAR(MAX)       '$.packaging' AS JSON
    ) j

GO

CREATE VIEW fhir.DeviceDefinitionVersion AS
SELECT
    [id],
    [version.JSON],
    [version.id],
    [version.extension],
    [version.modifierExtension],
    [version.type.id],
    [version.type.extension],
    [version.type.coding],
    [version.type.text],
    [version.component.id],
    [version.component.extension],
    [version.component.use],
    [version.component.type],
    [version.component.system],
    [version.component.value],
    [version.component.period],
    [version.component.assigner],
    [version.value]
FROM openrowset (
        BULK 'DeviceDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [version.JSON]  VARCHAR(MAX) '$.version'
    ) AS rowset
    CROSS APPLY openjson (rowset.[version.JSON]) with (
        [version.id]                   NVARCHAR(100)       '$.id',
        [version.extension]            NVARCHAR(MAX)       '$.extension',
        [version.modifierExtension]    NVARCHAR(MAX)       '$.modifierExtension',
        [version.type.id]              NVARCHAR(100)       '$.type.id',
        [version.type.extension]       NVARCHAR(MAX)       '$.type.extension',
        [version.type.coding]          NVARCHAR(MAX)       '$.type.coding',
        [version.type.text]            NVARCHAR(4000)      '$.type.text',
        [version.component.id]         NVARCHAR(100)       '$.component.id',
        [version.component.extension]  NVARCHAR(MAX)       '$.component.extension',
        [version.component.use]        NVARCHAR(64)        '$.component.use',
        [version.component.type]       NVARCHAR(MAX)       '$.component.type',
        [version.component.system]     VARCHAR(256)        '$.component.system',
        [version.component.value]      NVARCHAR(4000)      '$.component.value',
        [version.component.period]     NVARCHAR(MAX)       '$.component.period',
        [version.component.assigner]   NVARCHAR(MAX)       '$.component.assigner',
        [version.value]                NVARCHAR(4000)      '$.value'
    ) j

GO

CREATE VIEW fhir.DeviceDefinitionSafety AS
SELECT
    [id],
    [safety.JSON],
    [safety.id],
    [safety.extension],
    [safety.coding],
    [safety.text]
FROM openrowset (
        BULK 'DeviceDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [safety.JSON]  VARCHAR(MAX) '$.safety'
    ) AS rowset
    CROSS APPLY openjson (rowset.[safety.JSON]) with (
        [safety.id]                    NVARCHAR(100)       '$.id',
        [safety.extension]             NVARCHAR(MAX)       '$.extension',
        [safety.coding]                NVARCHAR(MAX)       '$.coding' AS JSON,
        [safety.text]                  NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.DeviceDefinitionShelfLifeStorage AS
SELECT
    [id],
    [shelfLifeStorage.JSON],
    [shelfLifeStorage.id],
    [shelfLifeStorage.extension],
    [shelfLifeStorage.modifierExtension],
    [shelfLifeStorage.type.id],
    [shelfLifeStorage.type.extension],
    [shelfLifeStorage.type.coding],
    [shelfLifeStorage.type.text],
    [shelfLifeStorage.specialPrecautionsForStorage],
    [shelfLifeStorage.period.duration.id],
    [shelfLifeStorage.period.duration.extension],
    [shelfLifeStorage.period.duration.value],
    [shelfLifeStorage.period.duration.comparator],
    [shelfLifeStorage.period.duration.unit],
    [shelfLifeStorage.period.duration.system],
    [shelfLifeStorage.period.duration.code],
    [shelfLifeStorage.period.string]
FROM openrowset (
        BULK 'DeviceDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [shelfLifeStorage.JSON]  VARCHAR(MAX) '$.shelfLifeStorage'
    ) AS rowset
    CROSS APPLY openjson (rowset.[shelfLifeStorage.JSON]) with (
        [shelfLifeStorage.id]          NVARCHAR(100)       '$.id',
        [shelfLifeStorage.extension]   NVARCHAR(MAX)       '$.extension',
        [shelfLifeStorage.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [shelfLifeStorage.type.id]     NVARCHAR(100)       '$.type.id',
        [shelfLifeStorage.type.extension] NVARCHAR(MAX)       '$.type.extension',
        [shelfLifeStorage.type.coding] NVARCHAR(MAX)       '$.type.coding',
        [shelfLifeStorage.type.text]   NVARCHAR(4000)      '$.type.text',
        [shelfLifeStorage.specialPrecautionsForStorage] NVARCHAR(MAX)       '$.specialPrecautionsForStorage' AS JSON,
        [shelfLifeStorage.period.duration.id] NVARCHAR(100)       '$.period.duration.id',
        [shelfLifeStorage.period.duration.extension] NVARCHAR(MAX)       '$.period.duration.extension',
        [shelfLifeStorage.period.duration.value] float               '$.period.duration.value',
        [shelfLifeStorage.period.duration.comparator] NVARCHAR(64)        '$.period.duration.comparator',
        [shelfLifeStorage.period.duration.unit] NVARCHAR(100)       '$.period.duration.unit',
        [shelfLifeStorage.period.duration.system] VARCHAR(256)        '$.period.duration.system',
        [shelfLifeStorage.period.duration.code] NVARCHAR(4000)      '$.period.duration.code',
        [shelfLifeStorage.period.string] NVARCHAR(4000)      '$.period.string'
    ) j

GO

CREATE VIEW fhir.DeviceDefinitionLanguageCode AS
SELECT
    [id],
    [languageCode.JSON],
    [languageCode.id],
    [languageCode.extension],
    [languageCode.coding],
    [languageCode.text]
FROM openrowset (
        BULK 'DeviceDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [languageCode.JSON]  VARCHAR(MAX) '$.languageCode'
    ) AS rowset
    CROSS APPLY openjson (rowset.[languageCode.JSON]) with (
        [languageCode.id]              NVARCHAR(100)       '$.id',
        [languageCode.extension]       NVARCHAR(MAX)       '$.extension',
        [languageCode.coding]          NVARCHAR(MAX)       '$.coding' AS JSON,
        [languageCode.text]            NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.DeviceDefinitionProperty AS
SELECT
    [id],
    [property.JSON],
    [property.id],
    [property.extension],
    [property.modifierExtension],
    [property.type.id],
    [property.type.extension],
    [property.type.coding],
    [property.type.text],
    [property.value.quantity.id],
    [property.value.quantity.extension],
    [property.value.quantity.value],
    [property.value.quantity.comparator],
    [property.value.quantity.unit],
    [property.value.quantity.system],
    [property.value.quantity.code],
    [property.value.codeableConcept.id],
    [property.value.codeableConcept.extension],
    [property.value.codeableConcept.coding],
    [property.value.codeableConcept.text],
    [property.value.string],
    [property.value.boolean],
    [property.value.integer],
    [property.value.range.id],
    [property.value.range.extension],
    [property.value.range.low],
    [property.value.range.high],
    [property.value.attachment.id],
    [property.value.attachment.extension],
    [property.value.attachment.contentType],
    [property.value.attachment.language],
    [property.value.attachment.data],
    [property.value.attachment.url],
    [property.value.attachment.size],
    [property.value.attachment.hash],
    [property.value.attachment.title],
    [property.value.attachment.creation],
    [property.value.attachment.height],
    [property.value.attachment.width],
    [property.value.attachment.frames],
    [property.value.attachment.duration],
    [property.value.attachment.pages]
FROM openrowset (
        BULK 'DeviceDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [property.JSON]  VARCHAR(MAX) '$.property'
    ) AS rowset
    CROSS APPLY openjson (rowset.[property.JSON]) with (
        [property.id]                  NVARCHAR(100)       '$.id',
        [property.extension]           NVARCHAR(MAX)       '$.extension',
        [property.modifierExtension]   NVARCHAR(MAX)       '$.modifierExtension',
        [property.type.id]             NVARCHAR(100)       '$.type.id',
        [property.type.extension]      NVARCHAR(MAX)       '$.type.extension',
        [property.type.coding]         NVARCHAR(MAX)       '$.type.coding',
        [property.type.text]           NVARCHAR(4000)      '$.type.text',
        [property.value.quantity.id]   NVARCHAR(100)       '$.value.quantity.id',
        [property.value.quantity.extension] NVARCHAR(MAX)       '$.value.quantity.extension',
        [property.value.quantity.value] float               '$.value.quantity.value',
        [property.value.quantity.comparator] NVARCHAR(64)        '$.value.quantity.comparator',
        [property.value.quantity.unit] NVARCHAR(100)       '$.value.quantity.unit',
        [property.value.quantity.system] VARCHAR(256)        '$.value.quantity.system',
        [property.value.quantity.code] NVARCHAR(4000)      '$.value.quantity.code',
        [property.value.codeableConcept.id] NVARCHAR(100)       '$.value.codeableConcept.id',
        [property.value.codeableConcept.extension] NVARCHAR(MAX)       '$.value.codeableConcept.extension',
        [property.value.codeableConcept.coding] NVARCHAR(MAX)       '$.value.codeableConcept.coding',
        [property.value.codeableConcept.text] NVARCHAR(4000)      '$.value.codeableConcept.text',
        [property.value.string]        NVARCHAR(4000)      '$.value.string',
        [property.value.boolean]       bit                 '$.value.boolean',
        [property.value.integer]       bigint              '$.value.integer',
        [property.value.range.id]      NVARCHAR(100)       '$.value.range.id',
        [property.value.range.extension] NVARCHAR(MAX)       '$.value.range.extension',
        [property.value.range.low]     NVARCHAR(MAX)       '$.value.range.low',
        [property.value.range.high]    NVARCHAR(MAX)       '$.value.range.high',
        [property.value.attachment.id] NVARCHAR(100)       '$.value.attachment.id',
        [property.value.attachment.extension] NVARCHAR(MAX)       '$.value.attachment.extension',
        [property.value.attachment.contentType] NVARCHAR(100)       '$.value.attachment.contentType',
        [property.value.attachment.language] NVARCHAR(100)       '$.value.attachment.language',
        [property.value.attachment.data] NVARCHAR(MAX)       '$.value.attachment.data',
        [property.value.attachment.url] VARCHAR(256)        '$.value.attachment.url',
        [property.value.attachment.size] NVARCHAR(MAX)       '$.value.attachment.size',
        [property.value.attachment.hash] NVARCHAR(MAX)       '$.value.attachment.hash',
        [property.value.attachment.title] NVARCHAR(4000)      '$.value.attachment.title',
        [property.value.attachment.creation] VARCHAR(64)         '$.value.attachment.creation',
        [property.value.attachment.height] bigint              '$.value.attachment.height',
        [property.value.attachment.width] bigint              '$.value.attachment.width',
        [property.value.attachment.frames] bigint              '$.value.attachment.frames',
        [property.value.attachment.duration] float               '$.value.attachment.duration',
        [property.value.attachment.pages] bigint              '$.value.attachment.pages'
    ) j

GO

CREATE VIEW fhir.DeviceDefinitionContact AS
SELECT
    [id],
    [contact.JSON],
    [contact.id],
    [contact.extension],
    [contact.system],
    [contact.value],
    [contact.use],
    [contact.rank],
    [contact.period.id],
    [contact.period.extension],
    [contact.period.start],
    [contact.period.end]
FROM openrowset (
        BULK 'DeviceDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [contact.JSON]  VARCHAR(MAX) '$.contact'
    ) AS rowset
    CROSS APPLY openjson (rowset.[contact.JSON]) with (
        [contact.id]                   NVARCHAR(100)       '$.id',
        [contact.extension]            NVARCHAR(MAX)       '$.extension',
        [contact.system]               NVARCHAR(64)        '$.system',
        [contact.value]                NVARCHAR(4000)      '$.value',
        [contact.use]                  NVARCHAR(64)        '$.use',
        [contact.rank]                 bigint              '$.rank',
        [contact.period.id]            NVARCHAR(100)       '$.period.id',
        [contact.period.extension]     NVARCHAR(MAX)       '$.period.extension',
        [contact.period.start]         VARCHAR(64)         '$.period.start',
        [contact.period.end]           VARCHAR(64)         '$.period.end'
    ) j

GO

CREATE VIEW fhir.DeviceDefinitionLink AS
SELECT
    [id],
    [link.JSON],
    [link.id],
    [link.extension],
    [link.modifierExtension],
    [link.relation.id],
    [link.relation.extension],
    [link.relation.system],
    [link.relation.version],
    [link.relation.code],
    [link.relation.display],
    [link.relation.userSelected],
    [link.relatedDevice.id],
    [link.relatedDevice.extension],
    [link.relatedDevice.concept],
    [link.relatedDevice.reference]
FROM openrowset (
        BULK 'DeviceDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [link.JSON]  VARCHAR(MAX) '$.link'
    ) AS rowset
    CROSS APPLY openjson (rowset.[link.JSON]) with (
        [link.id]                      NVARCHAR(100)       '$.id',
        [link.extension]               NVARCHAR(MAX)       '$.extension',
        [link.modifierExtension]       NVARCHAR(MAX)       '$.modifierExtension',
        [link.relation.id]             NVARCHAR(100)       '$.relation.id',
        [link.relation.extension]      NVARCHAR(MAX)       '$.relation.extension',
        [link.relation.system]         VARCHAR(256)        '$.relation.system',
        [link.relation.version]        NVARCHAR(100)       '$.relation.version',
        [link.relation.code]           NVARCHAR(4000)      '$.relation.code',
        [link.relation.display]        NVARCHAR(4000)      '$.relation.display',
        [link.relation.userSelected]   bit                 '$.relation.userSelected',
        [link.relatedDevice.id]        NVARCHAR(100)       '$.relatedDevice.id',
        [link.relatedDevice.extension] NVARCHAR(MAX)       '$.relatedDevice.extension',
        [link.relatedDevice.concept]   NVARCHAR(MAX)       '$.relatedDevice.concept',
        [link.relatedDevice.reference] NVARCHAR(MAX)       '$.relatedDevice.reference'
    ) j

GO

CREATE VIEW fhir.DeviceDefinitionNote AS
SELECT
    [id],
    [note.JSON],
    [note.id],
    [note.extension],
    [note.time],
    [note.text],
    [note.author.reference.id],
    [note.author.reference.extension],
    [note.author.reference.reference],
    [note.author.reference.type],
    [note.author.reference.identifier],
    [note.author.reference.display],
    [note.author.string]
FROM openrowset (
        BULK 'DeviceDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [note.JSON]  VARCHAR(MAX) '$.note'
    ) AS rowset
    CROSS APPLY openjson (rowset.[note.JSON]) with (
        [note.id]                      NVARCHAR(100)       '$.id',
        [note.extension]               NVARCHAR(MAX)       '$.extension',
        [note.time]                    VARCHAR(64)         '$.time',
        [note.text]                    NVARCHAR(MAX)       '$.text',
        [note.author.reference.id]     NVARCHAR(100)       '$.author.reference.id',
        [note.author.reference.extension] NVARCHAR(MAX)       '$.author.reference.extension',
        [note.author.reference.reference] NVARCHAR(4000)      '$.author.reference.reference',
        [note.author.reference.type]   VARCHAR(256)        '$.author.reference.type',
        [note.author.reference.identifier] NVARCHAR(MAX)       '$.author.reference.identifier',
        [note.author.reference.display] NVARCHAR(4000)      '$.author.reference.display',
        [note.author.string]           NVARCHAR(4000)      '$.author.string'
    ) j

GO

CREATE VIEW fhir.DeviceDefinitionMaterial AS
SELECT
    [id],
    [material.JSON],
    [material.id],
    [material.extension],
    [material.modifierExtension],
    [material.substance.id],
    [material.substance.extension],
    [material.substance.coding],
    [material.substance.text],
    [material.alternate],
    [material.allergenicIndicator]
FROM openrowset (
        BULK 'DeviceDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [material.JSON]  VARCHAR(MAX) '$.material'
    ) AS rowset
    CROSS APPLY openjson (rowset.[material.JSON]) with (
        [material.id]                  NVARCHAR(100)       '$.id',
        [material.extension]           NVARCHAR(MAX)       '$.extension',
        [material.modifierExtension]   NVARCHAR(MAX)       '$.modifierExtension',
        [material.substance.id]        NVARCHAR(100)       '$.substance.id',
        [material.substance.extension] NVARCHAR(MAX)       '$.substance.extension',
        [material.substance.coding]    NVARCHAR(MAX)       '$.substance.coding',
        [material.substance.text]      NVARCHAR(4000)      '$.substance.text',
        [material.alternate]           bit                 '$.alternate',
        [material.allergenicIndicator] bit                 '$.allergenicIndicator'
    ) j

GO

CREATE VIEW fhir.DeviceDefinitionProductionIdentifierInUDI AS
SELECT
    [id],
    [productionIdentifierInUDI.JSON],
    [productionIdentifierInUDI]
FROM openrowset (
        BULK 'DeviceDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [productionIdentifierInUDI.JSON]  VARCHAR(MAX) '$.productionIdentifierInUDI'
    ) AS rowset
    CROSS APPLY openjson (rowset.[productionIdentifierInUDI.JSON]) with (
        [productionIdentifierInUDI]    NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.DeviceDefinitionChargeItem AS
SELECT
    [id],
    [chargeItem.JSON],
    [chargeItem.id],
    [chargeItem.extension],
    [chargeItem.modifierExtension],
    [chargeItem.chargeItemCode.id],
    [chargeItem.chargeItemCode.extension],
    [chargeItem.chargeItemCode.concept],
    [chargeItem.chargeItemCode.reference],
    [chargeItem.count.id],
    [chargeItem.count.extension],
    [chargeItem.count.value],
    [chargeItem.count.comparator],
    [chargeItem.count.unit],
    [chargeItem.count.system],
    [chargeItem.count.code],
    [chargeItem.effectivePeriod.id],
    [chargeItem.effectivePeriod.extension],
    [chargeItem.effectivePeriod.start],
    [chargeItem.effectivePeriod.end],
    [chargeItem.useContext]
FROM openrowset (
        BULK 'DeviceDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [chargeItem.JSON]  VARCHAR(MAX) '$.chargeItem'
    ) AS rowset
    CROSS APPLY openjson (rowset.[chargeItem.JSON]) with (
        [chargeItem.id]                NVARCHAR(100)       '$.id',
        [chargeItem.extension]         NVARCHAR(MAX)       '$.extension',
        [chargeItem.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [chargeItem.chargeItemCode.id] NVARCHAR(100)       '$.chargeItemCode.id',
        [chargeItem.chargeItemCode.extension] NVARCHAR(MAX)       '$.chargeItemCode.extension',
        [chargeItem.chargeItemCode.concept] NVARCHAR(MAX)       '$.chargeItemCode.concept',
        [chargeItem.chargeItemCode.reference] NVARCHAR(MAX)       '$.chargeItemCode.reference',
        [chargeItem.count.id]          NVARCHAR(100)       '$.count.id',
        [chargeItem.count.extension]   NVARCHAR(MAX)       '$.count.extension',
        [chargeItem.count.value]       float               '$.count.value',
        [chargeItem.count.comparator]  NVARCHAR(64)        '$.count.comparator',
        [chargeItem.count.unit]        NVARCHAR(100)       '$.count.unit',
        [chargeItem.count.system]      VARCHAR(256)        '$.count.system',
        [chargeItem.count.code]        NVARCHAR(4000)      '$.count.code',
        [chargeItem.effectivePeriod.id] NVARCHAR(100)       '$.effectivePeriod.id',
        [chargeItem.effectivePeriod.extension] NVARCHAR(MAX)       '$.effectivePeriod.extension',
        [chargeItem.effectivePeriod.start] VARCHAR(64)         '$.effectivePeriod.start',
        [chargeItem.effectivePeriod.end] VARCHAR(64)         '$.effectivePeriod.end',
        [chargeItem.useContext]        NVARCHAR(MAX)       '$.useContext' AS JSON
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[DeviceDispense] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [basedOn] VARCHAR(MAX),
    [partOf] VARCHAR(MAX),
    [status] NVARCHAR(100),
    [statusReason.id] NVARCHAR(100),
    [statusReason.extension] NVARCHAR(MAX),
    [statusReason.concept.id] NVARCHAR(100),
    [statusReason.concept.extension] NVARCHAR(MAX),
    [statusReason.concept.coding] NVARCHAR(MAX),
    [statusReason.concept.text] NVARCHAR(4000),
    [statusReason.reference.id] NVARCHAR(100),
    [statusReason.reference.extension] NVARCHAR(MAX),
    [statusReason.reference.reference] NVARCHAR(4000),
    [statusReason.reference.type] VARCHAR(256),
    [statusReason.reference.identifier] NVARCHAR(MAX),
    [statusReason.reference.display] NVARCHAR(4000),
    [category] VARCHAR(MAX),
    [device.id] NVARCHAR(100),
    [device.extension] NVARCHAR(MAX),
    [device.concept.id] NVARCHAR(100),
    [device.concept.extension] NVARCHAR(MAX),
    [device.concept.coding] NVARCHAR(MAX),
    [device.concept.text] NVARCHAR(4000),
    [device.reference.id] NVARCHAR(100),
    [device.reference.extension] NVARCHAR(MAX),
    [device.reference.reference] NVARCHAR(4000),
    [device.reference.type] VARCHAR(256),
    [device.reference.identifier] NVARCHAR(MAX),
    [device.reference.display] NVARCHAR(4000),
    [subject.id] NVARCHAR(100),
    [subject.extension] NVARCHAR(MAX),
    [subject.reference] NVARCHAR(4000),
    [subject.type] VARCHAR(256),
    [subject.identifier.id] NVARCHAR(100),
    [subject.identifier.extension] NVARCHAR(MAX),
    [subject.identifier.use] NVARCHAR(64),
    [subject.identifier.type] NVARCHAR(MAX),
    [subject.identifier.system] VARCHAR(256),
    [subject.identifier.value] NVARCHAR(4000),
    [subject.identifier.period] NVARCHAR(MAX),
    [subject.identifier.assigner] NVARCHAR(MAX),
    [subject.display] NVARCHAR(4000),
    [encounter.id] NVARCHAR(100),
    [encounter.extension] NVARCHAR(MAX),
    [encounter.reference] NVARCHAR(4000),
    [encounter.type] VARCHAR(256),
    [encounter.identifier.id] NVARCHAR(100),
    [encounter.identifier.extension] NVARCHAR(MAX),
    [encounter.identifier.use] NVARCHAR(64),
    [encounter.identifier.type] NVARCHAR(MAX),
    [encounter.identifier.system] VARCHAR(256),
    [encounter.identifier.value] NVARCHAR(4000),
    [encounter.identifier.period] NVARCHAR(MAX),
    [encounter.identifier.assigner] NVARCHAR(MAX),
    [encounter.display] NVARCHAR(4000),
    [supportingInformation] VARCHAR(MAX),
    [performer] VARCHAR(MAX),
    [location.id] NVARCHAR(100),
    [location.extension] NVARCHAR(MAX),
    [location.reference] NVARCHAR(4000),
    [location.type] VARCHAR(256),
    [location.identifier.id] NVARCHAR(100),
    [location.identifier.extension] NVARCHAR(MAX),
    [location.identifier.use] NVARCHAR(64),
    [location.identifier.type] NVARCHAR(MAX),
    [location.identifier.system] VARCHAR(256),
    [location.identifier.value] NVARCHAR(4000),
    [location.identifier.period] NVARCHAR(MAX),
    [location.identifier.assigner] NVARCHAR(MAX),
    [location.display] NVARCHAR(4000),
    [type.id] NVARCHAR(100),
    [type.extension] NVARCHAR(MAX),
    [type.coding] VARCHAR(MAX),
    [type.text] NVARCHAR(4000),
    [quantity.id] NVARCHAR(100),
    [quantity.extension] NVARCHAR(MAX),
    [quantity.value] float,
    [quantity.comparator] NVARCHAR(64),
    [quantity.unit] NVARCHAR(100),
    [quantity.system] VARCHAR(256),
    [quantity.code] NVARCHAR(4000),
    [preparedDate] VARCHAR(64),
    [whenHandedOver] VARCHAR(64),
    [destination.id] NVARCHAR(100),
    [destination.extension] NVARCHAR(MAX),
    [destination.reference] NVARCHAR(4000),
    [destination.type] VARCHAR(256),
    [destination.identifier.id] NVARCHAR(100),
    [destination.identifier.extension] NVARCHAR(MAX),
    [destination.identifier.use] NVARCHAR(64),
    [destination.identifier.type] NVARCHAR(MAX),
    [destination.identifier.system] VARCHAR(256),
    [destination.identifier.value] NVARCHAR(4000),
    [destination.identifier.period] NVARCHAR(MAX),
    [destination.identifier.assigner] NVARCHAR(MAX),
    [destination.display] NVARCHAR(4000),
    [note] VARCHAR(MAX),
    [usageInstruction] NVARCHAR(4000),
    [eventHistory] VARCHAR(MAX),
) WITH (
    LOCATION='/DeviceDispense/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.DeviceDispenseIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'DeviceDispense/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.DeviceDispenseBasedOn AS
SELECT
    [id],
    [basedOn.JSON],
    [basedOn.id],
    [basedOn.extension],
    [basedOn.reference],
    [basedOn.type],
    [basedOn.identifier.id],
    [basedOn.identifier.extension],
    [basedOn.identifier.use],
    [basedOn.identifier.type],
    [basedOn.identifier.system],
    [basedOn.identifier.value],
    [basedOn.identifier.period],
    [basedOn.identifier.assigner],
    [basedOn.display]
FROM openrowset (
        BULK 'DeviceDispense/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [basedOn.JSON]  VARCHAR(MAX) '$.basedOn'
    ) AS rowset
    CROSS APPLY openjson (rowset.[basedOn.JSON]) with (
        [basedOn.id]                   NVARCHAR(100)       '$.id',
        [basedOn.extension]            NVARCHAR(MAX)       '$.extension',
        [basedOn.reference]            NVARCHAR(4000)      '$.reference',
        [basedOn.type]                 VARCHAR(256)        '$.type',
        [basedOn.identifier.id]        NVARCHAR(100)       '$.identifier.id',
        [basedOn.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [basedOn.identifier.use]       NVARCHAR(64)        '$.identifier.use',
        [basedOn.identifier.type]      NVARCHAR(MAX)       '$.identifier.type',
        [basedOn.identifier.system]    VARCHAR(256)        '$.identifier.system',
        [basedOn.identifier.value]     NVARCHAR(4000)      '$.identifier.value',
        [basedOn.identifier.period]    NVARCHAR(MAX)       '$.identifier.period',
        [basedOn.identifier.assigner]  NVARCHAR(MAX)       '$.identifier.assigner',
        [basedOn.display]              NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.DeviceDispensePartOf AS
SELECT
    [id],
    [partOf.JSON],
    [partOf.id],
    [partOf.extension],
    [partOf.reference],
    [partOf.type],
    [partOf.identifier.id],
    [partOf.identifier.extension],
    [partOf.identifier.use],
    [partOf.identifier.type],
    [partOf.identifier.system],
    [partOf.identifier.value],
    [partOf.identifier.period],
    [partOf.identifier.assigner],
    [partOf.display]
FROM openrowset (
        BULK 'DeviceDispense/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [partOf.JSON]  VARCHAR(MAX) '$.partOf'
    ) AS rowset
    CROSS APPLY openjson (rowset.[partOf.JSON]) with (
        [partOf.id]                    NVARCHAR(100)       '$.id',
        [partOf.extension]             NVARCHAR(MAX)       '$.extension',
        [partOf.reference]             NVARCHAR(4000)      '$.reference',
        [partOf.type]                  VARCHAR(256)        '$.type',
        [partOf.identifier.id]         NVARCHAR(100)       '$.identifier.id',
        [partOf.identifier.extension]  NVARCHAR(MAX)       '$.identifier.extension',
        [partOf.identifier.use]        NVARCHAR(64)        '$.identifier.use',
        [partOf.identifier.type]       NVARCHAR(MAX)       '$.identifier.type',
        [partOf.identifier.system]     VARCHAR(256)        '$.identifier.system',
        [partOf.identifier.value]      NVARCHAR(4000)      '$.identifier.value',
        [partOf.identifier.period]     NVARCHAR(MAX)       '$.identifier.period',
        [partOf.identifier.assigner]   NVARCHAR(MAX)       '$.identifier.assigner',
        [partOf.display]               NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.DeviceDispenseCategory AS
SELECT
    [id],
    [category.JSON],
    [category.id],
    [category.extension],
    [category.coding],
    [category.text]
FROM openrowset (
        BULK 'DeviceDispense/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [category.JSON]  VARCHAR(MAX) '$.category'
    ) AS rowset
    CROSS APPLY openjson (rowset.[category.JSON]) with (
        [category.id]                  NVARCHAR(100)       '$.id',
        [category.extension]           NVARCHAR(MAX)       '$.extension',
        [category.coding]              NVARCHAR(MAX)       '$.coding' AS JSON,
        [category.text]                NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.DeviceDispenseSupportingInformation AS
SELECT
    [id],
    [supportingInformation.JSON],
    [supportingInformation.id],
    [supportingInformation.extension],
    [supportingInformation.reference],
    [supportingInformation.type],
    [supportingInformation.identifier.id],
    [supportingInformation.identifier.extension],
    [supportingInformation.identifier.use],
    [supportingInformation.identifier.type],
    [supportingInformation.identifier.system],
    [supportingInformation.identifier.value],
    [supportingInformation.identifier.period],
    [supportingInformation.identifier.assigner],
    [supportingInformation.display]
FROM openrowset (
        BULK 'DeviceDispense/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [supportingInformation.JSON]  VARCHAR(MAX) '$.supportingInformation'
    ) AS rowset
    CROSS APPLY openjson (rowset.[supportingInformation.JSON]) with (
        [supportingInformation.id]     NVARCHAR(100)       '$.id',
        [supportingInformation.extension] NVARCHAR(MAX)       '$.extension',
        [supportingInformation.reference] NVARCHAR(4000)      '$.reference',
        [supportingInformation.type]   VARCHAR(256)        '$.type',
        [supportingInformation.identifier.id] NVARCHAR(100)       '$.identifier.id',
        [supportingInformation.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [supportingInformation.identifier.use] NVARCHAR(64)        '$.identifier.use',
        [supportingInformation.identifier.type] NVARCHAR(MAX)       '$.identifier.type',
        [supportingInformation.identifier.system] VARCHAR(256)        '$.identifier.system',
        [supportingInformation.identifier.value] NVARCHAR(4000)      '$.identifier.value',
        [supportingInformation.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [supportingInformation.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [supportingInformation.display] NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.DeviceDispensePerformer AS
SELECT
    [id],
    [performer.JSON],
    [performer.id],
    [performer.extension],
    [performer.modifierExtension],
    [performer.function.id],
    [performer.function.extension],
    [performer.function.coding],
    [performer.function.text],
    [performer.actor.id],
    [performer.actor.extension],
    [performer.actor.reference],
    [performer.actor.type],
    [performer.actor.identifier],
    [performer.actor.display]
FROM openrowset (
        BULK 'DeviceDispense/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [performer.JSON]  VARCHAR(MAX) '$.performer'
    ) AS rowset
    CROSS APPLY openjson (rowset.[performer.JSON]) with (
        [performer.id]                 NVARCHAR(100)       '$.id',
        [performer.extension]          NVARCHAR(MAX)       '$.extension',
        [performer.modifierExtension]  NVARCHAR(MAX)       '$.modifierExtension',
        [performer.function.id]        NVARCHAR(100)       '$.function.id',
        [performer.function.extension] NVARCHAR(MAX)       '$.function.extension',
        [performer.function.coding]    NVARCHAR(MAX)       '$.function.coding',
        [performer.function.text]      NVARCHAR(4000)      '$.function.text',
        [performer.actor.id]           NVARCHAR(100)       '$.actor.id',
        [performer.actor.extension]    NVARCHAR(MAX)       '$.actor.extension',
        [performer.actor.reference]    NVARCHAR(4000)      '$.actor.reference',
        [performer.actor.type]         VARCHAR(256)        '$.actor.type',
        [performer.actor.identifier]   NVARCHAR(MAX)       '$.actor.identifier',
        [performer.actor.display]      NVARCHAR(4000)      '$.actor.display'
    ) j

GO

CREATE VIEW fhir.DeviceDispenseNote AS
SELECT
    [id],
    [note.JSON],
    [note.id],
    [note.extension],
    [note.time],
    [note.text],
    [note.author.reference.id],
    [note.author.reference.extension],
    [note.author.reference.reference],
    [note.author.reference.type],
    [note.author.reference.identifier],
    [note.author.reference.display],
    [note.author.string]
FROM openrowset (
        BULK 'DeviceDispense/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [note.JSON]  VARCHAR(MAX) '$.note'
    ) AS rowset
    CROSS APPLY openjson (rowset.[note.JSON]) with (
        [note.id]                      NVARCHAR(100)       '$.id',
        [note.extension]               NVARCHAR(MAX)       '$.extension',
        [note.time]                    VARCHAR(64)         '$.time',
        [note.text]                    NVARCHAR(MAX)       '$.text',
        [note.author.reference.id]     NVARCHAR(100)       '$.author.reference.id',
        [note.author.reference.extension] NVARCHAR(MAX)       '$.author.reference.extension',
        [note.author.reference.reference] NVARCHAR(4000)      '$.author.reference.reference',
        [note.author.reference.type]   VARCHAR(256)        '$.author.reference.type',
        [note.author.reference.identifier] NVARCHAR(MAX)       '$.author.reference.identifier',
        [note.author.reference.display] NVARCHAR(4000)      '$.author.reference.display',
        [note.author.string]           NVARCHAR(4000)      '$.author.string'
    ) j

GO

CREATE VIEW fhir.DeviceDispenseEventHistory AS
SELECT
    [id],
    [eventHistory.JSON],
    [eventHistory.id],
    [eventHistory.extension],
    [eventHistory.reference],
    [eventHistory.type],
    [eventHistory.identifier.id],
    [eventHistory.identifier.extension],
    [eventHistory.identifier.use],
    [eventHistory.identifier.type],
    [eventHistory.identifier.system],
    [eventHistory.identifier.value],
    [eventHistory.identifier.period],
    [eventHistory.identifier.assigner],
    [eventHistory.display]
FROM openrowset (
        BULK 'DeviceDispense/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [eventHistory.JSON]  VARCHAR(MAX) '$.eventHistory'
    ) AS rowset
    CROSS APPLY openjson (rowset.[eventHistory.JSON]) with (
        [eventHistory.id]              NVARCHAR(100)       '$.id',
        [eventHistory.extension]       NVARCHAR(MAX)       '$.extension',
        [eventHistory.reference]       NVARCHAR(4000)      '$.reference',
        [eventHistory.type]            VARCHAR(256)        '$.type',
        [eventHistory.identifier.id]   NVARCHAR(100)       '$.identifier.id',
        [eventHistory.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [eventHistory.identifier.use]  NVARCHAR(64)        '$.identifier.use',
        [eventHistory.identifier.type] NVARCHAR(MAX)       '$.identifier.type',
        [eventHistory.identifier.system] VARCHAR(256)        '$.identifier.system',
        [eventHistory.identifier.value] NVARCHAR(4000)      '$.identifier.value',
        [eventHistory.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [eventHistory.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [eventHistory.display]         NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[DeviceMetric] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [type.id] NVARCHAR(100),
    [type.extension] NVARCHAR(MAX),
    [type.coding] VARCHAR(MAX),
    [type.text] NVARCHAR(4000),
    [unit.id] NVARCHAR(100),
    [unit.extension] NVARCHAR(MAX),
    [unit.coding] VARCHAR(MAX),
    [unit.text] NVARCHAR(4000),
    [source.id] NVARCHAR(100),
    [source.extension] NVARCHAR(MAX),
    [source.reference] NVARCHAR(4000),
    [source.type] VARCHAR(256),
    [source.identifier.id] NVARCHAR(100),
    [source.identifier.extension] NVARCHAR(MAX),
    [source.identifier.use] NVARCHAR(64),
    [source.identifier.type] NVARCHAR(MAX),
    [source.identifier.system] VARCHAR(256),
    [source.identifier.value] NVARCHAR(4000),
    [source.identifier.period] NVARCHAR(MAX),
    [source.identifier.assigner] NVARCHAR(MAX),
    [source.display] NVARCHAR(4000),
    [parent.id] NVARCHAR(100),
    [parent.extension] NVARCHAR(MAX),
    [parent.reference] NVARCHAR(4000),
    [parent.type] VARCHAR(256),
    [parent.identifier.id] NVARCHAR(100),
    [parent.identifier.extension] NVARCHAR(MAX),
    [parent.identifier.use] NVARCHAR(64),
    [parent.identifier.type] NVARCHAR(MAX),
    [parent.identifier.system] VARCHAR(256),
    [parent.identifier.value] NVARCHAR(4000),
    [parent.identifier.period] NVARCHAR(MAX),
    [parent.identifier.assigner] NVARCHAR(MAX),
    [parent.display] NVARCHAR(4000),
    [operationalStatus] NVARCHAR(4000),
    [color] NVARCHAR(4000),
    [category] NVARCHAR(4000),
    [measurementPeriod.id] NVARCHAR(100),
    [measurementPeriod.extension] NVARCHAR(MAX),
    [measurementPeriod.modifierExtension] NVARCHAR(MAX),
    [measurementPeriod.event] VARCHAR(MAX),
    [measurementPeriod.repeat.id] NVARCHAR(100),
    [measurementPeriod.repeat.extension] NVARCHAR(MAX),
    [measurementPeriod.repeat.modifierExtension] NVARCHAR(MAX),
    [measurementPeriod.repeat.count] bigint,
    [measurementPeriod.repeat.countMax] bigint,
    [measurementPeriod.repeat.duration] float,
    [measurementPeriod.repeat.durationMax] float,
    [measurementPeriod.repeat.durationUnit] NVARCHAR(64),
    [measurementPeriod.repeat.frequency] bigint,
    [measurementPeriod.repeat.frequencyMax] bigint,
    [measurementPeriod.repeat.period] float,
    [measurementPeriod.repeat.periodMax] float,
    [measurementPeriod.repeat.periodUnit] NVARCHAR(64),
    [measurementPeriod.repeat.dayOfWeek] NVARCHAR(MAX),
    [measurementPeriod.repeat.timeOfDay] NVARCHAR(MAX),
    [measurementPeriod.repeat.when] NVARCHAR(MAX),
    [measurementPeriod.repeat.offset] bigint,
    [measurementPeriod.repeat.bounds.duration] NVARCHAR(MAX),
    [measurementPeriod.repeat.bounds.range] NVARCHAR(MAX),
    [measurementPeriod.repeat.bounds.period] NVARCHAR(MAX),
    [measurementPeriod.code.id] NVARCHAR(100),
    [measurementPeriod.code.extension] NVARCHAR(MAX),
    [measurementPeriod.code.coding] NVARCHAR(MAX),
    [measurementPeriod.code.text] NVARCHAR(4000),
    [calibration] VARCHAR(MAX),
) WITH (
    LOCATION='/DeviceMetric/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.DeviceMetricIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'DeviceMetric/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.DeviceMetricCalibration AS
SELECT
    [id],
    [calibration.JSON],
    [calibration.id],
    [calibration.extension],
    [calibration.modifierExtension],
    [calibration.type],
    [calibration.state],
    [calibration.time]
FROM openrowset (
        BULK 'DeviceMetric/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [calibration.JSON]  VARCHAR(MAX) '$.calibration'
    ) AS rowset
    CROSS APPLY openjson (rowset.[calibration.JSON]) with (
        [calibration.id]               NVARCHAR(100)       '$.id',
        [calibration.extension]        NVARCHAR(MAX)       '$.extension',
        [calibration.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [calibration.type]             NVARCHAR(100)       '$.type',
        [calibration.state]            NVARCHAR(4000)      '$.state',
        [calibration.time]             VARCHAR(64)         '$.time'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[DeviceRequest] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [instantiatesCanonical] VARCHAR(MAX),
    [instantiatesUri] VARCHAR(MAX),
    [basedOn] VARCHAR(MAX),
    [priorRequest] VARCHAR(MAX),
    [groupIdentifier.id] NVARCHAR(100),
    [groupIdentifier.extension] NVARCHAR(MAX),
    [groupIdentifier.use] NVARCHAR(64),
    [groupIdentifier.type.id] NVARCHAR(100),
    [groupIdentifier.type.extension] NVARCHAR(MAX),
    [groupIdentifier.type.coding] NVARCHAR(MAX),
    [groupIdentifier.type.text] NVARCHAR(4000),
    [groupIdentifier.system] VARCHAR(256),
    [groupIdentifier.value] NVARCHAR(4000),
    [groupIdentifier.period.id] NVARCHAR(100),
    [groupIdentifier.period.extension] NVARCHAR(MAX),
    [groupIdentifier.period.start] VARCHAR(64),
    [groupIdentifier.period.end] VARCHAR(64),
    [groupIdentifier.assigner.id] NVARCHAR(100),
    [groupIdentifier.assigner.extension] NVARCHAR(MAX),
    [groupIdentifier.assigner.reference] NVARCHAR(4000),
    [groupIdentifier.assigner.type] VARCHAR(256),
    [groupIdentifier.assigner.identifier] NVARCHAR(MAX),
    [groupIdentifier.assigner.display] NVARCHAR(4000),
    [status] NVARCHAR(100),
    [intent] NVARCHAR(100),
    [priority] NVARCHAR(100),
    [doNotPerform] bit,
    [code.id] NVARCHAR(100),
    [code.extension] NVARCHAR(MAX),
    [code.concept.id] NVARCHAR(100),
    [code.concept.extension] NVARCHAR(MAX),
    [code.concept.coding] NVARCHAR(MAX),
    [code.concept.text] NVARCHAR(4000),
    [code.reference.id] NVARCHAR(100),
    [code.reference.extension] NVARCHAR(MAX),
    [code.reference.reference] NVARCHAR(4000),
    [code.reference.type] VARCHAR(256),
    [code.reference.identifier] NVARCHAR(MAX),
    [code.reference.display] NVARCHAR(4000),
    [quantity] bigint,
    [parameter] VARCHAR(MAX),
    [subject.id] NVARCHAR(100),
    [subject.extension] NVARCHAR(MAX),
    [subject.reference] NVARCHAR(4000),
    [subject.type] VARCHAR(256),
    [subject.identifier.id] NVARCHAR(100),
    [subject.identifier.extension] NVARCHAR(MAX),
    [subject.identifier.use] NVARCHAR(64),
    [subject.identifier.type] NVARCHAR(MAX),
    [subject.identifier.system] VARCHAR(256),
    [subject.identifier.value] NVARCHAR(4000),
    [subject.identifier.period] NVARCHAR(MAX),
    [subject.identifier.assigner] NVARCHAR(MAX),
    [subject.display] NVARCHAR(4000),
    [encounter.id] NVARCHAR(100),
    [encounter.extension] NVARCHAR(MAX),
    [encounter.reference] NVARCHAR(4000),
    [encounter.type] VARCHAR(256),
    [encounter.identifier.id] NVARCHAR(100),
    [encounter.identifier.extension] NVARCHAR(MAX),
    [encounter.identifier.use] NVARCHAR(64),
    [encounter.identifier.type] NVARCHAR(MAX),
    [encounter.identifier.system] VARCHAR(256),
    [encounter.identifier.value] NVARCHAR(4000),
    [encounter.identifier.period] NVARCHAR(MAX),
    [encounter.identifier.assigner] NVARCHAR(MAX),
    [encounter.display] NVARCHAR(4000),
    [authoredOn] VARCHAR(64),
    [requester.id] NVARCHAR(100),
    [requester.extension] NVARCHAR(MAX),
    [requester.reference] NVARCHAR(4000),
    [requester.type] VARCHAR(256),
    [requester.identifier.id] NVARCHAR(100),
    [requester.identifier.extension] NVARCHAR(MAX),
    [requester.identifier.use] NVARCHAR(64),
    [requester.identifier.type] NVARCHAR(MAX),
    [requester.identifier.system] VARCHAR(256),
    [requester.identifier.value] NVARCHAR(4000),
    [requester.identifier.period] NVARCHAR(MAX),
    [requester.identifier.assigner] NVARCHAR(MAX),
    [requester.display] NVARCHAR(4000),
    [performerType.id] NVARCHAR(100),
    [performerType.extension] NVARCHAR(MAX),
    [performerType.coding] VARCHAR(MAX),
    [performerType.text] NVARCHAR(4000),
    [performer.id] NVARCHAR(100),
    [performer.extension] NVARCHAR(MAX),
    [performer.reference] NVARCHAR(4000),
    [performer.type] VARCHAR(256),
    [performer.identifier.id] NVARCHAR(100),
    [performer.identifier.extension] NVARCHAR(MAX),
    [performer.identifier.use] NVARCHAR(64),
    [performer.identifier.type] NVARCHAR(MAX),
    [performer.identifier.system] VARCHAR(256),
    [performer.identifier.value] NVARCHAR(4000),
    [performer.identifier.period] NVARCHAR(MAX),
    [performer.identifier.assigner] NVARCHAR(MAX),
    [performer.display] NVARCHAR(4000),
    [reason] VARCHAR(MAX),
    [insurance] VARCHAR(MAX),
    [supportingInfo] VARCHAR(MAX),
    [note] VARCHAR(MAX),
    [relevantHistory] VARCHAR(MAX),
    [occurrence.dateTime] VARCHAR(64),
    [occurrence.period.id] NVARCHAR(100),
    [occurrence.period.extension] NVARCHAR(MAX),
    [occurrence.period.start] VARCHAR(64),
    [occurrence.period.end] VARCHAR(64),
    [occurrence.timing.id] NVARCHAR(100),
    [occurrence.timing.extension] NVARCHAR(MAX),
    [occurrence.timing.modifierExtension] NVARCHAR(MAX),
    [occurrence.timing.event] VARCHAR(MAX),
    [occurrence.timing.repeat.id] NVARCHAR(100),
    [occurrence.timing.repeat.extension] NVARCHAR(MAX),
    [occurrence.timing.repeat.modifierExtension] NVARCHAR(MAX),
    [occurrence.timing.repeat.count] bigint,
    [occurrence.timing.repeat.countMax] bigint,
    [occurrence.timing.repeat.duration] float,
    [occurrence.timing.repeat.durationMax] float,
    [occurrence.timing.repeat.durationUnit] NVARCHAR(64),
    [occurrence.timing.repeat.frequency] bigint,
    [occurrence.timing.repeat.frequencyMax] bigint,
    [occurrence.timing.repeat.period] float,
    [occurrence.timing.repeat.periodMax] float,
    [occurrence.timing.repeat.periodUnit] NVARCHAR(64),
    [occurrence.timing.repeat.dayOfWeek] NVARCHAR(MAX),
    [occurrence.timing.repeat.timeOfDay] NVARCHAR(MAX),
    [occurrence.timing.repeat.when] NVARCHAR(MAX),
    [occurrence.timing.repeat.offset] bigint,
    [occurrence.timing.repeat.bounds.duration] NVARCHAR(MAX),
    [occurrence.timing.repeat.bounds.range] NVARCHAR(MAX),
    [occurrence.timing.repeat.bounds.period] NVARCHAR(MAX),
    [occurrence.timing.code.id] NVARCHAR(100),
    [occurrence.timing.code.extension] NVARCHAR(MAX),
    [occurrence.timing.code.coding] NVARCHAR(MAX),
    [occurrence.timing.code.text] NVARCHAR(4000),
) WITH (
    LOCATION='/DeviceRequest/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.DeviceRequestIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'DeviceRequest/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.DeviceRequestInstantiatesCanonical AS
SELECT
    [id],
    [instantiatesCanonical.JSON],
    [instantiatesCanonical]
FROM openrowset (
        BULK 'DeviceRequest/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [instantiatesCanonical.JSON]  VARCHAR(MAX) '$.instantiatesCanonical'
    ) AS rowset
    CROSS APPLY openjson (rowset.[instantiatesCanonical.JSON]) with (
        [instantiatesCanonical]        NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.DeviceRequestInstantiatesUri AS
SELECT
    [id],
    [instantiatesUri.JSON],
    [instantiatesUri]
FROM openrowset (
        BULK 'DeviceRequest/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [instantiatesUri.JSON]  VARCHAR(MAX) '$.instantiatesUri'
    ) AS rowset
    CROSS APPLY openjson (rowset.[instantiatesUri.JSON]) with (
        [instantiatesUri]              NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.DeviceRequestBasedOn AS
SELECT
    [id],
    [basedOn.JSON],
    [basedOn.id],
    [basedOn.extension],
    [basedOn.reference],
    [basedOn.type],
    [basedOn.identifier.id],
    [basedOn.identifier.extension],
    [basedOn.identifier.use],
    [basedOn.identifier.type],
    [basedOn.identifier.system],
    [basedOn.identifier.value],
    [basedOn.identifier.period],
    [basedOn.identifier.assigner],
    [basedOn.display]
FROM openrowset (
        BULK 'DeviceRequest/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [basedOn.JSON]  VARCHAR(MAX) '$.basedOn'
    ) AS rowset
    CROSS APPLY openjson (rowset.[basedOn.JSON]) with (
        [basedOn.id]                   NVARCHAR(100)       '$.id',
        [basedOn.extension]            NVARCHAR(MAX)       '$.extension',
        [basedOn.reference]            NVARCHAR(4000)      '$.reference',
        [basedOn.type]                 VARCHAR(256)        '$.type',
        [basedOn.identifier.id]        NVARCHAR(100)       '$.identifier.id',
        [basedOn.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [basedOn.identifier.use]       NVARCHAR(64)        '$.identifier.use',
        [basedOn.identifier.type]      NVARCHAR(MAX)       '$.identifier.type',
        [basedOn.identifier.system]    VARCHAR(256)        '$.identifier.system',
        [basedOn.identifier.value]     NVARCHAR(4000)      '$.identifier.value',
        [basedOn.identifier.period]    NVARCHAR(MAX)       '$.identifier.period',
        [basedOn.identifier.assigner]  NVARCHAR(MAX)       '$.identifier.assigner',
        [basedOn.display]              NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.DeviceRequestPriorRequest AS
SELECT
    [id],
    [priorRequest.JSON],
    [priorRequest.id],
    [priorRequest.extension],
    [priorRequest.reference],
    [priorRequest.type],
    [priorRequest.identifier.id],
    [priorRequest.identifier.extension],
    [priorRequest.identifier.use],
    [priorRequest.identifier.type],
    [priorRequest.identifier.system],
    [priorRequest.identifier.value],
    [priorRequest.identifier.period],
    [priorRequest.identifier.assigner],
    [priorRequest.display]
FROM openrowset (
        BULK 'DeviceRequest/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [priorRequest.JSON]  VARCHAR(MAX) '$.priorRequest'
    ) AS rowset
    CROSS APPLY openjson (rowset.[priorRequest.JSON]) with (
        [priorRequest.id]              NVARCHAR(100)       '$.id',
        [priorRequest.extension]       NVARCHAR(MAX)       '$.extension',
        [priorRequest.reference]       NVARCHAR(4000)      '$.reference',
        [priorRequest.type]            VARCHAR(256)        '$.type',
        [priorRequest.identifier.id]   NVARCHAR(100)       '$.identifier.id',
        [priorRequest.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [priorRequest.identifier.use]  NVARCHAR(64)        '$.identifier.use',
        [priorRequest.identifier.type] NVARCHAR(MAX)       '$.identifier.type',
        [priorRequest.identifier.system] VARCHAR(256)        '$.identifier.system',
        [priorRequest.identifier.value] NVARCHAR(4000)      '$.identifier.value',
        [priorRequest.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [priorRequest.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [priorRequest.display]         NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.DeviceRequestParameter AS
SELECT
    [id],
    [parameter.JSON],
    [parameter.id],
    [parameter.extension],
    [parameter.modifierExtension],
    [parameter.code.id],
    [parameter.code.extension],
    [parameter.code.coding],
    [parameter.code.text],
    [parameter.value.codeableConcept.id],
    [parameter.value.codeableConcept.extension],
    [parameter.value.codeableConcept.coding],
    [parameter.value.codeableConcept.text],
    [parameter.value.quantity.id],
    [parameter.value.quantity.extension],
    [parameter.value.quantity.value],
    [parameter.value.quantity.comparator],
    [parameter.value.quantity.unit],
    [parameter.value.quantity.system],
    [parameter.value.quantity.code],
    [parameter.value.range.id],
    [parameter.value.range.extension],
    [parameter.value.range.low],
    [parameter.value.range.high],
    [parameter.value.boolean]
FROM openrowset (
        BULK 'DeviceRequest/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [parameter.JSON]  VARCHAR(MAX) '$.parameter'
    ) AS rowset
    CROSS APPLY openjson (rowset.[parameter.JSON]) with (
        [parameter.id]                 NVARCHAR(100)       '$.id',
        [parameter.extension]          NVARCHAR(MAX)       '$.extension',
        [parameter.modifierExtension]  NVARCHAR(MAX)       '$.modifierExtension',
        [parameter.code.id]            NVARCHAR(100)       '$.code.id',
        [parameter.code.extension]     NVARCHAR(MAX)       '$.code.extension',
        [parameter.code.coding]        NVARCHAR(MAX)       '$.code.coding',
        [parameter.code.text]          NVARCHAR(4000)      '$.code.text',
        [parameter.value.codeableConcept.id] NVARCHAR(100)       '$.value.codeableConcept.id',
        [parameter.value.codeableConcept.extension] NVARCHAR(MAX)       '$.value.codeableConcept.extension',
        [parameter.value.codeableConcept.coding] NVARCHAR(MAX)       '$.value.codeableConcept.coding',
        [parameter.value.codeableConcept.text] NVARCHAR(4000)      '$.value.codeableConcept.text',
        [parameter.value.quantity.id]  NVARCHAR(100)       '$.value.quantity.id',
        [parameter.value.quantity.extension] NVARCHAR(MAX)       '$.value.quantity.extension',
        [parameter.value.quantity.value] float               '$.value.quantity.value',
        [parameter.value.quantity.comparator] NVARCHAR(64)        '$.value.quantity.comparator',
        [parameter.value.quantity.unit] NVARCHAR(100)       '$.value.quantity.unit',
        [parameter.value.quantity.system] VARCHAR(256)        '$.value.quantity.system',
        [parameter.value.quantity.code] NVARCHAR(4000)      '$.value.quantity.code',
        [parameter.value.range.id]     NVARCHAR(100)       '$.value.range.id',
        [parameter.value.range.extension] NVARCHAR(MAX)       '$.value.range.extension',
        [parameter.value.range.low]    NVARCHAR(MAX)       '$.value.range.low',
        [parameter.value.range.high]   NVARCHAR(MAX)       '$.value.range.high',
        [parameter.value.boolean]      bit                 '$.value.boolean'
    ) j

GO

CREATE VIEW fhir.DeviceRequestReason AS
SELECT
    [id],
    [reason.JSON],
    [reason.id],
    [reason.extension],
    [reason.concept.id],
    [reason.concept.extension],
    [reason.concept.coding],
    [reason.concept.text],
    [reason.reference.id],
    [reason.reference.extension],
    [reason.reference.reference],
    [reason.reference.type],
    [reason.reference.identifier],
    [reason.reference.display]
FROM openrowset (
        BULK 'DeviceRequest/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [reason.JSON]  VARCHAR(MAX) '$.reason'
    ) AS rowset
    CROSS APPLY openjson (rowset.[reason.JSON]) with (
        [reason.id]                    NVARCHAR(100)       '$.id',
        [reason.extension]             NVARCHAR(MAX)       '$.extension',
        [reason.concept.id]            NVARCHAR(100)       '$.concept.id',
        [reason.concept.extension]     NVARCHAR(MAX)       '$.concept.extension',
        [reason.concept.coding]        NVARCHAR(MAX)       '$.concept.coding',
        [reason.concept.text]          NVARCHAR(4000)      '$.concept.text',
        [reason.reference.id]          NVARCHAR(100)       '$.reference.id',
        [reason.reference.extension]   NVARCHAR(MAX)       '$.reference.extension',
        [reason.reference.reference]   NVARCHAR(4000)      '$.reference.reference',
        [reason.reference.type]        VARCHAR(256)        '$.reference.type',
        [reason.reference.identifier]  NVARCHAR(MAX)       '$.reference.identifier',
        [reason.reference.display]     NVARCHAR(4000)      '$.reference.display'
    ) j

GO

CREATE VIEW fhir.DeviceRequestInsurance AS
SELECT
    [id],
    [insurance.JSON],
    [insurance.id],
    [insurance.extension],
    [insurance.reference],
    [insurance.type],
    [insurance.identifier.id],
    [insurance.identifier.extension],
    [insurance.identifier.use],
    [insurance.identifier.type],
    [insurance.identifier.system],
    [insurance.identifier.value],
    [insurance.identifier.period],
    [insurance.identifier.assigner],
    [insurance.display]
FROM openrowset (
        BULK 'DeviceRequest/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [insurance.JSON]  VARCHAR(MAX) '$.insurance'
    ) AS rowset
    CROSS APPLY openjson (rowset.[insurance.JSON]) with (
        [insurance.id]                 NVARCHAR(100)       '$.id',
        [insurance.extension]          NVARCHAR(MAX)       '$.extension',
        [insurance.reference]          NVARCHAR(4000)      '$.reference',
        [insurance.type]               VARCHAR(256)        '$.type',
        [insurance.identifier.id]      NVARCHAR(100)       '$.identifier.id',
        [insurance.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [insurance.identifier.use]     NVARCHAR(64)        '$.identifier.use',
        [insurance.identifier.type]    NVARCHAR(MAX)       '$.identifier.type',
        [insurance.identifier.system]  VARCHAR(256)        '$.identifier.system',
        [insurance.identifier.value]   NVARCHAR(4000)      '$.identifier.value',
        [insurance.identifier.period]  NVARCHAR(MAX)       '$.identifier.period',
        [insurance.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [insurance.display]            NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.DeviceRequestSupportingInfo AS
SELECT
    [id],
    [supportingInfo.JSON],
    [supportingInfo.id],
    [supportingInfo.extension],
    [supportingInfo.reference],
    [supportingInfo.type],
    [supportingInfo.identifier.id],
    [supportingInfo.identifier.extension],
    [supportingInfo.identifier.use],
    [supportingInfo.identifier.type],
    [supportingInfo.identifier.system],
    [supportingInfo.identifier.value],
    [supportingInfo.identifier.period],
    [supportingInfo.identifier.assigner],
    [supportingInfo.display]
FROM openrowset (
        BULK 'DeviceRequest/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [supportingInfo.JSON]  VARCHAR(MAX) '$.supportingInfo'
    ) AS rowset
    CROSS APPLY openjson (rowset.[supportingInfo.JSON]) with (
        [supportingInfo.id]            NVARCHAR(100)       '$.id',
        [supportingInfo.extension]     NVARCHAR(MAX)       '$.extension',
        [supportingInfo.reference]     NVARCHAR(4000)      '$.reference',
        [supportingInfo.type]          VARCHAR(256)        '$.type',
        [supportingInfo.identifier.id] NVARCHAR(100)       '$.identifier.id',
        [supportingInfo.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [supportingInfo.identifier.use] NVARCHAR(64)        '$.identifier.use',
        [supportingInfo.identifier.type] NVARCHAR(MAX)       '$.identifier.type',
        [supportingInfo.identifier.system] VARCHAR(256)        '$.identifier.system',
        [supportingInfo.identifier.value] NVARCHAR(4000)      '$.identifier.value',
        [supportingInfo.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [supportingInfo.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [supportingInfo.display]       NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.DeviceRequestNote AS
SELECT
    [id],
    [note.JSON],
    [note.id],
    [note.extension],
    [note.time],
    [note.text],
    [note.author.reference.id],
    [note.author.reference.extension],
    [note.author.reference.reference],
    [note.author.reference.type],
    [note.author.reference.identifier],
    [note.author.reference.display],
    [note.author.string]
FROM openrowset (
        BULK 'DeviceRequest/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [note.JSON]  VARCHAR(MAX) '$.note'
    ) AS rowset
    CROSS APPLY openjson (rowset.[note.JSON]) with (
        [note.id]                      NVARCHAR(100)       '$.id',
        [note.extension]               NVARCHAR(MAX)       '$.extension',
        [note.time]                    VARCHAR(64)         '$.time',
        [note.text]                    NVARCHAR(MAX)       '$.text',
        [note.author.reference.id]     NVARCHAR(100)       '$.author.reference.id',
        [note.author.reference.extension] NVARCHAR(MAX)       '$.author.reference.extension',
        [note.author.reference.reference] NVARCHAR(4000)      '$.author.reference.reference',
        [note.author.reference.type]   VARCHAR(256)        '$.author.reference.type',
        [note.author.reference.identifier] NVARCHAR(MAX)       '$.author.reference.identifier',
        [note.author.reference.display] NVARCHAR(4000)      '$.author.reference.display',
        [note.author.string]           NVARCHAR(4000)      '$.author.string'
    ) j

GO

CREATE VIEW fhir.DeviceRequestRelevantHistory AS
SELECT
    [id],
    [relevantHistory.JSON],
    [relevantHistory.id],
    [relevantHistory.extension],
    [relevantHistory.reference],
    [relevantHistory.type],
    [relevantHistory.identifier.id],
    [relevantHistory.identifier.extension],
    [relevantHistory.identifier.use],
    [relevantHistory.identifier.type],
    [relevantHistory.identifier.system],
    [relevantHistory.identifier.value],
    [relevantHistory.identifier.period],
    [relevantHistory.identifier.assigner],
    [relevantHistory.display]
FROM openrowset (
        BULK 'DeviceRequest/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [relevantHistory.JSON]  VARCHAR(MAX) '$.relevantHistory'
    ) AS rowset
    CROSS APPLY openjson (rowset.[relevantHistory.JSON]) with (
        [relevantHistory.id]           NVARCHAR(100)       '$.id',
        [relevantHistory.extension]    NVARCHAR(MAX)       '$.extension',
        [relevantHistory.reference]    NVARCHAR(4000)      '$.reference',
        [relevantHistory.type]         VARCHAR(256)        '$.type',
        [relevantHistory.identifier.id] NVARCHAR(100)       '$.identifier.id',
        [relevantHistory.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [relevantHistory.identifier.use] NVARCHAR(64)        '$.identifier.use',
        [relevantHistory.identifier.type] NVARCHAR(MAX)       '$.identifier.type',
        [relevantHistory.identifier.system] VARCHAR(256)        '$.identifier.system',
        [relevantHistory.identifier.value] NVARCHAR(4000)      '$.identifier.value',
        [relevantHistory.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [relevantHistory.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [relevantHistory.display]      NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[DeviceUsage] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [basedOn] VARCHAR(MAX),
    [status] NVARCHAR(100),
    [category] VARCHAR(MAX),
    [patient.id] NVARCHAR(100),
    [patient.extension] NVARCHAR(MAX),
    [patient.reference] NVARCHAR(4000),
    [patient.type] VARCHAR(256),
    [patient.identifier.id] NVARCHAR(100),
    [patient.identifier.extension] NVARCHAR(MAX),
    [patient.identifier.use] NVARCHAR(64),
    [patient.identifier.type] NVARCHAR(MAX),
    [patient.identifier.system] VARCHAR(256),
    [patient.identifier.value] NVARCHAR(4000),
    [patient.identifier.period] NVARCHAR(MAX),
    [patient.identifier.assigner] NVARCHAR(MAX),
    [patient.display] NVARCHAR(4000),
    [derivedFrom] VARCHAR(MAX),
    [context.id] NVARCHAR(100),
    [context.extension] NVARCHAR(MAX),
    [context.reference] NVARCHAR(4000),
    [context.type] VARCHAR(256),
    [context.identifier.id] NVARCHAR(100),
    [context.identifier.extension] NVARCHAR(MAX),
    [context.identifier.use] NVARCHAR(64),
    [context.identifier.type] NVARCHAR(MAX),
    [context.identifier.system] VARCHAR(256),
    [context.identifier.value] NVARCHAR(4000),
    [context.identifier.period] NVARCHAR(MAX),
    [context.identifier.assigner] NVARCHAR(MAX),
    [context.display] NVARCHAR(4000),
    [dateAsserted] VARCHAR(64),
    [usageStatus.id] NVARCHAR(100),
    [usageStatus.extension] NVARCHAR(MAX),
    [usageStatus.coding] VARCHAR(MAX),
    [usageStatus.text] NVARCHAR(4000),
    [usageReason] VARCHAR(MAX),
    [informationSource.id] NVARCHAR(100),
    [informationSource.extension] NVARCHAR(MAX),
    [informationSource.reference] NVARCHAR(4000),
    [informationSource.type] VARCHAR(256),
    [informationSource.identifier.id] NVARCHAR(100),
    [informationSource.identifier.extension] NVARCHAR(MAX),
    [informationSource.identifier.use] NVARCHAR(64),
    [informationSource.identifier.type] NVARCHAR(MAX),
    [informationSource.identifier.system] VARCHAR(256),
    [informationSource.identifier.value] NVARCHAR(4000),
    [informationSource.identifier.period] NVARCHAR(MAX),
    [informationSource.identifier.assigner] NVARCHAR(MAX),
    [informationSource.display] NVARCHAR(4000),
    [device.id] NVARCHAR(100),
    [device.extension] NVARCHAR(MAX),
    [device.concept.id] NVARCHAR(100),
    [device.concept.extension] NVARCHAR(MAX),
    [device.concept.coding] NVARCHAR(MAX),
    [device.concept.text] NVARCHAR(4000),
    [device.reference.id] NVARCHAR(100),
    [device.reference.extension] NVARCHAR(MAX),
    [device.reference.reference] NVARCHAR(4000),
    [device.reference.type] VARCHAR(256),
    [device.reference.identifier] NVARCHAR(MAX),
    [device.reference.display] NVARCHAR(4000),
    [reason] VARCHAR(MAX),
    [bodySite.id] NVARCHAR(100),
    [bodySite.extension] NVARCHAR(MAX),
    [bodySite.concept.id] NVARCHAR(100),
    [bodySite.concept.extension] NVARCHAR(MAX),
    [bodySite.concept.coding] NVARCHAR(MAX),
    [bodySite.concept.text] NVARCHAR(4000),
    [bodySite.reference.id] NVARCHAR(100),
    [bodySite.reference.extension] NVARCHAR(MAX),
    [bodySite.reference.reference] NVARCHAR(4000),
    [bodySite.reference.type] VARCHAR(256),
    [bodySite.reference.identifier] NVARCHAR(MAX),
    [bodySite.reference.display] NVARCHAR(4000),
    [note] VARCHAR(MAX),
    [timing.timing.id] NVARCHAR(100),
    [timing.timing.extension] NVARCHAR(MAX),
    [timing.timing.modifierExtension] NVARCHAR(MAX),
    [timing.timing.event] VARCHAR(MAX),
    [timing.timing.repeat.id] NVARCHAR(100),
    [timing.timing.repeat.extension] NVARCHAR(MAX),
    [timing.timing.repeat.modifierExtension] NVARCHAR(MAX),
    [timing.timing.repeat.count] bigint,
    [timing.timing.repeat.countMax] bigint,
    [timing.timing.repeat.duration] float,
    [timing.timing.repeat.durationMax] float,
    [timing.timing.repeat.durationUnit] NVARCHAR(64),
    [timing.timing.repeat.frequency] bigint,
    [timing.timing.repeat.frequencyMax] bigint,
    [timing.timing.repeat.period] float,
    [timing.timing.repeat.periodMax] float,
    [timing.timing.repeat.periodUnit] NVARCHAR(64),
    [timing.timing.repeat.dayOfWeek] NVARCHAR(MAX),
    [timing.timing.repeat.timeOfDay] NVARCHAR(MAX),
    [timing.timing.repeat.when] NVARCHAR(MAX),
    [timing.timing.repeat.offset] bigint,
    [timing.timing.repeat.bounds.duration] NVARCHAR(MAX),
    [timing.timing.repeat.bounds.range] NVARCHAR(MAX),
    [timing.timing.repeat.bounds.period] NVARCHAR(MAX),
    [timing.timing.code.id] NVARCHAR(100),
    [timing.timing.code.extension] NVARCHAR(MAX),
    [timing.timing.code.coding] NVARCHAR(MAX),
    [timing.timing.code.text] NVARCHAR(4000),
    [timing.period.id] NVARCHAR(100),
    [timing.period.extension] NVARCHAR(MAX),
    [timing.period.start] VARCHAR(64),
    [timing.period.end] VARCHAR(64),
    [timing.dateTime] VARCHAR(64),
) WITH (
    LOCATION='/DeviceUsage/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.DeviceUsageIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'DeviceUsage/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.DeviceUsageBasedOn AS
SELECT
    [id],
    [basedOn.JSON],
    [basedOn.id],
    [basedOn.extension],
    [basedOn.reference],
    [basedOn.type],
    [basedOn.identifier.id],
    [basedOn.identifier.extension],
    [basedOn.identifier.use],
    [basedOn.identifier.type],
    [basedOn.identifier.system],
    [basedOn.identifier.value],
    [basedOn.identifier.period],
    [basedOn.identifier.assigner],
    [basedOn.display]
FROM openrowset (
        BULK 'DeviceUsage/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [basedOn.JSON]  VARCHAR(MAX) '$.basedOn'
    ) AS rowset
    CROSS APPLY openjson (rowset.[basedOn.JSON]) with (
        [basedOn.id]                   NVARCHAR(100)       '$.id',
        [basedOn.extension]            NVARCHAR(MAX)       '$.extension',
        [basedOn.reference]            NVARCHAR(4000)      '$.reference',
        [basedOn.type]                 VARCHAR(256)        '$.type',
        [basedOn.identifier.id]        NVARCHAR(100)       '$.identifier.id',
        [basedOn.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [basedOn.identifier.use]       NVARCHAR(64)        '$.identifier.use',
        [basedOn.identifier.type]      NVARCHAR(MAX)       '$.identifier.type',
        [basedOn.identifier.system]    VARCHAR(256)        '$.identifier.system',
        [basedOn.identifier.value]     NVARCHAR(4000)      '$.identifier.value',
        [basedOn.identifier.period]    NVARCHAR(MAX)       '$.identifier.period',
        [basedOn.identifier.assigner]  NVARCHAR(MAX)       '$.identifier.assigner',
        [basedOn.display]              NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.DeviceUsageCategory AS
SELECT
    [id],
    [category.JSON],
    [category.id],
    [category.extension],
    [category.coding],
    [category.text]
FROM openrowset (
        BULK 'DeviceUsage/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [category.JSON]  VARCHAR(MAX) '$.category'
    ) AS rowset
    CROSS APPLY openjson (rowset.[category.JSON]) with (
        [category.id]                  NVARCHAR(100)       '$.id',
        [category.extension]           NVARCHAR(MAX)       '$.extension',
        [category.coding]              NVARCHAR(MAX)       '$.coding' AS JSON,
        [category.text]                NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.DeviceUsageDerivedFrom AS
SELECT
    [id],
    [derivedFrom.JSON],
    [derivedFrom.id],
    [derivedFrom.extension],
    [derivedFrom.reference],
    [derivedFrom.type],
    [derivedFrom.identifier.id],
    [derivedFrom.identifier.extension],
    [derivedFrom.identifier.use],
    [derivedFrom.identifier.type],
    [derivedFrom.identifier.system],
    [derivedFrom.identifier.value],
    [derivedFrom.identifier.period],
    [derivedFrom.identifier.assigner],
    [derivedFrom.display]
FROM openrowset (
        BULK 'DeviceUsage/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [derivedFrom.JSON]  VARCHAR(MAX) '$.derivedFrom'
    ) AS rowset
    CROSS APPLY openjson (rowset.[derivedFrom.JSON]) with (
        [derivedFrom.id]               NVARCHAR(100)       '$.id',
        [derivedFrom.extension]        NVARCHAR(MAX)       '$.extension',
        [derivedFrom.reference]        NVARCHAR(4000)      '$.reference',
        [derivedFrom.type]             VARCHAR(256)        '$.type',
        [derivedFrom.identifier.id]    NVARCHAR(100)       '$.identifier.id',
        [derivedFrom.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [derivedFrom.identifier.use]   NVARCHAR(64)        '$.identifier.use',
        [derivedFrom.identifier.type]  NVARCHAR(MAX)       '$.identifier.type',
        [derivedFrom.identifier.system] VARCHAR(256)        '$.identifier.system',
        [derivedFrom.identifier.value] NVARCHAR(4000)      '$.identifier.value',
        [derivedFrom.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [derivedFrom.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [derivedFrom.display]          NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.DeviceUsageUsageReason AS
SELECT
    [id],
    [usageReason.JSON],
    [usageReason.id],
    [usageReason.extension],
    [usageReason.coding],
    [usageReason.text]
FROM openrowset (
        BULK 'DeviceUsage/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [usageReason.JSON]  VARCHAR(MAX) '$.usageReason'
    ) AS rowset
    CROSS APPLY openjson (rowset.[usageReason.JSON]) with (
        [usageReason.id]               NVARCHAR(100)       '$.id',
        [usageReason.extension]        NVARCHAR(MAX)       '$.extension',
        [usageReason.coding]           NVARCHAR(MAX)       '$.coding' AS JSON,
        [usageReason.text]             NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.DeviceUsageReason AS
SELECT
    [id],
    [reason.JSON],
    [reason.id],
    [reason.extension],
    [reason.concept.id],
    [reason.concept.extension],
    [reason.concept.coding],
    [reason.concept.text],
    [reason.reference.id],
    [reason.reference.extension],
    [reason.reference.reference],
    [reason.reference.type],
    [reason.reference.identifier],
    [reason.reference.display]
FROM openrowset (
        BULK 'DeviceUsage/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [reason.JSON]  VARCHAR(MAX) '$.reason'
    ) AS rowset
    CROSS APPLY openjson (rowset.[reason.JSON]) with (
        [reason.id]                    NVARCHAR(100)       '$.id',
        [reason.extension]             NVARCHAR(MAX)       '$.extension',
        [reason.concept.id]            NVARCHAR(100)       '$.concept.id',
        [reason.concept.extension]     NVARCHAR(MAX)       '$.concept.extension',
        [reason.concept.coding]        NVARCHAR(MAX)       '$.concept.coding',
        [reason.concept.text]          NVARCHAR(4000)      '$.concept.text',
        [reason.reference.id]          NVARCHAR(100)       '$.reference.id',
        [reason.reference.extension]   NVARCHAR(MAX)       '$.reference.extension',
        [reason.reference.reference]   NVARCHAR(4000)      '$.reference.reference',
        [reason.reference.type]        VARCHAR(256)        '$.reference.type',
        [reason.reference.identifier]  NVARCHAR(MAX)       '$.reference.identifier',
        [reason.reference.display]     NVARCHAR(4000)      '$.reference.display'
    ) j

GO

CREATE VIEW fhir.DeviceUsageNote AS
SELECT
    [id],
    [note.JSON],
    [note.id],
    [note.extension],
    [note.time],
    [note.text],
    [note.author.reference.id],
    [note.author.reference.extension],
    [note.author.reference.reference],
    [note.author.reference.type],
    [note.author.reference.identifier],
    [note.author.reference.display],
    [note.author.string]
FROM openrowset (
        BULK 'DeviceUsage/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [note.JSON]  VARCHAR(MAX) '$.note'
    ) AS rowset
    CROSS APPLY openjson (rowset.[note.JSON]) with (
        [note.id]                      NVARCHAR(100)       '$.id',
        [note.extension]               NVARCHAR(MAX)       '$.extension',
        [note.time]                    VARCHAR(64)         '$.time',
        [note.text]                    NVARCHAR(MAX)       '$.text',
        [note.author.reference.id]     NVARCHAR(100)       '$.author.reference.id',
        [note.author.reference.extension] NVARCHAR(MAX)       '$.author.reference.extension',
        [note.author.reference.reference] NVARCHAR(4000)      '$.author.reference.reference',
        [note.author.reference.type]   VARCHAR(256)        '$.author.reference.type',
        [note.author.reference.identifier] NVARCHAR(MAX)       '$.author.reference.identifier',
        [note.author.reference.display] NVARCHAR(4000)      '$.author.reference.display',
        [note.author.string]           NVARCHAR(4000)      '$.author.string'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[DiagnosticReport] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [basedOn] VARCHAR(MAX),
    [status] NVARCHAR(100),
    [category] VARCHAR(MAX),
    [code.id] NVARCHAR(100),
    [code.extension] NVARCHAR(MAX),
    [code.coding] VARCHAR(MAX),
    [code.text] NVARCHAR(4000),
    [subject.id] NVARCHAR(100),
    [subject.extension] NVARCHAR(MAX),
    [subject.reference] NVARCHAR(4000),
    [subject.type] VARCHAR(256),
    [subject.identifier.id] NVARCHAR(100),
    [subject.identifier.extension] NVARCHAR(MAX),
    [subject.identifier.use] NVARCHAR(64),
    [subject.identifier.type] NVARCHAR(MAX),
    [subject.identifier.system] VARCHAR(256),
    [subject.identifier.value] NVARCHAR(4000),
    [subject.identifier.period] NVARCHAR(MAX),
    [subject.identifier.assigner] NVARCHAR(MAX),
    [subject.display] NVARCHAR(4000),
    [encounter.id] NVARCHAR(100),
    [encounter.extension] NVARCHAR(MAX),
    [encounter.reference] NVARCHAR(4000),
    [encounter.type] VARCHAR(256),
    [encounter.identifier.id] NVARCHAR(100),
    [encounter.identifier.extension] NVARCHAR(MAX),
    [encounter.identifier.use] NVARCHAR(64),
    [encounter.identifier.type] NVARCHAR(MAX),
    [encounter.identifier.system] VARCHAR(256),
    [encounter.identifier.value] NVARCHAR(4000),
    [encounter.identifier.period] NVARCHAR(MAX),
    [encounter.identifier.assigner] NVARCHAR(MAX),
    [encounter.display] NVARCHAR(4000),
    [issued] VARCHAR(64),
    [performer] VARCHAR(MAX),
    [resultsInterpreter] VARCHAR(MAX),
    [specimen] VARCHAR(MAX),
    [result] VARCHAR(MAX),
    [note] VARCHAR(MAX),
    [imagingStudy] VARCHAR(MAX),
    [media] VARCHAR(MAX),
    [composition.id] NVARCHAR(100),
    [composition.extension] NVARCHAR(MAX),
    [composition.reference] NVARCHAR(4000),
    [composition.type] VARCHAR(256),
    [composition.identifier.id] NVARCHAR(100),
    [composition.identifier.extension] NVARCHAR(MAX),
    [composition.identifier.use] NVARCHAR(64),
    [composition.identifier.type] NVARCHAR(MAX),
    [composition.identifier.system] VARCHAR(256),
    [composition.identifier.value] NVARCHAR(4000),
    [composition.identifier.period] NVARCHAR(MAX),
    [composition.identifier.assigner] NVARCHAR(MAX),
    [composition.display] NVARCHAR(4000),
    [conclusion] NVARCHAR(4000),
    [conclusionCode] VARCHAR(MAX),
    [presentedForm] VARCHAR(MAX),
    [effective.dateTime] VARCHAR(64),
    [effective.period.id] NVARCHAR(100),
    [effective.period.extension] NVARCHAR(MAX),
    [effective.period.start] VARCHAR(64),
    [effective.period.end] VARCHAR(64),
) WITH (
    LOCATION='/DiagnosticReport/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.DiagnosticReportIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'DiagnosticReport/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.DiagnosticReportBasedOn AS
SELECT
    [id],
    [basedOn.JSON],
    [basedOn.id],
    [basedOn.extension],
    [basedOn.reference],
    [basedOn.type],
    [basedOn.identifier.id],
    [basedOn.identifier.extension],
    [basedOn.identifier.use],
    [basedOn.identifier.type],
    [basedOn.identifier.system],
    [basedOn.identifier.value],
    [basedOn.identifier.period],
    [basedOn.identifier.assigner],
    [basedOn.display]
FROM openrowset (
        BULK 'DiagnosticReport/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [basedOn.JSON]  VARCHAR(MAX) '$.basedOn'
    ) AS rowset
    CROSS APPLY openjson (rowset.[basedOn.JSON]) with (
        [basedOn.id]                   NVARCHAR(100)       '$.id',
        [basedOn.extension]            NVARCHAR(MAX)       '$.extension',
        [basedOn.reference]            NVARCHAR(4000)      '$.reference',
        [basedOn.type]                 VARCHAR(256)        '$.type',
        [basedOn.identifier.id]        NVARCHAR(100)       '$.identifier.id',
        [basedOn.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [basedOn.identifier.use]       NVARCHAR(64)        '$.identifier.use',
        [basedOn.identifier.type]      NVARCHAR(MAX)       '$.identifier.type',
        [basedOn.identifier.system]    VARCHAR(256)        '$.identifier.system',
        [basedOn.identifier.value]     NVARCHAR(4000)      '$.identifier.value',
        [basedOn.identifier.period]    NVARCHAR(MAX)       '$.identifier.period',
        [basedOn.identifier.assigner]  NVARCHAR(MAX)       '$.identifier.assigner',
        [basedOn.display]              NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.DiagnosticReportCategory AS
SELECT
    [id],
    [category.JSON],
    [category.id],
    [category.extension],
    [category.coding],
    [category.text]
FROM openrowset (
        BULK 'DiagnosticReport/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [category.JSON]  VARCHAR(MAX) '$.category'
    ) AS rowset
    CROSS APPLY openjson (rowset.[category.JSON]) with (
        [category.id]                  NVARCHAR(100)       '$.id',
        [category.extension]           NVARCHAR(MAX)       '$.extension',
        [category.coding]              NVARCHAR(MAX)       '$.coding' AS JSON,
        [category.text]                NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.DiagnosticReportPerformer AS
SELECT
    [id],
    [performer.JSON],
    [performer.id],
    [performer.extension],
    [performer.reference],
    [performer.type],
    [performer.identifier.id],
    [performer.identifier.extension],
    [performer.identifier.use],
    [performer.identifier.type],
    [performer.identifier.system],
    [performer.identifier.value],
    [performer.identifier.period],
    [performer.identifier.assigner],
    [performer.display]
FROM openrowset (
        BULK 'DiagnosticReport/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [performer.JSON]  VARCHAR(MAX) '$.performer'
    ) AS rowset
    CROSS APPLY openjson (rowset.[performer.JSON]) with (
        [performer.id]                 NVARCHAR(100)       '$.id',
        [performer.extension]          NVARCHAR(MAX)       '$.extension',
        [performer.reference]          NVARCHAR(4000)      '$.reference',
        [performer.type]               VARCHAR(256)        '$.type',
        [performer.identifier.id]      NVARCHAR(100)       '$.identifier.id',
        [performer.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [performer.identifier.use]     NVARCHAR(64)        '$.identifier.use',
        [performer.identifier.type]    NVARCHAR(MAX)       '$.identifier.type',
        [performer.identifier.system]  VARCHAR(256)        '$.identifier.system',
        [performer.identifier.value]   NVARCHAR(4000)      '$.identifier.value',
        [performer.identifier.period]  NVARCHAR(MAX)       '$.identifier.period',
        [performer.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [performer.display]            NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.DiagnosticReportResultsInterpreter AS
SELECT
    [id],
    [resultsInterpreter.JSON],
    [resultsInterpreter.id],
    [resultsInterpreter.extension],
    [resultsInterpreter.reference],
    [resultsInterpreter.type],
    [resultsInterpreter.identifier.id],
    [resultsInterpreter.identifier.extension],
    [resultsInterpreter.identifier.use],
    [resultsInterpreter.identifier.type],
    [resultsInterpreter.identifier.system],
    [resultsInterpreter.identifier.value],
    [resultsInterpreter.identifier.period],
    [resultsInterpreter.identifier.assigner],
    [resultsInterpreter.display]
FROM openrowset (
        BULK 'DiagnosticReport/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [resultsInterpreter.JSON]  VARCHAR(MAX) '$.resultsInterpreter'
    ) AS rowset
    CROSS APPLY openjson (rowset.[resultsInterpreter.JSON]) with (
        [resultsInterpreter.id]        NVARCHAR(100)       '$.id',
        [resultsInterpreter.extension] NVARCHAR(MAX)       '$.extension',
        [resultsInterpreter.reference] NVARCHAR(4000)      '$.reference',
        [resultsInterpreter.type]      VARCHAR(256)        '$.type',
        [resultsInterpreter.identifier.id] NVARCHAR(100)       '$.identifier.id',
        [resultsInterpreter.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [resultsInterpreter.identifier.use] NVARCHAR(64)        '$.identifier.use',
        [resultsInterpreter.identifier.type] NVARCHAR(MAX)       '$.identifier.type',
        [resultsInterpreter.identifier.system] VARCHAR(256)        '$.identifier.system',
        [resultsInterpreter.identifier.value] NVARCHAR(4000)      '$.identifier.value',
        [resultsInterpreter.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [resultsInterpreter.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [resultsInterpreter.display]   NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.DiagnosticReportSpecimen AS
SELECT
    [id],
    [specimen.JSON],
    [specimen.id],
    [specimen.extension],
    [specimen.reference],
    [specimen.type],
    [specimen.identifier.id],
    [specimen.identifier.extension],
    [specimen.identifier.use],
    [specimen.identifier.type],
    [specimen.identifier.system],
    [specimen.identifier.value],
    [specimen.identifier.period],
    [specimen.identifier.assigner],
    [specimen.display]
FROM openrowset (
        BULK 'DiagnosticReport/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [specimen.JSON]  VARCHAR(MAX) '$.specimen'
    ) AS rowset
    CROSS APPLY openjson (rowset.[specimen.JSON]) with (
        [specimen.id]                  NVARCHAR(100)       '$.id',
        [specimen.extension]           NVARCHAR(MAX)       '$.extension',
        [specimen.reference]           NVARCHAR(4000)      '$.reference',
        [specimen.type]                VARCHAR(256)        '$.type',
        [specimen.identifier.id]       NVARCHAR(100)       '$.identifier.id',
        [specimen.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [specimen.identifier.use]      NVARCHAR(64)        '$.identifier.use',
        [specimen.identifier.type]     NVARCHAR(MAX)       '$.identifier.type',
        [specimen.identifier.system]   VARCHAR(256)        '$.identifier.system',
        [specimen.identifier.value]    NVARCHAR(4000)      '$.identifier.value',
        [specimen.identifier.period]   NVARCHAR(MAX)       '$.identifier.period',
        [specimen.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [specimen.display]             NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.DiagnosticReportResult AS
SELECT
    [id],
    [result.JSON],
    [result.id],
    [result.extension],
    [result.reference],
    [result.type],
    [result.identifier.id],
    [result.identifier.extension],
    [result.identifier.use],
    [result.identifier.type],
    [result.identifier.system],
    [result.identifier.value],
    [result.identifier.period],
    [result.identifier.assigner],
    [result.display]
FROM openrowset (
        BULK 'DiagnosticReport/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [result.JSON]  VARCHAR(MAX) '$.result'
    ) AS rowset
    CROSS APPLY openjson (rowset.[result.JSON]) with (
        [result.id]                    NVARCHAR(100)       '$.id',
        [result.extension]             NVARCHAR(MAX)       '$.extension',
        [result.reference]             NVARCHAR(4000)      '$.reference',
        [result.type]                  VARCHAR(256)        '$.type',
        [result.identifier.id]         NVARCHAR(100)       '$.identifier.id',
        [result.identifier.extension]  NVARCHAR(MAX)       '$.identifier.extension',
        [result.identifier.use]        NVARCHAR(64)        '$.identifier.use',
        [result.identifier.type]       NVARCHAR(MAX)       '$.identifier.type',
        [result.identifier.system]     VARCHAR(256)        '$.identifier.system',
        [result.identifier.value]      NVARCHAR(4000)      '$.identifier.value',
        [result.identifier.period]     NVARCHAR(MAX)       '$.identifier.period',
        [result.identifier.assigner]   NVARCHAR(MAX)       '$.identifier.assigner',
        [result.display]               NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.DiagnosticReportNote AS
SELECT
    [id],
    [note.JSON],
    [note.id],
    [note.extension],
    [note.time],
    [note.text],
    [note.author.reference.id],
    [note.author.reference.extension],
    [note.author.reference.reference],
    [note.author.reference.type],
    [note.author.reference.identifier],
    [note.author.reference.display],
    [note.author.string]
FROM openrowset (
        BULK 'DiagnosticReport/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [note.JSON]  VARCHAR(MAX) '$.note'
    ) AS rowset
    CROSS APPLY openjson (rowset.[note.JSON]) with (
        [note.id]                      NVARCHAR(100)       '$.id',
        [note.extension]               NVARCHAR(MAX)       '$.extension',
        [note.time]                    VARCHAR(64)         '$.time',
        [note.text]                    NVARCHAR(MAX)       '$.text',
        [note.author.reference.id]     NVARCHAR(100)       '$.author.reference.id',
        [note.author.reference.extension] NVARCHAR(MAX)       '$.author.reference.extension',
        [note.author.reference.reference] NVARCHAR(4000)      '$.author.reference.reference',
        [note.author.reference.type]   VARCHAR(256)        '$.author.reference.type',
        [note.author.reference.identifier] NVARCHAR(MAX)       '$.author.reference.identifier',
        [note.author.reference.display] NVARCHAR(4000)      '$.author.reference.display',
        [note.author.string]           NVARCHAR(4000)      '$.author.string'
    ) j

GO

CREATE VIEW fhir.DiagnosticReportImagingStudy AS
SELECT
    [id],
    [imagingStudy.JSON],
    [imagingStudy.id],
    [imagingStudy.extension],
    [imagingStudy.reference],
    [imagingStudy.type],
    [imagingStudy.identifier.id],
    [imagingStudy.identifier.extension],
    [imagingStudy.identifier.use],
    [imagingStudy.identifier.type],
    [imagingStudy.identifier.system],
    [imagingStudy.identifier.value],
    [imagingStudy.identifier.period],
    [imagingStudy.identifier.assigner],
    [imagingStudy.display]
FROM openrowset (
        BULK 'DiagnosticReport/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [imagingStudy.JSON]  VARCHAR(MAX) '$.imagingStudy'
    ) AS rowset
    CROSS APPLY openjson (rowset.[imagingStudy.JSON]) with (
        [imagingStudy.id]              NVARCHAR(100)       '$.id',
        [imagingStudy.extension]       NVARCHAR(MAX)       '$.extension',
        [imagingStudy.reference]       NVARCHAR(4000)      '$.reference',
        [imagingStudy.type]            VARCHAR(256)        '$.type',
        [imagingStudy.identifier.id]   NVARCHAR(100)       '$.identifier.id',
        [imagingStudy.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [imagingStudy.identifier.use]  NVARCHAR(64)        '$.identifier.use',
        [imagingStudy.identifier.type] NVARCHAR(MAX)       '$.identifier.type',
        [imagingStudy.identifier.system] VARCHAR(256)        '$.identifier.system',
        [imagingStudy.identifier.value] NVARCHAR(4000)      '$.identifier.value',
        [imagingStudy.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [imagingStudy.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [imagingStudy.display]         NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.DiagnosticReportMedia AS
SELECT
    [id],
    [media.JSON],
    [media.id],
    [media.extension],
    [media.modifierExtension],
    [media.comment],
    [media.link.id],
    [media.link.extension],
    [media.link.reference],
    [media.link.type],
    [media.link.identifier],
    [media.link.display]
FROM openrowset (
        BULK 'DiagnosticReport/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [media.JSON]  VARCHAR(MAX) '$.media'
    ) AS rowset
    CROSS APPLY openjson (rowset.[media.JSON]) with (
        [media.id]                     NVARCHAR(100)       '$.id',
        [media.extension]              NVARCHAR(MAX)       '$.extension',
        [media.modifierExtension]      NVARCHAR(MAX)       '$.modifierExtension',
        [media.comment]                NVARCHAR(4000)      '$.comment',
        [media.link.id]                NVARCHAR(100)       '$.link.id',
        [media.link.extension]         NVARCHAR(MAX)       '$.link.extension',
        [media.link.reference]         NVARCHAR(4000)      '$.link.reference',
        [media.link.type]              VARCHAR(256)        '$.link.type',
        [media.link.identifier]        NVARCHAR(MAX)       '$.link.identifier',
        [media.link.display]           NVARCHAR(4000)      '$.link.display'
    ) j

GO

CREATE VIEW fhir.DiagnosticReportConclusionCode AS
SELECT
    [id],
    [conclusionCode.JSON],
    [conclusionCode.id],
    [conclusionCode.extension],
    [conclusionCode.coding],
    [conclusionCode.text]
FROM openrowset (
        BULK 'DiagnosticReport/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [conclusionCode.JSON]  VARCHAR(MAX) '$.conclusionCode'
    ) AS rowset
    CROSS APPLY openjson (rowset.[conclusionCode.JSON]) with (
        [conclusionCode.id]            NVARCHAR(100)       '$.id',
        [conclusionCode.extension]     NVARCHAR(MAX)       '$.extension',
        [conclusionCode.coding]        NVARCHAR(MAX)       '$.coding' AS JSON,
        [conclusionCode.text]          NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.DiagnosticReportPresentedForm AS
SELECT
    [id],
    [presentedForm.JSON],
    [presentedForm.id],
    [presentedForm.extension],
    [presentedForm.contentType],
    [presentedForm.language],
    [presentedForm.data],
    [presentedForm.url],
    [presentedForm.size],
    [presentedForm.hash],
    [presentedForm.title],
    [presentedForm.creation],
    [presentedForm.height],
    [presentedForm.width],
    [presentedForm.frames],
    [presentedForm.duration],
    [presentedForm.pages]
FROM openrowset (
        BULK 'DiagnosticReport/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [presentedForm.JSON]  VARCHAR(MAX) '$.presentedForm'
    ) AS rowset
    CROSS APPLY openjson (rowset.[presentedForm.JSON]) with (
        [presentedForm.id]             NVARCHAR(100)       '$.id',
        [presentedForm.extension]      NVARCHAR(MAX)       '$.extension',
        [presentedForm.contentType]    NVARCHAR(100)       '$.contentType',
        [presentedForm.language]       NVARCHAR(100)       '$.language',
        [presentedForm.data]           NVARCHAR(MAX)       '$.data',
        [presentedForm.url]            VARCHAR(256)        '$.url',
        [presentedForm.size]           NVARCHAR(MAX)       '$.size',
        [presentedForm.hash]           NVARCHAR(MAX)       '$.hash',
        [presentedForm.title]          NVARCHAR(4000)      '$.title',
        [presentedForm.creation]       VARCHAR(64)         '$.creation',
        [presentedForm.height]         bigint              '$.height',
        [presentedForm.width]          bigint              '$.width',
        [presentedForm.frames]         bigint              '$.frames',
        [presentedForm.duration]       float               '$.duration',
        [presentedForm.pages]          bigint              '$.pages'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[DocumentManifest] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [masterIdentifier.id] NVARCHAR(100),
    [masterIdentifier.extension] NVARCHAR(MAX),
    [masterIdentifier.use] NVARCHAR(64),
    [masterIdentifier.type.id] NVARCHAR(100),
    [masterIdentifier.type.extension] NVARCHAR(MAX),
    [masterIdentifier.type.coding] NVARCHAR(MAX),
    [masterIdentifier.type.text] NVARCHAR(4000),
    [masterIdentifier.system] VARCHAR(256),
    [masterIdentifier.value] NVARCHAR(4000),
    [masterIdentifier.period.id] NVARCHAR(100),
    [masterIdentifier.period.extension] NVARCHAR(MAX),
    [masterIdentifier.period.start] VARCHAR(64),
    [masterIdentifier.period.end] VARCHAR(64),
    [masterIdentifier.assigner.id] NVARCHAR(100),
    [masterIdentifier.assigner.extension] NVARCHAR(MAX),
    [masterIdentifier.assigner.reference] NVARCHAR(4000),
    [masterIdentifier.assigner.type] VARCHAR(256),
    [masterIdentifier.assigner.identifier] NVARCHAR(MAX),
    [masterIdentifier.assigner.display] NVARCHAR(4000),
    [identifier] VARCHAR(MAX),
    [status] NVARCHAR(100),
    [type.id] NVARCHAR(100),
    [type.extension] NVARCHAR(MAX),
    [type.coding] VARCHAR(MAX),
    [type.text] NVARCHAR(4000),
    [subject.id] NVARCHAR(100),
    [subject.extension] NVARCHAR(MAX),
    [subject.reference] NVARCHAR(4000),
    [subject.type] VARCHAR(256),
    [subject.identifier.id] NVARCHAR(100),
    [subject.identifier.extension] NVARCHAR(MAX),
    [subject.identifier.use] NVARCHAR(64),
    [subject.identifier.type] NVARCHAR(MAX),
    [subject.identifier.system] VARCHAR(256),
    [subject.identifier.value] NVARCHAR(4000),
    [subject.identifier.period] NVARCHAR(MAX),
    [subject.identifier.assigner] NVARCHAR(MAX),
    [subject.display] NVARCHAR(4000),
    [created] VARCHAR(64),
    [author] VARCHAR(MAX),
    [recipient] VARCHAR(MAX),
    [source] VARCHAR(256),
    [description] NVARCHAR(4000),
    [content] VARCHAR(MAX),
    [related] VARCHAR(MAX),
) WITH (
    LOCATION='/DocumentManifest/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.DocumentManifestIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'DocumentManifest/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.DocumentManifestAuthor AS
SELECT
    [id],
    [author.JSON],
    [author.id],
    [author.extension],
    [author.reference],
    [author.type],
    [author.identifier.id],
    [author.identifier.extension],
    [author.identifier.use],
    [author.identifier.type],
    [author.identifier.system],
    [author.identifier.value],
    [author.identifier.period],
    [author.identifier.assigner],
    [author.display]
FROM openrowset (
        BULK 'DocumentManifest/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [author.JSON]  VARCHAR(MAX) '$.author'
    ) AS rowset
    CROSS APPLY openjson (rowset.[author.JSON]) with (
        [author.id]                    NVARCHAR(100)       '$.id',
        [author.extension]             NVARCHAR(MAX)       '$.extension',
        [author.reference]             NVARCHAR(4000)      '$.reference',
        [author.type]                  VARCHAR(256)        '$.type',
        [author.identifier.id]         NVARCHAR(100)       '$.identifier.id',
        [author.identifier.extension]  NVARCHAR(MAX)       '$.identifier.extension',
        [author.identifier.use]        NVARCHAR(64)        '$.identifier.use',
        [author.identifier.type]       NVARCHAR(MAX)       '$.identifier.type',
        [author.identifier.system]     VARCHAR(256)        '$.identifier.system',
        [author.identifier.value]      NVARCHAR(4000)      '$.identifier.value',
        [author.identifier.period]     NVARCHAR(MAX)       '$.identifier.period',
        [author.identifier.assigner]   NVARCHAR(MAX)       '$.identifier.assigner',
        [author.display]               NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.DocumentManifestRecipient AS
SELECT
    [id],
    [recipient.JSON],
    [recipient.id],
    [recipient.extension],
    [recipient.reference],
    [recipient.type],
    [recipient.identifier.id],
    [recipient.identifier.extension],
    [recipient.identifier.use],
    [recipient.identifier.type],
    [recipient.identifier.system],
    [recipient.identifier.value],
    [recipient.identifier.period],
    [recipient.identifier.assigner],
    [recipient.display]
FROM openrowset (
        BULK 'DocumentManifest/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [recipient.JSON]  VARCHAR(MAX) '$.recipient'
    ) AS rowset
    CROSS APPLY openjson (rowset.[recipient.JSON]) with (
        [recipient.id]                 NVARCHAR(100)       '$.id',
        [recipient.extension]          NVARCHAR(MAX)       '$.extension',
        [recipient.reference]          NVARCHAR(4000)      '$.reference',
        [recipient.type]               VARCHAR(256)        '$.type',
        [recipient.identifier.id]      NVARCHAR(100)       '$.identifier.id',
        [recipient.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [recipient.identifier.use]     NVARCHAR(64)        '$.identifier.use',
        [recipient.identifier.type]    NVARCHAR(MAX)       '$.identifier.type',
        [recipient.identifier.system]  VARCHAR(256)        '$.identifier.system',
        [recipient.identifier.value]   NVARCHAR(4000)      '$.identifier.value',
        [recipient.identifier.period]  NVARCHAR(MAX)       '$.identifier.period',
        [recipient.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [recipient.display]            NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.DocumentManifestContent AS
SELECT
    [id],
    [content.JSON],
    [content.id],
    [content.extension],
    [content.reference],
    [content.type],
    [content.identifier.id],
    [content.identifier.extension],
    [content.identifier.use],
    [content.identifier.type],
    [content.identifier.system],
    [content.identifier.value],
    [content.identifier.period],
    [content.identifier.assigner],
    [content.display]
FROM openrowset (
        BULK 'DocumentManifest/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [content.JSON]  VARCHAR(MAX) '$.content'
    ) AS rowset
    CROSS APPLY openjson (rowset.[content.JSON]) with (
        [content.id]                   NVARCHAR(100)       '$.id',
        [content.extension]            NVARCHAR(MAX)       '$.extension',
        [content.reference]            NVARCHAR(4000)      '$.reference',
        [content.type]                 VARCHAR(256)        '$.type',
        [content.identifier.id]        NVARCHAR(100)       '$.identifier.id',
        [content.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [content.identifier.use]       NVARCHAR(64)        '$.identifier.use',
        [content.identifier.type]      NVARCHAR(MAX)       '$.identifier.type',
        [content.identifier.system]    VARCHAR(256)        '$.identifier.system',
        [content.identifier.value]     NVARCHAR(4000)      '$.identifier.value',
        [content.identifier.period]    NVARCHAR(MAX)       '$.identifier.period',
        [content.identifier.assigner]  NVARCHAR(MAX)       '$.identifier.assigner',
        [content.display]              NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.DocumentManifestRelated AS
SELECT
    [id],
    [related.JSON],
    [related.id],
    [related.extension],
    [related.modifierExtension],
    [related.identifier.id],
    [related.identifier.extension],
    [related.identifier.use],
    [related.identifier.type],
    [related.identifier.system],
    [related.identifier.value],
    [related.identifier.period],
    [related.identifier.assigner],
    [related.ref.id],
    [related.ref.extension],
    [related.ref.reference],
    [related.ref.type],
    [related.ref.identifier],
    [related.ref.display]
FROM openrowset (
        BULK 'DocumentManifest/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [related.JSON]  VARCHAR(MAX) '$.related'
    ) AS rowset
    CROSS APPLY openjson (rowset.[related.JSON]) with (
        [related.id]                   NVARCHAR(100)       '$.id',
        [related.extension]            NVARCHAR(MAX)       '$.extension',
        [related.modifierExtension]    NVARCHAR(MAX)       '$.modifierExtension',
        [related.identifier.id]        NVARCHAR(100)       '$.identifier.id',
        [related.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [related.identifier.use]       NVARCHAR(64)        '$.identifier.use',
        [related.identifier.type]      NVARCHAR(MAX)       '$.identifier.type',
        [related.identifier.system]    VARCHAR(256)        '$.identifier.system',
        [related.identifier.value]     NVARCHAR(4000)      '$.identifier.value',
        [related.identifier.period]    NVARCHAR(MAX)       '$.identifier.period',
        [related.identifier.assigner]  NVARCHAR(MAX)       '$.identifier.assigner',
        [related.ref.id]               NVARCHAR(100)       '$.ref.id',
        [related.ref.extension]        NVARCHAR(MAX)       '$.ref.extension',
        [related.ref.reference]        NVARCHAR(4000)      '$.ref.reference',
        [related.ref.type]             VARCHAR(256)        '$.ref.type',
        [related.ref.identifier]       NVARCHAR(MAX)       '$.ref.identifier',
        [related.ref.display]          NVARCHAR(4000)      '$.ref.display'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[DocumentReference] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [basedOn] VARCHAR(MAX),
    [status] NVARCHAR(100),
    [docStatus] NVARCHAR(100),
    [type.id] NVARCHAR(100),
    [type.extension] NVARCHAR(MAX),
    [type.coding] VARCHAR(MAX),
    [type.text] NVARCHAR(4000),
    [category] VARCHAR(MAX),
    [subject.id] NVARCHAR(100),
    [subject.extension] NVARCHAR(MAX),
    [subject.reference] NVARCHAR(4000),
    [subject.type] VARCHAR(256),
    [subject.identifier.id] NVARCHAR(100),
    [subject.identifier.extension] NVARCHAR(MAX),
    [subject.identifier.use] NVARCHAR(64),
    [subject.identifier.type] NVARCHAR(MAX),
    [subject.identifier.system] VARCHAR(256),
    [subject.identifier.value] NVARCHAR(4000),
    [subject.identifier.period] NVARCHAR(MAX),
    [subject.identifier.assigner] NVARCHAR(MAX),
    [subject.display] NVARCHAR(4000),
    [encounter] VARCHAR(MAX),
    [event] VARCHAR(MAX),
    [facilityType.id] NVARCHAR(100),
    [facilityType.extension] NVARCHAR(MAX),
    [facilityType.coding] VARCHAR(MAX),
    [facilityType.text] NVARCHAR(4000),
    [practiceSetting.id] NVARCHAR(100),
    [practiceSetting.extension] NVARCHAR(MAX),
    [practiceSetting.coding] VARCHAR(MAX),
    [practiceSetting.text] NVARCHAR(4000),
    [period.id] NVARCHAR(100),
    [period.extension] NVARCHAR(MAX),
    [period.start] VARCHAR(64),
    [period.end] VARCHAR(64),
    [date] VARCHAR(64),
    [author] VARCHAR(MAX),
    [attester] VARCHAR(MAX),
    [custodian.id] NVARCHAR(100),
    [custodian.extension] NVARCHAR(MAX),
    [custodian.reference] NVARCHAR(4000),
    [custodian.type] VARCHAR(256),
    [custodian.identifier.id] NVARCHAR(100),
    [custodian.identifier.extension] NVARCHAR(MAX),
    [custodian.identifier.use] NVARCHAR(64),
    [custodian.identifier.type] NVARCHAR(MAX),
    [custodian.identifier.system] VARCHAR(256),
    [custodian.identifier.value] NVARCHAR(4000),
    [custodian.identifier.period] NVARCHAR(MAX),
    [custodian.identifier.assigner] NVARCHAR(MAX),
    [custodian.display] NVARCHAR(4000),
    [relatesTo] VARCHAR(MAX),
    [description] NVARCHAR(MAX),
    [securityLabel] VARCHAR(MAX),
    [content] VARCHAR(MAX),
    [sourcePatientInfo.id] NVARCHAR(100),
    [sourcePatientInfo.extension] NVARCHAR(MAX),
    [sourcePatientInfo.reference] NVARCHAR(4000),
    [sourcePatientInfo.type] VARCHAR(256),
    [sourcePatientInfo.identifier.id] NVARCHAR(100),
    [sourcePatientInfo.identifier.extension] NVARCHAR(MAX),
    [sourcePatientInfo.identifier.use] NVARCHAR(64),
    [sourcePatientInfo.identifier.type] NVARCHAR(MAX),
    [sourcePatientInfo.identifier.system] VARCHAR(256),
    [sourcePatientInfo.identifier.value] NVARCHAR(4000),
    [sourcePatientInfo.identifier.period] NVARCHAR(MAX),
    [sourcePatientInfo.identifier.assigner] NVARCHAR(MAX),
    [sourcePatientInfo.display] NVARCHAR(4000),
    [related] VARCHAR(MAX),
) WITH (
    LOCATION='/DocumentReference/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.DocumentReferenceIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'DocumentReference/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.DocumentReferenceBasedOn AS
SELECT
    [id],
    [basedOn.JSON],
    [basedOn.id],
    [basedOn.extension],
    [basedOn.reference],
    [basedOn.type],
    [basedOn.identifier.id],
    [basedOn.identifier.extension],
    [basedOn.identifier.use],
    [basedOn.identifier.type],
    [basedOn.identifier.system],
    [basedOn.identifier.value],
    [basedOn.identifier.period],
    [basedOn.identifier.assigner],
    [basedOn.display]
FROM openrowset (
        BULK 'DocumentReference/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [basedOn.JSON]  VARCHAR(MAX) '$.basedOn'
    ) AS rowset
    CROSS APPLY openjson (rowset.[basedOn.JSON]) with (
        [basedOn.id]                   NVARCHAR(100)       '$.id',
        [basedOn.extension]            NVARCHAR(MAX)       '$.extension',
        [basedOn.reference]            NVARCHAR(4000)      '$.reference',
        [basedOn.type]                 VARCHAR(256)        '$.type',
        [basedOn.identifier.id]        NVARCHAR(100)       '$.identifier.id',
        [basedOn.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [basedOn.identifier.use]       NVARCHAR(64)        '$.identifier.use',
        [basedOn.identifier.type]      NVARCHAR(MAX)       '$.identifier.type',
        [basedOn.identifier.system]    VARCHAR(256)        '$.identifier.system',
        [basedOn.identifier.value]     NVARCHAR(4000)      '$.identifier.value',
        [basedOn.identifier.period]    NVARCHAR(MAX)       '$.identifier.period',
        [basedOn.identifier.assigner]  NVARCHAR(MAX)       '$.identifier.assigner',
        [basedOn.display]              NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.DocumentReferenceCategory AS
SELECT
    [id],
    [category.JSON],
    [category.id],
    [category.extension],
    [category.coding],
    [category.text]
FROM openrowset (
        BULK 'DocumentReference/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [category.JSON]  VARCHAR(MAX) '$.category'
    ) AS rowset
    CROSS APPLY openjson (rowset.[category.JSON]) with (
        [category.id]                  NVARCHAR(100)       '$.id',
        [category.extension]           NVARCHAR(MAX)       '$.extension',
        [category.coding]              NVARCHAR(MAX)       '$.coding' AS JSON,
        [category.text]                NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.DocumentReferenceEncounter AS
SELECT
    [id],
    [encounter.JSON],
    [encounter.id],
    [encounter.extension],
    [encounter.reference],
    [encounter.type],
    [encounter.identifier.id],
    [encounter.identifier.extension],
    [encounter.identifier.use],
    [encounter.identifier.type],
    [encounter.identifier.system],
    [encounter.identifier.value],
    [encounter.identifier.period],
    [encounter.identifier.assigner],
    [encounter.display]
FROM openrowset (
        BULK 'DocumentReference/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [encounter.JSON]  VARCHAR(MAX) '$.encounter'
    ) AS rowset
    CROSS APPLY openjson (rowset.[encounter.JSON]) with (
        [encounter.id]                 NVARCHAR(100)       '$.id',
        [encounter.extension]          NVARCHAR(MAX)       '$.extension',
        [encounter.reference]          NVARCHAR(4000)      '$.reference',
        [encounter.type]               VARCHAR(256)        '$.type',
        [encounter.identifier.id]      NVARCHAR(100)       '$.identifier.id',
        [encounter.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [encounter.identifier.use]     NVARCHAR(64)        '$.identifier.use',
        [encounter.identifier.type]    NVARCHAR(MAX)       '$.identifier.type',
        [encounter.identifier.system]  VARCHAR(256)        '$.identifier.system',
        [encounter.identifier.value]   NVARCHAR(4000)      '$.identifier.value',
        [encounter.identifier.period]  NVARCHAR(MAX)       '$.identifier.period',
        [encounter.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [encounter.display]            NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.DocumentReferenceEvent AS
SELECT
    [id],
    [event.JSON],
    [event.id],
    [event.extension],
    [event.coding],
    [event.text]
FROM openrowset (
        BULK 'DocumentReference/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [event.JSON]  VARCHAR(MAX) '$.event'
    ) AS rowset
    CROSS APPLY openjson (rowset.[event.JSON]) with (
        [event.id]                     NVARCHAR(100)       '$.id',
        [event.extension]              NVARCHAR(MAX)       '$.extension',
        [event.coding]                 NVARCHAR(MAX)       '$.coding' AS JSON,
        [event.text]                   NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.DocumentReferenceAuthor AS
SELECT
    [id],
    [author.JSON],
    [author.id],
    [author.extension],
    [author.reference],
    [author.type],
    [author.identifier.id],
    [author.identifier.extension],
    [author.identifier.use],
    [author.identifier.type],
    [author.identifier.system],
    [author.identifier.value],
    [author.identifier.period],
    [author.identifier.assigner],
    [author.display]
FROM openrowset (
        BULK 'DocumentReference/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [author.JSON]  VARCHAR(MAX) '$.author'
    ) AS rowset
    CROSS APPLY openjson (rowset.[author.JSON]) with (
        [author.id]                    NVARCHAR(100)       '$.id',
        [author.extension]             NVARCHAR(MAX)       '$.extension',
        [author.reference]             NVARCHAR(4000)      '$.reference',
        [author.type]                  VARCHAR(256)        '$.type',
        [author.identifier.id]         NVARCHAR(100)       '$.identifier.id',
        [author.identifier.extension]  NVARCHAR(MAX)       '$.identifier.extension',
        [author.identifier.use]        NVARCHAR(64)        '$.identifier.use',
        [author.identifier.type]       NVARCHAR(MAX)       '$.identifier.type',
        [author.identifier.system]     VARCHAR(256)        '$.identifier.system',
        [author.identifier.value]      NVARCHAR(4000)      '$.identifier.value',
        [author.identifier.period]     NVARCHAR(MAX)       '$.identifier.period',
        [author.identifier.assigner]   NVARCHAR(MAX)       '$.identifier.assigner',
        [author.display]               NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.DocumentReferenceAttester AS
SELECT
    [id],
    [attester.JSON],
    [attester.id],
    [attester.extension],
    [attester.modifierExtension],
    [attester.mode],
    [attester.time],
    [attester.party.id],
    [attester.party.extension],
    [attester.party.reference],
    [attester.party.type],
    [attester.party.identifier],
    [attester.party.display]
FROM openrowset (
        BULK 'DocumentReference/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [attester.JSON]  VARCHAR(MAX) '$.attester'
    ) AS rowset
    CROSS APPLY openjson (rowset.[attester.JSON]) with (
        [attester.id]                  NVARCHAR(100)       '$.id',
        [attester.extension]           NVARCHAR(MAX)       '$.extension',
        [attester.modifierExtension]   NVARCHAR(MAX)       '$.modifierExtension',
        [attester.mode]                NVARCHAR(100)       '$.mode',
        [attester.time]                VARCHAR(64)         '$.time',
        [attester.party.id]            NVARCHAR(100)       '$.party.id',
        [attester.party.extension]     NVARCHAR(MAX)       '$.party.extension',
        [attester.party.reference]     NVARCHAR(4000)      '$.party.reference',
        [attester.party.type]          VARCHAR(256)        '$.party.type',
        [attester.party.identifier]    NVARCHAR(MAX)       '$.party.identifier',
        [attester.party.display]       NVARCHAR(4000)      '$.party.display'
    ) j

GO

CREATE VIEW fhir.DocumentReferenceRelatesTo AS
SELECT
    [id],
    [relatesTo.JSON],
    [relatesTo.id],
    [relatesTo.extension],
    [relatesTo.modifierExtension],
    [relatesTo.code.id],
    [relatesTo.code.extension],
    [relatesTo.code.coding],
    [relatesTo.code.text],
    [relatesTo.target.id],
    [relatesTo.target.extension],
    [relatesTo.target.reference],
    [relatesTo.target.type],
    [relatesTo.target.identifier],
    [relatesTo.target.display]
FROM openrowset (
        BULK 'DocumentReference/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [relatesTo.JSON]  VARCHAR(MAX) '$.relatesTo'
    ) AS rowset
    CROSS APPLY openjson (rowset.[relatesTo.JSON]) with (
        [relatesTo.id]                 NVARCHAR(100)       '$.id',
        [relatesTo.extension]          NVARCHAR(MAX)       '$.extension',
        [relatesTo.modifierExtension]  NVARCHAR(MAX)       '$.modifierExtension',
        [relatesTo.code.id]            NVARCHAR(100)       '$.code.id',
        [relatesTo.code.extension]     NVARCHAR(MAX)       '$.code.extension',
        [relatesTo.code.coding]        NVARCHAR(MAX)       '$.code.coding',
        [relatesTo.code.text]          NVARCHAR(4000)      '$.code.text',
        [relatesTo.target.id]          NVARCHAR(100)       '$.target.id',
        [relatesTo.target.extension]   NVARCHAR(MAX)       '$.target.extension',
        [relatesTo.target.reference]   NVARCHAR(4000)      '$.target.reference',
        [relatesTo.target.type]        VARCHAR(256)        '$.target.type',
        [relatesTo.target.identifier]  NVARCHAR(MAX)       '$.target.identifier',
        [relatesTo.target.display]     NVARCHAR(4000)      '$.target.display'
    ) j

GO

CREATE VIEW fhir.DocumentReferenceSecurityLabel AS
SELECT
    [id],
    [securityLabel.JSON],
    [securityLabel.id],
    [securityLabel.extension],
    [securityLabel.coding],
    [securityLabel.text]
FROM openrowset (
        BULK 'DocumentReference/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [securityLabel.JSON]  VARCHAR(MAX) '$.securityLabel'
    ) AS rowset
    CROSS APPLY openjson (rowset.[securityLabel.JSON]) with (
        [securityLabel.id]             NVARCHAR(100)       '$.id',
        [securityLabel.extension]      NVARCHAR(MAX)       '$.extension',
        [securityLabel.coding]         NVARCHAR(MAX)       '$.coding' AS JSON,
        [securityLabel.text]           NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.DocumentReferenceContent AS
SELECT
    [id],
    [content.JSON],
    [content.id],
    [content.extension],
    [content.modifierExtension],
    [content.attachment.id],
    [content.attachment.extension],
    [content.attachment.contentType],
    [content.attachment.language],
    [content.attachment.data],
    [content.attachment.url],
    [content.attachment.size],
    [content.attachment.hash],
    [content.attachment.title],
    [content.attachment.creation],
    [content.attachment.height],
    [content.attachment.width],
    [content.attachment.frames],
    [content.attachment.duration],
    [content.attachment.pages],
    [content.format.id],
    [content.format.extension],
    [content.format.system],
    [content.format.version],
    [content.format.code],
    [content.format.display],
    [content.format.userSelected],
    [content.identifier.id],
    [content.identifier.extension],
    [content.identifier.use],
    [content.identifier.type],
    [content.identifier.system],
    [content.identifier.value],
    [content.identifier.period],
    [content.identifier.assigner]
FROM openrowset (
        BULK 'DocumentReference/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [content.JSON]  VARCHAR(MAX) '$.content'
    ) AS rowset
    CROSS APPLY openjson (rowset.[content.JSON]) with (
        [content.id]                   NVARCHAR(100)       '$.id',
        [content.extension]            NVARCHAR(MAX)       '$.extension',
        [content.modifierExtension]    NVARCHAR(MAX)       '$.modifierExtension',
        [content.attachment.id]        NVARCHAR(100)       '$.attachment.id',
        [content.attachment.extension] NVARCHAR(MAX)       '$.attachment.extension',
        [content.attachment.contentType] NVARCHAR(100)       '$.attachment.contentType',
        [content.attachment.language]  NVARCHAR(100)       '$.attachment.language',
        [content.attachment.data]      NVARCHAR(MAX)       '$.attachment.data',
        [content.attachment.url]       VARCHAR(256)        '$.attachment.url',
        [content.attachment.size]      NVARCHAR(MAX)       '$.attachment.size',
        [content.attachment.hash]      NVARCHAR(MAX)       '$.attachment.hash',
        [content.attachment.title]     NVARCHAR(4000)      '$.attachment.title',
        [content.attachment.creation]  VARCHAR(64)         '$.attachment.creation',
        [content.attachment.height]    bigint              '$.attachment.height',
        [content.attachment.width]     bigint              '$.attachment.width',
        [content.attachment.frames]    bigint              '$.attachment.frames',
        [content.attachment.duration]  float               '$.attachment.duration',
        [content.attachment.pages]     bigint              '$.attachment.pages',
        [content.format.id]            NVARCHAR(100)       '$.format.id',
        [content.format.extension]     NVARCHAR(MAX)       '$.format.extension',
        [content.format.system]        VARCHAR(256)        '$.format.system',
        [content.format.version]       NVARCHAR(100)       '$.format.version',
        [content.format.code]          NVARCHAR(4000)      '$.format.code',
        [content.format.display]       NVARCHAR(4000)      '$.format.display',
        [content.format.userSelected]  bit                 '$.format.userSelected',
        [content.identifier.id]        NVARCHAR(100)       '$.identifier.id',
        [content.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [content.identifier.use]       NVARCHAR(64)        '$.identifier.use',
        [content.identifier.type]      NVARCHAR(MAX)       '$.identifier.type',
        [content.identifier.system]    VARCHAR(256)        '$.identifier.system',
        [content.identifier.value]     NVARCHAR(4000)      '$.identifier.value',
        [content.identifier.period]    NVARCHAR(MAX)       '$.identifier.period',
        [content.identifier.assigner]  NVARCHAR(MAX)       '$.identifier.assigner'
    ) j

GO

CREATE VIEW fhir.DocumentReferenceRelated AS
SELECT
    [id],
    [related.JSON],
    [related.id],
    [related.extension],
    [related.reference],
    [related.type],
    [related.identifier.id],
    [related.identifier.extension],
    [related.identifier.use],
    [related.identifier.type],
    [related.identifier.system],
    [related.identifier.value],
    [related.identifier.period],
    [related.identifier.assigner],
    [related.display]
FROM openrowset (
        BULK 'DocumentReference/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [related.JSON]  VARCHAR(MAX) '$.related'
    ) AS rowset
    CROSS APPLY openjson (rowset.[related.JSON]) with (
        [related.id]                   NVARCHAR(100)       '$.id',
        [related.extension]            NVARCHAR(MAX)       '$.extension',
        [related.reference]            NVARCHAR(4000)      '$.reference',
        [related.type]                 VARCHAR(256)        '$.type',
        [related.identifier.id]        NVARCHAR(100)       '$.identifier.id',
        [related.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [related.identifier.use]       NVARCHAR(64)        '$.identifier.use',
        [related.identifier.type]      NVARCHAR(MAX)       '$.identifier.type',
        [related.identifier.system]    VARCHAR(256)        '$.identifier.system',
        [related.identifier.value]     NVARCHAR(4000)      '$.identifier.value',
        [related.identifier.period]    NVARCHAR(MAX)       '$.identifier.period',
        [related.identifier.assigner]  NVARCHAR(MAX)       '$.identifier.assigner',
        [related.display]              NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[Encounter] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [status] NVARCHAR(100),
    [statusHistory] VARCHAR(MAX),
    [class.id] NVARCHAR(100),
    [class.extension] NVARCHAR(MAX),
    [class.system] VARCHAR(256),
    [class.version] NVARCHAR(100),
    [class.code] NVARCHAR(4000),
    [class.display] NVARCHAR(4000),
    [class.userSelected] bit,
    [classHistory] VARCHAR(MAX),
    [type] VARCHAR(MAX),
    [serviceType.id] NVARCHAR(100),
    [serviceType.extension] NVARCHAR(MAX),
    [serviceType.coding] VARCHAR(MAX),
    [serviceType.text] NVARCHAR(4000),
    [priority.id] NVARCHAR(100),
    [priority.extension] NVARCHAR(MAX),
    [priority.coding] VARCHAR(MAX),
    [priority.text] NVARCHAR(4000),
    [subject.id] NVARCHAR(100),
    [subject.extension] NVARCHAR(MAX),
    [subject.reference] NVARCHAR(4000),
    [subject.type] VARCHAR(256),
    [subject.identifier.id] NVARCHAR(100),
    [subject.identifier.extension] NVARCHAR(MAX),
    [subject.identifier.use] NVARCHAR(64),
    [subject.identifier.type] NVARCHAR(MAX),
    [subject.identifier.system] VARCHAR(256),
    [subject.identifier.value] NVARCHAR(4000),
    [subject.identifier.period] NVARCHAR(MAX),
    [subject.identifier.assigner] NVARCHAR(MAX),
    [subject.display] NVARCHAR(4000),
    [subjectStatus.id] NVARCHAR(100),
    [subjectStatus.extension] NVARCHAR(MAX),
    [subjectStatus.coding] VARCHAR(MAX),
    [subjectStatus.text] NVARCHAR(4000),
    [episodeOfCare] VARCHAR(MAX),
    [basedOn] VARCHAR(MAX),
    [participant] VARCHAR(MAX),
    [appointment] VARCHAR(MAX),
    [actualPeriod.id] NVARCHAR(100),
    [actualPeriod.extension] NVARCHAR(MAX),
    [actualPeriod.start] VARCHAR(64),
    [actualPeriod.end] VARCHAR(64),
    [plannedStartDate] VARCHAR(64),
    [plannedEndDate] VARCHAR(64),
    [length.id] NVARCHAR(100),
    [length.extension] NVARCHAR(MAX),
    [length.value] float,
    [length.comparator] NVARCHAR(64),
    [length.unit] NVARCHAR(100),
    [length.system] VARCHAR(256),
    [length.code] NVARCHAR(4000),
    [reason] VARCHAR(MAX),
    [diagnosis] VARCHAR(MAX),
    [account] VARCHAR(MAX),
    [hospitalization.id] NVARCHAR(100),
    [hospitalization.extension] NVARCHAR(MAX),
    [hospitalization.modifierExtension] NVARCHAR(MAX),
    [hospitalization.preAdmissionIdentifier.id] NVARCHAR(100),
    [hospitalization.preAdmissionIdentifier.extension] NVARCHAR(MAX),
    [hospitalization.preAdmissionIdentifier.use] NVARCHAR(64),
    [hospitalization.preAdmissionIdentifier.type] NVARCHAR(MAX),
    [hospitalization.preAdmissionIdentifier.system] VARCHAR(256),
    [hospitalization.preAdmissionIdentifier.value] NVARCHAR(4000),
    [hospitalization.preAdmissionIdentifier.period] NVARCHAR(MAX),
    [hospitalization.preAdmissionIdentifier.assigner] NVARCHAR(MAX),
    [hospitalization.origin.id] NVARCHAR(100),
    [hospitalization.origin.extension] NVARCHAR(MAX),
    [hospitalization.origin.reference] NVARCHAR(4000),
    [hospitalization.origin.type] VARCHAR(256),
    [hospitalization.origin.identifier] NVARCHAR(MAX),
    [hospitalization.origin.display] NVARCHAR(4000),
    [hospitalization.admitSource.id] NVARCHAR(100),
    [hospitalization.admitSource.extension] NVARCHAR(MAX),
    [hospitalization.admitSource.coding] NVARCHAR(MAX),
    [hospitalization.admitSource.text] NVARCHAR(4000),
    [hospitalization.reAdmission.id] NVARCHAR(100),
    [hospitalization.reAdmission.extension] NVARCHAR(MAX),
    [hospitalization.reAdmission.coding] NVARCHAR(MAX),
    [hospitalization.reAdmission.text] NVARCHAR(4000),
    [hospitalization.dietPreference] VARCHAR(MAX),
    [hospitalization.specialCourtesy] VARCHAR(MAX),
    [hospitalization.specialArrangement] VARCHAR(MAX),
    [hospitalization.destination.id] NVARCHAR(100),
    [hospitalization.destination.extension] NVARCHAR(MAX),
    [hospitalization.destination.reference] NVARCHAR(4000),
    [hospitalization.destination.type] VARCHAR(256),
    [hospitalization.destination.identifier] NVARCHAR(MAX),
    [hospitalization.destination.display] NVARCHAR(4000),
    [hospitalization.dischargeDisposition.id] NVARCHAR(100),
    [hospitalization.dischargeDisposition.extension] NVARCHAR(MAX),
    [hospitalization.dischargeDisposition.coding] NVARCHAR(MAX),
    [hospitalization.dischargeDisposition.text] NVARCHAR(4000),
    [location] VARCHAR(MAX),
    [serviceProvider.id] NVARCHAR(100),
    [serviceProvider.extension] NVARCHAR(MAX),
    [serviceProvider.reference] NVARCHAR(4000),
    [serviceProvider.type] VARCHAR(256),
    [serviceProvider.identifier.id] NVARCHAR(100),
    [serviceProvider.identifier.extension] NVARCHAR(MAX),
    [serviceProvider.identifier.use] NVARCHAR(64),
    [serviceProvider.identifier.type] NVARCHAR(MAX),
    [serviceProvider.identifier.system] VARCHAR(256),
    [serviceProvider.identifier.value] NVARCHAR(4000),
    [serviceProvider.identifier.period] NVARCHAR(MAX),
    [serviceProvider.identifier.assigner] NVARCHAR(MAX),
    [serviceProvider.display] NVARCHAR(4000),
    [partOf.id] NVARCHAR(100),
    [partOf.extension] NVARCHAR(MAX),
    [partOf.reference] NVARCHAR(4000),
    [partOf.type] VARCHAR(256),
    [partOf.identifier.id] NVARCHAR(100),
    [partOf.identifier.extension] NVARCHAR(MAX),
    [partOf.identifier.use] NVARCHAR(64),
    [partOf.identifier.type] NVARCHAR(MAX),
    [partOf.identifier.system] VARCHAR(256),
    [partOf.identifier.value] NVARCHAR(4000),
    [partOf.identifier.period] NVARCHAR(MAX),
    [partOf.identifier.assigner] NVARCHAR(MAX),
    [partOf.display] NVARCHAR(4000),
) WITH (
    LOCATION='/Encounter/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.EncounterIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'Encounter/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.EncounterStatusHistory AS
SELECT
    [id],
    [statusHistory.JSON],
    [statusHistory.id],
    [statusHistory.extension],
    [statusHistory.modifierExtension],
    [statusHistory.status],
    [statusHistory.period.id],
    [statusHistory.period.extension],
    [statusHistory.period.start],
    [statusHistory.period.end]
FROM openrowset (
        BULK 'Encounter/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [statusHistory.JSON]  VARCHAR(MAX) '$.statusHistory'
    ) AS rowset
    CROSS APPLY openjson (rowset.[statusHistory.JSON]) with (
        [statusHistory.id]             NVARCHAR(100)       '$.id',
        [statusHistory.extension]      NVARCHAR(MAX)       '$.extension',
        [statusHistory.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [statusHistory.status]         NVARCHAR(100)       '$.status',
        [statusHistory.period.id]      NVARCHAR(100)       '$.period.id',
        [statusHistory.period.extension] NVARCHAR(MAX)       '$.period.extension',
        [statusHistory.period.start]   VARCHAR(64)         '$.period.start',
        [statusHistory.period.end]     VARCHAR(64)         '$.period.end'
    ) j

GO

CREATE VIEW fhir.EncounterClassHistory AS
SELECT
    [id],
    [classHistory.JSON],
    [classHistory.id],
    [classHistory.extension],
    [classHistory.modifierExtension],
    [classHistory.class.id],
    [classHistory.class.extension],
    [classHistory.class.system],
    [classHistory.class.version],
    [classHistory.class.code],
    [classHistory.class.display],
    [classHistory.class.userSelected],
    [classHistory.period.id],
    [classHistory.period.extension],
    [classHistory.period.start],
    [classHistory.period.end]
FROM openrowset (
        BULK 'Encounter/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [classHistory.JSON]  VARCHAR(MAX) '$.classHistory'
    ) AS rowset
    CROSS APPLY openjson (rowset.[classHistory.JSON]) with (
        [classHistory.id]              NVARCHAR(100)       '$.id',
        [classHistory.extension]       NVARCHAR(MAX)       '$.extension',
        [classHistory.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [classHistory.class.id]        NVARCHAR(100)       '$.class.id',
        [classHistory.class.extension] NVARCHAR(MAX)       '$.class.extension',
        [classHistory.class.system]    VARCHAR(256)        '$.class.system',
        [classHistory.class.version]   NVARCHAR(100)       '$.class.version',
        [classHistory.class.code]      NVARCHAR(4000)      '$.class.code',
        [classHistory.class.display]   NVARCHAR(4000)      '$.class.display',
        [classHistory.class.userSelected] bit                 '$.class.userSelected',
        [classHistory.period.id]       NVARCHAR(100)       '$.period.id',
        [classHistory.period.extension] NVARCHAR(MAX)       '$.period.extension',
        [classHistory.period.start]    VARCHAR(64)         '$.period.start',
        [classHistory.period.end]      VARCHAR(64)         '$.period.end'
    ) j

GO

CREATE VIEW fhir.EncounterType AS
SELECT
    [id],
    [type.JSON],
    [type.id],
    [type.extension],
    [type.coding],
    [type.text]
FROM openrowset (
        BULK 'Encounter/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [type.JSON]  VARCHAR(MAX) '$.type'
    ) AS rowset
    CROSS APPLY openjson (rowset.[type.JSON]) with (
        [type.id]                      NVARCHAR(100)       '$.id',
        [type.extension]               NVARCHAR(MAX)       '$.extension',
        [type.coding]                  NVARCHAR(MAX)       '$.coding' AS JSON,
        [type.text]                    NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.EncounterEpisodeOfCare AS
SELECT
    [id],
    [episodeOfCare.JSON],
    [episodeOfCare.id],
    [episodeOfCare.extension],
    [episodeOfCare.reference],
    [episodeOfCare.type],
    [episodeOfCare.identifier.id],
    [episodeOfCare.identifier.extension],
    [episodeOfCare.identifier.use],
    [episodeOfCare.identifier.type],
    [episodeOfCare.identifier.system],
    [episodeOfCare.identifier.value],
    [episodeOfCare.identifier.period],
    [episodeOfCare.identifier.assigner],
    [episodeOfCare.display]
FROM openrowset (
        BULK 'Encounter/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [episodeOfCare.JSON]  VARCHAR(MAX) '$.episodeOfCare'
    ) AS rowset
    CROSS APPLY openjson (rowset.[episodeOfCare.JSON]) with (
        [episodeOfCare.id]             NVARCHAR(100)       '$.id',
        [episodeOfCare.extension]      NVARCHAR(MAX)       '$.extension',
        [episodeOfCare.reference]      NVARCHAR(4000)      '$.reference',
        [episodeOfCare.type]           VARCHAR(256)        '$.type',
        [episodeOfCare.identifier.id]  NVARCHAR(100)       '$.identifier.id',
        [episodeOfCare.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [episodeOfCare.identifier.use] NVARCHAR(64)        '$.identifier.use',
        [episodeOfCare.identifier.type] NVARCHAR(MAX)       '$.identifier.type',
        [episodeOfCare.identifier.system] VARCHAR(256)        '$.identifier.system',
        [episodeOfCare.identifier.value] NVARCHAR(4000)      '$.identifier.value',
        [episodeOfCare.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [episodeOfCare.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [episodeOfCare.display]        NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.EncounterBasedOn AS
SELECT
    [id],
    [basedOn.JSON],
    [basedOn.id],
    [basedOn.extension],
    [basedOn.reference],
    [basedOn.type],
    [basedOn.identifier.id],
    [basedOn.identifier.extension],
    [basedOn.identifier.use],
    [basedOn.identifier.type],
    [basedOn.identifier.system],
    [basedOn.identifier.value],
    [basedOn.identifier.period],
    [basedOn.identifier.assigner],
    [basedOn.display]
FROM openrowset (
        BULK 'Encounter/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [basedOn.JSON]  VARCHAR(MAX) '$.basedOn'
    ) AS rowset
    CROSS APPLY openjson (rowset.[basedOn.JSON]) with (
        [basedOn.id]                   NVARCHAR(100)       '$.id',
        [basedOn.extension]            NVARCHAR(MAX)       '$.extension',
        [basedOn.reference]            NVARCHAR(4000)      '$.reference',
        [basedOn.type]                 VARCHAR(256)        '$.type',
        [basedOn.identifier.id]        NVARCHAR(100)       '$.identifier.id',
        [basedOn.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [basedOn.identifier.use]       NVARCHAR(64)        '$.identifier.use',
        [basedOn.identifier.type]      NVARCHAR(MAX)       '$.identifier.type',
        [basedOn.identifier.system]    VARCHAR(256)        '$.identifier.system',
        [basedOn.identifier.value]     NVARCHAR(4000)      '$.identifier.value',
        [basedOn.identifier.period]    NVARCHAR(MAX)       '$.identifier.period',
        [basedOn.identifier.assigner]  NVARCHAR(MAX)       '$.identifier.assigner',
        [basedOn.display]              NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.EncounterParticipant AS
SELECT
    [id],
    [participant.JSON],
    [participant.id],
    [participant.extension],
    [participant.modifierExtension],
    [participant.type],
    [participant.period.id],
    [participant.period.extension],
    [participant.period.start],
    [participant.period.end],
    [participant.actor.id],
    [participant.actor.extension],
    [participant.actor.reference],
    [participant.actor.type],
    [participant.actor.identifier],
    [participant.actor.display]
FROM openrowset (
        BULK 'Encounter/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [participant.JSON]  VARCHAR(MAX) '$.participant'
    ) AS rowset
    CROSS APPLY openjson (rowset.[participant.JSON]) with (
        [participant.id]               NVARCHAR(100)       '$.id',
        [participant.extension]        NVARCHAR(MAX)       '$.extension',
        [participant.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [participant.type]             NVARCHAR(MAX)       '$.type' AS JSON,
        [participant.period.id]        NVARCHAR(100)       '$.period.id',
        [participant.period.extension] NVARCHAR(MAX)       '$.period.extension',
        [participant.period.start]     VARCHAR(64)         '$.period.start',
        [participant.period.end]       VARCHAR(64)         '$.period.end',
        [participant.actor.id]         NVARCHAR(100)       '$.actor.id',
        [participant.actor.extension]  NVARCHAR(MAX)       '$.actor.extension',
        [participant.actor.reference]  NVARCHAR(4000)      '$.actor.reference',
        [participant.actor.type]       VARCHAR(256)        '$.actor.type',
        [participant.actor.identifier] NVARCHAR(MAX)       '$.actor.identifier',
        [participant.actor.display]    NVARCHAR(4000)      '$.actor.display'
    ) j

GO

CREATE VIEW fhir.EncounterAppointment AS
SELECT
    [id],
    [appointment.JSON],
    [appointment.id],
    [appointment.extension],
    [appointment.reference],
    [appointment.type],
    [appointment.identifier.id],
    [appointment.identifier.extension],
    [appointment.identifier.use],
    [appointment.identifier.type],
    [appointment.identifier.system],
    [appointment.identifier.value],
    [appointment.identifier.period],
    [appointment.identifier.assigner],
    [appointment.display]
FROM openrowset (
        BULK 'Encounter/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [appointment.JSON]  VARCHAR(MAX) '$.appointment'
    ) AS rowset
    CROSS APPLY openjson (rowset.[appointment.JSON]) with (
        [appointment.id]               NVARCHAR(100)       '$.id',
        [appointment.extension]        NVARCHAR(MAX)       '$.extension',
        [appointment.reference]        NVARCHAR(4000)      '$.reference',
        [appointment.type]             VARCHAR(256)        '$.type',
        [appointment.identifier.id]    NVARCHAR(100)       '$.identifier.id',
        [appointment.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [appointment.identifier.use]   NVARCHAR(64)        '$.identifier.use',
        [appointment.identifier.type]  NVARCHAR(MAX)       '$.identifier.type',
        [appointment.identifier.system] VARCHAR(256)        '$.identifier.system',
        [appointment.identifier.value] NVARCHAR(4000)      '$.identifier.value',
        [appointment.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [appointment.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [appointment.display]          NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.EncounterReason AS
SELECT
    [id],
    [reason.JSON],
    [reason.id],
    [reason.extension],
    [reason.concept.id],
    [reason.concept.extension],
    [reason.concept.coding],
    [reason.concept.text],
    [reason.reference.id],
    [reason.reference.extension],
    [reason.reference.reference],
    [reason.reference.type],
    [reason.reference.identifier],
    [reason.reference.display]
FROM openrowset (
        BULK 'Encounter/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [reason.JSON]  VARCHAR(MAX) '$.reason'
    ) AS rowset
    CROSS APPLY openjson (rowset.[reason.JSON]) with (
        [reason.id]                    NVARCHAR(100)       '$.id',
        [reason.extension]             NVARCHAR(MAX)       '$.extension',
        [reason.concept.id]            NVARCHAR(100)       '$.concept.id',
        [reason.concept.extension]     NVARCHAR(MAX)       '$.concept.extension',
        [reason.concept.coding]        NVARCHAR(MAX)       '$.concept.coding',
        [reason.concept.text]          NVARCHAR(4000)      '$.concept.text',
        [reason.reference.id]          NVARCHAR(100)       '$.reference.id',
        [reason.reference.extension]   NVARCHAR(MAX)       '$.reference.extension',
        [reason.reference.reference]   NVARCHAR(4000)      '$.reference.reference',
        [reason.reference.type]        VARCHAR(256)        '$.reference.type',
        [reason.reference.identifier]  NVARCHAR(MAX)       '$.reference.identifier',
        [reason.reference.display]     NVARCHAR(4000)      '$.reference.display'
    ) j

GO

CREATE VIEW fhir.EncounterDiagnosis AS
SELECT
    [id],
    [diagnosis.JSON],
    [diagnosis.id],
    [diagnosis.extension],
    [diagnosis.modifierExtension],
    [diagnosis.condition.id],
    [diagnosis.condition.extension],
    [diagnosis.condition.reference],
    [diagnosis.condition.type],
    [diagnosis.condition.identifier],
    [diagnosis.condition.display],
    [diagnosis.use.id],
    [diagnosis.use.extension],
    [diagnosis.use.coding],
    [diagnosis.use.text],
    [diagnosis.rank]
FROM openrowset (
        BULK 'Encounter/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [diagnosis.JSON]  VARCHAR(MAX) '$.diagnosis'
    ) AS rowset
    CROSS APPLY openjson (rowset.[diagnosis.JSON]) with (
        [diagnosis.id]                 NVARCHAR(100)       '$.id',
        [diagnosis.extension]          NVARCHAR(MAX)       '$.extension',
        [diagnosis.modifierExtension]  NVARCHAR(MAX)       '$.modifierExtension',
        [diagnosis.condition.id]       NVARCHAR(100)       '$.condition.id',
        [diagnosis.condition.extension] NVARCHAR(MAX)       '$.condition.extension',
        [diagnosis.condition.reference] NVARCHAR(4000)      '$.condition.reference',
        [diagnosis.condition.type]     VARCHAR(256)        '$.condition.type',
        [diagnosis.condition.identifier] NVARCHAR(MAX)       '$.condition.identifier',
        [diagnosis.condition.display]  NVARCHAR(4000)      '$.condition.display',
        [diagnosis.use.id]             NVARCHAR(100)       '$.use.id',
        [diagnosis.use.extension]      NVARCHAR(MAX)       '$.use.extension',
        [diagnosis.use.coding]         NVARCHAR(MAX)       '$.use.coding',
        [diagnosis.use.text]           NVARCHAR(4000)      '$.use.text',
        [diagnosis.rank]               bigint              '$.rank'
    ) j

GO

CREATE VIEW fhir.EncounterAccount AS
SELECT
    [id],
    [account.JSON],
    [account.id],
    [account.extension],
    [account.reference],
    [account.type],
    [account.identifier.id],
    [account.identifier.extension],
    [account.identifier.use],
    [account.identifier.type],
    [account.identifier.system],
    [account.identifier.value],
    [account.identifier.period],
    [account.identifier.assigner],
    [account.display]
FROM openrowset (
        BULK 'Encounter/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [account.JSON]  VARCHAR(MAX) '$.account'
    ) AS rowset
    CROSS APPLY openjson (rowset.[account.JSON]) with (
        [account.id]                   NVARCHAR(100)       '$.id',
        [account.extension]            NVARCHAR(MAX)       '$.extension',
        [account.reference]            NVARCHAR(4000)      '$.reference',
        [account.type]                 VARCHAR(256)        '$.type',
        [account.identifier.id]        NVARCHAR(100)       '$.identifier.id',
        [account.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [account.identifier.use]       NVARCHAR(64)        '$.identifier.use',
        [account.identifier.type]      NVARCHAR(MAX)       '$.identifier.type',
        [account.identifier.system]    VARCHAR(256)        '$.identifier.system',
        [account.identifier.value]     NVARCHAR(4000)      '$.identifier.value',
        [account.identifier.period]    NVARCHAR(MAX)       '$.identifier.period',
        [account.identifier.assigner]  NVARCHAR(MAX)       '$.identifier.assigner',
        [account.display]              NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.EncounterLocation AS
SELECT
    [id],
    [location.JSON],
    [location.id],
    [location.extension],
    [location.modifierExtension],
    [location.location.id],
    [location.location.extension],
    [location.location.reference],
    [location.location.type],
    [location.location.identifier],
    [location.location.display],
    [location.status],
    [location.physicalType.id],
    [location.physicalType.extension],
    [location.physicalType.coding],
    [location.physicalType.text],
    [location.period.id],
    [location.period.extension],
    [location.period.start],
    [location.period.end]
FROM openrowset (
        BULK 'Encounter/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [location.JSON]  VARCHAR(MAX) '$.location'
    ) AS rowset
    CROSS APPLY openjson (rowset.[location.JSON]) with (
        [location.id]                  NVARCHAR(100)       '$.id',
        [location.extension]           NVARCHAR(MAX)       '$.extension',
        [location.modifierExtension]   NVARCHAR(MAX)       '$.modifierExtension',
        [location.location.id]         NVARCHAR(100)       '$.location.id',
        [location.location.extension]  NVARCHAR(MAX)       '$.location.extension',
        [location.location.reference]  NVARCHAR(4000)      '$.location.reference',
        [location.location.type]       VARCHAR(256)        '$.location.type',
        [location.location.identifier] NVARCHAR(MAX)       '$.location.identifier',
        [location.location.display]    NVARCHAR(4000)      '$.location.display',
        [location.status]              NVARCHAR(100)       '$.status',
        [location.physicalType.id]     NVARCHAR(100)       '$.physicalType.id',
        [location.physicalType.extension] NVARCHAR(MAX)       '$.physicalType.extension',
        [location.physicalType.coding] NVARCHAR(MAX)       '$.physicalType.coding',
        [location.physicalType.text]   NVARCHAR(4000)      '$.physicalType.text',
        [location.period.id]           NVARCHAR(100)       '$.period.id',
        [location.period.extension]    NVARCHAR(MAX)       '$.period.extension',
        [location.period.start]        VARCHAR(64)         '$.period.start',
        [location.period.end]          VARCHAR(64)         '$.period.end'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[Endpoint] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [status] NVARCHAR(100),
    [connectionType.id] NVARCHAR(100),
    [connectionType.extension] NVARCHAR(MAX),
    [connectionType.system] VARCHAR(256),
    [connectionType.version] NVARCHAR(100),
    [connectionType.code] NVARCHAR(4000),
    [connectionType.display] NVARCHAR(4000),
    [connectionType.userSelected] bit,
    [name] NVARCHAR(500),
    [managingOrganization.id] NVARCHAR(100),
    [managingOrganization.extension] NVARCHAR(MAX),
    [managingOrganization.reference] NVARCHAR(4000),
    [managingOrganization.type] VARCHAR(256),
    [managingOrganization.identifier.id] NVARCHAR(100),
    [managingOrganization.identifier.extension] NVARCHAR(MAX),
    [managingOrganization.identifier.use] NVARCHAR(64),
    [managingOrganization.identifier.type] NVARCHAR(MAX),
    [managingOrganization.identifier.system] VARCHAR(256),
    [managingOrganization.identifier.value] NVARCHAR(4000),
    [managingOrganization.identifier.period] NVARCHAR(MAX),
    [managingOrganization.identifier.assigner] NVARCHAR(MAX),
    [managingOrganization.display] NVARCHAR(4000),
    [contact] VARCHAR(MAX),
    [period.id] NVARCHAR(100),
    [period.extension] NVARCHAR(MAX),
    [period.start] VARCHAR(64),
    [period.end] VARCHAR(64),
    [payloadType] VARCHAR(MAX),
    [payloadMimeType] VARCHAR(MAX),
    [address] VARCHAR(256),
    [header] VARCHAR(MAX),
) WITH (
    LOCATION='/Endpoint/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.EndpointIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'Endpoint/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.EndpointContact AS
SELECT
    [id],
    [contact.JSON],
    [contact.id],
    [contact.extension],
    [contact.system],
    [contact.value],
    [contact.use],
    [contact.rank],
    [contact.period.id],
    [contact.period.extension],
    [contact.period.start],
    [contact.period.end]
FROM openrowset (
        BULK 'Endpoint/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [contact.JSON]  VARCHAR(MAX) '$.contact'
    ) AS rowset
    CROSS APPLY openjson (rowset.[contact.JSON]) with (
        [contact.id]                   NVARCHAR(100)       '$.id',
        [contact.extension]            NVARCHAR(MAX)       '$.extension',
        [contact.system]               NVARCHAR(64)        '$.system',
        [contact.value]                NVARCHAR(4000)      '$.value',
        [contact.use]                  NVARCHAR(64)        '$.use',
        [contact.rank]                 bigint              '$.rank',
        [contact.period.id]            NVARCHAR(100)       '$.period.id',
        [contact.period.extension]     NVARCHAR(MAX)       '$.period.extension',
        [contact.period.start]         VARCHAR(64)         '$.period.start',
        [contact.period.end]           VARCHAR(64)         '$.period.end'
    ) j

GO

CREATE VIEW fhir.EndpointPayloadType AS
SELECT
    [id],
    [payloadType.JSON],
    [payloadType.id],
    [payloadType.extension],
    [payloadType.coding],
    [payloadType.text]
FROM openrowset (
        BULK 'Endpoint/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [payloadType.JSON]  VARCHAR(MAX) '$.payloadType'
    ) AS rowset
    CROSS APPLY openjson (rowset.[payloadType.JSON]) with (
        [payloadType.id]               NVARCHAR(100)       '$.id',
        [payloadType.extension]        NVARCHAR(MAX)       '$.extension',
        [payloadType.coding]           NVARCHAR(MAX)       '$.coding' AS JSON,
        [payloadType.text]             NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.EndpointPayloadMimeType AS
SELECT
    [id],
    [payloadMimeType.JSON],
    [payloadMimeType]
FROM openrowset (
        BULK 'Endpoint/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [payloadMimeType.JSON]  VARCHAR(MAX) '$.payloadMimeType'
    ) AS rowset
    CROSS APPLY openjson (rowset.[payloadMimeType.JSON]) with (
        [payloadMimeType]              NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.EndpointHeader AS
SELECT
    [id],
    [header.JSON],
    [header]
FROM openrowset (
        BULK 'Endpoint/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [header.JSON]  VARCHAR(MAX) '$.header'
    ) AS rowset
    CROSS APPLY openjson (rowset.[header.JSON]) with (
        [header]                       NVARCHAR(MAX)       '$'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[EnrollmentRequest] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [status] NVARCHAR(100),
    [created] VARCHAR(64),
    [insurer.id] NVARCHAR(100),
    [insurer.extension] NVARCHAR(MAX),
    [insurer.reference] NVARCHAR(4000),
    [insurer.type] VARCHAR(256),
    [insurer.identifier.id] NVARCHAR(100),
    [insurer.identifier.extension] NVARCHAR(MAX),
    [insurer.identifier.use] NVARCHAR(64),
    [insurer.identifier.type] NVARCHAR(MAX),
    [insurer.identifier.system] VARCHAR(256),
    [insurer.identifier.value] NVARCHAR(4000),
    [insurer.identifier.period] NVARCHAR(MAX),
    [insurer.identifier.assigner] NVARCHAR(MAX),
    [insurer.display] NVARCHAR(4000),
    [provider.id] NVARCHAR(100),
    [provider.extension] NVARCHAR(MAX),
    [provider.reference] NVARCHAR(4000),
    [provider.type] VARCHAR(256),
    [provider.identifier.id] NVARCHAR(100),
    [provider.identifier.extension] NVARCHAR(MAX),
    [provider.identifier.use] NVARCHAR(64),
    [provider.identifier.type] NVARCHAR(MAX),
    [provider.identifier.system] VARCHAR(256),
    [provider.identifier.value] NVARCHAR(4000),
    [provider.identifier.period] NVARCHAR(MAX),
    [provider.identifier.assigner] NVARCHAR(MAX),
    [provider.display] NVARCHAR(4000),
    [candidate.id] NVARCHAR(100),
    [candidate.extension] NVARCHAR(MAX),
    [candidate.reference] NVARCHAR(4000),
    [candidate.type] VARCHAR(256),
    [candidate.identifier.id] NVARCHAR(100),
    [candidate.identifier.extension] NVARCHAR(MAX),
    [candidate.identifier.use] NVARCHAR(64),
    [candidate.identifier.type] NVARCHAR(MAX),
    [candidate.identifier.system] VARCHAR(256),
    [candidate.identifier.value] NVARCHAR(4000),
    [candidate.identifier.period] NVARCHAR(MAX),
    [candidate.identifier.assigner] NVARCHAR(MAX),
    [candidate.display] NVARCHAR(4000),
    [coverage.id] NVARCHAR(100),
    [coverage.extension] NVARCHAR(MAX),
    [coverage.reference] NVARCHAR(4000),
    [coverage.type] VARCHAR(256),
    [coverage.identifier.id] NVARCHAR(100),
    [coverage.identifier.extension] NVARCHAR(MAX),
    [coverage.identifier.use] NVARCHAR(64),
    [coverage.identifier.type] NVARCHAR(MAX),
    [coverage.identifier.system] VARCHAR(256),
    [coverage.identifier.value] NVARCHAR(4000),
    [coverage.identifier.period] NVARCHAR(MAX),
    [coverage.identifier.assigner] NVARCHAR(MAX),
    [coverage.display] NVARCHAR(4000),
) WITH (
    LOCATION='/EnrollmentRequest/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.EnrollmentRequestIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'EnrollmentRequest/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[EnrollmentResponse] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [status] NVARCHAR(100),
    [request.id] NVARCHAR(100),
    [request.extension] NVARCHAR(MAX),
    [request.reference] NVARCHAR(4000),
    [request.type] VARCHAR(256),
    [request.identifier.id] NVARCHAR(100),
    [request.identifier.extension] NVARCHAR(MAX),
    [request.identifier.use] NVARCHAR(64),
    [request.identifier.type] NVARCHAR(MAX),
    [request.identifier.system] VARCHAR(256),
    [request.identifier.value] NVARCHAR(4000),
    [request.identifier.period] NVARCHAR(MAX),
    [request.identifier.assigner] NVARCHAR(MAX),
    [request.display] NVARCHAR(4000),
    [outcome] NVARCHAR(100),
    [disposition] NVARCHAR(4000),
    [created] VARCHAR(64),
    [organization.id] NVARCHAR(100),
    [organization.extension] NVARCHAR(MAX),
    [organization.reference] NVARCHAR(4000),
    [organization.type] VARCHAR(256),
    [organization.identifier.id] NVARCHAR(100),
    [organization.identifier.extension] NVARCHAR(MAX),
    [organization.identifier.use] NVARCHAR(64),
    [organization.identifier.type] NVARCHAR(MAX),
    [organization.identifier.system] VARCHAR(256),
    [organization.identifier.value] NVARCHAR(4000),
    [organization.identifier.period] NVARCHAR(MAX),
    [organization.identifier.assigner] NVARCHAR(MAX),
    [organization.display] NVARCHAR(4000),
    [requestProvider.id] NVARCHAR(100),
    [requestProvider.extension] NVARCHAR(MAX),
    [requestProvider.reference] NVARCHAR(4000),
    [requestProvider.type] VARCHAR(256),
    [requestProvider.identifier.id] NVARCHAR(100),
    [requestProvider.identifier.extension] NVARCHAR(MAX),
    [requestProvider.identifier.use] NVARCHAR(64),
    [requestProvider.identifier.type] NVARCHAR(MAX),
    [requestProvider.identifier.system] VARCHAR(256),
    [requestProvider.identifier.value] NVARCHAR(4000),
    [requestProvider.identifier.period] NVARCHAR(MAX),
    [requestProvider.identifier.assigner] NVARCHAR(MAX),
    [requestProvider.display] NVARCHAR(4000),
) WITH (
    LOCATION='/EnrollmentResponse/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.EnrollmentResponseIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'EnrollmentResponse/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[EpisodeOfCare] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [status] NVARCHAR(100),
    [statusHistory] VARCHAR(MAX),
    [type] VARCHAR(MAX),
    [diagnosis] VARCHAR(MAX),
    [patient.id] NVARCHAR(100),
    [patient.extension] NVARCHAR(MAX),
    [patient.reference] NVARCHAR(4000),
    [patient.type] VARCHAR(256),
    [patient.identifier.id] NVARCHAR(100),
    [patient.identifier.extension] NVARCHAR(MAX),
    [patient.identifier.use] NVARCHAR(64),
    [patient.identifier.type] NVARCHAR(MAX),
    [patient.identifier.system] VARCHAR(256),
    [patient.identifier.value] NVARCHAR(4000),
    [patient.identifier.period] NVARCHAR(MAX),
    [patient.identifier.assigner] NVARCHAR(MAX),
    [patient.display] NVARCHAR(4000),
    [managingOrganization.id] NVARCHAR(100),
    [managingOrganization.extension] NVARCHAR(MAX),
    [managingOrganization.reference] NVARCHAR(4000),
    [managingOrganization.type] VARCHAR(256),
    [managingOrganization.identifier.id] NVARCHAR(100),
    [managingOrganization.identifier.extension] NVARCHAR(MAX),
    [managingOrganization.identifier.use] NVARCHAR(64),
    [managingOrganization.identifier.type] NVARCHAR(MAX),
    [managingOrganization.identifier.system] VARCHAR(256),
    [managingOrganization.identifier.value] NVARCHAR(4000),
    [managingOrganization.identifier.period] NVARCHAR(MAX),
    [managingOrganization.identifier.assigner] NVARCHAR(MAX),
    [managingOrganization.display] NVARCHAR(4000),
    [period.id] NVARCHAR(100),
    [period.extension] NVARCHAR(MAX),
    [period.start] VARCHAR(64),
    [period.end] VARCHAR(64),
    [referralRequest] VARCHAR(MAX),
    [careManager.id] NVARCHAR(100),
    [careManager.extension] NVARCHAR(MAX),
    [careManager.reference] NVARCHAR(4000),
    [careManager.type] VARCHAR(256),
    [careManager.identifier.id] NVARCHAR(100),
    [careManager.identifier.extension] NVARCHAR(MAX),
    [careManager.identifier.use] NVARCHAR(64),
    [careManager.identifier.type] NVARCHAR(MAX),
    [careManager.identifier.system] VARCHAR(256),
    [careManager.identifier.value] NVARCHAR(4000),
    [careManager.identifier.period] NVARCHAR(MAX),
    [careManager.identifier.assigner] NVARCHAR(MAX),
    [careManager.display] NVARCHAR(4000),
    [team] VARCHAR(MAX),
    [account] VARCHAR(MAX),
) WITH (
    LOCATION='/EpisodeOfCare/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.EpisodeOfCareIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'EpisodeOfCare/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.EpisodeOfCareStatusHistory AS
SELECT
    [id],
    [statusHistory.JSON],
    [statusHistory.id],
    [statusHistory.extension],
    [statusHistory.modifierExtension],
    [statusHistory.status],
    [statusHistory.period.id],
    [statusHistory.period.extension],
    [statusHistory.period.start],
    [statusHistory.period.end]
FROM openrowset (
        BULK 'EpisodeOfCare/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [statusHistory.JSON]  VARCHAR(MAX) '$.statusHistory'
    ) AS rowset
    CROSS APPLY openjson (rowset.[statusHistory.JSON]) with (
        [statusHistory.id]             NVARCHAR(100)       '$.id',
        [statusHistory.extension]      NVARCHAR(MAX)       '$.extension',
        [statusHistory.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [statusHistory.status]         NVARCHAR(100)       '$.status',
        [statusHistory.period.id]      NVARCHAR(100)       '$.period.id',
        [statusHistory.period.extension] NVARCHAR(MAX)       '$.period.extension',
        [statusHistory.period.start]   VARCHAR(64)         '$.period.start',
        [statusHistory.period.end]     VARCHAR(64)         '$.period.end'
    ) j

GO

CREATE VIEW fhir.EpisodeOfCareType AS
SELECT
    [id],
    [type.JSON],
    [type.id],
    [type.extension],
    [type.coding],
    [type.text]
FROM openrowset (
        BULK 'EpisodeOfCare/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [type.JSON]  VARCHAR(MAX) '$.type'
    ) AS rowset
    CROSS APPLY openjson (rowset.[type.JSON]) with (
        [type.id]                      NVARCHAR(100)       '$.id',
        [type.extension]               NVARCHAR(MAX)       '$.extension',
        [type.coding]                  NVARCHAR(MAX)       '$.coding' AS JSON,
        [type.text]                    NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.EpisodeOfCareDiagnosis AS
SELECT
    [id],
    [diagnosis.JSON],
    [diagnosis.id],
    [diagnosis.extension],
    [diagnosis.modifierExtension],
    [diagnosis.condition.id],
    [diagnosis.condition.extension],
    [diagnosis.condition.reference],
    [diagnosis.condition.type],
    [diagnosis.condition.identifier],
    [diagnosis.condition.display],
    [diagnosis.role.id],
    [diagnosis.role.extension],
    [diagnosis.role.coding],
    [diagnosis.role.text],
    [diagnosis.rank]
FROM openrowset (
        BULK 'EpisodeOfCare/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [diagnosis.JSON]  VARCHAR(MAX) '$.diagnosis'
    ) AS rowset
    CROSS APPLY openjson (rowset.[diagnosis.JSON]) with (
        [diagnosis.id]                 NVARCHAR(100)       '$.id',
        [diagnosis.extension]          NVARCHAR(MAX)       '$.extension',
        [diagnosis.modifierExtension]  NVARCHAR(MAX)       '$.modifierExtension',
        [diagnosis.condition.id]       NVARCHAR(100)       '$.condition.id',
        [diagnosis.condition.extension] NVARCHAR(MAX)       '$.condition.extension',
        [diagnosis.condition.reference] NVARCHAR(4000)      '$.condition.reference',
        [diagnosis.condition.type]     VARCHAR(256)        '$.condition.type',
        [diagnosis.condition.identifier] NVARCHAR(MAX)       '$.condition.identifier',
        [diagnosis.condition.display]  NVARCHAR(4000)      '$.condition.display',
        [diagnosis.role.id]            NVARCHAR(100)       '$.role.id',
        [diagnosis.role.extension]     NVARCHAR(MAX)       '$.role.extension',
        [diagnosis.role.coding]        NVARCHAR(MAX)       '$.role.coding',
        [diagnosis.role.text]          NVARCHAR(4000)      '$.role.text',
        [diagnosis.rank]               bigint              '$.rank'
    ) j

GO

CREATE VIEW fhir.EpisodeOfCareReferralRequest AS
SELECT
    [id],
    [referralRequest.JSON],
    [referralRequest.id],
    [referralRequest.extension],
    [referralRequest.reference],
    [referralRequest.type],
    [referralRequest.identifier.id],
    [referralRequest.identifier.extension],
    [referralRequest.identifier.use],
    [referralRequest.identifier.type],
    [referralRequest.identifier.system],
    [referralRequest.identifier.value],
    [referralRequest.identifier.period],
    [referralRequest.identifier.assigner],
    [referralRequest.display]
FROM openrowset (
        BULK 'EpisodeOfCare/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [referralRequest.JSON]  VARCHAR(MAX) '$.referralRequest'
    ) AS rowset
    CROSS APPLY openjson (rowset.[referralRequest.JSON]) with (
        [referralRequest.id]           NVARCHAR(100)       '$.id',
        [referralRequest.extension]    NVARCHAR(MAX)       '$.extension',
        [referralRequest.reference]    NVARCHAR(4000)      '$.reference',
        [referralRequest.type]         VARCHAR(256)        '$.type',
        [referralRequest.identifier.id] NVARCHAR(100)       '$.identifier.id',
        [referralRequest.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [referralRequest.identifier.use] NVARCHAR(64)        '$.identifier.use',
        [referralRequest.identifier.type] NVARCHAR(MAX)       '$.identifier.type',
        [referralRequest.identifier.system] VARCHAR(256)        '$.identifier.system',
        [referralRequest.identifier.value] NVARCHAR(4000)      '$.identifier.value',
        [referralRequest.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [referralRequest.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [referralRequest.display]      NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.EpisodeOfCareTeam AS
SELECT
    [id],
    [team.JSON],
    [team.id],
    [team.extension],
    [team.reference],
    [team.type],
    [team.identifier.id],
    [team.identifier.extension],
    [team.identifier.use],
    [team.identifier.type],
    [team.identifier.system],
    [team.identifier.value],
    [team.identifier.period],
    [team.identifier.assigner],
    [team.display]
FROM openrowset (
        BULK 'EpisodeOfCare/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [team.JSON]  VARCHAR(MAX) '$.team'
    ) AS rowset
    CROSS APPLY openjson (rowset.[team.JSON]) with (
        [team.id]                      NVARCHAR(100)       '$.id',
        [team.extension]               NVARCHAR(MAX)       '$.extension',
        [team.reference]               NVARCHAR(4000)      '$.reference',
        [team.type]                    VARCHAR(256)        '$.type',
        [team.identifier.id]           NVARCHAR(100)       '$.identifier.id',
        [team.identifier.extension]    NVARCHAR(MAX)       '$.identifier.extension',
        [team.identifier.use]          NVARCHAR(64)        '$.identifier.use',
        [team.identifier.type]         NVARCHAR(MAX)       '$.identifier.type',
        [team.identifier.system]       VARCHAR(256)        '$.identifier.system',
        [team.identifier.value]        NVARCHAR(4000)      '$.identifier.value',
        [team.identifier.period]       NVARCHAR(MAX)       '$.identifier.period',
        [team.identifier.assigner]     NVARCHAR(MAX)       '$.identifier.assigner',
        [team.display]                 NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.EpisodeOfCareAccount AS
SELECT
    [id],
    [account.JSON],
    [account.id],
    [account.extension],
    [account.reference],
    [account.type],
    [account.identifier.id],
    [account.identifier.extension],
    [account.identifier.use],
    [account.identifier.type],
    [account.identifier.system],
    [account.identifier.value],
    [account.identifier.period],
    [account.identifier.assigner],
    [account.display]
FROM openrowset (
        BULK 'EpisodeOfCare/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [account.JSON]  VARCHAR(MAX) '$.account'
    ) AS rowset
    CROSS APPLY openjson (rowset.[account.JSON]) with (
        [account.id]                   NVARCHAR(100)       '$.id',
        [account.extension]            NVARCHAR(MAX)       '$.extension',
        [account.reference]            NVARCHAR(4000)      '$.reference',
        [account.type]                 VARCHAR(256)        '$.type',
        [account.identifier.id]        NVARCHAR(100)       '$.identifier.id',
        [account.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [account.identifier.use]       NVARCHAR(64)        '$.identifier.use',
        [account.identifier.type]      NVARCHAR(MAX)       '$.identifier.type',
        [account.identifier.system]    VARCHAR(256)        '$.identifier.system',
        [account.identifier.value]     NVARCHAR(4000)      '$.identifier.value',
        [account.identifier.period]    NVARCHAR(MAX)       '$.identifier.period',
        [account.identifier.assigner]  NVARCHAR(MAX)       '$.identifier.assigner',
        [account.display]              NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[EventDefinition] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [url] VARCHAR(256),
    [identifier] VARCHAR(MAX),
    [version] NVARCHAR(100),
    [name] NVARCHAR(500),
    [title] NVARCHAR(4000),
    [status] NVARCHAR(100),
    [experimental] bit,
    [date] VARCHAR(64),
    [publisher] NVARCHAR(500),
    [contact] VARCHAR(MAX),
    [description] NVARCHAR(MAX),
    [useContext] VARCHAR(MAX),
    [jurisdiction] VARCHAR(MAX),
    [purpose] NVARCHAR(MAX),
    [copyright] NVARCHAR(MAX),
    [approvalDate] VARCHAR(64),
    [lastReviewDate] VARCHAR(64),
    [effectivePeriod.id] NVARCHAR(100),
    [effectivePeriod.extension] NVARCHAR(MAX),
    [effectivePeriod.start] VARCHAR(64),
    [effectivePeriod.end] VARCHAR(64),
    [topic] VARCHAR(MAX),
    [author] VARCHAR(MAX),
    [editor] VARCHAR(MAX),
    [reviewer] VARCHAR(MAX),
    [endorser] VARCHAR(MAX),
    [relatedArtifact] VARCHAR(MAX),
    [subtitle] NVARCHAR(4000),
    [usage] NVARCHAR(4000),
    [trigger] VARCHAR(MAX),
    [subject.codeableConcept.id] NVARCHAR(100),
    [subject.codeableConcept.extension] NVARCHAR(MAX),
    [subject.codeableConcept.coding] VARCHAR(MAX),
    [subject.codeableConcept.text] NVARCHAR(4000),
    [subject.reference.id] NVARCHAR(100),
    [subject.reference.extension] NVARCHAR(MAX),
    [subject.reference.reference] NVARCHAR(4000),
    [subject.reference.type] VARCHAR(256),
    [subject.reference.identifier.id] NVARCHAR(100),
    [subject.reference.identifier.extension] NVARCHAR(MAX),
    [subject.reference.identifier.use] NVARCHAR(64),
    [subject.reference.identifier.type] NVARCHAR(MAX),
    [subject.reference.identifier.system] VARCHAR(256),
    [subject.reference.identifier.value] NVARCHAR(4000),
    [subject.reference.identifier.period] NVARCHAR(MAX),
    [subject.reference.identifier.assigner] NVARCHAR(MAX),
    [subject.reference.display] NVARCHAR(4000),
) WITH (
    LOCATION='/EventDefinition/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.EventDefinitionIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'EventDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.EventDefinitionContact AS
SELECT
    [id],
    [contact.JSON],
    [contact.id],
    [contact.extension],
    [contact.name],
    [contact.telecom]
FROM openrowset (
        BULK 'EventDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [contact.JSON]  VARCHAR(MAX) '$.contact'
    ) AS rowset
    CROSS APPLY openjson (rowset.[contact.JSON]) with (
        [contact.id]                   NVARCHAR(100)       '$.id',
        [contact.extension]            NVARCHAR(MAX)       '$.extension',
        [contact.name]                 NVARCHAR(500)       '$.name',
        [contact.telecom]              NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.EventDefinitionUseContext AS
SELECT
    [id],
    [useContext.JSON],
    [useContext.id],
    [useContext.extension],
    [useContext.code.id],
    [useContext.code.extension],
    [useContext.code.system],
    [useContext.code.version],
    [useContext.code.code],
    [useContext.code.display],
    [useContext.code.userSelected],
    [useContext.value.codeableConcept.id],
    [useContext.value.codeableConcept.extension],
    [useContext.value.codeableConcept.coding],
    [useContext.value.codeableConcept.text],
    [useContext.value.quantity.id],
    [useContext.value.quantity.extension],
    [useContext.value.quantity.value],
    [useContext.value.quantity.comparator],
    [useContext.value.quantity.unit],
    [useContext.value.quantity.system],
    [useContext.value.quantity.code],
    [useContext.value.range.id],
    [useContext.value.range.extension],
    [useContext.value.range.low],
    [useContext.value.range.high],
    [useContext.value.reference.id],
    [useContext.value.reference.extension],
    [useContext.value.reference.reference],
    [useContext.value.reference.type],
    [useContext.value.reference.identifier],
    [useContext.value.reference.display]
FROM openrowset (
        BULK 'EventDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [useContext.JSON]  VARCHAR(MAX) '$.useContext'
    ) AS rowset
    CROSS APPLY openjson (rowset.[useContext.JSON]) with (
        [useContext.id]                NVARCHAR(100)       '$.id',
        [useContext.extension]         NVARCHAR(MAX)       '$.extension',
        [useContext.code.id]           NVARCHAR(100)       '$.code.id',
        [useContext.code.extension]    NVARCHAR(MAX)       '$.code.extension',
        [useContext.code.system]       VARCHAR(256)        '$.code.system',
        [useContext.code.version]      NVARCHAR(100)       '$.code.version',
        [useContext.code.code]         NVARCHAR(4000)      '$.code.code',
        [useContext.code.display]      NVARCHAR(4000)      '$.code.display',
        [useContext.code.userSelected] bit                 '$.code.userSelected',
        [useContext.value.codeableConcept.id] NVARCHAR(100)       '$.value.codeableConcept.id',
        [useContext.value.codeableConcept.extension] NVARCHAR(MAX)       '$.value.codeableConcept.extension',
        [useContext.value.codeableConcept.coding] NVARCHAR(MAX)       '$.value.codeableConcept.coding',
        [useContext.value.codeableConcept.text] NVARCHAR(4000)      '$.value.codeableConcept.text',
        [useContext.value.quantity.id] NVARCHAR(100)       '$.value.quantity.id',
        [useContext.value.quantity.extension] NVARCHAR(MAX)       '$.value.quantity.extension',
        [useContext.value.quantity.value] float               '$.value.quantity.value',
        [useContext.value.quantity.comparator] NVARCHAR(64)        '$.value.quantity.comparator',
        [useContext.value.quantity.unit] NVARCHAR(100)       '$.value.quantity.unit',
        [useContext.value.quantity.system] VARCHAR(256)        '$.value.quantity.system',
        [useContext.value.quantity.code] NVARCHAR(4000)      '$.value.quantity.code',
        [useContext.value.range.id]    NVARCHAR(100)       '$.value.range.id',
        [useContext.value.range.extension] NVARCHAR(MAX)       '$.value.range.extension',
        [useContext.value.range.low]   NVARCHAR(MAX)       '$.value.range.low',
        [useContext.value.range.high]  NVARCHAR(MAX)       '$.value.range.high',
        [useContext.value.reference.id] NVARCHAR(100)       '$.value.reference.id',
        [useContext.value.reference.extension] NVARCHAR(MAX)       '$.value.reference.extension',
        [useContext.value.reference.reference] NVARCHAR(4000)      '$.value.reference.reference',
        [useContext.value.reference.type] VARCHAR(256)        '$.value.reference.type',
        [useContext.value.reference.identifier] NVARCHAR(MAX)       '$.value.reference.identifier',
        [useContext.value.reference.display] NVARCHAR(4000)      '$.value.reference.display'
    ) j

GO

CREATE VIEW fhir.EventDefinitionJurisdiction AS
SELECT
    [id],
    [jurisdiction.JSON],
    [jurisdiction.id],
    [jurisdiction.extension],
    [jurisdiction.coding],
    [jurisdiction.text]
FROM openrowset (
        BULK 'EventDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [jurisdiction.JSON]  VARCHAR(MAX) '$.jurisdiction'
    ) AS rowset
    CROSS APPLY openjson (rowset.[jurisdiction.JSON]) with (
        [jurisdiction.id]              NVARCHAR(100)       '$.id',
        [jurisdiction.extension]       NVARCHAR(MAX)       '$.extension',
        [jurisdiction.coding]          NVARCHAR(MAX)       '$.coding' AS JSON,
        [jurisdiction.text]            NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.EventDefinitionTopic AS
SELECT
    [id],
    [topic.JSON],
    [topic.id],
    [topic.extension],
    [topic.coding],
    [topic.text]
FROM openrowset (
        BULK 'EventDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [topic.JSON]  VARCHAR(MAX) '$.topic'
    ) AS rowset
    CROSS APPLY openjson (rowset.[topic.JSON]) with (
        [topic.id]                     NVARCHAR(100)       '$.id',
        [topic.extension]              NVARCHAR(MAX)       '$.extension',
        [topic.coding]                 NVARCHAR(MAX)       '$.coding' AS JSON,
        [topic.text]                   NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.EventDefinitionAuthor AS
SELECT
    [id],
    [author.JSON],
    [author.id],
    [author.extension],
    [author.name],
    [author.telecom]
FROM openrowset (
        BULK 'EventDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [author.JSON]  VARCHAR(MAX) '$.author'
    ) AS rowset
    CROSS APPLY openjson (rowset.[author.JSON]) with (
        [author.id]                    NVARCHAR(100)       '$.id',
        [author.extension]             NVARCHAR(MAX)       '$.extension',
        [author.name]                  NVARCHAR(500)       '$.name',
        [author.telecom]               NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.EventDefinitionEditor AS
SELECT
    [id],
    [editor.JSON],
    [editor.id],
    [editor.extension],
    [editor.name],
    [editor.telecom]
FROM openrowset (
        BULK 'EventDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [editor.JSON]  VARCHAR(MAX) '$.editor'
    ) AS rowset
    CROSS APPLY openjson (rowset.[editor.JSON]) with (
        [editor.id]                    NVARCHAR(100)       '$.id',
        [editor.extension]             NVARCHAR(MAX)       '$.extension',
        [editor.name]                  NVARCHAR(500)       '$.name',
        [editor.telecom]               NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.EventDefinitionReviewer AS
SELECT
    [id],
    [reviewer.JSON],
    [reviewer.id],
    [reviewer.extension],
    [reviewer.name],
    [reviewer.telecom]
FROM openrowset (
        BULK 'EventDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [reviewer.JSON]  VARCHAR(MAX) '$.reviewer'
    ) AS rowset
    CROSS APPLY openjson (rowset.[reviewer.JSON]) with (
        [reviewer.id]                  NVARCHAR(100)       '$.id',
        [reviewer.extension]           NVARCHAR(MAX)       '$.extension',
        [reviewer.name]                NVARCHAR(500)       '$.name',
        [reviewer.telecom]             NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.EventDefinitionEndorser AS
SELECT
    [id],
    [endorser.JSON],
    [endorser.id],
    [endorser.extension],
    [endorser.name],
    [endorser.telecom]
FROM openrowset (
        BULK 'EventDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [endorser.JSON]  VARCHAR(MAX) '$.endorser'
    ) AS rowset
    CROSS APPLY openjson (rowset.[endorser.JSON]) with (
        [endorser.id]                  NVARCHAR(100)       '$.id',
        [endorser.extension]           NVARCHAR(MAX)       '$.extension',
        [endorser.name]                NVARCHAR(500)       '$.name',
        [endorser.telecom]             NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.EventDefinitionRelatedArtifact AS
SELECT
    [id],
    [relatedArtifact.JSON],
    [relatedArtifact.id],
    [relatedArtifact.extension],
    [relatedArtifact.type],
    [relatedArtifact.classifier],
    [relatedArtifact.label],
    [relatedArtifact.display],
    [relatedArtifact.citation],
    [relatedArtifact.document.id],
    [relatedArtifact.document.extension],
    [relatedArtifact.document.contentType],
    [relatedArtifact.document.language],
    [relatedArtifact.document.data],
    [relatedArtifact.document.url],
    [relatedArtifact.document.size],
    [relatedArtifact.document.hash],
    [relatedArtifact.document.title],
    [relatedArtifact.document.creation],
    [relatedArtifact.document.height],
    [relatedArtifact.document.width],
    [relatedArtifact.document.frames],
    [relatedArtifact.document.duration],
    [relatedArtifact.document.pages],
    [relatedArtifact.resource],
    [relatedArtifact.resourceReference.id],
    [relatedArtifact.resourceReference.extension],
    [relatedArtifact.resourceReference.reference],
    [relatedArtifact.resourceReference.type],
    [relatedArtifact.resourceReference.identifier],
    [relatedArtifact.resourceReference.display]
FROM openrowset (
        BULK 'EventDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [relatedArtifact.JSON]  VARCHAR(MAX) '$.relatedArtifact'
    ) AS rowset
    CROSS APPLY openjson (rowset.[relatedArtifact.JSON]) with (
        [relatedArtifact.id]           NVARCHAR(100)       '$.id',
        [relatedArtifact.extension]    NVARCHAR(MAX)       '$.extension',
        [relatedArtifact.type]         NVARCHAR(64)        '$.type',
        [relatedArtifact.classifier]   NVARCHAR(MAX)       '$.classifier' AS JSON,
        [relatedArtifact.label]        NVARCHAR(100)       '$.label',
        [relatedArtifact.display]      NVARCHAR(4000)      '$.display',
        [relatedArtifact.citation]     NVARCHAR(MAX)       '$.citation',
        [relatedArtifact.document.id]  NVARCHAR(100)       '$.document.id',
        [relatedArtifact.document.extension] NVARCHAR(MAX)       '$.document.extension',
        [relatedArtifact.document.contentType] NVARCHAR(100)       '$.document.contentType',
        [relatedArtifact.document.language] NVARCHAR(100)       '$.document.language',
        [relatedArtifact.document.data] NVARCHAR(MAX)       '$.document.data',
        [relatedArtifact.document.url] VARCHAR(256)        '$.document.url',
        [relatedArtifact.document.size] NVARCHAR(MAX)       '$.document.size',
        [relatedArtifact.document.hash] NVARCHAR(MAX)       '$.document.hash',
        [relatedArtifact.document.title] NVARCHAR(4000)      '$.document.title',
        [relatedArtifact.document.creation] VARCHAR(64)         '$.document.creation',
        [relatedArtifact.document.height] bigint              '$.document.height',
        [relatedArtifact.document.width] bigint              '$.document.width',
        [relatedArtifact.document.frames] bigint              '$.document.frames',
        [relatedArtifact.document.duration] float               '$.document.duration',
        [relatedArtifact.document.pages] bigint              '$.document.pages',
        [relatedArtifact.resource]     VARCHAR(256)        '$.resource',
        [relatedArtifact.resourceReference.id] NVARCHAR(100)       '$.resourceReference.id',
        [relatedArtifact.resourceReference.extension] NVARCHAR(MAX)       '$.resourceReference.extension',
        [relatedArtifact.resourceReference.reference] NVARCHAR(4000)      '$.resourceReference.reference',
        [relatedArtifact.resourceReference.type] VARCHAR(256)        '$.resourceReference.type',
        [relatedArtifact.resourceReference.identifier] NVARCHAR(MAX)       '$.resourceReference.identifier',
        [relatedArtifact.resourceReference.display] NVARCHAR(4000)      '$.resourceReference.display'
    ) j

GO

CREATE VIEW fhir.EventDefinitionTrigger AS
SELECT
    [id],
    [trigger.JSON],
    [trigger.id],
    [trigger.extension],
    [trigger.type],
    [trigger.name],
    [trigger.data],
    [trigger.condition.id],
    [trigger.condition.extension],
    [trigger.condition.description],
    [trigger.condition.name],
    [trigger.condition.language],
    [trigger.condition.expression],
    [trigger.condition.reference],
    [trigger.timing.timing.id],
    [trigger.timing.timing.extension],
    [trigger.timing.timing.modifierExtension],
    [trigger.timing.timing.event],
    [trigger.timing.timing.repeat],
    [trigger.timing.timing.code],
    [trigger.timing.reference.id],
    [trigger.timing.reference.extension],
    [trigger.timing.reference.reference],
    [trigger.timing.reference.type],
    [trigger.timing.reference.identifier],
    [trigger.timing.reference.display],
    [trigger.timing.date],
    [trigger.timing.dateTime]
FROM openrowset (
        BULK 'EventDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [trigger.JSON]  VARCHAR(MAX) '$.trigger'
    ) AS rowset
    CROSS APPLY openjson (rowset.[trigger.JSON]) with (
        [trigger.id]                   NVARCHAR(100)       '$.id',
        [trigger.extension]            NVARCHAR(MAX)       '$.extension',
        [trigger.type]                 NVARCHAR(64)        '$.type',
        [trigger.name]                 NVARCHAR(500)       '$.name',
        [trigger.data]                 NVARCHAR(MAX)       '$.data' AS JSON,
        [trigger.condition.id]         NVARCHAR(100)       '$.condition.id',
        [trigger.condition.extension]  NVARCHAR(MAX)       '$.condition.extension',
        [trigger.condition.description] NVARCHAR(4000)      '$.condition.description',
        [trigger.condition.name]       VARCHAR(64)         '$.condition.name',
        [trigger.condition.language]   NVARCHAR(100)       '$.condition.language',
        [trigger.condition.expression] NVARCHAR(4000)      '$.condition.expression',
        [trigger.condition.reference]  VARCHAR(256)        '$.condition.reference',
        [trigger.timing.timing.id]     NVARCHAR(100)       '$.timing.timing.id',
        [trigger.timing.timing.extension] NVARCHAR(MAX)       '$.timing.timing.extension',
        [trigger.timing.timing.modifierExtension] NVARCHAR(MAX)       '$.timing.timing.modifierExtension',
        [trigger.timing.timing.event]  NVARCHAR(MAX)       '$.timing.timing.event',
        [trigger.timing.timing.repeat] NVARCHAR(MAX)       '$.timing.timing.repeat',
        [trigger.timing.timing.code]   NVARCHAR(MAX)       '$.timing.timing.code',
        [trigger.timing.reference.id]  NVARCHAR(100)       '$.timing.reference.id',
        [trigger.timing.reference.extension] NVARCHAR(MAX)       '$.timing.reference.extension',
        [trigger.timing.reference.reference] NVARCHAR(4000)      '$.timing.reference.reference',
        [trigger.timing.reference.type] VARCHAR(256)        '$.timing.reference.type',
        [trigger.timing.reference.identifier] NVARCHAR(MAX)       '$.timing.reference.identifier',
        [trigger.timing.reference.display] NVARCHAR(4000)      '$.timing.reference.display',
        [trigger.timing.date]          VARCHAR(64)         '$.timing.date',
        [trigger.timing.dateTime]      VARCHAR(64)         '$.timing.dateTime'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[Evidence] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [url] VARCHAR(256),
    [identifier] VARCHAR(MAX),
    [version] NVARCHAR(100),
    [name] NVARCHAR(500),
    [title] NVARCHAR(4000),
    [status] NVARCHAR(100),
    [experimental] bit,
    [date] VARCHAR(64),
    [publisher] NVARCHAR(500),
    [contact] VARCHAR(MAX),
    [description] NVARCHAR(MAX),
    [useContext] VARCHAR(MAX),
    [jurisdiction] VARCHAR(MAX),
    [purpose] NVARCHAR(MAX),
    [copyright] NVARCHAR(MAX),
    [approvalDate] VARCHAR(64),
    [lastReviewDate] VARCHAR(64),
    [effectivePeriod.id] NVARCHAR(100),
    [effectivePeriod.extension] NVARCHAR(MAX),
    [effectivePeriod.start] VARCHAR(64),
    [effectivePeriod.end] VARCHAR(64),
    [topic] VARCHAR(MAX),
    [author] VARCHAR(MAX),
    [editor] VARCHAR(MAX),
    [reviewer] VARCHAR(MAX),
    [endorser] VARCHAR(MAX),
    [relatedArtifact] VARCHAR(MAX),
    [assertion] NVARCHAR(MAX),
    [note] VARCHAR(MAX),
    [variableDefinition] VARCHAR(MAX),
    [synthesisType.id] NVARCHAR(100),
    [synthesisType.extension] NVARCHAR(MAX),
    [synthesisType.coding] VARCHAR(MAX),
    [synthesisType.text] NVARCHAR(4000),
    [studyType.id] NVARCHAR(100),
    [studyType.extension] NVARCHAR(MAX),
    [studyType.coding] VARCHAR(MAX),
    [studyType.text] NVARCHAR(4000),
    [statistic] VARCHAR(MAX),
    [certainty] VARCHAR(MAX),
    [citeAs.reference.id] NVARCHAR(100),
    [citeAs.reference.extension] NVARCHAR(MAX),
    [citeAs.reference.reference] NVARCHAR(4000),
    [citeAs.reference.type] VARCHAR(256),
    [citeAs.reference.identifier.id] NVARCHAR(100),
    [citeAs.reference.identifier.extension] NVARCHAR(MAX),
    [citeAs.reference.identifier.use] NVARCHAR(64),
    [citeAs.reference.identifier.type] NVARCHAR(MAX),
    [citeAs.reference.identifier.system] VARCHAR(256),
    [citeAs.reference.identifier.value] NVARCHAR(4000),
    [citeAs.reference.identifier.period] NVARCHAR(MAX),
    [citeAs.reference.identifier.assigner] NVARCHAR(MAX),
    [citeAs.reference.display] NVARCHAR(4000),
    [citeAs.markdown] NVARCHAR(MAX),
) WITH (
    LOCATION='/Evidence/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.EvidenceIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'Evidence/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.EvidenceContact AS
SELECT
    [id],
    [contact.JSON],
    [contact.id],
    [contact.extension],
    [contact.name],
    [contact.telecom]
FROM openrowset (
        BULK 'Evidence/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [contact.JSON]  VARCHAR(MAX) '$.contact'
    ) AS rowset
    CROSS APPLY openjson (rowset.[contact.JSON]) with (
        [contact.id]                   NVARCHAR(100)       '$.id',
        [contact.extension]            NVARCHAR(MAX)       '$.extension',
        [contact.name]                 NVARCHAR(500)       '$.name',
        [contact.telecom]              NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.EvidenceUseContext AS
SELECT
    [id],
    [useContext.JSON],
    [useContext.id],
    [useContext.extension],
    [useContext.code.id],
    [useContext.code.extension],
    [useContext.code.system],
    [useContext.code.version],
    [useContext.code.code],
    [useContext.code.display],
    [useContext.code.userSelected],
    [useContext.value.codeableConcept.id],
    [useContext.value.codeableConcept.extension],
    [useContext.value.codeableConcept.coding],
    [useContext.value.codeableConcept.text],
    [useContext.value.quantity.id],
    [useContext.value.quantity.extension],
    [useContext.value.quantity.value],
    [useContext.value.quantity.comparator],
    [useContext.value.quantity.unit],
    [useContext.value.quantity.system],
    [useContext.value.quantity.code],
    [useContext.value.range.id],
    [useContext.value.range.extension],
    [useContext.value.range.low],
    [useContext.value.range.high],
    [useContext.value.reference.id],
    [useContext.value.reference.extension],
    [useContext.value.reference.reference],
    [useContext.value.reference.type],
    [useContext.value.reference.identifier],
    [useContext.value.reference.display]
FROM openrowset (
        BULK 'Evidence/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [useContext.JSON]  VARCHAR(MAX) '$.useContext'
    ) AS rowset
    CROSS APPLY openjson (rowset.[useContext.JSON]) with (
        [useContext.id]                NVARCHAR(100)       '$.id',
        [useContext.extension]         NVARCHAR(MAX)       '$.extension',
        [useContext.code.id]           NVARCHAR(100)       '$.code.id',
        [useContext.code.extension]    NVARCHAR(MAX)       '$.code.extension',
        [useContext.code.system]       VARCHAR(256)        '$.code.system',
        [useContext.code.version]      NVARCHAR(100)       '$.code.version',
        [useContext.code.code]         NVARCHAR(4000)      '$.code.code',
        [useContext.code.display]      NVARCHAR(4000)      '$.code.display',
        [useContext.code.userSelected] bit                 '$.code.userSelected',
        [useContext.value.codeableConcept.id] NVARCHAR(100)       '$.value.codeableConcept.id',
        [useContext.value.codeableConcept.extension] NVARCHAR(MAX)       '$.value.codeableConcept.extension',
        [useContext.value.codeableConcept.coding] NVARCHAR(MAX)       '$.value.codeableConcept.coding',
        [useContext.value.codeableConcept.text] NVARCHAR(4000)      '$.value.codeableConcept.text',
        [useContext.value.quantity.id] NVARCHAR(100)       '$.value.quantity.id',
        [useContext.value.quantity.extension] NVARCHAR(MAX)       '$.value.quantity.extension',
        [useContext.value.quantity.value] float               '$.value.quantity.value',
        [useContext.value.quantity.comparator] NVARCHAR(64)        '$.value.quantity.comparator',
        [useContext.value.quantity.unit] NVARCHAR(100)       '$.value.quantity.unit',
        [useContext.value.quantity.system] VARCHAR(256)        '$.value.quantity.system',
        [useContext.value.quantity.code] NVARCHAR(4000)      '$.value.quantity.code',
        [useContext.value.range.id]    NVARCHAR(100)       '$.value.range.id',
        [useContext.value.range.extension] NVARCHAR(MAX)       '$.value.range.extension',
        [useContext.value.range.low]   NVARCHAR(MAX)       '$.value.range.low',
        [useContext.value.range.high]  NVARCHAR(MAX)       '$.value.range.high',
        [useContext.value.reference.id] NVARCHAR(100)       '$.value.reference.id',
        [useContext.value.reference.extension] NVARCHAR(MAX)       '$.value.reference.extension',
        [useContext.value.reference.reference] NVARCHAR(4000)      '$.value.reference.reference',
        [useContext.value.reference.type] VARCHAR(256)        '$.value.reference.type',
        [useContext.value.reference.identifier] NVARCHAR(MAX)       '$.value.reference.identifier',
        [useContext.value.reference.display] NVARCHAR(4000)      '$.value.reference.display'
    ) j

GO

CREATE VIEW fhir.EvidenceJurisdiction AS
SELECT
    [id],
    [jurisdiction.JSON],
    [jurisdiction.id],
    [jurisdiction.extension],
    [jurisdiction.coding],
    [jurisdiction.text]
FROM openrowset (
        BULK 'Evidence/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [jurisdiction.JSON]  VARCHAR(MAX) '$.jurisdiction'
    ) AS rowset
    CROSS APPLY openjson (rowset.[jurisdiction.JSON]) with (
        [jurisdiction.id]              NVARCHAR(100)       '$.id',
        [jurisdiction.extension]       NVARCHAR(MAX)       '$.extension',
        [jurisdiction.coding]          NVARCHAR(MAX)       '$.coding' AS JSON,
        [jurisdiction.text]            NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.EvidenceTopic AS
SELECT
    [id],
    [topic.JSON],
    [topic.id],
    [topic.extension],
    [topic.coding],
    [topic.text]
FROM openrowset (
        BULK 'Evidence/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [topic.JSON]  VARCHAR(MAX) '$.topic'
    ) AS rowset
    CROSS APPLY openjson (rowset.[topic.JSON]) with (
        [topic.id]                     NVARCHAR(100)       '$.id',
        [topic.extension]              NVARCHAR(MAX)       '$.extension',
        [topic.coding]                 NVARCHAR(MAX)       '$.coding' AS JSON,
        [topic.text]                   NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.EvidenceAuthor AS
SELECT
    [id],
    [author.JSON],
    [author.id],
    [author.extension],
    [author.name],
    [author.telecom]
FROM openrowset (
        BULK 'Evidence/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [author.JSON]  VARCHAR(MAX) '$.author'
    ) AS rowset
    CROSS APPLY openjson (rowset.[author.JSON]) with (
        [author.id]                    NVARCHAR(100)       '$.id',
        [author.extension]             NVARCHAR(MAX)       '$.extension',
        [author.name]                  NVARCHAR(500)       '$.name',
        [author.telecom]               NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.EvidenceEditor AS
SELECT
    [id],
    [editor.JSON],
    [editor.id],
    [editor.extension],
    [editor.name],
    [editor.telecom]
FROM openrowset (
        BULK 'Evidence/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [editor.JSON]  VARCHAR(MAX) '$.editor'
    ) AS rowset
    CROSS APPLY openjson (rowset.[editor.JSON]) with (
        [editor.id]                    NVARCHAR(100)       '$.id',
        [editor.extension]             NVARCHAR(MAX)       '$.extension',
        [editor.name]                  NVARCHAR(500)       '$.name',
        [editor.telecom]               NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.EvidenceReviewer AS
SELECT
    [id],
    [reviewer.JSON],
    [reviewer.id],
    [reviewer.extension],
    [reviewer.name],
    [reviewer.telecom]
FROM openrowset (
        BULK 'Evidence/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [reviewer.JSON]  VARCHAR(MAX) '$.reviewer'
    ) AS rowset
    CROSS APPLY openjson (rowset.[reviewer.JSON]) with (
        [reviewer.id]                  NVARCHAR(100)       '$.id',
        [reviewer.extension]           NVARCHAR(MAX)       '$.extension',
        [reviewer.name]                NVARCHAR(500)       '$.name',
        [reviewer.telecom]             NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.EvidenceEndorser AS
SELECT
    [id],
    [endorser.JSON],
    [endorser.id],
    [endorser.extension],
    [endorser.name],
    [endorser.telecom]
FROM openrowset (
        BULK 'Evidence/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [endorser.JSON]  VARCHAR(MAX) '$.endorser'
    ) AS rowset
    CROSS APPLY openjson (rowset.[endorser.JSON]) with (
        [endorser.id]                  NVARCHAR(100)       '$.id',
        [endorser.extension]           NVARCHAR(MAX)       '$.extension',
        [endorser.name]                NVARCHAR(500)       '$.name',
        [endorser.telecom]             NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.EvidenceRelatedArtifact AS
SELECT
    [id],
    [relatedArtifact.JSON],
    [relatedArtifact.id],
    [relatedArtifact.extension],
    [relatedArtifact.type],
    [relatedArtifact.classifier],
    [relatedArtifact.label],
    [relatedArtifact.display],
    [relatedArtifact.citation],
    [relatedArtifact.document.id],
    [relatedArtifact.document.extension],
    [relatedArtifact.document.contentType],
    [relatedArtifact.document.language],
    [relatedArtifact.document.data],
    [relatedArtifact.document.url],
    [relatedArtifact.document.size],
    [relatedArtifact.document.hash],
    [relatedArtifact.document.title],
    [relatedArtifact.document.creation],
    [relatedArtifact.document.height],
    [relatedArtifact.document.width],
    [relatedArtifact.document.frames],
    [relatedArtifact.document.duration],
    [relatedArtifact.document.pages],
    [relatedArtifact.resource],
    [relatedArtifact.resourceReference.id],
    [relatedArtifact.resourceReference.extension],
    [relatedArtifact.resourceReference.reference],
    [relatedArtifact.resourceReference.type],
    [relatedArtifact.resourceReference.identifier],
    [relatedArtifact.resourceReference.display]
FROM openrowset (
        BULK 'Evidence/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [relatedArtifact.JSON]  VARCHAR(MAX) '$.relatedArtifact'
    ) AS rowset
    CROSS APPLY openjson (rowset.[relatedArtifact.JSON]) with (
        [relatedArtifact.id]           NVARCHAR(100)       '$.id',
        [relatedArtifact.extension]    NVARCHAR(MAX)       '$.extension',
        [relatedArtifact.type]         NVARCHAR(64)        '$.type',
        [relatedArtifact.classifier]   NVARCHAR(MAX)       '$.classifier' AS JSON,
        [relatedArtifact.label]        NVARCHAR(100)       '$.label',
        [relatedArtifact.display]      NVARCHAR(4000)      '$.display',
        [relatedArtifact.citation]     NVARCHAR(MAX)       '$.citation',
        [relatedArtifact.document.id]  NVARCHAR(100)       '$.document.id',
        [relatedArtifact.document.extension] NVARCHAR(MAX)       '$.document.extension',
        [relatedArtifact.document.contentType] NVARCHAR(100)       '$.document.contentType',
        [relatedArtifact.document.language] NVARCHAR(100)       '$.document.language',
        [relatedArtifact.document.data] NVARCHAR(MAX)       '$.document.data',
        [relatedArtifact.document.url] VARCHAR(256)        '$.document.url',
        [relatedArtifact.document.size] NVARCHAR(MAX)       '$.document.size',
        [relatedArtifact.document.hash] NVARCHAR(MAX)       '$.document.hash',
        [relatedArtifact.document.title] NVARCHAR(4000)      '$.document.title',
        [relatedArtifact.document.creation] VARCHAR(64)         '$.document.creation',
        [relatedArtifact.document.height] bigint              '$.document.height',
        [relatedArtifact.document.width] bigint              '$.document.width',
        [relatedArtifact.document.frames] bigint              '$.document.frames',
        [relatedArtifact.document.duration] float               '$.document.duration',
        [relatedArtifact.document.pages] bigint              '$.document.pages',
        [relatedArtifact.resource]     VARCHAR(256)        '$.resource',
        [relatedArtifact.resourceReference.id] NVARCHAR(100)       '$.resourceReference.id',
        [relatedArtifact.resourceReference.extension] NVARCHAR(MAX)       '$.resourceReference.extension',
        [relatedArtifact.resourceReference.reference] NVARCHAR(4000)      '$.resourceReference.reference',
        [relatedArtifact.resourceReference.type] VARCHAR(256)        '$.resourceReference.type',
        [relatedArtifact.resourceReference.identifier] NVARCHAR(MAX)       '$.resourceReference.identifier',
        [relatedArtifact.resourceReference.display] NVARCHAR(4000)      '$.resourceReference.display'
    ) j

GO

CREATE VIEW fhir.EvidenceNote AS
SELECT
    [id],
    [note.JSON],
    [note.id],
    [note.extension],
    [note.time],
    [note.text],
    [note.author.reference.id],
    [note.author.reference.extension],
    [note.author.reference.reference],
    [note.author.reference.type],
    [note.author.reference.identifier],
    [note.author.reference.display],
    [note.author.string]
FROM openrowset (
        BULK 'Evidence/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [note.JSON]  VARCHAR(MAX) '$.note'
    ) AS rowset
    CROSS APPLY openjson (rowset.[note.JSON]) with (
        [note.id]                      NVARCHAR(100)       '$.id',
        [note.extension]               NVARCHAR(MAX)       '$.extension',
        [note.time]                    VARCHAR(64)         '$.time',
        [note.text]                    NVARCHAR(MAX)       '$.text',
        [note.author.reference.id]     NVARCHAR(100)       '$.author.reference.id',
        [note.author.reference.extension] NVARCHAR(MAX)       '$.author.reference.extension',
        [note.author.reference.reference] NVARCHAR(4000)      '$.author.reference.reference',
        [note.author.reference.type]   VARCHAR(256)        '$.author.reference.type',
        [note.author.reference.identifier] NVARCHAR(MAX)       '$.author.reference.identifier',
        [note.author.reference.display] NVARCHAR(4000)      '$.author.reference.display',
        [note.author.string]           NVARCHAR(4000)      '$.author.string'
    ) j

GO

CREATE VIEW fhir.EvidenceVariableDefinition AS
SELECT
    [id],
    [variableDefinition.JSON],
    [variableDefinition.id],
    [variableDefinition.extension],
    [variableDefinition.modifierExtension],
    [variableDefinition.description],
    [variableDefinition.note],
    [variableDefinition.variableRole.id],
    [variableDefinition.variableRole.extension],
    [variableDefinition.variableRole.coding],
    [variableDefinition.variableRole.text],
    [variableDefinition.observed.id],
    [variableDefinition.observed.extension],
    [variableDefinition.observed.reference],
    [variableDefinition.observed.type],
    [variableDefinition.observed.identifier],
    [variableDefinition.observed.display],
    [variableDefinition.intended.id],
    [variableDefinition.intended.extension],
    [variableDefinition.intended.reference],
    [variableDefinition.intended.type],
    [variableDefinition.intended.identifier],
    [variableDefinition.intended.display],
    [variableDefinition.directnessMatch.id],
    [variableDefinition.directnessMatch.extension],
    [variableDefinition.directnessMatch.coding],
    [variableDefinition.directnessMatch.text]
FROM openrowset (
        BULK 'Evidence/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [variableDefinition.JSON]  VARCHAR(MAX) '$.variableDefinition'
    ) AS rowset
    CROSS APPLY openjson (rowset.[variableDefinition.JSON]) with (
        [variableDefinition.id]        NVARCHAR(100)       '$.id',
        [variableDefinition.extension] NVARCHAR(MAX)       '$.extension',
        [variableDefinition.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [variableDefinition.description] NVARCHAR(MAX)       '$.description',
        [variableDefinition.note]      NVARCHAR(MAX)       '$.note' AS JSON,
        [variableDefinition.variableRole.id] NVARCHAR(100)       '$.variableRole.id',
        [variableDefinition.variableRole.extension] NVARCHAR(MAX)       '$.variableRole.extension',
        [variableDefinition.variableRole.coding] NVARCHAR(MAX)       '$.variableRole.coding',
        [variableDefinition.variableRole.text] NVARCHAR(4000)      '$.variableRole.text',
        [variableDefinition.observed.id] NVARCHAR(100)       '$.observed.id',
        [variableDefinition.observed.extension] NVARCHAR(MAX)       '$.observed.extension',
        [variableDefinition.observed.reference] NVARCHAR(4000)      '$.observed.reference',
        [variableDefinition.observed.type] VARCHAR(256)        '$.observed.type',
        [variableDefinition.observed.identifier] NVARCHAR(MAX)       '$.observed.identifier',
        [variableDefinition.observed.display] NVARCHAR(4000)      '$.observed.display',
        [variableDefinition.intended.id] NVARCHAR(100)       '$.intended.id',
        [variableDefinition.intended.extension] NVARCHAR(MAX)       '$.intended.extension',
        [variableDefinition.intended.reference] NVARCHAR(4000)      '$.intended.reference',
        [variableDefinition.intended.type] VARCHAR(256)        '$.intended.type',
        [variableDefinition.intended.identifier] NVARCHAR(MAX)       '$.intended.identifier',
        [variableDefinition.intended.display] NVARCHAR(4000)      '$.intended.display',
        [variableDefinition.directnessMatch.id] NVARCHAR(100)       '$.directnessMatch.id',
        [variableDefinition.directnessMatch.extension] NVARCHAR(MAX)       '$.directnessMatch.extension',
        [variableDefinition.directnessMatch.coding] NVARCHAR(MAX)       '$.directnessMatch.coding',
        [variableDefinition.directnessMatch.text] NVARCHAR(4000)      '$.directnessMatch.text'
    ) j

GO

CREATE VIEW fhir.EvidenceStatistic AS
SELECT
    [id],
    [statistic.JSON],
    [statistic.id],
    [statistic.extension],
    [statistic.modifierExtension],
    [statistic.description],
    [statistic.note],
    [statistic.statisticType.id],
    [statistic.statisticType.extension],
    [statistic.statisticType.coding],
    [statistic.statisticType.text],
    [statistic.category.id],
    [statistic.category.extension],
    [statistic.category.coding],
    [statistic.category.text],
    [statistic.quantity.id],
    [statistic.quantity.extension],
    [statistic.quantity.value],
    [statistic.quantity.comparator],
    [statistic.quantity.unit],
    [statistic.quantity.system],
    [statistic.quantity.code],
    [statistic.numberOfEvents],
    [statistic.numberAffected],
    [statistic.sampleSize.id],
    [statistic.sampleSize.extension],
    [statistic.sampleSize.modifierExtension],
    [statistic.sampleSize.description],
    [statistic.sampleSize.note],
    [statistic.sampleSize.numberOfStudies],
    [statistic.sampleSize.numberOfParticipants],
    [statistic.sampleSize.knownDataCount],
    [statistic.attributeEstimate],
    [statistic.modelCharacteristic]
FROM openrowset (
        BULK 'Evidence/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [statistic.JSON]  VARCHAR(MAX) '$.statistic'
    ) AS rowset
    CROSS APPLY openjson (rowset.[statistic.JSON]) with (
        [statistic.id]                 NVARCHAR(100)       '$.id',
        [statistic.extension]          NVARCHAR(MAX)       '$.extension',
        [statistic.modifierExtension]  NVARCHAR(MAX)       '$.modifierExtension',
        [statistic.description]        NVARCHAR(4000)      '$.description',
        [statistic.note]               NVARCHAR(MAX)       '$.note' AS JSON,
        [statistic.statisticType.id]   NVARCHAR(100)       '$.statisticType.id',
        [statistic.statisticType.extension] NVARCHAR(MAX)       '$.statisticType.extension',
        [statistic.statisticType.coding] NVARCHAR(MAX)       '$.statisticType.coding',
        [statistic.statisticType.text] NVARCHAR(4000)      '$.statisticType.text',
        [statistic.category.id]        NVARCHAR(100)       '$.category.id',
        [statistic.category.extension] NVARCHAR(MAX)       '$.category.extension',
        [statistic.category.coding]    NVARCHAR(MAX)       '$.category.coding',
        [statistic.category.text]      NVARCHAR(4000)      '$.category.text',
        [statistic.quantity.id]        NVARCHAR(100)       '$.quantity.id',
        [statistic.quantity.extension] NVARCHAR(MAX)       '$.quantity.extension',
        [statistic.quantity.value]     float               '$.quantity.value',
        [statistic.quantity.comparator] NVARCHAR(64)        '$.quantity.comparator',
        [statistic.quantity.unit]      NVARCHAR(100)       '$.quantity.unit',
        [statistic.quantity.system]    VARCHAR(256)        '$.quantity.system',
        [statistic.quantity.code]      NVARCHAR(4000)      '$.quantity.code',
        [statistic.numberOfEvents]     bigint              '$.numberOfEvents',
        [statistic.numberAffected]     bigint              '$.numberAffected',
        [statistic.sampleSize.id]      NVARCHAR(100)       '$.sampleSize.id',
        [statistic.sampleSize.extension] NVARCHAR(MAX)       '$.sampleSize.extension',
        [statistic.sampleSize.modifierExtension] NVARCHAR(MAX)       '$.sampleSize.modifierExtension',
        [statistic.sampleSize.description] NVARCHAR(4000)      '$.sampleSize.description',
        [statistic.sampleSize.note]    NVARCHAR(MAX)       '$.sampleSize.note',
        [statistic.sampleSize.numberOfStudies] bigint              '$.sampleSize.numberOfStudies',
        [statistic.sampleSize.numberOfParticipants] bigint              '$.sampleSize.numberOfParticipants',
        [statistic.sampleSize.knownDataCount] bigint              '$.sampleSize.knownDataCount',
        [statistic.attributeEstimate]  NVARCHAR(MAX)       '$.attributeEstimate' AS JSON,
        [statistic.modelCharacteristic] NVARCHAR(MAX)       '$.modelCharacteristic' AS JSON
    ) j

GO

CREATE VIEW fhir.EvidenceCertainty AS
SELECT
    [id],
    [certainty.JSON],
    [certainty.id],
    [certainty.extension],
    [certainty.modifierExtension],
    [certainty.description],
    [certainty.note],
    [certainty.type.id],
    [certainty.type.extension],
    [certainty.type.coding],
    [certainty.type.text],
    [certainty.rating.id],
    [certainty.rating.extension],
    [certainty.rating.coding],
    [certainty.rating.text],
    [certainty.rater],
    [certainty.subcomponent]
FROM openrowset (
        BULK 'Evidence/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [certainty.JSON]  VARCHAR(MAX) '$.certainty'
    ) AS rowset
    CROSS APPLY openjson (rowset.[certainty.JSON]) with (
        [certainty.id]                 NVARCHAR(100)       '$.id',
        [certainty.extension]          NVARCHAR(MAX)       '$.extension',
        [certainty.modifierExtension]  NVARCHAR(MAX)       '$.modifierExtension',
        [certainty.description]        NVARCHAR(4000)      '$.description',
        [certainty.note]               NVARCHAR(MAX)       '$.note' AS JSON,
        [certainty.type.id]            NVARCHAR(100)       '$.type.id',
        [certainty.type.extension]     NVARCHAR(MAX)       '$.type.extension',
        [certainty.type.coding]        NVARCHAR(MAX)       '$.type.coding',
        [certainty.type.text]          NVARCHAR(4000)      '$.type.text',
        [certainty.rating.id]          NVARCHAR(100)       '$.rating.id',
        [certainty.rating.extension]   NVARCHAR(MAX)       '$.rating.extension',
        [certainty.rating.coding]      NVARCHAR(MAX)       '$.rating.coding',
        [certainty.rating.text]        NVARCHAR(4000)      '$.rating.text',
        [certainty.rater]              NVARCHAR(4000)      '$.rater',
        [certainty.subcomponent]       NVARCHAR(MAX)       '$.subcomponent' AS JSON
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[EvidenceReport] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [url] VARCHAR(256),
    [identifier] VARCHAR(MAX),
    [version] NVARCHAR(100),
    [name] NVARCHAR(500),
    [title] NVARCHAR(4000),
    [status] NVARCHAR(100),
    [experimental] bit,
    [date] VARCHAR(64),
    [publisher] NVARCHAR(500),
    [contact] VARCHAR(MAX),
    [description] NVARCHAR(MAX),
    [useContext] VARCHAR(MAX),
    [jurisdiction] VARCHAR(MAX),
    [purpose] NVARCHAR(MAX),
    [copyright] NVARCHAR(MAX),
    [approvalDate] VARCHAR(64),
    [lastReviewDate] VARCHAR(64),
    [effectivePeriod.id] NVARCHAR(100),
    [effectivePeriod.extension] NVARCHAR(MAX),
    [effectivePeriod.start] VARCHAR(64),
    [effectivePeriod.end] VARCHAR(64),
    [topic] VARCHAR(MAX),
    [author] VARCHAR(MAX),
    [editor] VARCHAR(MAX),
    [reviewer] VARCHAR(MAX),
    [endorser] VARCHAR(MAX),
    [relatedArtifact] VARCHAR(MAX),
    [relatedIdentifier] VARCHAR(MAX),
    [type.id] NVARCHAR(100),
    [type.extension] NVARCHAR(MAX),
    [type.coding] VARCHAR(MAX),
    [type.text] NVARCHAR(4000),
    [note] VARCHAR(MAX),
    [subject.id] NVARCHAR(100),
    [subject.extension] NVARCHAR(MAX),
    [subject.modifierExtension] NVARCHAR(MAX),
    [subject.characteristic] VARCHAR(MAX),
    [subject.note] VARCHAR(MAX),
    [relatesTo] VARCHAR(MAX),
    [section] VARCHAR(MAX),
    [citeAs.reference.id] NVARCHAR(100),
    [citeAs.reference.extension] NVARCHAR(MAX),
    [citeAs.reference.reference] NVARCHAR(4000),
    [citeAs.reference.type] VARCHAR(256),
    [citeAs.reference.identifier.id] NVARCHAR(100),
    [citeAs.reference.identifier.extension] NVARCHAR(MAX),
    [citeAs.reference.identifier.use] NVARCHAR(64),
    [citeAs.reference.identifier.type] NVARCHAR(MAX),
    [citeAs.reference.identifier.system] VARCHAR(256),
    [citeAs.reference.identifier.value] NVARCHAR(4000),
    [citeAs.reference.identifier.period] NVARCHAR(MAX),
    [citeAs.reference.identifier.assigner] NVARCHAR(MAX),
    [citeAs.reference.display] NVARCHAR(4000),
    [citeAs.markdown] NVARCHAR(MAX),
) WITH (
    LOCATION='/EvidenceReport/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.EvidenceReportIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'EvidenceReport/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.EvidenceReportContact AS
SELECT
    [id],
    [contact.JSON],
    [contact.id],
    [contact.extension],
    [contact.name],
    [contact.telecom]
FROM openrowset (
        BULK 'EvidenceReport/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [contact.JSON]  VARCHAR(MAX) '$.contact'
    ) AS rowset
    CROSS APPLY openjson (rowset.[contact.JSON]) with (
        [contact.id]                   NVARCHAR(100)       '$.id',
        [contact.extension]            NVARCHAR(MAX)       '$.extension',
        [contact.name]                 NVARCHAR(500)       '$.name',
        [contact.telecom]              NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.EvidenceReportUseContext AS
SELECT
    [id],
    [useContext.JSON],
    [useContext.id],
    [useContext.extension],
    [useContext.code.id],
    [useContext.code.extension],
    [useContext.code.system],
    [useContext.code.version],
    [useContext.code.code],
    [useContext.code.display],
    [useContext.code.userSelected],
    [useContext.value.codeableConcept.id],
    [useContext.value.codeableConcept.extension],
    [useContext.value.codeableConcept.coding],
    [useContext.value.codeableConcept.text],
    [useContext.value.quantity.id],
    [useContext.value.quantity.extension],
    [useContext.value.quantity.value],
    [useContext.value.quantity.comparator],
    [useContext.value.quantity.unit],
    [useContext.value.quantity.system],
    [useContext.value.quantity.code],
    [useContext.value.range.id],
    [useContext.value.range.extension],
    [useContext.value.range.low],
    [useContext.value.range.high],
    [useContext.value.reference.id],
    [useContext.value.reference.extension],
    [useContext.value.reference.reference],
    [useContext.value.reference.type],
    [useContext.value.reference.identifier],
    [useContext.value.reference.display]
FROM openrowset (
        BULK 'EvidenceReport/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [useContext.JSON]  VARCHAR(MAX) '$.useContext'
    ) AS rowset
    CROSS APPLY openjson (rowset.[useContext.JSON]) with (
        [useContext.id]                NVARCHAR(100)       '$.id',
        [useContext.extension]         NVARCHAR(MAX)       '$.extension',
        [useContext.code.id]           NVARCHAR(100)       '$.code.id',
        [useContext.code.extension]    NVARCHAR(MAX)       '$.code.extension',
        [useContext.code.system]       VARCHAR(256)        '$.code.system',
        [useContext.code.version]      NVARCHAR(100)       '$.code.version',
        [useContext.code.code]         NVARCHAR(4000)      '$.code.code',
        [useContext.code.display]      NVARCHAR(4000)      '$.code.display',
        [useContext.code.userSelected] bit                 '$.code.userSelected',
        [useContext.value.codeableConcept.id] NVARCHAR(100)       '$.value.codeableConcept.id',
        [useContext.value.codeableConcept.extension] NVARCHAR(MAX)       '$.value.codeableConcept.extension',
        [useContext.value.codeableConcept.coding] NVARCHAR(MAX)       '$.value.codeableConcept.coding',
        [useContext.value.codeableConcept.text] NVARCHAR(4000)      '$.value.codeableConcept.text',
        [useContext.value.quantity.id] NVARCHAR(100)       '$.value.quantity.id',
        [useContext.value.quantity.extension] NVARCHAR(MAX)       '$.value.quantity.extension',
        [useContext.value.quantity.value] float               '$.value.quantity.value',
        [useContext.value.quantity.comparator] NVARCHAR(64)        '$.value.quantity.comparator',
        [useContext.value.quantity.unit] NVARCHAR(100)       '$.value.quantity.unit',
        [useContext.value.quantity.system] VARCHAR(256)        '$.value.quantity.system',
        [useContext.value.quantity.code] NVARCHAR(4000)      '$.value.quantity.code',
        [useContext.value.range.id]    NVARCHAR(100)       '$.value.range.id',
        [useContext.value.range.extension] NVARCHAR(MAX)       '$.value.range.extension',
        [useContext.value.range.low]   NVARCHAR(MAX)       '$.value.range.low',
        [useContext.value.range.high]  NVARCHAR(MAX)       '$.value.range.high',
        [useContext.value.reference.id] NVARCHAR(100)       '$.value.reference.id',
        [useContext.value.reference.extension] NVARCHAR(MAX)       '$.value.reference.extension',
        [useContext.value.reference.reference] NVARCHAR(4000)      '$.value.reference.reference',
        [useContext.value.reference.type] VARCHAR(256)        '$.value.reference.type',
        [useContext.value.reference.identifier] NVARCHAR(MAX)       '$.value.reference.identifier',
        [useContext.value.reference.display] NVARCHAR(4000)      '$.value.reference.display'
    ) j

GO

CREATE VIEW fhir.EvidenceReportJurisdiction AS
SELECT
    [id],
    [jurisdiction.JSON],
    [jurisdiction.id],
    [jurisdiction.extension],
    [jurisdiction.coding],
    [jurisdiction.text]
FROM openrowset (
        BULK 'EvidenceReport/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [jurisdiction.JSON]  VARCHAR(MAX) '$.jurisdiction'
    ) AS rowset
    CROSS APPLY openjson (rowset.[jurisdiction.JSON]) with (
        [jurisdiction.id]              NVARCHAR(100)       '$.id',
        [jurisdiction.extension]       NVARCHAR(MAX)       '$.extension',
        [jurisdiction.coding]          NVARCHAR(MAX)       '$.coding' AS JSON,
        [jurisdiction.text]            NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.EvidenceReportTopic AS
SELECT
    [id],
    [topic.JSON],
    [topic.id],
    [topic.extension],
    [topic.coding],
    [topic.text]
FROM openrowset (
        BULK 'EvidenceReport/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [topic.JSON]  VARCHAR(MAX) '$.topic'
    ) AS rowset
    CROSS APPLY openjson (rowset.[topic.JSON]) with (
        [topic.id]                     NVARCHAR(100)       '$.id',
        [topic.extension]              NVARCHAR(MAX)       '$.extension',
        [topic.coding]                 NVARCHAR(MAX)       '$.coding' AS JSON,
        [topic.text]                   NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.EvidenceReportAuthor AS
SELECT
    [id],
    [author.JSON],
    [author.id],
    [author.extension],
    [author.name],
    [author.telecom]
FROM openrowset (
        BULK 'EvidenceReport/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [author.JSON]  VARCHAR(MAX) '$.author'
    ) AS rowset
    CROSS APPLY openjson (rowset.[author.JSON]) with (
        [author.id]                    NVARCHAR(100)       '$.id',
        [author.extension]             NVARCHAR(MAX)       '$.extension',
        [author.name]                  NVARCHAR(500)       '$.name',
        [author.telecom]               NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.EvidenceReportEditor AS
SELECT
    [id],
    [editor.JSON],
    [editor.id],
    [editor.extension],
    [editor.name],
    [editor.telecom]
FROM openrowset (
        BULK 'EvidenceReport/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [editor.JSON]  VARCHAR(MAX) '$.editor'
    ) AS rowset
    CROSS APPLY openjson (rowset.[editor.JSON]) with (
        [editor.id]                    NVARCHAR(100)       '$.id',
        [editor.extension]             NVARCHAR(MAX)       '$.extension',
        [editor.name]                  NVARCHAR(500)       '$.name',
        [editor.telecom]               NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.EvidenceReportReviewer AS
SELECT
    [id],
    [reviewer.JSON],
    [reviewer.id],
    [reviewer.extension],
    [reviewer.name],
    [reviewer.telecom]
FROM openrowset (
        BULK 'EvidenceReport/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [reviewer.JSON]  VARCHAR(MAX) '$.reviewer'
    ) AS rowset
    CROSS APPLY openjson (rowset.[reviewer.JSON]) with (
        [reviewer.id]                  NVARCHAR(100)       '$.id',
        [reviewer.extension]           NVARCHAR(MAX)       '$.extension',
        [reviewer.name]                NVARCHAR(500)       '$.name',
        [reviewer.telecom]             NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.EvidenceReportEndorser AS
SELECT
    [id],
    [endorser.JSON],
    [endorser.id],
    [endorser.extension],
    [endorser.name],
    [endorser.telecom]
FROM openrowset (
        BULK 'EvidenceReport/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [endorser.JSON]  VARCHAR(MAX) '$.endorser'
    ) AS rowset
    CROSS APPLY openjson (rowset.[endorser.JSON]) with (
        [endorser.id]                  NVARCHAR(100)       '$.id',
        [endorser.extension]           NVARCHAR(MAX)       '$.extension',
        [endorser.name]                NVARCHAR(500)       '$.name',
        [endorser.telecom]             NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.EvidenceReportRelatedArtifact AS
SELECT
    [id],
    [relatedArtifact.JSON],
    [relatedArtifact.id],
    [relatedArtifact.extension],
    [relatedArtifact.type],
    [relatedArtifact.classifier],
    [relatedArtifact.label],
    [relatedArtifact.display],
    [relatedArtifact.citation],
    [relatedArtifact.document.id],
    [relatedArtifact.document.extension],
    [relatedArtifact.document.contentType],
    [relatedArtifact.document.language],
    [relatedArtifact.document.data],
    [relatedArtifact.document.url],
    [relatedArtifact.document.size],
    [relatedArtifact.document.hash],
    [relatedArtifact.document.title],
    [relatedArtifact.document.creation],
    [relatedArtifact.document.height],
    [relatedArtifact.document.width],
    [relatedArtifact.document.frames],
    [relatedArtifact.document.duration],
    [relatedArtifact.document.pages],
    [relatedArtifact.resource],
    [relatedArtifact.resourceReference.id],
    [relatedArtifact.resourceReference.extension],
    [relatedArtifact.resourceReference.reference],
    [relatedArtifact.resourceReference.type],
    [relatedArtifact.resourceReference.identifier],
    [relatedArtifact.resourceReference.display]
FROM openrowset (
        BULK 'EvidenceReport/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [relatedArtifact.JSON]  VARCHAR(MAX) '$.relatedArtifact'
    ) AS rowset
    CROSS APPLY openjson (rowset.[relatedArtifact.JSON]) with (
        [relatedArtifact.id]           NVARCHAR(100)       '$.id',
        [relatedArtifact.extension]    NVARCHAR(MAX)       '$.extension',
        [relatedArtifact.type]         NVARCHAR(64)        '$.type',
        [relatedArtifact.classifier]   NVARCHAR(MAX)       '$.classifier' AS JSON,
        [relatedArtifact.label]        NVARCHAR(100)       '$.label',
        [relatedArtifact.display]      NVARCHAR(4000)      '$.display',
        [relatedArtifact.citation]     NVARCHAR(MAX)       '$.citation',
        [relatedArtifact.document.id]  NVARCHAR(100)       '$.document.id',
        [relatedArtifact.document.extension] NVARCHAR(MAX)       '$.document.extension',
        [relatedArtifact.document.contentType] NVARCHAR(100)       '$.document.contentType',
        [relatedArtifact.document.language] NVARCHAR(100)       '$.document.language',
        [relatedArtifact.document.data] NVARCHAR(MAX)       '$.document.data',
        [relatedArtifact.document.url] VARCHAR(256)        '$.document.url',
        [relatedArtifact.document.size] NVARCHAR(MAX)       '$.document.size',
        [relatedArtifact.document.hash] NVARCHAR(MAX)       '$.document.hash',
        [relatedArtifact.document.title] NVARCHAR(4000)      '$.document.title',
        [relatedArtifact.document.creation] VARCHAR(64)         '$.document.creation',
        [relatedArtifact.document.height] bigint              '$.document.height',
        [relatedArtifact.document.width] bigint              '$.document.width',
        [relatedArtifact.document.frames] bigint              '$.document.frames',
        [relatedArtifact.document.duration] float               '$.document.duration',
        [relatedArtifact.document.pages] bigint              '$.document.pages',
        [relatedArtifact.resource]     VARCHAR(256)        '$.resource',
        [relatedArtifact.resourceReference.id] NVARCHAR(100)       '$.resourceReference.id',
        [relatedArtifact.resourceReference.extension] NVARCHAR(MAX)       '$.resourceReference.extension',
        [relatedArtifact.resourceReference.reference] NVARCHAR(4000)      '$.resourceReference.reference',
        [relatedArtifact.resourceReference.type] VARCHAR(256)        '$.resourceReference.type',
        [relatedArtifact.resourceReference.identifier] NVARCHAR(MAX)       '$.resourceReference.identifier',
        [relatedArtifact.resourceReference.display] NVARCHAR(4000)      '$.resourceReference.display'
    ) j

GO

CREATE VIEW fhir.EvidenceReportRelatedIdentifier AS
SELECT
    [id],
    [relatedIdentifier.JSON],
    [relatedIdentifier.id],
    [relatedIdentifier.extension],
    [relatedIdentifier.use],
    [relatedIdentifier.type.id],
    [relatedIdentifier.type.extension],
    [relatedIdentifier.type.coding],
    [relatedIdentifier.type.text],
    [relatedIdentifier.system],
    [relatedIdentifier.value],
    [relatedIdentifier.period.id],
    [relatedIdentifier.period.extension],
    [relatedIdentifier.period.start],
    [relatedIdentifier.period.end],
    [relatedIdentifier.assigner.id],
    [relatedIdentifier.assigner.extension],
    [relatedIdentifier.assigner.reference],
    [relatedIdentifier.assigner.type],
    [relatedIdentifier.assigner.identifier],
    [relatedIdentifier.assigner.display]
FROM openrowset (
        BULK 'EvidenceReport/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [relatedIdentifier.JSON]  VARCHAR(MAX) '$.relatedIdentifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[relatedIdentifier.JSON]) with (
        [relatedIdentifier.id]         NVARCHAR(100)       '$.id',
        [relatedIdentifier.extension]  NVARCHAR(MAX)       '$.extension',
        [relatedIdentifier.use]        NVARCHAR(64)        '$.use',
        [relatedIdentifier.type.id]    NVARCHAR(100)       '$.type.id',
        [relatedIdentifier.type.extension] NVARCHAR(MAX)       '$.type.extension',
        [relatedIdentifier.type.coding] NVARCHAR(MAX)       '$.type.coding',
        [relatedIdentifier.type.text]  NVARCHAR(4000)      '$.type.text',
        [relatedIdentifier.system]     VARCHAR(256)        '$.system',
        [relatedIdentifier.value]      NVARCHAR(4000)      '$.value',
        [relatedIdentifier.period.id]  NVARCHAR(100)       '$.period.id',
        [relatedIdentifier.period.extension] NVARCHAR(MAX)       '$.period.extension',
        [relatedIdentifier.period.start] VARCHAR(64)         '$.period.start',
        [relatedIdentifier.period.end] VARCHAR(64)         '$.period.end',
        [relatedIdentifier.assigner.id] NVARCHAR(100)       '$.assigner.id',
        [relatedIdentifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [relatedIdentifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [relatedIdentifier.assigner.type] VARCHAR(256)        '$.assigner.type',
        [relatedIdentifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [relatedIdentifier.assigner.display] NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.EvidenceReportNote AS
SELECT
    [id],
    [note.JSON],
    [note.id],
    [note.extension],
    [note.time],
    [note.text],
    [note.author.reference.id],
    [note.author.reference.extension],
    [note.author.reference.reference],
    [note.author.reference.type],
    [note.author.reference.identifier],
    [note.author.reference.display],
    [note.author.string]
FROM openrowset (
        BULK 'EvidenceReport/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [note.JSON]  VARCHAR(MAX) '$.note'
    ) AS rowset
    CROSS APPLY openjson (rowset.[note.JSON]) with (
        [note.id]                      NVARCHAR(100)       '$.id',
        [note.extension]               NVARCHAR(MAX)       '$.extension',
        [note.time]                    VARCHAR(64)         '$.time',
        [note.text]                    NVARCHAR(MAX)       '$.text',
        [note.author.reference.id]     NVARCHAR(100)       '$.author.reference.id',
        [note.author.reference.extension] NVARCHAR(MAX)       '$.author.reference.extension',
        [note.author.reference.reference] NVARCHAR(4000)      '$.author.reference.reference',
        [note.author.reference.type]   VARCHAR(256)        '$.author.reference.type',
        [note.author.reference.identifier] NVARCHAR(MAX)       '$.author.reference.identifier',
        [note.author.reference.display] NVARCHAR(4000)      '$.author.reference.display',
        [note.author.string]           NVARCHAR(4000)      '$.author.string'
    ) j

GO

CREATE VIEW fhir.EvidenceReportRelatesTo AS
SELECT
    [id],
    [relatesTo.JSON],
    [relatesTo.id],
    [relatesTo.extension],
    [relatesTo.modifierExtension],
    [relatesTo.code],
    [relatesTo.target.id],
    [relatesTo.target.extension],
    [relatesTo.target.modifierExtension],
    [relatesTo.target.url],
    [relatesTo.target.identifier],
    [relatesTo.target.display],
    [relatesTo.target.resource]
FROM openrowset (
        BULK 'EvidenceReport/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [relatesTo.JSON]  VARCHAR(MAX) '$.relatesTo'
    ) AS rowset
    CROSS APPLY openjson (rowset.[relatesTo.JSON]) with (
        [relatesTo.id]                 NVARCHAR(100)       '$.id',
        [relatesTo.extension]          NVARCHAR(MAX)       '$.extension',
        [relatesTo.modifierExtension]  NVARCHAR(MAX)       '$.modifierExtension',
        [relatesTo.code]               NVARCHAR(4000)      '$.code',
        [relatesTo.target.id]          NVARCHAR(100)       '$.target.id',
        [relatesTo.target.extension]   NVARCHAR(MAX)       '$.target.extension',
        [relatesTo.target.modifierExtension] NVARCHAR(MAX)       '$.target.modifierExtension',
        [relatesTo.target.url]         VARCHAR(256)        '$.target.url',
        [relatesTo.target.identifier]  NVARCHAR(MAX)       '$.target.identifier',
        [relatesTo.target.display]     NVARCHAR(MAX)       '$.target.display',
        [relatesTo.target.resource]    NVARCHAR(MAX)       '$.target.resource'
    ) j

GO

CREATE VIEW fhir.EvidenceReportSection AS
SELECT
    [id],
    [section.JSON],
    [section.id],
    [section.extension],
    [section.modifierExtension],
    [section.title],
    [section.focus.id],
    [section.focus.extension],
    [section.focus.coding],
    [section.focus.text],
    [section.focusReference.id],
    [section.focusReference.extension],
    [section.focusReference.reference],
    [section.focusReference.type],
    [section.focusReference.identifier],
    [section.focusReference.display],
    [section.author],
    [section.text.id],
    [section.text.extension],
    [section.text.status],
    [section.text.div],
    [section.mode],
    [section.orderedBy.id],
    [section.orderedBy.extension],
    [section.orderedBy.coding],
    [section.orderedBy.text],
    [section.entryClassifier],
    [section.entryReference],
    [section.entryQuantity],
    [section.emptyReason.id],
    [section.emptyReason.extension],
    [section.emptyReason.coding],
    [section.emptyReason.text],
    [section.section]
FROM openrowset (
        BULK 'EvidenceReport/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [section.JSON]  VARCHAR(MAX) '$.section'
    ) AS rowset
    CROSS APPLY openjson (rowset.[section.JSON]) with (
        [section.id]                   NVARCHAR(100)       '$.id',
        [section.extension]            NVARCHAR(MAX)       '$.extension',
        [section.modifierExtension]    NVARCHAR(MAX)       '$.modifierExtension',
        [section.title]                NVARCHAR(4000)      '$.title',
        [section.focus.id]             NVARCHAR(100)       '$.focus.id',
        [section.focus.extension]      NVARCHAR(MAX)       '$.focus.extension',
        [section.focus.coding]         NVARCHAR(MAX)       '$.focus.coding',
        [section.focus.text]           NVARCHAR(4000)      '$.focus.text',
        [section.focusReference.id]    NVARCHAR(100)       '$.focusReference.id',
        [section.focusReference.extension] NVARCHAR(MAX)       '$.focusReference.extension',
        [section.focusReference.reference] NVARCHAR(4000)      '$.focusReference.reference',
        [section.focusReference.type]  VARCHAR(256)        '$.focusReference.type',
        [section.focusReference.identifier] NVARCHAR(MAX)       '$.focusReference.identifier',
        [section.focusReference.display] NVARCHAR(4000)      '$.focusReference.display',
        [section.author]               NVARCHAR(MAX)       '$.author' AS JSON,
        [section.text.id]              NVARCHAR(100)       '$.text.id',
        [section.text.extension]       NVARCHAR(MAX)       '$.text.extension',
        [section.text.status]          NVARCHAR(64)        '$.text.status',
        [section.text.div]             NVARCHAR(MAX)       '$.text.div',
        [section.mode]                 NVARCHAR(100)       '$.mode',
        [section.orderedBy.id]         NVARCHAR(100)       '$.orderedBy.id',
        [section.orderedBy.extension]  NVARCHAR(MAX)       '$.orderedBy.extension',
        [section.orderedBy.coding]     NVARCHAR(MAX)       '$.orderedBy.coding',
        [section.orderedBy.text]       NVARCHAR(4000)      '$.orderedBy.text',
        [section.entryClassifier]      NVARCHAR(MAX)       '$.entryClassifier' AS JSON,
        [section.entryReference]       NVARCHAR(MAX)       '$.entryReference' AS JSON,
        [section.entryQuantity]        NVARCHAR(MAX)       '$.entryQuantity' AS JSON,
        [section.emptyReason.id]       NVARCHAR(100)       '$.emptyReason.id',
        [section.emptyReason.extension] NVARCHAR(MAX)       '$.emptyReason.extension',
        [section.emptyReason.coding]   NVARCHAR(MAX)       '$.emptyReason.coding',
        [section.emptyReason.text]     NVARCHAR(4000)      '$.emptyReason.text',
        [section.section]              NVARCHAR(MAX)       '$.section' AS JSON
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[EvidenceVariable] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [url] VARCHAR(256),
    [identifier] VARCHAR(MAX),
    [version] NVARCHAR(100),
    [name] NVARCHAR(500),
    [title] NVARCHAR(4000),
    [status] NVARCHAR(100),
    [experimental] bit,
    [date] VARCHAR(64),
    [publisher] NVARCHAR(500),
    [contact] VARCHAR(MAX),
    [description] NVARCHAR(MAX),
    [useContext] VARCHAR(MAX),
    [jurisdiction] VARCHAR(MAX),
    [purpose] NVARCHAR(MAX),
    [copyright] NVARCHAR(MAX),
    [approvalDate] VARCHAR(64),
    [lastReviewDate] VARCHAR(64),
    [effectivePeriod.id] NVARCHAR(100),
    [effectivePeriod.extension] NVARCHAR(MAX),
    [effectivePeriod.start] VARCHAR(64),
    [effectivePeriod.end] VARCHAR(64),
    [topic] VARCHAR(MAX),
    [author] VARCHAR(MAX),
    [editor] VARCHAR(MAX),
    [reviewer] VARCHAR(MAX),
    [endorser] VARCHAR(MAX),
    [relatedArtifact] VARCHAR(MAX),
    [shortTitle] NVARCHAR(4000),
    [subtitle] NVARCHAR(4000),
    [note] VARCHAR(MAX),
    [actual] bit,
    [characteristicCombination.id] NVARCHAR(100),
    [characteristicCombination.extension] NVARCHAR(MAX),
    [characteristicCombination.modifierExtension] NVARCHAR(MAX),
    [characteristicCombination.code] NVARCHAR(4000),
    [characteristicCombination.threshold] bigint,
    [characteristic] VARCHAR(MAX),
    [handling] NVARCHAR(4000),
    [category] VARCHAR(MAX),
) WITH (
    LOCATION='/EvidenceVariable/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.EvidenceVariableIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'EvidenceVariable/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.EvidenceVariableContact AS
SELECT
    [id],
    [contact.JSON],
    [contact.id],
    [contact.extension],
    [contact.name],
    [contact.telecom]
FROM openrowset (
        BULK 'EvidenceVariable/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [contact.JSON]  VARCHAR(MAX) '$.contact'
    ) AS rowset
    CROSS APPLY openjson (rowset.[contact.JSON]) with (
        [contact.id]                   NVARCHAR(100)       '$.id',
        [contact.extension]            NVARCHAR(MAX)       '$.extension',
        [contact.name]                 NVARCHAR(500)       '$.name',
        [contact.telecom]              NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.EvidenceVariableUseContext AS
SELECT
    [id],
    [useContext.JSON],
    [useContext.id],
    [useContext.extension],
    [useContext.code.id],
    [useContext.code.extension],
    [useContext.code.system],
    [useContext.code.version],
    [useContext.code.code],
    [useContext.code.display],
    [useContext.code.userSelected],
    [useContext.value.codeableConcept.id],
    [useContext.value.codeableConcept.extension],
    [useContext.value.codeableConcept.coding],
    [useContext.value.codeableConcept.text],
    [useContext.value.quantity.id],
    [useContext.value.quantity.extension],
    [useContext.value.quantity.value],
    [useContext.value.quantity.comparator],
    [useContext.value.quantity.unit],
    [useContext.value.quantity.system],
    [useContext.value.quantity.code],
    [useContext.value.range.id],
    [useContext.value.range.extension],
    [useContext.value.range.low],
    [useContext.value.range.high],
    [useContext.value.reference.id],
    [useContext.value.reference.extension],
    [useContext.value.reference.reference],
    [useContext.value.reference.type],
    [useContext.value.reference.identifier],
    [useContext.value.reference.display]
FROM openrowset (
        BULK 'EvidenceVariable/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [useContext.JSON]  VARCHAR(MAX) '$.useContext'
    ) AS rowset
    CROSS APPLY openjson (rowset.[useContext.JSON]) with (
        [useContext.id]                NVARCHAR(100)       '$.id',
        [useContext.extension]         NVARCHAR(MAX)       '$.extension',
        [useContext.code.id]           NVARCHAR(100)       '$.code.id',
        [useContext.code.extension]    NVARCHAR(MAX)       '$.code.extension',
        [useContext.code.system]       VARCHAR(256)        '$.code.system',
        [useContext.code.version]      NVARCHAR(100)       '$.code.version',
        [useContext.code.code]         NVARCHAR(4000)      '$.code.code',
        [useContext.code.display]      NVARCHAR(4000)      '$.code.display',
        [useContext.code.userSelected] bit                 '$.code.userSelected',
        [useContext.value.codeableConcept.id] NVARCHAR(100)       '$.value.codeableConcept.id',
        [useContext.value.codeableConcept.extension] NVARCHAR(MAX)       '$.value.codeableConcept.extension',
        [useContext.value.codeableConcept.coding] NVARCHAR(MAX)       '$.value.codeableConcept.coding',
        [useContext.value.codeableConcept.text] NVARCHAR(4000)      '$.value.codeableConcept.text',
        [useContext.value.quantity.id] NVARCHAR(100)       '$.value.quantity.id',
        [useContext.value.quantity.extension] NVARCHAR(MAX)       '$.value.quantity.extension',
        [useContext.value.quantity.value] float               '$.value.quantity.value',
        [useContext.value.quantity.comparator] NVARCHAR(64)        '$.value.quantity.comparator',
        [useContext.value.quantity.unit] NVARCHAR(100)       '$.value.quantity.unit',
        [useContext.value.quantity.system] VARCHAR(256)        '$.value.quantity.system',
        [useContext.value.quantity.code] NVARCHAR(4000)      '$.value.quantity.code',
        [useContext.value.range.id]    NVARCHAR(100)       '$.value.range.id',
        [useContext.value.range.extension] NVARCHAR(MAX)       '$.value.range.extension',
        [useContext.value.range.low]   NVARCHAR(MAX)       '$.value.range.low',
        [useContext.value.range.high]  NVARCHAR(MAX)       '$.value.range.high',
        [useContext.value.reference.id] NVARCHAR(100)       '$.value.reference.id',
        [useContext.value.reference.extension] NVARCHAR(MAX)       '$.value.reference.extension',
        [useContext.value.reference.reference] NVARCHAR(4000)      '$.value.reference.reference',
        [useContext.value.reference.type] VARCHAR(256)        '$.value.reference.type',
        [useContext.value.reference.identifier] NVARCHAR(MAX)       '$.value.reference.identifier',
        [useContext.value.reference.display] NVARCHAR(4000)      '$.value.reference.display'
    ) j

GO

CREATE VIEW fhir.EvidenceVariableJurisdiction AS
SELECT
    [id],
    [jurisdiction.JSON],
    [jurisdiction.id],
    [jurisdiction.extension],
    [jurisdiction.coding],
    [jurisdiction.text]
FROM openrowset (
        BULK 'EvidenceVariable/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [jurisdiction.JSON]  VARCHAR(MAX) '$.jurisdiction'
    ) AS rowset
    CROSS APPLY openjson (rowset.[jurisdiction.JSON]) with (
        [jurisdiction.id]              NVARCHAR(100)       '$.id',
        [jurisdiction.extension]       NVARCHAR(MAX)       '$.extension',
        [jurisdiction.coding]          NVARCHAR(MAX)       '$.coding' AS JSON,
        [jurisdiction.text]            NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.EvidenceVariableTopic AS
SELECT
    [id],
    [topic.JSON],
    [topic.id],
    [topic.extension],
    [topic.coding],
    [topic.text]
FROM openrowset (
        BULK 'EvidenceVariable/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [topic.JSON]  VARCHAR(MAX) '$.topic'
    ) AS rowset
    CROSS APPLY openjson (rowset.[topic.JSON]) with (
        [topic.id]                     NVARCHAR(100)       '$.id',
        [topic.extension]              NVARCHAR(MAX)       '$.extension',
        [topic.coding]                 NVARCHAR(MAX)       '$.coding' AS JSON,
        [topic.text]                   NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.EvidenceVariableAuthor AS
SELECT
    [id],
    [author.JSON],
    [author.id],
    [author.extension],
    [author.name],
    [author.telecom]
FROM openrowset (
        BULK 'EvidenceVariable/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [author.JSON]  VARCHAR(MAX) '$.author'
    ) AS rowset
    CROSS APPLY openjson (rowset.[author.JSON]) with (
        [author.id]                    NVARCHAR(100)       '$.id',
        [author.extension]             NVARCHAR(MAX)       '$.extension',
        [author.name]                  NVARCHAR(500)       '$.name',
        [author.telecom]               NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.EvidenceVariableEditor AS
SELECT
    [id],
    [editor.JSON],
    [editor.id],
    [editor.extension],
    [editor.name],
    [editor.telecom]
FROM openrowset (
        BULK 'EvidenceVariable/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [editor.JSON]  VARCHAR(MAX) '$.editor'
    ) AS rowset
    CROSS APPLY openjson (rowset.[editor.JSON]) with (
        [editor.id]                    NVARCHAR(100)       '$.id',
        [editor.extension]             NVARCHAR(MAX)       '$.extension',
        [editor.name]                  NVARCHAR(500)       '$.name',
        [editor.telecom]               NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.EvidenceVariableReviewer AS
SELECT
    [id],
    [reviewer.JSON],
    [reviewer.id],
    [reviewer.extension],
    [reviewer.name],
    [reviewer.telecom]
FROM openrowset (
        BULK 'EvidenceVariable/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [reviewer.JSON]  VARCHAR(MAX) '$.reviewer'
    ) AS rowset
    CROSS APPLY openjson (rowset.[reviewer.JSON]) with (
        [reviewer.id]                  NVARCHAR(100)       '$.id',
        [reviewer.extension]           NVARCHAR(MAX)       '$.extension',
        [reviewer.name]                NVARCHAR(500)       '$.name',
        [reviewer.telecom]             NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.EvidenceVariableEndorser AS
SELECT
    [id],
    [endorser.JSON],
    [endorser.id],
    [endorser.extension],
    [endorser.name],
    [endorser.telecom]
FROM openrowset (
        BULK 'EvidenceVariable/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [endorser.JSON]  VARCHAR(MAX) '$.endorser'
    ) AS rowset
    CROSS APPLY openjson (rowset.[endorser.JSON]) with (
        [endorser.id]                  NVARCHAR(100)       '$.id',
        [endorser.extension]           NVARCHAR(MAX)       '$.extension',
        [endorser.name]                NVARCHAR(500)       '$.name',
        [endorser.telecom]             NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.EvidenceVariableRelatedArtifact AS
SELECT
    [id],
    [relatedArtifact.JSON],
    [relatedArtifact.id],
    [relatedArtifact.extension],
    [relatedArtifact.type],
    [relatedArtifact.classifier],
    [relatedArtifact.label],
    [relatedArtifact.display],
    [relatedArtifact.citation],
    [relatedArtifact.document.id],
    [relatedArtifact.document.extension],
    [relatedArtifact.document.contentType],
    [relatedArtifact.document.language],
    [relatedArtifact.document.data],
    [relatedArtifact.document.url],
    [relatedArtifact.document.size],
    [relatedArtifact.document.hash],
    [relatedArtifact.document.title],
    [relatedArtifact.document.creation],
    [relatedArtifact.document.height],
    [relatedArtifact.document.width],
    [relatedArtifact.document.frames],
    [relatedArtifact.document.duration],
    [relatedArtifact.document.pages],
    [relatedArtifact.resource],
    [relatedArtifact.resourceReference.id],
    [relatedArtifact.resourceReference.extension],
    [relatedArtifact.resourceReference.reference],
    [relatedArtifact.resourceReference.type],
    [relatedArtifact.resourceReference.identifier],
    [relatedArtifact.resourceReference.display]
FROM openrowset (
        BULK 'EvidenceVariable/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [relatedArtifact.JSON]  VARCHAR(MAX) '$.relatedArtifact'
    ) AS rowset
    CROSS APPLY openjson (rowset.[relatedArtifact.JSON]) with (
        [relatedArtifact.id]           NVARCHAR(100)       '$.id',
        [relatedArtifact.extension]    NVARCHAR(MAX)       '$.extension',
        [relatedArtifact.type]         NVARCHAR(64)        '$.type',
        [relatedArtifact.classifier]   NVARCHAR(MAX)       '$.classifier' AS JSON,
        [relatedArtifact.label]        NVARCHAR(100)       '$.label',
        [relatedArtifact.display]      NVARCHAR(4000)      '$.display',
        [relatedArtifact.citation]     NVARCHAR(MAX)       '$.citation',
        [relatedArtifact.document.id]  NVARCHAR(100)       '$.document.id',
        [relatedArtifact.document.extension] NVARCHAR(MAX)       '$.document.extension',
        [relatedArtifact.document.contentType] NVARCHAR(100)       '$.document.contentType',
        [relatedArtifact.document.language] NVARCHAR(100)       '$.document.language',
        [relatedArtifact.document.data] NVARCHAR(MAX)       '$.document.data',
        [relatedArtifact.document.url] VARCHAR(256)        '$.document.url',
        [relatedArtifact.document.size] NVARCHAR(MAX)       '$.document.size',
        [relatedArtifact.document.hash] NVARCHAR(MAX)       '$.document.hash',
        [relatedArtifact.document.title] NVARCHAR(4000)      '$.document.title',
        [relatedArtifact.document.creation] VARCHAR(64)         '$.document.creation',
        [relatedArtifact.document.height] bigint              '$.document.height',
        [relatedArtifact.document.width] bigint              '$.document.width',
        [relatedArtifact.document.frames] bigint              '$.document.frames',
        [relatedArtifact.document.duration] float               '$.document.duration',
        [relatedArtifact.document.pages] bigint              '$.document.pages',
        [relatedArtifact.resource]     VARCHAR(256)        '$.resource',
        [relatedArtifact.resourceReference.id] NVARCHAR(100)       '$.resourceReference.id',
        [relatedArtifact.resourceReference.extension] NVARCHAR(MAX)       '$.resourceReference.extension',
        [relatedArtifact.resourceReference.reference] NVARCHAR(4000)      '$.resourceReference.reference',
        [relatedArtifact.resourceReference.type] VARCHAR(256)        '$.resourceReference.type',
        [relatedArtifact.resourceReference.identifier] NVARCHAR(MAX)       '$.resourceReference.identifier',
        [relatedArtifact.resourceReference.display] NVARCHAR(4000)      '$.resourceReference.display'
    ) j

GO

CREATE VIEW fhir.EvidenceVariableNote AS
SELECT
    [id],
    [note.JSON],
    [note.id],
    [note.extension],
    [note.time],
    [note.text],
    [note.author.reference.id],
    [note.author.reference.extension],
    [note.author.reference.reference],
    [note.author.reference.type],
    [note.author.reference.identifier],
    [note.author.reference.display],
    [note.author.string]
FROM openrowset (
        BULK 'EvidenceVariable/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [note.JSON]  VARCHAR(MAX) '$.note'
    ) AS rowset
    CROSS APPLY openjson (rowset.[note.JSON]) with (
        [note.id]                      NVARCHAR(100)       '$.id',
        [note.extension]               NVARCHAR(MAX)       '$.extension',
        [note.time]                    VARCHAR(64)         '$.time',
        [note.text]                    NVARCHAR(MAX)       '$.text',
        [note.author.reference.id]     NVARCHAR(100)       '$.author.reference.id',
        [note.author.reference.extension] NVARCHAR(MAX)       '$.author.reference.extension',
        [note.author.reference.reference] NVARCHAR(4000)      '$.author.reference.reference',
        [note.author.reference.type]   VARCHAR(256)        '$.author.reference.type',
        [note.author.reference.identifier] NVARCHAR(MAX)       '$.author.reference.identifier',
        [note.author.reference.display] NVARCHAR(4000)      '$.author.reference.display',
        [note.author.string]           NVARCHAR(4000)      '$.author.string'
    ) j

GO

CREATE VIEW fhir.EvidenceVariableCharacteristic AS
SELECT
    [id],
    [characteristic.JSON],
    [characteristic.id],
    [characteristic.extension],
    [characteristic.modifierExtension],
    [characteristic.description],
    [characteristic.type.id],
    [characteristic.type.extension],
    [characteristic.type.coding],
    [characteristic.type.text],
    [characteristic.method.id],
    [characteristic.method.extension],
    [characteristic.method.coding],
    [characteristic.method.text],
    [characteristic.device.id],
    [characteristic.device.extension],
    [characteristic.device.reference],
    [characteristic.device.type],
    [characteristic.device.identifier],
    [characteristic.device.display],
    [characteristic.exclude],
    [characteristic.timeFromEvent],
    [characteristic.groupMeasure],
    [characteristic.definition.reference.id],
    [characteristic.definition.reference.extension],
    [characteristic.definition.reference.reference],
    [characteristic.definition.reference.type],
    [characteristic.definition.reference.identifier],
    [characteristic.definition.reference.display],
    [characteristic.definition.canonical],
    [characteristic.definition.codeableConcept.id],
    [characteristic.definition.codeableConcept.extension],
    [characteristic.definition.codeableConcept.coding],
    [characteristic.definition.codeableConcept.text],
    [characteristic.definition.expression.id],
    [characteristic.definition.expression.extension],
    [characteristic.definition.expression.description],
    [characteristic.definition.expression.name],
    [characteristic.definition.expression.language],
    [characteristic.definition.expression.expression],
    [characteristic.definition.expression.reference]
FROM openrowset (
        BULK 'EvidenceVariable/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [characteristic.JSON]  VARCHAR(MAX) '$.characteristic'
    ) AS rowset
    CROSS APPLY openjson (rowset.[characteristic.JSON]) with (
        [characteristic.id]            NVARCHAR(100)       '$.id',
        [characteristic.extension]     NVARCHAR(MAX)       '$.extension',
        [characteristic.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [characteristic.description]   NVARCHAR(4000)      '$.description',
        [characteristic.type.id]       NVARCHAR(100)       '$.type.id',
        [characteristic.type.extension] NVARCHAR(MAX)       '$.type.extension',
        [characteristic.type.coding]   NVARCHAR(MAX)       '$.type.coding',
        [characteristic.type.text]     NVARCHAR(4000)      '$.type.text',
        [characteristic.method.id]     NVARCHAR(100)       '$.method.id',
        [characteristic.method.extension] NVARCHAR(MAX)       '$.method.extension',
        [characteristic.method.coding] NVARCHAR(MAX)       '$.method.coding',
        [characteristic.method.text]   NVARCHAR(4000)      '$.method.text',
        [characteristic.device.id]     NVARCHAR(100)       '$.device.id',
        [characteristic.device.extension] NVARCHAR(MAX)       '$.device.extension',
        [characteristic.device.reference] NVARCHAR(4000)      '$.device.reference',
        [characteristic.device.type]   VARCHAR(256)        '$.device.type',
        [characteristic.device.identifier] NVARCHAR(MAX)       '$.device.identifier',
        [characteristic.device.display] NVARCHAR(4000)      '$.device.display',
        [characteristic.exclude]       bit                 '$.exclude',
        [characteristic.timeFromEvent] NVARCHAR(MAX)       '$.timeFromEvent' AS JSON,
        [characteristic.groupMeasure]  NVARCHAR(4000)      '$.groupMeasure',
        [characteristic.definition.reference.id] NVARCHAR(100)       '$.definition.reference.id',
        [characteristic.definition.reference.extension] NVARCHAR(MAX)       '$.definition.reference.extension',
        [characteristic.definition.reference.reference] NVARCHAR(4000)      '$.definition.reference.reference',
        [characteristic.definition.reference.type] VARCHAR(256)        '$.definition.reference.type',
        [characteristic.definition.reference.identifier] NVARCHAR(MAX)       '$.definition.reference.identifier',
        [characteristic.definition.reference.display] NVARCHAR(4000)      '$.definition.reference.display',
        [characteristic.definition.canonical] VARCHAR(256)        '$.definition.canonical',
        [characteristic.definition.codeableConcept.id] NVARCHAR(100)       '$.definition.codeableConcept.id',
        [characteristic.definition.codeableConcept.extension] NVARCHAR(MAX)       '$.definition.codeableConcept.extension',
        [characteristic.definition.codeableConcept.coding] NVARCHAR(MAX)       '$.definition.codeableConcept.coding',
        [characteristic.definition.codeableConcept.text] NVARCHAR(4000)      '$.definition.codeableConcept.text',
        [characteristic.definition.expression.id] NVARCHAR(100)       '$.definition.expression.id',
        [characteristic.definition.expression.extension] NVARCHAR(MAX)       '$.definition.expression.extension',
        [characteristic.definition.expression.description] NVARCHAR(4000)      '$.definition.expression.description',
        [characteristic.definition.expression.name] VARCHAR(64)         '$.definition.expression.name',
        [characteristic.definition.expression.language] NVARCHAR(100)       '$.definition.expression.language',
        [characteristic.definition.expression.expression] NVARCHAR(4000)      '$.definition.expression.expression',
        [characteristic.definition.expression.reference] VARCHAR(256)        '$.definition.expression.reference'
    ) j

GO

CREATE VIEW fhir.EvidenceVariableCategory AS
SELECT
    [id],
    [category.JSON],
    [category.id],
    [category.extension],
    [category.modifierExtension],
    [category.name],
    [category.value.codeableConcept.id],
    [category.value.codeableConcept.extension],
    [category.value.codeableConcept.coding],
    [category.value.codeableConcept.text],
    [category.value.quantity.id],
    [category.value.quantity.extension],
    [category.value.quantity.value],
    [category.value.quantity.comparator],
    [category.value.quantity.unit],
    [category.value.quantity.system],
    [category.value.quantity.code],
    [category.value.range.id],
    [category.value.range.extension],
    [category.value.range.low],
    [category.value.range.high]
FROM openrowset (
        BULK 'EvidenceVariable/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [category.JSON]  VARCHAR(MAX) '$.category'
    ) AS rowset
    CROSS APPLY openjson (rowset.[category.JSON]) with (
        [category.id]                  NVARCHAR(100)       '$.id',
        [category.extension]           NVARCHAR(MAX)       '$.extension',
        [category.modifierExtension]   NVARCHAR(MAX)       '$.modifierExtension',
        [category.name]                NVARCHAR(500)       '$.name',
        [category.value.codeableConcept.id] NVARCHAR(100)       '$.value.codeableConcept.id',
        [category.value.codeableConcept.extension] NVARCHAR(MAX)       '$.value.codeableConcept.extension',
        [category.value.codeableConcept.coding] NVARCHAR(MAX)       '$.value.codeableConcept.coding',
        [category.value.codeableConcept.text] NVARCHAR(4000)      '$.value.codeableConcept.text',
        [category.value.quantity.id]   NVARCHAR(100)       '$.value.quantity.id',
        [category.value.quantity.extension] NVARCHAR(MAX)       '$.value.quantity.extension',
        [category.value.quantity.value] float               '$.value.quantity.value',
        [category.value.quantity.comparator] NVARCHAR(64)        '$.value.quantity.comparator',
        [category.value.quantity.unit] NVARCHAR(100)       '$.value.quantity.unit',
        [category.value.quantity.system] VARCHAR(256)        '$.value.quantity.system',
        [category.value.quantity.code] NVARCHAR(4000)      '$.value.quantity.code',
        [category.value.range.id]      NVARCHAR(100)       '$.value.range.id',
        [category.value.range.extension] NVARCHAR(MAX)       '$.value.range.extension',
        [category.value.range.low]     NVARCHAR(MAX)       '$.value.range.low',
        [category.value.range.high]    NVARCHAR(MAX)       '$.value.range.high'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[ExampleScenario] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [url] VARCHAR(256),
    [identifier] VARCHAR(MAX),
    [version] NVARCHAR(100),
    [name] NVARCHAR(500),
    [title] NVARCHAR(4000),
    [status] NVARCHAR(100),
    [experimental] bit,
    [date] VARCHAR(64),
    [publisher] NVARCHAR(500),
    [contact] VARCHAR(MAX),
    [description] NVARCHAR(MAX),
    [useContext] VARCHAR(MAX),
    [jurisdiction] VARCHAR(MAX),
    [purpose] NVARCHAR(MAX),
    [copyright] NVARCHAR(MAX),
    [actor] VARCHAR(MAX),
    [instance] VARCHAR(MAX),
    [process] VARCHAR(MAX),
    [workflow] VARCHAR(MAX),
) WITH (
    LOCATION='/ExampleScenario/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.ExampleScenarioIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'ExampleScenario/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.ExampleScenarioContact AS
SELECT
    [id],
    [contact.JSON],
    [contact.id],
    [contact.extension],
    [contact.name],
    [contact.telecom]
FROM openrowset (
        BULK 'ExampleScenario/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [contact.JSON]  VARCHAR(MAX) '$.contact'
    ) AS rowset
    CROSS APPLY openjson (rowset.[contact.JSON]) with (
        [contact.id]                   NVARCHAR(100)       '$.id',
        [contact.extension]            NVARCHAR(MAX)       '$.extension',
        [contact.name]                 NVARCHAR(500)       '$.name',
        [contact.telecom]              NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.ExampleScenarioUseContext AS
SELECT
    [id],
    [useContext.JSON],
    [useContext.id],
    [useContext.extension],
    [useContext.code.id],
    [useContext.code.extension],
    [useContext.code.system],
    [useContext.code.version],
    [useContext.code.code],
    [useContext.code.display],
    [useContext.code.userSelected],
    [useContext.value.codeableConcept.id],
    [useContext.value.codeableConcept.extension],
    [useContext.value.codeableConcept.coding],
    [useContext.value.codeableConcept.text],
    [useContext.value.quantity.id],
    [useContext.value.quantity.extension],
    [useContext.value.quantity.value],
    [useContext.value.quantity.comparator],
    [useContext.value.quantity.unit],
    [useContext.value.quantity.system],
    [useContext.value.quantity.code],
    [useContext.value.range.id],
    [useContext.value.range.extension],
    [useContext.value.range.low],
    [useContext.value.range.high],
    [useContext.value.reference.id],
    [useContext.value.reference.extension],
    [useContext.value.reference.reference],
    [useContext.value.reference.type],
    [useContext.value.reference.identifier],
    [useContext.value.reference.display]
FROM openrowset (
        BULK 'ExampleScenario/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [useContext.JSON]  VARCHAR(MAX) '$.useContext'
    ) AS rowset
    CROSS APPLY openjson (rowset.[useContext.JSON]) with (
        [useContext.id]                NVARCHAR(100)       '$.id',
        [useContext.extension]         NVARCHAR(MAX)       '$.extension',
        [useContext.code.id]           NVARCHAR(100)       '$.code.id',
        [useContext.code.extension]    NVARCHAR(MAX)       '$.code.extension',
        [useContext.code.system]       VARCHAR(256)        '$.code.system',
        [useContext.code.version]      NVARCHAR(100)       '$.code.version',
        [useContext.code.code]         NVARCHAR(4000)      '$.code.code',
        [useContext.code.display]      NVARCHAR(4000)      '$.code.display',
        [useContext.code.userSelected] bit                 '$.code.userSelected',
        [useContext.value.codeableConcept.id] NVARCHAR(100)       '$.value.codeableConcept.id',
        [useContext.value.codeableConcept.extension] NVARCHAR(MAX)       '$.value.codeableConcept.extension',
        [useContext.value.codeableConcept.coding] NVARCHAR(MAX)       '$.value.codeableConcept.coding',
        [useContext.value.codeableConcept.text] NVARCHAR(4000)      '$.value.codeableConcept.text',
        [useContext.value.quantity.id] NVARCHAR(100)       '$.value.quantity.id',
        [useContext.value.quantity.extension] NVARCHAR(MAX)       '$.value.quantity.extension',
        [useContext.value.quantity.value] float               '$.value.quantity.value',
        [useContext.value.quantity.comparator] NVARCHAR(64)        '$.value.quantity.comparator',
        [useContext.value.quantity.unit] NVARCHAR(100)       '$.value.quantity.unit',
        [useContext.value.quantity.system] VARCHAR(256)        '$.value.quantity.system',
        [useContext.value.quantity.code] NVARCHAR(4000)      '$.value.quantity.code',
        [useContext.value.range.id]    NVARCHAR(100)       '$.value.range.id',
        [useContext.value.range.extension] NVARCHAR(MAX)       '$.value.range.extension',
        [useContext.value.range.low]   NVARCHAR(MAX)       '$.value.range.low',
        [useContext.value.range.high]  NVARCHAR(MAX)       '$.value.range.high',
        [useContext.value.reference.id] NVARCHAR(100)       '$.value.reference.id',
        [useContext.value.reference.extension] NVARCHAR(MAX)       '$.value.reference.extension',
        [useContext.value.reference.reference] NVARCHAR(4000)      '$.value.reference.reference',
        [useContext.value.reference.type] VARCHAR(256)        '$.value.reference.type',
        [useContext.value.reference.identifier] NVARCHAR(MAX)       '$.value.reference.identifier',
        [useContext.value.reference.display] NVARCHAR(4000)      '$.value.reference.display'
    ) j

GO

CREATE VIEW fhir.ExampleScenarioJurisdiction AS
SELECT
    [id],
    [jurisdiction.JSON],
    [jurisdiction.id],
    [jurisdiction.extension],
    [jurisdiction.coding],
    [jurisdiction.text]
FROM openrowset (
        BULK 'ExampleScenario/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [jurisdiction.JSON]  VARCHAR(MAX) '$.jurisdiction'
    ) AS rowset
    CROSS APPLY openjson (rowset.[jurisdiction.JSON]) with (
        [jurisdiction.id]              NVARCHAR(100)       '$.id',
        [jurisdiction.extension]       NVARCHAR(MAX)       '$.extension',
        [jurisdiction.coding]          NVARCHAR(MAX)       '$.coding' AS JSON,
        [jurisdiction.text]            NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.ExampleScenarioActor AS
SELECT
    [id],
    [actor.JSON],
    [actor.id],
    [actor.extension],
    [actor.modifierExtension],
    [actor.actorId],
    [actor.type],
    [actor.name],
    [actor.description]
FROM openrowset (
        BULK 'ExampleScenario/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [actor.JSON]  VARCHAR(MAX) '$.actor'
    ) AS rowset
    CROSS APPLY openjson (rowset.[actor.JSON]) with (
        [actor.id]                     NVARCHAR(100)       '$.id',
        [actor.extension]              NVARCHAR(MAX)       '$.extension',
        [actor.modifierExtension]      NVARCHAR(MAX)       '$.modifierExtension',
        [actor.actorId]                NVARCHAR(100)       '$.actorId',
        [actor.type]                   NVARCHAR(100)       '$.type',
        [actor.name]                   NVARCHAR(500)       '$.name',
        [actor.description]            NVARCHAR(MAX)       '$.description'
    ) j

GO

CREATE VIEW fhir.ExampleScenarioInstance AS
SELECT
    [id],
    [instance.JSON],
    [instance.id],
    [instance.extension],
    [instance.modifierExtension],
    [instance.resourceId],
    [instance.resourceType],
    [instance.name],
    [instance.description],
    [instance.version],
    [instance.containedInstance]
FROM openrowset (
        BULK 'ExampleScenario/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [instance.JSON]  VARCHAR(MAX) '$.instance'
    ) AS rowset
    CROSS APPLY openjson (rowset.[instance.JSON]) with (
        [instance.id]                  NVARCHAR(100)       '$.id',
        [instance.extension]           NVARCHAR(MAX)       '$.extension',
        [instance.modifierExtension]   NVARCHAR(MAX)       '$.modifierExtension',
        [instance.resourceId]          NVARCHAR(100)       '$.resourceId',
        [instance.resourceType]        NVARCHAR(4000)      '$.resourceType',
        [instance.name]                NVARCHAR(500)       '$.name',
        [instance.description]         NVARCHAR(MAX)       '$.description',
        [instance.version]             NVARCHAR(MAX)       '$.version' AS JSON,
        [instance.containedInstance]   NVARCHAR(MAX)       '$.containedInstance' AS JSON
    ) j

GO

CREATE VIEW fhir.ExampleScenarioProcess AS
SELECT
    [id],
    [process.JSON],
    [process.id],
    [process.extension],
    [process.modifierExtension],
    [process.title],
    [process.description],
    [process.preConditions],
    [process.postConditions],
    [process.step]
FROM openrowset (
        BULK 'ExampleScenario/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [process.JSON]  VARCHAR(MAX) '$.process'
    ) AS rowset
    CROSS APPLY openjson (rowset.[process.JSON]) with (
        [process.id]                   NVARCHAR(100)       '$.id',
        [process.extension]            NVARCHAR(MAX)       '$.extension',
        [process.modifierExtension]    NVARCHAR(MAX)       '$.modifierExtension',
        [process.title]                NVARCHAR(4000)      '$.title',
        [process.description]          NVARCHAR(MAX)       '$.description',
        [process.preConditions]        NVARCHAR(MAX)       '$.preConditions',
        [process.postConditions]       NVARCHAR(MAX)       '$.postConditions',
        [process.step]                 NVARCHAR(MAX)       '$.step' AS JSON
    ) j

GO

CREATE VIEW fhir.ExampleScenarioWorkflow AS
SELECT
    [id],
    [workflow.JSON],
    [workflow]
FROM openrowset (
        BULK 'ExampleScenario/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [workflow.JSON]  VARCHAR(MAX) '$.workflow'
    ) AS rowset
    CROSS APPLY openjson (rowset.[workflow.JSON]) with (
        [workflow]                     NVARCHAR(MAX)       '$'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[ExplanationOfBenefit] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [status] NVARCHAR(100),
    [type.id] NVARCHAR(100),
    [type.extension] NVARCHAR(MAX),
    [type.coding] VARCHAR(MAX),
    [type.text] NVARCHAR(4000),
    [subType.id] NVARCHAR(100),
    [subType.extension] NVARCHAR(MAX),
    [subType.coding] VARCHAR(MAX),
    [subType.text] NVARCHAR(4000),
    [use] NVARCHAR(100),
    [patient.id] NVARCHAR(100),
    [patient.extension] NVARCHAR(MAX),
    [patient.reference] NVARCHAR(4000),
    [patient.type] VARCHAR(256),
    [patient.identifier.id] NVARCHAR(100),
    [patient.identifier.extension] NVARCHAR(MAX),
    [patient.identifier.use] NVARCHAR(64),
    [patient.identifier.type] NVARCHAR(MAX),
    [patient.identifier.system] VARCHAR(256),
    [patient.identifier.value] NVARCHAR(4000),
    [patient.identifier.period] NVARCHAR(MAX),
    [patient.identifier.assigner] NVARCHAR(MAX),
    [patient.display] NVARCHAR(4000),
    [billablePeriod.id] NVARCHAR(100),
    [billablePeriod.extension] NVARCHAR(MAX),
    [billablePeriod.start] VARCHAR(64),
    [billablePeriod.end] VARCHAR(64),
    [created] VARCHAR(64),
    [enterer.id] NVARCHAR(100),
    [enterer.extension] NVARCHAR(MAX),
    [enterer.reference] NVARCHAR(4000),
    [enterer.type] VARCHAR(256),
    [enterer.identifier.id] NVARCHAR(100),
    [enterer.identifier.extension] NVARCHAR(MAX),
    [enterer.identifier.use] NVARCHAR(64),
    [enterer.identifier.type] NVARCHAR(MAX),
    [enterer.identifier.system] VARCHAR(256),
    [enterer.identifier.value] NVARCHAR(4000),
    [enterer.identifier.period] NVARCHAR(MAX),
    [enterer.identifier.assigner] NVARCHAR(MAX),
    [enterer.display] NVARCHAR(4000),
    [insurer.id] NVARCHAR(100),
    [insurer.extension] NVARCHAR(MAX),
    [insurer.reference] NVARCHAR(4000),
    [insurer.type] VARCHAR(256),
    [insurer.identifier.id] NVARCHAR(100),
    [insurer.identifier.extension] NVARCHAR(MAX),
    [insurer.identifier.use] NVARCHAR(64),
    [insurer.identifier.type] NVARCHAR(MAX),
    [insurer.identifier.system] VARCHAR(256),
    [insurer.identifier.value] NVARCHAR(4000),
    [insurer.identifier.period] NVARCHAR(MAX),
    [insurer.identifier.assigner] NVARCHAR(MAX),
    [insurer.display] NVARCHAR(4000),
    [provider.id] NVARCHAR(100),
    [provider.extension] NVARCHAR(MAX),
    [provider.reference] NVARCHAR(4000),
    [provider.type] VARCHAR(256),
    [provider.identifier.id] NVARCHAR(100),
    [provider.identifier.extension] NVARCHAR(MAX),
    [provider.identifier.use] NVARCHAR(64),
    [provider.identifier.type] NVARCHAR(MAX),
    [provider.identifier.system] VARCHAR(256),
    [provider.identifier.value] NVARCHAR(4000),
    [provider.identifier.period] NVARCHAR(MAX),
    [provider.identifier.assigner] NVARCHAR(MAX),
    [provider.display] NVARCHAR(4000),
    [priority.id] NVARCHAR(100),
    [priority.extension] NVARCHAR(MAX),
    [priority.coding] VARCHAR(MAX),
    [priority.text] NVARCHAR(4000),
    [fundsReserveRequested.id] NVARCHAR(100),
    [fundsReserveRequested.extension] NVARCHAR(MAX),
    [fundsReserveRequested.coding] VARCHAR(MAX),
    [fundsReserveRequested.text] NVARCHAR(4000),
    [fundsReserve.id] NVARCHAR(100),
    [fundsReserve.extension] NVARCHAR(MAX),
    [fundsReserve.coding] VARCHAR(MAX),
    [fundsReserve.text] NVARCHAR(4000),
    [related] VARCHAR(MAX),
    [prescription.id] NVARCHAR(100),
    [prescription.extension] NVARCHAR(MAX),
    [prescription.reference] NVARCHAR(4000),
    [prescription.type] VARCHAR(256),
    [prescription.identifier.id] NVARCHAR(100),
    [prescription.identifier.extension] NVARCHAR(MAX),
    [prescription.identifier.use] NVARCHAR(64),
    [prescription.identifier.type] NVARCHAR(MAX),
    [prescription.identifier.system] VARCHAR(256),
    [prescription.identifier.value] NVARCHAR(4000),
    [prescription.identifier.period] NVARCHAR(MAX),
    [prescription.identifier.assigner] NVARCHAR(MAX),
    [prescription.display] NVARCHAR(4000),
    [originalPrescription.id] NVARCHAR(100),
    [originalPrescription.extension] NVARCHAR(MAX),
    [originalPrescription.reference] NVARCHAR(4000),
    [originalPrescription.type] VARCHAR(256),
    [originalPrescription.identifier.id] NVARCHAR(100),
    [originalPrescription.identifier.extension] NVARCHAR(MAX),
    [originalPrescription.identifier.use] NVARCHAR(64),
    [originalPrescription.identifier.type] NVARCHAR(MAX),
    [originalPrescription.identifier.system] VARCHAR(256),
    [originalPrescription.identifier.value] NVARCHAR(4000),
    [originalPrescription.identifier.period] NVARCHAR(MAX),
    [originalPrescription.identifier.assigner] NVARCHAR(MAX),
    [originalPrescription.display] NVARCHAR(4000),
    [payee.id] NVARCHAR(100),
    [payee.extension] NVARCHAR(MAX),
    [payee.modifierExtension] NVARCHAR(MAX),
    [payee.type.id] NVARCHAR(100),
    [payee.type.extension] NVARCHAR(MAX),
    [payee.type.coding] NVARCHAR(MAX),
    [payee.type.text] NVARCHAR(4000),
    [payee.party.id] NVARCHAR(100),
    [payee.party.extension] NVARCHAR(MAX),
    [payee.party.reference] NVARCHAR(4000),
    [payee.party.type] VARCHAR(256),
    [payee.party.identifier] NVARCHAR(MAX),
    [payee.party.display] NVARCHAR(4000),
    [referral.id] NVARCHAR(100),
    [referral.extension] NVARCHAR(MAX),
    [referral.reference] NVARCHAR(4000),
    [referral.type] VARCHAR(256),
    [referral.identifier.id] NVARCHAR(100),
    [referral.identifier.extension] NVARCHAR(MAX),
    [referral.identifier.use] NVARCHAR(64),
    [referral.identifier.type] NVARCHAR(MAX),
    [referral.identifier.system] VARCHAR(256),
    [referral.identifier.value] NVARCHAR(4000),
    [referral.identifier.period] NVARCHAR(MAX),
    [referral.identifier.assigner] NVARCHAR(MAX),
    [referral.display] NVARCHAR(4000),
    [facility.id] NVARCHAR(100),
    [facility.extension] NVARCHAR(MAX),
    [facility.reference] NVARCHAR(4000),
    [facility.type] VARCHAR(256),
    [facility.identifier.id] NVARCHAR(100),
    [facility.identifier.extension] NVARCHAR(MAX),
    [facility.identifier.use] NVARCHAR(64),
    [facility.identifier.type] NVARCHAR(MAX),
    [facility.identifier.system] VARCHAR(256),
    [facility.identifier.value] NVARCHAR(4000),
    [facility.identifier.period] NVARCHAR(MAX),
    [facility.identifier.assigner] NVARCHAR(MAX),
    [facility.display] NVARCHAR(4000),
    [claim.id] NVARCHAR(100),
    [claim.extension] NVARCHAR(MAX),
    [claim.reference] NVARCHAR(4000),
    [claim.type] VARCHAR(256),
    [claim.identifier.id] NVARCHAR(100),
    [claim.identifier.extension] NVARCHAR(MAX),
    [claim.identifier.use] NVARCHAR(64),
    [claim.identifier.type] NVARCHAR(MAX),
    [claim.identifier.system] VARCHAR(256),
    [claim.identifier.value] NVARCHAR(4000),
    [claim.identifier.period] NVARCHAR(MAX),
    [claim.identifier.assigner] NVARCHAR(MAX),
    [claim.display] NVARCHAR(4000),
    [claimResponse.id] NVARCHAR(100),
    [claimResponse.extension] NVARCHAR(MAX),
    [claimResponse.reference] NVARCHAR(4000),
    [claimResponse.type] VARCHAR(256),
    [claimResponse.identifier.id] NVARCHAR(100),
    [claimResponse.identifier.extension] NVARCHAR(MAX),
    [claimResponse.identifier.use] NVARCHAR(64),
    [claimResponse.identifier.type] NVARCHAR(MAX),
    [claimResponse.identifier.system] VARCHAR(256),
    [claimResponse.identifier.value] NVARCHAR(4000),
    [claimResponse.identifier.period] NVARCHAR(MAX),
    [claimResponse.identifier.assigner] NVARCHAR(MAX),
    [claimResponse.display] NVARCHAR(4000),
    [outcome] NVARCHAR(100),
    [disposition] NVARCHAR(4000),
    [preAuthRef] VARCHAR(MAX),
    [preAuthRefPeriod] VARCHAR(MAX),
    [careTeam] VARCHAR(MAX),
    [supportingInfo] VARCHAR(MAX),
    [diagnosis] VARCHAR(MAX),
    [procedure] VARCHAR(MAX),
    [precedence] bigint,
    [insurance] VARCHAR(MAX),
    [accident.id] NVARCHAR(100),
    [accident.extension] NVARCHAR(MAX),
    [accident.modifierExtension] NVARCHAR(MAX),
    [accident.date] VARCHAR(64),
    [accident.type.id] NVARCHAR(100),
    [accident.type.extension] NVARCHAR(MAX),
    [accident.type.coding] NVARCHAR(MAX),
    [accident.type.text] NVARCHAR(4000),
    [accident.location.address.id] NVARCHAR(100),
    [accident.location.address.extension] NVARCHAR(MAX),
    [accident.location.address.use] NVARCHAR(64),
    [accident.location.address.type] NVARCHAR(64),
    [accident.location.address.text] NVARCHAR(4000),
    [accident.location.address.line] NVARCHAR(MAX),
    [accident.location.address.city] NVARCHAR(500),
    [accident.location.address.district] NVARCHAR(500),
    [accident.location.address.state] NVARCHAR(500),
    [accident.location.address.postalCode] NVARCHAR(100),
    [accident.location.address.country] NVARCHAR(500),
    [accident.location.address.period] NVARCHAR(MAX),
    [accident.location.reference.id] NVARCHAR(100),
    [accident.location.reference.extension] NVARCHAR(MAX),
    [accident.location.reference.reference] NVARCHAR(4000),
    [accident.location.reference.type] VARCHAR(256),
    [accident.location.reference.identifier] NVARCHAR(MAX),
    [accident.location.reference.display] NVARCHAR(4000),
    [item] VARCHAR(MAX),
    [addItem] VARCHAR(MAX),
    [adjudication] VARCHAR(MAX),
    [total] VARCHAR(MAX),
    [payment.id] NVARCHAR(100),
    [payment.extension] NVARCHAR(MAX),
    [payment.modifierExtension] NVARCHAR(MAX),
    [payment.type.id] NVARCHAR(100),
    [payment.type.extension] NVARCHAR(MAX),
    [payment.type.coding] NVARCHAR(MAX),
    [payment.type.text] NVARCHAR(4000),
    [payment.adjustment.id] NVARCHAR(100),
    [payment.adjustment.extension] NVARCHAR(MAX),
    [payment.adjustment.value] float,
    [payment.adjustment.currency] NVARCHAR(100),
    [payment.adjustmentReason.id] NVARCHAR(100),
    [payment.adjustmentReason.extension] NVARCHAR(MAX),
    [payment.adjustmentReason.coding] NVARCHAR(MAX),
    [payment.adjustmentReason.text] NVARCHAR(4000),
    [payment.date] VARCHAR(64),
    [payment.amount.id] NVARCHAR(100),
    [payment.amount.extension] NVARCHAR(MAX),
    [payment.amount.value] float,
    [payment.amount.currency] NVARCHAR(100),
    [payment.identifier.id] NVARCHAR(100),
    [payment.identifier.extension] NVARCHAR(MAX),
    [payment.identifier.use] NVARCHAR(64),
    [payment.identifier.type] NVARCHAR(MAX),
    [payment.identifier.system] VARCHAR(256),
    [payment.identifier.value] NVARCHAR(4000),
    [payment.identifier.period] NVARCHAR(MAX),
    [payment.identifier.assigner] NVARCHAR(MAX),
    [formCode.id] NVARCHAR(100),
    [formCode.extension] NVARCHAR(MAX),
    [formCode.coding] VARCHAR(MAX),
    [formCode.text] NVARCHAR(4000),
    [form.id] NVARCHAR(100),
    [form.extension] NVARCHAR(MAX),
    [form.contentType] NVARCHAR(100),
    [form.language] NVARCHAR(100),
    [form.data] NVARCHAR(MAX),
    [form.url] VARCHAR(256),
    [form.size] NVARCHAR(MAX),
    [form.hash] NVARCHAR(MAX),
    [form.title] NVARCHAR(4000),
    [form.creation] VARCHAR(64),
    [form.height] bigint,
    [form.width] bigint,
    [form.frames] bigint,
    [form.duration] float,
    [form.pages] bigint,
    [processNote] VARCHAR(MAX),
    [benefitPeriod.id] NVARCHAR(100),
    [benefitPeriod.extension] NVARCHAR(MAX),
    [benefitPeriod.start] VARCHAR(64),
    [benefitPeriod.end] VARCHAR(64),
    [benefitBalance] VARCHAR(MAX),
) WITH (
    LOCATION='/ExplanationOfBenefit/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.ExplanationOfBenefitIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'ExplanationOfBenefit/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.ExplanationOfBenefitRelated AS
SELECT
    [id],
    [related.JSON],
    [related.id],
    [related.extension],
    [related.modifierExtension],
    [related.claim.id],
    [related.claim.extension],
    [related.claim.reference],
    [related.claim.type],
    [related.claim.identifier],
    [related.claim.display],
    [related.relationship.id],
    [related.relationship.extension],
    [related.relationship.coding],
    [related.relationship.text],
    [related.reference.id],
    [related.reference.extension],
    [related.reference.use],
    [related.reference.type],
    [related.reference.system],
    [related.reference.value],
    [related.reference.period],
    [related.reference.assigner]
FROM openrowset (
        BULK 'ExplanationOfBenefit/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [related.JSON]  VARCHAR(MAX) '$.related'
    ) AS rowset
    CROSS APPLY openjson (rowset.[related.JSON]) with (
        [related.id]                   NVARCHAR(100)       '$.id',
        [related.extension]            NVARCHAR(MAX)       '$.extension',
        [related.modifierExtension]    NVARCHAR(MAX)       '$.modifierExtension',
        [related.claim.id]             NVARCHAR(100)       '$.claim.id',
        [related.claim.extension]      NVARCHAR(MAX)       '$.claim.extension',
        [related.claim.reference]      NVARCHAR(4000)      '$.claim.reference',
        [related.claim.type]           VARCHAR(256)        '$.claim.type',
        [related.claim.identifier]     NVARCHAR(MAX)       '$.claim.identifier',
        [related.claim.display]        NVARCHAR(4000)      '$.claim.display',
        [related.relationship.id]      NVARCHAR(100)       '$.relationship.id',
        [related.relationship.extension] NVARCHAR(MAX)       '$.relationship.extension',
        [related.relationship.coding]  NVARCHAR(MAX)       '$.relationship.coding',
        [related.relationship.text]    NVARCHAR(4000)      '$.relationship.text',
        [related.reference.id]         NVARCHAR(100)       '$.reference.id',
        [related.reference.extension]  NVARCHAR(MAX)       '$.reference.extension',
        [related.reference.use]        NVARCHAR(64)        '$.reference.use',
        [related.reference.type]       NVARCHAR(MAX)       '$.reference.type',
        [related.reference.system]     VARCHAR(256)        '$.reference.system',
        [related.reference.value]      NVARCHAR(4000)      '$.reference.value',
        [related.reference.period]     NVARCHAR(MAX)       '$.reference.period',
        [related.reference.assigner]   NVARCHAR(MAX)       '$.reference.assigner'
    ) j

GO

CREATE VIEW fhir.ExplanationOfBenefitPreAuthRef AS
SELECT
    [id],
    [preAuthRef.JSON],
    [preAuthRef]
FROM openrowset (
        BULK 'ExplanationOfBenefit/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [preAuthRef.JSON]  VARCHAR(MAX) '$.preAuthRef'
    ) AS rowset
    CROSS APPLY openjson (rowset.[preAuthRef.JSON]) with (
        [preAuthRef]                   NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.ExplanationOfBenefitPreAuthRefPeriod AS
SELECT
    [id],
    [preAuthRefPeriod.JSON],
    [preAuthRefPeriod.id],
    [preAuthRefPeriod.extension],
    [preAuthRefPeriod.start],
    [preAuthRefPeriod.end]
FROM openrowset (
        BULK 'ExplanationOfBenefit/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [preAuthRefPeriod.JSON]  VARCHAR(MAX) '$.preAuthRefPeriod'
    ) AS rowset
    CROSS APPLY openjson (rowset.[preAuthRefPeriod.JSON]) with (
        [preAuthRefPeriod.id]          NVARCHAR(100)       '$.id',
        [preAuthRefPeriod.extension]   NVARCHAR(MAX)       '$.extension',
        [preAuthRefPeriod.start]       VARCHAR(64)         '$.start',
        [preAuthRefPeriod.end]         VARCHAR(64)         '$.end'
    ) j

GO

CREATE VIEW fhir.ExplanationOfBenefitCareTeam AS
SELECT
    [id],
    [careTeam.JSON],
    [careTeam.id],
    [careTeam.extension],
    [careTeam.modifierExtension],
    [careTeam.sequence],
    [careTeam.provider.id],
    [careTeam.provider.extension],
    [careTeam.provider.reference],
    [careTeam.provider.type],
    [careTeam.provider.identifier],
    [careTeam.provider.display],
    [careTeam.responsible],
    [careTeam.role.id],
    [careTeam.role.extension],
    [careTeam.role.coding],
    [careTeam.role.text],
    [careTeam.qualification.id],
    [careTeam.qualification.extension],
    [careTeam.qualification.coding],
    [careTeam.qualification.text]
FROM openrowset (
        BULK 'ExplanationOfBenefit/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [careTeam.JSON]  VARCHAR(MAX) '$.careTeam'
    ) AS rowset
    CROSS APPLY openjson (rowset.[careTeam.JSON]) with (
        [careTeam.id]                  NVARCHAR(100)       '$.id',
        [careTeam.extension]           NVARCHAR(MAX)       '$.extension',
        [careTeam.modifierExtension]   NVARCHAR(MAX)       '$.modifierExtension',
        [careTeam.sequence]            bigint              '$.sequence',
        [careTeam.provider.id]         NVARCHAR(100)       '$.provider.id',
        [careTeam.provider.extension]  NVARCHAR(MAX)       '$.provider.extension',
        [careTeam.provider.reference]  NVARCHAR(4000)      '$.provider.reference',
        [careTeam.provider.type]       VARCHAR(256)        '$.provider.type',
        [careTeam.provider.identifier] NVARCHAR(MAX)       '$.provider.identifier',
        [careTeam.provider.display]    NVARCHAR(4000)      '$.provider.display',
        [careTeam.responsible]         bit                 '$.responsible',
        [careTeam.role.id]             NVARCHAR(100)       '$.role.id',
        [careTeam.role.extension]      NVARCHAR(MAX)       '$.role.extension',
        [careTeam.role.coding]         NVARCHAR(MAX)       '$.role.coding',
        [careTeam.role.text]           NVARCHAR(4000)      '$.role.text',
        [careTeam.qualification.id]    NVARCHAR(100)       '$.qualification.id',
        [careTeam.qualification.extension] NVARCHAR(MAX)       '$.qualification.extension',
        [careTeam.qualification.coding] NVARCHAR(MAX)       '$.qualification.coding',
        [careTeam.qualification.text]  NVARCHAR(4000)      '$.qualification.text'
    ) j

GO

CREATE VIEW fhir.ExplanationOfBenefitSupportingInfo AS
SELECT
    [id],
    [supportingInfo.JSON],
    [supportingInfo.id],
    [supportingInfo.extension],
    [supportingInfo.modifierExtension],
    [supportingInfo.sequence],
    [supportingInfo.category.id],
    [supportingInfo.category.extension],
    [supportingInfo.category.coding],
    [supportingInfo.category.text],
    [supportingInfo.code.id],
    [supportingInfo.code.extension],
    [supportingInfo.code.coding],
    [supportingInfo.code.text],
    [supportingInfo.reason.id],
    [supportingInfo.reason.extension],
    [supportingInfo.reason.system],
    [supportingInfo.reason.version],
    [supportingInfo.reason.code],
    [supportingInfo.reason.display],
    [supportingInfo.reason.userSelected],
    [supportingInfo.timing.date],
    [supportingInfo.timing.period.id],
    [supportingInfo.timing.period.extension],
    [supportingInfo.timing.period.start],
    [supportingInfo.timing.period.end],
    [supportingInfo.value.boolean],
    [supportingInfo.value.string],
    [supportingInfo.value.quantity.id],
    [supportingInfo.value.quantity.extension],
    [supportingInfo.value.quantity.value],
    [supportingInfo.value.quantity.comparator],
    [supportingInfo.value.quantity.unit],
    [supportingInfo.value.quantity.system],
    [supportingInfo.value.quantity.code],
    [supportingInfo.value.attachment.id],
    [supportingInfo.value.attachment.extension],
    [supportingInfo.value.attachment.contentType],
    [supportingInfo.value.attachment.language],
    [supportingInfo.value.attachment.data],
    [supportingInfo.value.attachment.url],
    [supportingInfo.value.attachment.size],
    [supportingInfo.value.attachment.hash],
    [supportingInfo.value.attachment.title],
    [supportingInfo.value.attachment.creation],
    [supportingInfo.value.attachment.height],
    [supportingInfo.value.attachment.width],
    [supportingInfo.value.attachment.frames],
    [supportingInfo.value.attachment.duration],
    [supportingInfo.value.attachment.pages],
    [supportingInfo.value.reference.id],
    [supportingInfo.value.reference.extension],
    [supportingInfo.value.reference.reference],
    [supportingInfo.value.reference.type],
    [supportingInfo.value.reference.identifier],
    [supportingInfo.value.reference.display]
FROM openrowset (
        BULK 'ExplanationOfBenefit/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [supportingInfo.JSON]  VARCHAR(MAX) '$.supportingInfo'
    ) AS rowset
    CROSS APPLY openjson (rowset.[supportingInfo.JSON]) with (
        [supportingInfo.id]            NVARCHAR(100)       '$.id',
        [supportingInfo.extension]     NVARCHAR(MAX)       '$.extension',
        [supportingInfo.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [supportingInfo.sequence]      bigint              '$.sequence',
        [supportingInfo.category.id]   NVARCHAR(100)       '$.category.id',
        [supportingInfo.category.extension] NVARCHAR(MAX)       '$.category.extension',
        [supportingInfo.category.coding] NVARCHAR(MAX)       '$.category.coding',
        [supportingInfo.category.text] NVARCHAR(4000)      '$.category.text',
        [supportingInfo.code.id]       NVARCHAR(100)       '$.code.id',
        [supportingInfo.code.extension] NVARCHAR(MAX)       '$.code.extension',
        [supportingInfo.code.coding]   NVARCHAR(MAX)       '$.code.coding',
        [supportingInfo.code.text]     NVARCHAR(4000)      '$.code.text',
        [supportingInfo.reason.id]     NVARCHAR(100)       '$.reason.id',
        [supportingInfo.reason.extension] NVARCHAR(MAX)       '$.reason.extension',
        [supportingInfo.reason.system] VARCHAR(256)        '$.reason.system',
        [supportingInfo.reason.version] NVARCHAR(100)       '$.reason.version',
        [supportingInfo.reason.code]   NVARCHAR(4000)      '$.reason.code',
        [supportingInfo.reason.display] NVARCHAR(4000)      '$.reason.display',
        [supportingInfo.reason.userSelected] bit                 '$.reason.userSelected',
        [supportingInfo.timing.date]   VARCHAR(64)         '$.timing.date',
        [supportingInfo.timing.period.id] NVARCHAR(100)       '$.timing.period.id',
        [supportingInfo.timing.period.extension] NVARCHAR(MAX)       '$.timing.period.extension',
        [supportingInfo.timing.period.start] VARCHAR(64)         '$.timing.period.start',
        [supportingInfo.timing.period.end] VARCHAR(64)         '$.timing.period.end',
        [supportingInfo.value.boolean] bit                 '$.value.boolean',
        [supportingInfo.value.string]  NVARCHAR(4000)      '$.value.string',
        [supportingInfo.value.quantity.id] NVARCHAR(100)       '$.value.quantity.id',
        [supportingInfo.value.quantity.extension] NVARCHAR(MAX)       '$.value.quantity.extension',
        [supportingInfo.value.quantity.value] float               '$.value.quantity.value',
        [supportingInfo.value.quantity.comparator] NVARCHAR(64)        '$.value.quantity.comparator',
        [supportingInfo.value.quantity.unit] NVARCHAR(100)       '$.value.quantity.unit',
        [supportingInfo.value.quantity.system] VARCHAR(256)        '$.value.quantity.system',
        [supportingInfo.value.quantity.code] NVARCHAR(4000)      '$.value.quantity.code',
        [supportingInfo.value.attachment.id] NVARCHAR(100)       '$.value.attachment.id',
        [supportingInfo.value.attachment.extension] NVARCHAR(MAX)       '$.value.attachment.extension',
        [supportingInfo.value.attachment.contentType] NVARCHAR(100)       '$.value.attachment.contentType',
        [supportingInfo.value.attachment.language] NVARCHAR(100)       '$.value.attachment.language',
        [supportingInfo.value.attachment.data] NVARCHAR(MAX)       '$.value.attachment.data',
        [supportingInfo.value.attachment.url] VARCHAR(256)        '$.value.attachment.url',
        [supportingInfo.value.attachment.size] NVARCHAR(MAX)       '$.value.attachment.size',
        [supportingInfo.value.attachment.hash] NVARCHAR(MAX)       '$.value.attachment.hash',
        [supportingInfo.value.attachment.title] NVARCHAR(4000)      '$.value.attachment.title',
        [supportingInfo.value.attachment.creation] VARCHAR(64)         '$.value.attachment.creation',
        [supportingInfo.value.attachment.height] bigint              '$.value.attachment.height',
        [supportingInfo.value.attachment.width] bigint              '$.value.attachment.width',
        [supportingInfo.value.attachment.frames] bigint              '$.value.attachment.frames',
        [supportingInfo.value.attachment.duration] float               '$.value.attachment.duration',
        [supportingInfo.value.attachment.pages] bigint              '$.value.attachment.pages',
        [supportingInfo.value.reference.id] NVARCHAR(100)       '$.value.reference.id',
        [supportingInfo.value.reference.extension] NVARCHAR(MAX)       '$.value.reference.extension',
        [supportingInfo.value.reference.reference] NVARCHAR(4000)      '$.value.reference.reference',
        [supportingInfo.value.reference.type] VARCHAR(256)        '$.value.reference.type',
        [supportingInfo.value.reference.identifier] NVARCHAR(MAX)       '$.value.reference.identifier',
        [supportingInfo.value.reference.display] NVARCHAR(4000)      '$.value.reference.display'
    ) j

GO

CREATE VIEW fhir.ExplanationOfBenefitDiagnosis AS
SELECT
    [id],
    [diagnosis.JSON],
    [diagnosis.id],
    [diagnosis.extension],
    [diagnosis.modifierExtension],
    [diagnosis.sequence],
    [diagnosis.type],
    [diagnosis.onAdmission.id],
    [diagnosis.onAdmission.extension],
    [diagnosis.onAdmission.coding],
    [diagnosis.onAdmission.text],
    [diagnosis.packageCode.id],
    [diagnosis.packageCode.extension],
    [diagnosis.packageCode.coding],
    [diagnosis.packageCode.text],
    [diagnosis.diagnosis.codeableConcept.id],
    [diagnosis.diagnosis.codeableConcept.extension],
    [diagnosis.diagnosis.codeableConcept.coding],
    [diagnosis.diagnosis.codeableConcept.text],
    [diagnosis.diagnosis.reference.id],
    [diagnosis.diagnosis.reference.extension],
    [diagnosis.diagnosis.reference.reference],
    [diagnosis.diagnosis.reference.type],
    [diagnosis.diagnosis.reference.identifier],
    [diagnosis.diagnosis.reference.display]
FROM openrowset (
        BULK 'ExplanationOfBenefit/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [diagnosis.JSON]  VARCHAR(MAX) '$.diagnosis'
    ) AS rowset
    CROSS APPLY openjson (rowset.[diagnosis.JSON]) with (
        [diagnosis.id]                 NVARCHAR(100)       '$.id',
        [diagnosis.extension]          NVARCHAR(MAX)       '$.extension',
        [diagnosis.modifierExtension]  NVARCHAR(MAX)       '$.modifierExtension',
        [diagnosis.sequence]           bigint              '$.sequence',
        [diagnosis.type]               NVARCHAR(MAX)       '$.type' AS JSON,
        [diagnosis.onAdmission.id]     NVARCHAR(100)       '$.onAdmission.id',
        [diagnosis.onAdmission.extension] NVARCHAR(MAX)       '$.onAdmission.extension',
        [diagnosis.onAdmission.coding] NVARCHAR(MAX)       '$.onAdmission.coding',
        [diagnosis.onAdmission.text]   NVARCHAR(4000)      '$.onAdmission.text',
        [diagnosis.packageCode.id]     NVARCHAR(100)       '$.packageCode.id',
        [diagnosis.packageCode.extension] NVARCHAR(MAX)       '$.packageCode.extension',
        [diagnosis.packageCode.coding] NVARCHAR(MAX)       '$.packageCode.coding',
        [diagnosis.packageCode.text]   NVARCHAR(4000)      '$.packageCode.text',
        [diagnosis.diagnosis.codeableConcept.id] NVARCHAR(100)       '$.diagnosis.codeableConcept.id',
        [diagnosis.diagnosis.codeableConcept.extension] NVARCHAR(MAX)       '$.diagnosis.codeableConcept.extension',
        [diagnosis.diagnosis.codeableConcept.coding] NVARCHAR(MAX)       '$.diagnosis.codeableConcept.coding',
        [diagnosis.diagnosis.codeableConcept.text] NVARCHAR(4000)      '$.diagnosis.codeableConcept.text',
        [diagnosis.diagnosis.reference.id] NVARCHAR(100)       '$.diagnosis.reference.id',
        [diagnosis.diagnosis.reference.extension] NVARCHAR(MAX)       '$.diagnosis.reference.extension',
        [diagnosis.diagnosis.reference.reference] NVARCHAR(4000)      '$.diagnosis.reference.reference',
        [diagnosis.diagnosis.reference.type] VARCHAR(256)        '$.diagnosis.reference.type',
        [diagnosis.diagnosis.reference.identifier] NVARCHAR(MAX)       '$.diagnosis.reference.identifier',
        [diagnosis.diagnosis.reference.display] NVARCHAR(4000)      '$.diagnosis.reference.display'
    ) j

GO

CREATE VIEW fhir.ExplanationOfBenefitProcedure AS
SELECT
    [id],
    [procedure.JSON],
    [procedure.id],
    [procedure.extension],
    [procedure.modifierExtension],
    [procedure.sequence],
    [procedure.type],
    [procedure.date],
    [procedure.udi],
    [procedure.procedure.codeableConcept.id],
    [procedure.procedure.codeableConcept.extension],
    [procedure.procedure.codeableConcept.coding],
    [procedure.procedure.codeableConcept.text],
    [procedure.procedure.reference.id],
    [procedure.procedure.reference.extension],
    [procedure.procedure.reference.reference],
    [procedure.procedure.reference.type],
    [procedure.procedure.reference.identifier],
    [procedure.procedure.reference.display]
FROM openrowset (
        BULK 'ExplanationOfBenefit/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [procedure.JSON]  VARCHAR(MAX) '$.procedure'
    ) AS rowset
    CROSS APPLY openjson (rowset.[procedure.JSON]) with (
        [procedure.id]                 NVARCHAR(100)       '$.id',
        [procedure.extension]          NVARCHAR(MAX)       '$.extension',
        [procedure.modifierExtension]  NVARCHAR(MAX)       '$.modifierExtension',
        [procedure.sequence]           bigint              '$.sequence',
        [procedure.type]               NVARCHAR(MAX)       '$.type' AS JSON,
        [procedure.date]               VARCHAR(64)         '$.date',
        [procedure.udi]                NVARCHAR(MAX)       '$.udi' AS JSON,
        [procedure.procedure.codeableConcept.id] NVARCHAR(100)       '$.procedure.codeableConcept.id',
        [procedure.procedure.codeableConcept.extension] NVARCHAR(MAX)       '$.procedure.codeableConcept.extension',
        [procedure.procedure.codeableConcept.coding] NVARCHAR(MAX)       '$.procedure.codeableConcept.coding',
        [procedure.procedure.codeableConcept.text] NVARCHAR(4000)      '$.procedure.codeableConcept.text',
        [procedure.procedure.reference.id] NVARCHAR(100)       '$.procedure.reference.id',
        [procedure.procedure.reference.extension] NVARCHAR(MAX)       '$.procedure.reference.extension',
        [procedure.procedure.reference.reference] NVARCHAR(4000)      '$.procedure.reference.reference',
        [procedure.procedure.reference.type] VARCHAR(256)        '$.procedure.reference.type',
        [procedure.procedure.reference.identifier] NVARCHAR(MAX)       '$.procedure.reference.identifier',
        [procedure.procedure.reference.display] NVARCHAR(4000)      '$.procedure.reference.display'
    ) j

GO

CREATE VIEW fhir.ExplanationOfBenefitInsurance AS
SELECT
    [id],
    [insurance.JSON],
    [insurance.id],
    [insurance.extension],
    [insurance.modifierExtension],
    [insurance.focal],
    [insurance.coverage.id],
    [insurance.coverage.extension],
    [insurance.coverage.reference],
    [insurance.coverage.type],
    [insurance.coverage.identifier],
    [insurance.coverage.display],
    [insurance.preAuthRef]
FROM openrowset (
        BULK 'ExplanationOfBenefit/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [insurance.JSON]  VARCHAR(MAX) '$.insurance'
    ) AS rowset
    CROSS APPLY openjson (rowset.[insurance.JSON]) with (
        [insurance.id]                 NVARCHAR(100)       '$.id',
        [insurance.extension]          NVARCHAR(MAX)       '$.extension',
        [insurance.modifierExtension]  NVARCHAR(MAX)       '$.modifierExtension',
        [insurance.focal]              bit                 '$.focal',
        [insurance.coverage.id]        NVARCHAR(100)       '$.coverage.id',
        [insurance.coverage.extension] NVARCHAR(MAX)       '$.coverage.extension',
        [insurance.coverage.reference] NVARCHAR(4000)      '$.coverage.reference',
        [insurance.coverage.type]      VARCHAR(256)        '$.coverage.type',
        [insurance.coverage.identifier] NVARCHAR(MAX)       '$.coverage.identifier',
        [insurance.coverage.display]   NVARCHAR(4000)      '$.coverage.display',
        [insurance.preAuthRef]         NVARCHAR(MAX)       '$.preAuthRef' AS JSON
    ) j

GO

CREATE VIEW fhir.ExplanationOfBenefitItem AS
SELECT
    [id],
    [item.JSON],
    [item.id],
    [item.extension],
    [item.modifierExtension],
    [item.sequence],
    [item.careTeamSequence],
    [item.diagnosisSequence],
    [item.procedureSequence],
    [item.informationSequence],
    [item.revenue.id],
    [item.revenue.extension],
    [item.revenue.coding],
    [item.revenue.text],
    [item.category.id],
    [item.category.extension],
    [item.category.coding],
    [item.category.text],
    [item.productOrService.id],
    [item.productOrService.extension],
    [item.productOrService.coding],
    [item.productOrService.text],
    [item.modifier],
    [item.programCode],
    [item.quantity.id],
    [item.quantity.extension],
    [item.quantity.value],
    [item.quantity.comparator],
    [item.quantity.unit],
    [item.quantity.system],
    [item.quantity.code],
    [item.unitPrice.id],
    [item.unitPrice.extension],
    [item.unitPrice.value],
    [item.unitPrice.currency],
    [item.factor],
    [item.net.id],
    [item.net.extension],
    [item.net.value],
    [item.net.currency],
    [item.udi],
    [item.bodySite.id],
    [item.bodySite.extension],
    [item.bodySite.coding],
    [item.bodySite.text],
    [item.subSite],
    [item.encounter],
    [item.noteNumber],
    [item.adjudication],
    [item.detail],
    [item.serviced.date],
    [item.serviced.period.id],
    [item.serviced.period.extension],
    [item.serviced.period.start],
    [item.serviced.period.end],
    [item.location.codeableConcept.id],
    [item.location.codeableConcept.extension],
    [item.location.codeableConcept.coding],
    [item.location.codeableConcept.text],
    [item.location.address.id],
    [item.location.address.extension],
    [item.location.address.use],
    [item.location.address.type],
    [item.location.address.text],
    [item.location.address.line],
    [item.location.address.city],
    [item.location.address.district],
    [item.location.address.state],
    [item.location.address.postalCode],
    [item.location.address.country],
    [item.location.address.period],
    [item.location.reference.id],
    [item.location.reference.extension],
    [item.location.reference.reference],
    [item.location.reference.type],
    [item.location.reference.identifier],
    [item.location.reference.display]
FROM openrowset (
        BULK 'ExplanationOfBenefit/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [item.JSON]  VARCHAR(MAX) '$.item'
    ) AS rowset
    CROSS APPLY openjson (rowset.[item.JSON]) with (
        [item.id]                      NVARCHAR(100)       '$.id',
        [item.extension]               NVARCHAR(MAX)       '$.extension',
        [item.modifierExtension]       NVARCHAR(MAX)       '$.modifierExtension',
        [item.sequence]                bigint              '$.sequence',
        [item.careTeamSequence]        NVARCHAR(MAX)       '$.careTeamSequence' AS JSON,
        [item.diagnosisSequence]       NVARCHAR(MAX)       '$.diagnosisSequence' AS JSON,
        [item.procedureSequence]       NVARCHAR(MAX)       '$.procedureSequence' AS JSON,
        [item.informationSequence]     NVARCHAR(MAX)       '$.informationSequence' AS JSON,
        [item.revenue.id]              NVARCHAR(100)       '$.revenue.id',
        [item.revenue.extension]       NVARCHAR(MAX)       '$.revenue.extension',
        [item.revenue.coding]          NVARCHAR(MAX)       '$.revenue.coding',
        [item.revenue.text]            NVARCHAR(4000)      '$.revenue.text',
        [item.category.id]             NVARCHAR(100)       '$.category.id',
        [item.category.extension]      NVARCHAR(MAX)       '$.category.extension',
        [item.category.coding]         NVARCHAR(MAX)       '$.category.coding',
        [item.category.text]           NVARCHAR(4000)      '$.category.text',
        [item.productOrService.id]     NVARCHAR(100)       '$.productOrService.id',
        [item.productOrService.extension] NVARCHAR(MAX)       '$.productOrService.extension',
        [item.productOrService.coding] NVARCHAR(MAX)       '$.productOrService.coding',
        [item.productOrService.text]   NVARCHAR(4000)      '$.productOrService.text',
        [item.modifier]                NVARCHAR(MAX)       '$.modifier' AS JSON,
        [item.programCode]             NVARCHAR(MAX)       '$.programCode' AS JSON,
        [item.quantity.id]             NVARCHAR(100)       '$.quantity.id',
        [item.quantity.extension]      NVARCHAR(MAX)       '$.quantity.extension',
        [item.quantity.value]          float               '$.quantity.value',
        [item.quantity.comparator]     NVARCHAR(64)        '$.quantity.comparator',
        [item.quantity.unit]           NVARCHAR(100)       '$.quantity.unit',
        [item.quantity.system]         VARCHAR(256)        '$.quantity.system',
        [item.quantity.code]           NVARCHAR(4000)      '$.quantity.code',
        [item.unitPrice.id]            NVARCHAR(100)       '$.unitPrice.id',
        [item.unitPrice.extension]     NVARCHAR(MAX)       '$.unitPrice.extension',
        [item.unitPrice.value]         float               '$.unitPrice.value',
        [item.unitPrice.currency]      NVARCHAR(100)       '$.unitPrice.currency',
        [item.factor]                  float               '$.factor',
        [item.net.id]                  NVARCHAR(100)       '$.net.id',
        [item.net.extension]           NVARCHAR(MAX)       '$.net.extension',
        [item.net.value]               float               '$.net.value',
        [item.net.currency]            NVARCHAR(100)       '$.net.currency',
        [item.udi]                     NVARCHAR(MAX)       '$.udi' AS JSON,
        [item.bodySite.id]             NVARCHAR(100)       '$.bodySite.id',
        [item.bodySite.extension]      NVARCHAR(MAX)       '$.bodySite.extension',
        [item.bodySite.coding]         NVARCHAR(MAX)       '$.bodySite.coding',
        [item.bodySite.text]           NVARCHAR(4000)      '$.bodySite.text',
        [item.subSite]                 NVARCHAR(MAX)       '$.subSite' AS JSON,
        [item.encounter]               NVARCHAR(MAX)       '$.encounter' AS JSON,
        [item.noteNumber]              NVARCHAR(MAX)       '$.noteNumber' AS JSON,
        [item.adjudication]            NVARCHAR(MAX)       '$.adjudication' AS JSON,
        [item.detail]                  NVARCHAR(MAX)       '$.detail' AS JSON,
        [item.serviced.date]           VARCHAR(64)         '$.serviced.date',
        [item.serviced.period.id]      NVARCHAR(100)       '$.serviced.period.id',
        [item.serviced.period.extension] NVARCHAR(MAX)       '$.serviced.period.extension',
        [item.serviced.period.start]   VARCHAR(64)         '$.serviced.period.start',
        [item.serviced.period.end]     VARCHAR(64)         '$.serviced.period.end',
        [item.location.codeableConcept.id] NVARCHAR(100)       '$.location.codeableConcept.id',
        [item.location.codeableConcept.extension] NVARCHAR(MAX)       '$.location.codeableConcept.extension',
        [item.location.codeableConcept.coding] NVARCHAR(MAX)       '$.location.codeableConcept.coding',
        [item.location.codeableConcept.text] NVARCHAR(4000)      '$.location.codeableConcept.text',
        [item.location.address.id]     NVARCHAR(100)       '$.location.address.id',
        [item.location.address.extension] NVARCHAR(MAX)       '$.location.address.extension',
        [item.location.address.use]    NVARCHAR(64)        '$.location.address.use',
        [item.location.address.type]   NVARCHAR(64)        '$.location.address.type',
        [item.location.address.text]   NVARCHAR(4000)      '$.location.address.text',
        [item.location.address.line]   NVARCHAR(MAX)       '$.location.address.line',
        [item.location.address.city]   NVARCHAR(500)       '$.location.address.city',
        [item.location.address.district] NVARCHAR(500)       '$.location.address.district',
        [item.location.address.state]  NVARCHAR(500)       '$.location.address.state',
        [item.location.address.postalCode] NVARCHAR(100)       '$.location.address.postalCode',
        [item.location.address.country] NVARCHAR(500)       '$.location.address.country',
        [item.location.address.period] NVARCHAR(MAX)       '$.location.address.period',
        [item.location.reference.id]   NVARCHAR(100)       '$.location.reference.id',
        [item.location.reference.extension] NVARCHAR(MAX)       '$.location.reference.extension',
        [item.location.reference.reference] NVARCHAR(4000)      '$.location.reference.reference',
        [item.location.reference.type] VARCHAR(256)        '$.location.reference.type',
        [item.location.reference.identifier] NVARCHAR(MAX)       '$.location.reference.identifier',
        [item.location.reference.display] NVARCHAR(4000)      '$.location.reference.display'
    ) j

GO

CREATE VIEW fhir.ExplanationOfBenefitAddItem AS
SELECT
    [id],
    [addItem.JSON],
    [addItem.id],
    [addItem.extension],
    [addItem.modifierExtension],
    [addItem.itemSequence],
    [addItem.detailSequence],
    [addItem.subDetailSequence],
    [addItem.provider],
    [addItem.productOrService.id],
    [addItem.productOrService.extension],
    [addItem.productOrService.coding],
    [addItem.productOrService.text],
    [addItem.modifier],
    [addItem.programCode],
    [addItem.quantity.id],
    [addItem.quantity.extension],
    [addItem.quantity.value],
    [addItem.quantity.comparator],
    [addItem.quantity.unit],
    [addItem.quantity.system],
    [addItem.quantity.code],
    [addItem.unitPrice.id],
    [addItem.unitPrice.extension],
    [addItem.unitPrice.value],
    [addItem.unitPrice.currency],
    [addItem.factor],
    [addItem.net.id],
    [addItem.net.extension],
    [addItem.net.value],
    [addItem.net.currency],
    [addItem.bodySite.id],
    [addItem.bodySite.extension],
    [addItem.bodySite.coding],
    [addItem.bodySite.text],
    [addItem.subSite],
    [addItem.noteNumber],
    [addItem.adjudication],
    [addItem.detail],
    [addItem.serviced.date],
    [addItem.serviced.period.id],
    [addItem.serviced.period.extension],
    [addItem.serviced.period.start],
    [addItem.serviced.period.end],
    [addItem.location.codeableConcept.id],
    [addItem.location.codeableConcept.extension],
    [addItem.location.codeableConcept.coding],
    [addItem.location.codeableConcept.text],
    [addItem.location.address.id],
    [addItem.location.address.extension],
    [addItem.location.address.use],
    [addItem.location.address.type],
    [addItem.location.address.text],
    [addItem.location.address.line],
    [addItem.location.address.city],
    [addItem.location.address.district],
    [addItem.location.address.state],
    [addItem.location.address.postalCode],
    [addItem.location.address.country],
    [addItem.location.address.period],
    [addItem.location.reference.id],
    [addItem.location.reference.extension],
    [addItem.location.reference.reference],
    [addItem.location.reference.type],
    [addItem.location.reference.identifier],
    [addItem.location.reference.display]
FROM openrowset (
        BULK 'ExplanationOfBenefit/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [addItem.JSON]  VARCHAR(MAX) '$.addItem'
    ) AS rowset
    CROSS APPLY openjson (rowset.[addItem.JSON]) with (
        [addItem.id]                   NVARCHAR(100)       '$.id',
        [addItem.extension]            NVARCHAR(MAX)       '$.extension',
        [addItem.modifierExtension]    NVARCHAR(MAX)       '$.modifierExtension',
        [addItem.itemSequence]         NVARCHAR(MAX)       '$.itemSequence' AS JSON,
        [addItem.detailSequence]       NVARCHAR(MAX)       '$.detailSequence' AS JSON,
        [addItem.subDetailSequence]    NVARCHAR(MAX)       '$.subDetailSequence' AS JSON,
        [addItem.provider]             NVARCHAR(MAX)       '$.provider' AS JSON,
        [addItem.productOrService.id]  NVARCHAR(100)       '$.productOrService.id',
        [addItem.productOrService.extension] NVARCHAR(MAX)       '$.productOrService.extension',
        [addItem.productOrService.coding] NVARCHAR(MAX)       '$.productOrService.coding',
        [addItem.productOrService.text] NVARCHAR(4000)      '$.productOrService.text',
        [addItem.modifier]             NVARCHAR(MAX)       '$.modifier' AS JSON,
        [addItem.programCode]          NVARCHAR(MAX)       '$.programCode' AS JSON,
        [addItem.quantity.id]          NVARCHAR(100)       '$.quantity.id',
        [addItem.quantity.extension]   NVARCHAR(MAX)       '$.quantity.extension',
        [addItem.quantity.value]       float               '$.quantity.value',
        [addItem.quantity.comparator]  NVARCHAR(64)        '$.quantity.comparator',
        [addItem.quantity.unit]        NVARCHAR(100)       '$.quantity.unit',
        [addItem.quantity.system]      VARCHAR(256)        '$.quantity.system',
        [addItem.quantity.code]        NVARCHAR(4000)      '$.quantity.code',
        [addItem.unitPrice.id]         NVARCHAR(100)       '$.unitPrice.id',
        [addItem.unitPrice.extension]  NVARCHAR(MAX)       '$.unitPrice.extension',
        [addItem.unitPrice.value]      float               '$.unitPrice.value',
        [addItem.unitPrice.currency]   NVARCHAR(100)       '$.unitPrice.currency',
        [addItem.factor]               float               '$.factor',
        [addItem.net.id]               NVARCHAR(100)       '$.net.id',
        [addItem.net.extension]        NVARCHAR(MAX)       '$.net.extension',
        [addItem.net.value]            float               '$.net.value',
        [addItem.net.currency]         NVARCHAR(100)       '$.net.currency',
        [addItem.bodySite.id]          NVARCHAR(100)       '$.bodySite.id',
        [addItem.bodySite.extension]   NVARCHAR(MAX)       '$.bodySite.extension',
        [addItem.bodySite.coding]      NVARCHAR(MAX)       '$.bodySite.coding',
        [addItem.bodySite.text]        NVARCHAR(4000)      '$.bodySite.text',
        [addItem.subSite]              NVARCHAR(MAX)       '$.subSite' AS JSON,
        [addItem.noteNumber]           NVARCHAR(MAX)       '$.noteNumber' AS JSON,
        [addItem.adjudication]         NVARCHAR(MAX)       '$.adjudication' AS JSON,
        [addItem.detail]               NVARCHAR(MAX)       '$.detail' AS JSON,
        [addItem.serviced.date]        VARCHAR(64)         '$.serviced.date',
        [addItem.serviced.period.id]   NVARCHAR(100)       '$.serviced.period.id',
        [addItem.serviced.period.extension] NVARCHAR(MAX)       '$.serviced.period.extension',
        [addItem.serviced.period.start] VARCHAR(64)         '$.serviced.period.start',
        [addItem.serviced.period.end]  VARCHAR(64)         '$.serviced.period.end',
        [addItem.location.codeableConcept.id] NVARCHAR(100)       '$.location.codeableConcept.id',
        [addItem.location.codeableConcept.extension] NVARCHAR(MAX)       '$.location.codeableConcept.extension',
        [addItem.location.codeableConcept.coding] NVARCHAR(MAX)       '$.location.codeableConcept.coding',
        [addItem.location.codeableConcept.text] NVARCHAR(4000)      '$.location.codeableConcept.text',
        [addItem.location.address.id]  NVARCHAR(100)       '$.location.address.id',
        [addItem.location.address.extension] NVARCHAR(MAX)       '$.location.address.extension',
        [addItem.location.address.use] NVARCHAR(64)        '$.location.address.use',
        [addItem.location.address.type] NVARCHAR(64)        '$.location.address.type',
        [addItem.location.address.text] NVARCHAR(4000)      '$.location.address.text',
        [addItem.location.address.line] NVARCHAR(MAX)       '$.location.address.line',
        [addItem.location.address.city] NVARCHAR(500)       '$.location.address.city',
        [addItem.location.address.district] NVARCHAR(500)       '$.location.address.district',
        [addItem.location.address.state] NVARCHAR(500)       '$.location.address.state',
        [addItem.location.address.postalCode] NVARCHAR(100)       '$.location.address.postalCode',
        [addItem.location.address.country] NVARCHAR(500)       '$.location.address.country',
        [addItem.location.address.period] NVARCHAR(MAX)       '$.location.address.period',
        [addItem.location.reference.id] NVARCHAR(100)       '$.location.reference.id',
        [addItem.location.reference.extension] NVARCHAR(MAX)       '$.location.reference.extension',
        [addItem.location.reference.reference] NVARCHAR(4000)      '$.location.reference.reference',
        [addItem.location.reference.type] VARCHAR(256)        '$.location.reference.type',
        [addItem.location.reference.identifier] NVARCHAR(MAX)       '$.location.reference.identifier',
        [addItem.location.reference.display] NVARCHAR(4000)      '$.location.reference.display'
    ) j

GO

CREATE VIEW fhir.ExplanationOfBenefitAdjudication AS
SELECT
    [id],
    [adjudication.JSON],
    [adjudication.id],
    [adjudication.extension],
    [adjudication.modifierExtension],
    [adjudication.category.id],
    [adjudication.category.extension],
    [adjudication.category.coding],
    [adjudication.category.text],
    [adjudication.reason.id],
    [adjudication.reason.extension],
    [adjudication.reason.coding],
    [adjudication.reason.text],
    [adjudication.amount.id],
    [adjudication.amount.extension],
    [adjudication.amount.value],
    [adjudication.amount.currency],
    [adjudication.value]
FROM openrowset (
        BULK 'ExplanationOfBenefit/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [adjudication.JSON]  VARCHAR(MAX) '$.adjudication'
    ) AS rowset
    CROSS APPLY openjson (rowset.[adjudication.JSON]) with (
        [adjudication.id]              NVARCHAR(100)       '$.id',
        [adjudication.extension]       NVARCHAR(MAX)       '$.extension',
        [adjudication.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [adjudication.category.id]     NVARCHAR(100)       '$.category.id',
        [adjudication.category.extension] NVARCHAR(MAX)       '$.category.extension',
        [adjudication.category.coding] NVARCHAR(MAX)       '$.category.coding',
        [adjudication.category.text]   NVARCHAR(4000)      '$.category.text',
        [adjudication.reason.id]       NVARCHAR(100)       '$.reason.id',
        [adjudication.reason.extension] NVARCHAR(MAX)       '$.reason.extension',
        [adjudication.reason.coding]   NVARCHAR(MAX)       '$.reason.coding',
        [adjudication.reason.text]     NVARCHAR(4000)      '$.reason.text',
        [adjudication.amount.id]       NVARCHAR(100)       '$.amount.id',
        [adjudication.amount.extension] NVARCHAR(MAX)       '$.amount.extension',
        [adjudication.amount.value]    float               '$.amount.value',
        [adjudication.amount.currency] NVARCHAR(100)       '$.amount.currency',
        [adjudication.value]           float               '$.value'
    ) j

GO

CREATE VIEW fhir.ExplanationOfBenefitTotal AS
SELECT
    [id],
    [total.JSON],
    [total.id],
    [total.extension],
    [total.modifierExtension],
    [total.category.id],
    [total.category.extension],
    [total.category.coding],
    [total.category.text],
    [total.amount.id],
    [total.amount.extension],
    [total.amount.value],
    [total.amount.currency]
FROM openrowset (
        BULK 'ExplanationOfBenefit/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [total.JSON]  VARCHAR(MAX) '$.total'
    ) AS rowset
    CROSS APPLY openjson (rowset.[total.JSON]) with (
        [total.id]                     NVARCHAR(100)       '$.id',
        [total.extension]              NVARCHAR(MAX)       '$.extension',
        [total.modifierExtension]      NVARCHAR(MAX)       '$.modifierExtension',
        [total.category.id]            NVARCHAR(100)       '$.category.id',
        [total.category.extension]     NVARCHAR(MAX)       '$.category.extension',
        [total.category.coding]        NVARCHAR(MAX)       '$.category.coding',
        [total.category.text]          NVARCHAR(4000)      '$.category.text',
        [total.amount.id]              NVARCHAR(100)       '$.amount.id',
        [total.amount.extension]       NVARCHAR(MAX)       '$.amount.extension',
        [total.amount.value]           float               '$.amount.value',
        [total.amount.currency]        NVARCHAR(100)       '$.amount.currency'
    ) j

GO

CREATE VIEW fhir.ExplanationOfBenefitProcessNote AS
SELECT
    [id],
    [processNote.JSON],
    [processNote.id],
    [processNote.extension],
    [processNote.modifierExtension],
    [processNote.number],
    [processNote.type],
    [processNote.text],
    [processNote.language.id],
    [processNote.language.extension],
    [processNote.language.coding],
    [processNote.language.text]
FROM openrowset (
        BULK 'ExplanationOfBenefit/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [processNote.JSON]  VARCHAR(MAX) '$.processNote'
    ) AS rowset
    CROSS APPLY openjson (rowset.[processNote.JSON]) with (
        [processNote.id]               NVARCHAR(100)       '$.id',
        [processNote.extension]        NVARCHAR(MAX)       '$.extension',
        [processNote.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [processNote.number]           bigint              '$.number',
        [processNote.type]             NVARCHAR(100)       '$.type',
        [processNote.text]             NVARCHAR(4000)      '$.text',
        [processNote.language.id]      NVARCHAR(100)       '$.language.id',
        [processNote.language.extension] NVARCHAR(MAX)       '$.language.extension',
        [processNote.language.coding]  NVARCHAR(MAX)       '$.language.coding',
        [processNote.language.text]    NVARCHAR(4000)      '$.language.text'
    ) j

GO

CREATE VIEW fhir.ExplanationOfBenefitBenefitBalance AS
SELECT
    [id],
    [benefitBalance.JSON],
    [benefitBalance.id],
    [benefitBalance.extension],
    [benefitBalance.modifierExtension],
    [benefitBalance.category.id],
    [benefitBalance.category.extension],
    [benefitBalance.category.coding],
    [benefitBalance.category.text],
    [benefitBalance.excluded],
    [benefitBalance.name],
    [benefitBalance.description],
    [benefitBalance.network.id],
    [benefitBalance.network.extension],
    [benefitBalance.network.coding],
    [benefitBalance.network.text],
    [benefitBalance.unit.id],
    [benefitBalance.unit.extension],
    [benefitBalance.unit.coding],
    [benefitBalance.unit.text],
    [benefitBalance.term.id],
    [benefitBalance.term.extension],
    [benefitBalance.term.coding],
    [benefitBalance.term.text],
    [benefitBalance.financial]
FROM openrowset (
        BULK 'ExplanationOfBenefit/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [benefitBalance.JSON]  VARCHAR(MAX) '$.benefitBalance'
    ) AS rowset
    CROSS APPLY openjson (rowset.[benefitBalance.JSON]) with (
        [benefitBalance.id]            NVARCHAR(100)       '$.id',
        [benefitBalance.extension]     NVARCHAR(MAX)       '$.extension',
        [benefitBalance.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [benefitBalance.category.id]   NVARCHAR(100)       '$.category.id',
        [benefitBalance.category.extension] NVARCHAR(MAX)       '$.category.extension',
        [benefitBalance.category.coding] NVARCHAR(MAX)       '$.category.coding',
        [benefitBalance.category.text] NVARCHAR(4000)      '$.category.text',
        [benefitBalance.excluded]      bit                 '$.excluded',
        [benefitBalance.name]          NVARCHAR(500)       '$.name',
        [benefitBalance.description]   NVARCHAR(4000)      '$.description',
        [benefitBalance.network.id]    NVARCHAR(100)       '$.network.id',
        [benefitBalance.network.extension] NVARCHAR(MAX)       '$.network.extension',
        [benefitBalance.network.coding] NVARCHAR(MAX)       '$.network.coding',
        [benefitBalance.network.text]  NVARCHAR(4000)      '$.network.text',
        [benefitBalance.unit.id]       NVARCHAR(100)       '$.unit.id',
        [benefitBalance.unit.extension] NVARCHAR(MAX)       '$.unit.extension',
        [benefitBalance.unit.coding]   NVARCHAR(MAX)       '$.unit.coding',
        [benefitBalance.unit.text]     NVARCHAR(4000)      '$.unit.text',
        [benefitBalance.term.id]       NVARCHAR(100)       '$.term.id',
        [benefitBalance.term.extension] NVARCHAR(MAX)       '$.term.extension',
        [benefitBalance.term.coding]   NVARCHAR(MAX)       '$.term.coding',
        [benefitBalance.term.text]     NVARCHAR(4000)      '$.term.text',
        [benefitBalance.financial]     NVARCHAR(MAX)       '$.financial' AS JSON
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[FamilyMemberHistory] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [instantiatesCanonical] VARCHAR(MAX),
    [instantiatesUri] VARCHAR(MAX),
    [status] NVARCHAR(100),
    [dataAbsentReason.id] NVARCHAR(100),
    [dataAbsentReason.extension] NVARCHAR(MAX),
    [dataAbsentReason.coding] VARCHAR(MAX),
    [dataAbsentReason.text] NVARCHAR(4000),
    [patient.id] NVARCHAR(100),
    [patient.extension] NVARCHAR(MAX),
    [patient.reference] NVARCHAR(4000),
    [patient.type] VARCHAR(256),
    [patient.identifier.id] NVARCHAR(100),
    [patient.identifier.extension] NVARCHAR(MAX),
    [patient.identifier.use] NVARCHAR(64),
    [patient.identifier.type] NVARCHAR(MAX),
    [patient.identifier.system] VARCHAR(256),
    [patient.identifier.value] NVARCHAR(4000),
    [patient.identifier.period] NVARCHAR(MAX),
    [patient.identifier.assigner] NVARCHAR(MAX),
    [patient.display] NVARCHAR(4000),
    [date] VARCHAR(64),
    [name] NVARCHAR(500),
    [relationship.id] NVARCHAR(100),
    [relationship.extension] NVARCHAR(MAX),
    [relationship.coding] VARCHAR(MAX),
    [relationship.text] NVARCHAR(4000),
    [sex.id] NVARCHAR(100),
    [sex.extension] NVARCHAR(MAX),
    [sex.coding] VARCHAR(MAX),
    [sex.text] NVARCHAR(4000),
    [estimatedAge] bit,
    [reason] VARCHAR(MAX),
    [note] VARCHAR(MAX),
    [condition] VARCHAR(MAX),
    [procedure] VARCHAR(MAX),
    [born.period.id] NVARCHAR(100),
    [born.period.extension] NVARCHAR(MAX),
    [born.period.start] VARCHAR(64),
    [born.period.end] VARCHAR(64),
    [born.date] VARCHAR(64),
    [born.string] NVARCHAR(4000),
    [age.age.id] NVARCHAR(100),
    [age.age.extension] NVARCHAR(MAX),
    [age.age.value] float,
    [age.age.comparator] NVARCHAR(64),
    [age.age.unit] NVARCHAR(100),
    [age.age.system] VARCHAR(256),
    [age.age.code] NVARCHAR(4000),
    [age.range.id] NVARCHAR(100),
    [age.range.extension] NVARCHAR(MAX),
    [age.range.low.id] NVARCHAR(100),
    [age.range.low.extension] NVARCHAR(MAX),
    [age.range.low.value] float,
    [age.range.low.comparator] NVARCHAR(64),
    [age.range.low.unit] NVARCHAR(100),
    [age.range.low.system] VARCHAR(256),
    [age.range.low.code] NVARCHAR(4000),
    [age.range.high.id] NVARCHAR(100),
    [age.range.high.extension] NVARCHAR(MAX),
    [age.range.high.value] float,
    [age.range.high.comparator] NVARCHAR(64),
    [age.range.high.unit] NVARCHAR(100),
    [age.range.high.system] VARCHAR(256),
    [age.range.high.code] NVARCHAR(4000),
    [age.string] NVARCHAR(4000),
    [deceased.boolean] bit,
    [deceased.age.id] NVARCHAR(100),
    [deceased.age.extension] NVARCHAR(MAX),
    [deceased.age.value] float,
    [deceased.age.comparator] NVARCHAR(64),
    [deceased.age.unit] NVARCHAR(100),
    [deceased.age.system] VARCHAR(256),
    [deceased.age.code] NVARCHAR(4000),
    [deceased.range.id] NVARCHAR(100),
    [deceased.range.extension] NVARCHAR(MAX),
    [deceased.range.low.id] NVARCHAR(100),
    [deceased.range.low.extension] NVARCHAR(MAX),
    [deceased.range.low.value] float,
    [deceased.range.low.comparator] NVARCHAR(64),
    [deceased.range.low.unit] NVARCHAR(100),
    [deceased.range.low.system] VARCHAR(256),
    [deceased.range.low.code] NVARCHAR(4000),
    [deceased.range.high.id] NVARCHAR(100),
    [deceased.range.high.extension] NVARCHAR(MAX),
    [deceased.range.high.value] float,
    [deceased.range.high.comparator] NVARCHAR(64),
    [deceased.range.high.unit] NVARCHAR(100),
    [deceased.range.high.system] VARCHAR(256),
    [deceased.range.high.code] NVARCHAR(4000),
    [deceased.date] VARCHAR(64),
    [deceased.string] NVARCHAR(4000),
) WITH (
    LOCATION='/FamilyMemberHistory/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.FamilyMemberHistoryIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'FamilyMemberHistory/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.FamilyMemberHistoryInstantiatesCanonical AS
SELECT
    [id],
    [instantiatesCanonical.JSON],
    [instantiatesCanonical]
FROM openrowset (
        BULK 'FamilyMemberHistory/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [instantiatesCanonical.JSON]  VARCHAR(MAX) '$.instantiatesCanonical'
    ) AS rowset
    CROSS APPLY openjson (rowset.[instantiatesCanonical.JSON]) with (
        [instantiatesCanonical]        NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.FamilyMemberHistoryInstantiatesUri AS
SELECT
    [id],
    [instantiatesUri.JSON],
    [instantiatesUri]
FROM openrowset (
        BULK 'FamilyMemberHistory/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [instantiatesUri.JSON]  VARCHAR(MAX) '$.instantiatesUri'
    ) AS rowset
    CROSS APPLY openjson (rowset.[instantiatesUri.JSON]) with (
        [instantiatesUri]              NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.FamilyMemberHistoryReason AS
SELECT
    [id],
    [reason.JSON],
    [reason.id],
    [reason.extension],
    [reason.concept.id],
    [reason.concept.extension],
    [reason.concept.coding],
    [reason.concept.text],
    [reason.reference.id],
    [reason.reference.extension],
    [reason.reference.reference],
    [reason.reference.type],
    [reason.reference.identifier],
    [reason.reference.display]
FROM openrowset (
        BULK 'FamilyMemberHistory/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [reason.JSON]  VARCHAR(MAX) '$.reason'
    ) AS rowset
    CROSS APPLY openjson (rowset.[reason.JSON]) with (
        [reason.id]                    NVARCHAR(100)       '$.id',
        [reason.extension]             NVARCHAR(MAX)       '$.extension',
        [reason.concept.id]            NVARCHAR(100)       '$.concept.id',
        [reason.concept.extension]     NVARCHAR(MAX)       '$.concept.extension',
        [reason.concept.coding]        NVARCHAR(MAX)       '$.concept.coding',
        [reason.concept.text]          NVARCHAR(4000)      '$.concept.text',
        [reason.reference.id]          NVARCHAR(100)       '$.reference.id',
        [reason.reference.extension]   NVARCHAR(MAX)       '$.reference.extension',
        [reason.reference.reference]   NVARCHAR(4000)      '$.reference.reference',
        [reason.reference.type]        VARCHAR(256)        '$.reference.type',
        [reason.reference.identifier]  NVARCHAR(MAX)       '$.reference.identifier',
        [reason.reference.display]     NVARCHAR(4000)      '$.reference.display'
    ) j

GO

CREATE VIEW fhir.FamilyMemberHistoryNote AS
SELECT
    [id],
    [note.JSON],
    [note.id],
    [note.extension],
    [note.time],
    [note.text],
    [note.author.reference.id],
    [note.author.reference.extension],
    [note.author.reference.reference],
    [note.author.reference.type],
    [note.author.reference.identifier],
    [note.author.reference.display],
    [note.author.string]
FROM openrowset (
        BULK 'FamilyMemberHistory/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [note.JSON]  VARCHAR(MAX) '$.note'
    ) AS rowset
    CROSS APPLY openjson (rowset.[note.JSON]) with (
        [note.id]                      NVARCHAR(100)       '$.id',
        [note.extension]               NVARCHAR(MAX)       '$.extension',
        [note.time]                    VARCHAR(64)         '$.time',
        [note.text]                    NVARCHAR(MAX)       '$.text',
        [note.author.reference.id]     NVARCHAR(100)       '$.author.reference.id',
        [note.author.reference.extension] NVARCHAR(MAX)       '$.author.reference.extension',
        [note.author.reference.reference] NVARCHAR(4000)      '$.author.reference.reference',
        [note.author.reference.type]   VARCHAR(256)        '$.author.reference.type',
        [note.author.reference.identifier] NVARCHAR(MAX)       '$.author.reference.identifier',
        [note.author.reference.display] NVARCHAR(4000)      '$.author.reference.display',
        [note.author.string]           NVARCHAR(4000)      '$.author.string'
    ) j

GO

CREATE VIEW fhir.FamilyMemberHistoryCondition AS
SELECT
    [id],
    [condition.JSON],
    [condition.id],
    [condition.extension],
    [condition.modifierExtension],
    [condition.code.id],
    [condition.code.extension],
    [condition.code.coding],
    [condition.code.text],
    [condition.outcome.id],
    [condition.outcome.extension],
    [condition.outcome.coding],
    [condition.outcome.text],
    [condition.contributedToDeath],
    [condition.note],
    [condition.onset.age.id],
    [condition.onset.age.extension],
    [condition.onset.age.value],
    [condition.onset.age.comparator],
    [condition.onset.age.unit],
    [condition.onset.age.system],
    [condition.onset.age.code],
    [condition.onset.range.id],
    [condition.onset.range.extension],
    [condition.onset.range.low],
    [condition.onset.range.high],
    [condition.onset.period.id],
    [condition.onset.period.extension],
    [condition.onset.period.start],
    [condition.onset.period.end],
    [condition.onset.string]
FROM openrowset (
        BULK 'FamilyMemberHistory/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [condition.JSON]  VARCHAR(MAX) '$.condition'
    ) AS rowset
    CROSS APPLY openjson (rowset.[condition.JSON]) with (
        [condition.id]                 NVARCHAR(100)       '$.id',
        [condition.extension]          NVARCHAR(MAX)       '$.extension',
        [condition.modifierExtension]  NVARCHAR(MAX)       '$.modifierExtension',
        [condition.code.id]            NVARCHAR(100)       '$.code.id',
        [condition.code.extension]     NVARCHAR(MAX)       '$.code.extension',
        [condition.code.coding]        NVARCHAR(MAX)       '$.code.coding',
        [condition.code.text]          NVARCHAR(4000)      '$.code.text',
        [condition.outcome.id]         NVARCHAR(100)       '$.outcome.id',
        [condition.outcome.extension]  NVARCHAR(MAX)       '$.outcome.extension',
        [condition.outcome.coding]     NVARCHAR(MAX)       '$.outcome.coding',
        [condition.outcome.text]       NVARCHAR(4000)      '$.outcome.text',
        [condition.contributedToDeath] bit                 '$.contributedToDeath',
        [condition.note]               NVARCHAR(MAX)       '$.note' AS JSON,
        [condition.onset.age.id]       NVARCHAR(100)       '$.onset.age.id',
        [condition.onset.age.extension] NVARCHAR(MAX)       '$.onset.age.extension',
        [condition.onset.age.value]    float               '$.onset.age.value',
        [condition.onset.age.comparator] NVARCHAR(64)        '$.onset.age.comparator',
        [condition.onset.age.unit]     NVARCHAR(100)       '$.onset.age.unit',
        [condition.onset.age.system]   VARCHAR(256)        '$.onset.age.system',
        [condition.onset.age.code]     NVARCHAR(4000)      '$.onset.age.code',
        [condition.onset.range.id]     NVARCHAR(100)       '$.onset.range.id',
        [condition.onset.range.extension] NVARCHAR(MAX)       '$.onset.range.extension',
        [condition.onset.range.low]    NVARCHAR(MAX)       '$.onset.range.low',
        [condition.onset.range.high]   NVARCHAR(MAX)       '$.onset.range.high',
        [condition.onset.period.id]    NVARCHAR(100)       '$.onset.period.id',
        [condition.onset.period.extension] NVARCHAR(MAX)       '$.onset.period.extension',
        [condition.onset.period.start] VARCHAR(64)         '$.onset.period.start',
        [condition.onset.period.end]   VARCHAR(64)         '$.onset.period.end',
        [condition.onset.string]       NVARCHAR(4000)      '$.onset.string'
    ) j

GO

CREATE VIEW fhir.FamilyMemberHistoryProcedure AS
SELECT
    [id],
    [procedure.JSON],
    [procedure.id],
    [procedure.extension],
    [procedure.modifierExtension],
    [procedure.code.id],
    [procedure.code.extension],
    [procedure.code.coding],
    [procedure.code.text],
    [procedure.outcome.id],
    [procedure.outcome.extension],
    [procedure.outcome.coding],
    [procedure.outcome.text],
    [procedure.contributedToDeath],
    [procedure.note],
    [procedure.performed.age.id],
    [procedure.performed.age.extension],
    [procedure.performed.age.value],
    [procedure.performed.age.comparator],
    [procedure.performed.age.unit],
    [procedure.performed.age.system],
    [procedure.performed.age.code],
    [procedure.performed.range.id],
    [procedure.performed.range.extension],
    [procedure.performed.range.low],
    [procedure.performed.range.high],
    [procedure.performed.period.id],
    [procedure.performed.period.extension],
    [procedure.performed.period.start],
    [procedure.performed.period.end],
    [procedure.performed.string],
    [procedure.performed.dateTime]
FROM openrowset (
        BULK 'FamilyMemberHistory/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [procedure.JSON]  VARCHAR(MAX) '$.procedure'
    ) AS rowset
    CROSS APPLY openjson (rowset.[procedure.JSON]) with (
        [procedure.id]                 NVARCHAR(100)       '$.id',
        [procedure.extension]          NVARCHAR(MAX)       '$.extension',
        [procedure.modifierExtension]  NVARCHAR(MAX)       '$.modifierExtension',
        [procedure.code.id]            NVARCHAR(100)       '$.code.id',
        [procedure.code.extension]     NVARCHAR(MAX)       '$.code.extension',
        [procedure.code.coding]        NVARCHAR(MAX)       '$.code.coding',
        [procedure.code.text]          NVARCHAR(4000)      '$.code.text',
        [procedure.outcome.id]         NVARCHAR(100)       '$.outcome.id',
        [procedure.outcome.extension]  NVARCHAR(MAX)       '$.outcome.extension',
        [procedure.outcome.coding]     NVARCHAR(MAX)       '$.outcome.coding',
        [procedure.outcome.text]       NVARCHAR(4000)      '$.outcome.text',
        [procedure.contributedToDeath] bit                 '$.contributedToDeath',
        [procedure.note]               NVARCHAR(MAX)       '$.note' AS JSON,
        [procedure.performed.age.id]   NVARCHAR(100)       '$.performed.age.id',
        [procedure.performed.age.extension] NVARCHAR(MAX)       '$.performed.age.extension',
        [procedure.performed.age.value] float               '$.performed.age.value',
        [procedure.performed.age.comparator] NVARCHAR(64)        '$.performed.age.comparator',
        [procedure.performed.age.unit] NVARCHAR(100)       '$.performed.age.unit',
        [procedure.performed.age.system] VARCHAR(256)        '$.performed.age.system',
        [procedure.performed.age.code] NVARCHAR(4000)      '$.performed.age.code',
        [procedure.performed.range.id] NVARCHAR(100)       '$.performed.range.id',
        [procedure.performed.range.extension] NVARCHAR(MAX)       '$.performed.range.extension',
        [procedure.performed.range.low] NVARCHAR(MAX)       '$.performed.range.low',
        [procedure.performed.range.high] NVARCHAR(MAX)       '$.performed.range.high',
        [procedure.performed.period.id] NVARCHAR(100)       '$.performed.period.id',
        [procedure.performed.period.extension] NVARCHAR(MAX)       '$.performed.period.extension',
        [procedure.performed.period.start] VARCHAR(64)         '$.performed.period.start',
        [procedure.performed.period.end] VARCHAR(64)         '$.performed.period.end',
        [procedure.performed.string]   NVARCHAR(4000)      '$.performed.string',
        [procedure.performed.dateTime] VARCHAR(64)         '$.performed.dateTime'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[Flag] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [status] NVARCHAR(100),
    [category] VARCHAR(MAX),
    [code.id] NVARCHAR(100),
    [code.extension] NVARCHAR(MAX),
    [code.coding] VARCHAR(MAX),
    [code.text] NVARCHAR(4000),
    [subject.id] NVARCHAR(100),
    [subject.extension] NVARCHAR(MAX),
    [subject.reference] NVARCHAR(4000),
    [subject.type] VARCHAR(256),
    [subject.identifier.id] NVARCHAR(100),
    [subject.identifier.extension] NVARCHAR(MAX),
    [subject.identifier.use] NVARCHAR(64),
    [subject.identifier.type] NVARCHAR(MAX),
    [subject.identifier.system] VARCHAR(256),
    [subject.identifier.value] NVARCHAR(4000),
    [subject.identifier.period] NVARCHAR(MAX),
    [subject.identifier.assigner] NVARCHAR(MAX),
    [subject.display] NVARCHAR(4000),
    [period.id] NVARCHAR(100),
    [period.extension] NVARCHAR(MAX),
    [period.start] VARCHAR(64),
    [period.end] VARCHAR(64),
    [encounter.id] NVARCHAR(100),
    [encounter.extension] NVARCHAR(MAX),
    [encounter.reference] NVARCHAR(4000),
    [encounter.type] VARCHAR(256),
    [encounter.identifier.id] NVARCHAR(100),
    [encounter.identifier.extension] NVARCHAR(MAX),
    [encounter.identifier.use] NVARCHAR(64),
    [encounter.identifier.type] NVARCHAR(MAX),
    [encounter.identifier.system] VARCHAR(256),
    [encounter.identifier.value] NVARCHAR(4000),
    [encounter.identifier.period] NVARCHAR(MAX),
    [encounter.identifier.assigner] NVARCHAR(MAX),
    [encounter.display] NVARCHAR(4000),
    [author.id] NVARCHAR(100),
    [author.extension] NVARCHAR(MAX),
    [author.reference] NVARCHAR(4000),
    [author.type] VARCHAR(256),
    [author.identifier.id] NVARCHAR(100),
    [author.identifier.extension] NVARCHAR(MAX),
    [author.identifier.use] NVARCHAR(64),
    [author.identifier.type] NVARCHAR(MAX),
    [author.identifier.system] VARCHAR(256),
    [author.identifier.value] NVARCHAR(4000),
    [author.identifier.period] NVARCHAR(MAX),
    [author.identifier.assigner] NVARCHAR(MAX),
    [author.display] NVARCHAR(4000),
) WITH (
    LOCATION='/Flag/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.FlagIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'Flag/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.FlagCategory AS
SELECT
    [id],
    [category.JSON],
    [category.id],
    [category.extension],
    [category.coding],
    [category.text]
FROM openrowset (
        BULK 'Flag/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [category.JSON]  VARCHAR(MAX) '$.category'
    ) AS rowset
    CROSS APPLY openjson (rowset.[category.JSON]) with (
        [category.id]                  NVARCHAR(100)       '$.id',
        [category.extension]           NVARCHAR(MAX)       '$.extension',
        [category.coding]              NVARCHAR(MAX)       '$.coding' AS JSON,
        [category.text]                NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[Goal] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [lifecycleStatus] NVARCHAR(4000),
    [achievementStatus.id] NVARCHAR(100),
    [achievementStatus.extension] NVARCHAR(MAX),
    [achievementStatus.coding] VARCHAR(MAX),
    [achievementStatus.text] NVARCHAR(4000),
    [category] VARCHAR(MAX),
    [continuous] bit,
    [priority.id] NVARCHAR(100),
    [priority.extension] NVARCHAR(MAX),
    [priority.coding] VARCHAR(MAX),
    [priority.text] NVARCHAR(4000),
    [description.id] NVARCHAR(100),
    [description.extension] NVARCHAR(MAX),
    [description.coding] VARCHAR(MAX),
    [description.text] NVARCHAR(4000),
    [subject.id] NVARCHAR(100),
    [subject.extension] NVARCHAR(MAX),
    [subject.reference] NVARCHAR(4000),
    [subject.type] VARCHAR(256),
    [subject.identifier.id] NVARCHAR(100),
    [subject.identifier.extension] NVARCHAR(MAX),
    [subject.identifier.use] NVARCHAR(64),
    [subject.identifier.type] NVARCHAR(MAX),
    [subject.identifier.system] VARCHAR(256),
    [subject.identifier.value] NVARCHAR(4000),
    [subject.identifier.period] NVARCHAR(MAX),
    [subject.identifier.assigner] NVARCHAR(MAX),
    [subject.display] NVARCHAR(4000),
    [target] VARCHAR(MAX),
    [statusDate] VARCHAR(64),
    [statusReason] NVARCHAR(4000),
    [source.id] NVARCHAR(100),
    [source.extension] NVARCHAR(MAX),
    [source.reference] NVARCHAR(4000),
    [source.type] VARCHAR(256),
    [source.identifier.id] NVARCHAR(100),
    [source.identifier.extension] NVARCHAR(MAX),
    [source.identifier.use] NVARCHAR(64),
    [source.identifier.type] NVARCHAR(MAX),
    [source.identifier.system] VARCHAR(256),
    [source.identifier.value] NVARCHAR(4000),
    [source.identifier.period] NVARCHAR(MAX),
    [source.identifier.assigner] NVARCHAR(MAX),
    [source.display] NVARCHAR(4000),
    [addresses] VARCHAR(MAX),
    [note] VARCHAR(MAX),
    [outcome] VARCHAR(MAX),
    [start.date] VARCHAR(64),
    [start.codeableConcept.id] NVARCHAR(100),
    [start.codeableConcept.extension] NVARCHAR(MAX),
    [start.codeableConcept.coding] VARCHAR(MAX),
    [start.codeableConcept.text] NVARCHAR(4000),
) WITH (
    LOCATION='/Goal/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.GoalIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'Goal/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.GoalCategory AS
SELECT
    [id],
    [category.JSON],
    [category.id],
    [category.extension],
    [category.coding],
    [category.text]
FROM openrowset (
        BULK 'Goal/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [category.JSON]  VARCHAR(MAX) '$.category'
    ) AS rowset
    CROSS APPLY openjson (rowset.[category.JSON]) with (
        [category.id]                  NVARCHAR(100)       '$.id',
        [category.extension]           NVARCHAR(MAX)       '$.extension',
        [category.coding]              NVARCHAR(MAX)       '$.coding' AS JSON,
        [category.text]                NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.GoalTarget AS
SELECT
    [id],
    [target.JSON],
    [target.id],
    [target.extension],
    [target.modifierExtension],
    [target.measure.id],
    [target.measure.extension],
    [target.measure.coding],
    [target.measure.text],
    [target.detail.quantity.id],
    [target.detail.quantity.extension],
    [target.detail.quantity.value],
    [target.detail.quantity.comparator],
    [target.detail.quantity.unit],
    [target.detail.quantity.system],
    [target.detail.quantity.code],
    [target.detail.range.id],
    [target.detail.range.extension],
    [target.detail.range.low],
    [target.detail.range.high],
    [target.detail.codeableConcept.id],
    [target.detail.codeableConcept.extension],
    [target.detail.codeableConcept.coding],
    [target.detail.codeableConcept.text],
    [target.detail.string],
    [target.detail.boolean],
    [target.detail.integer],
    [target.detail.ratio.id],
    [target.detail.ratio.extension],
    [target.detail.ratio.numerator],
    [target.detail.ratio.denominator],
    [target.due.date],
    [target.due.duration.id],
    [target.due.duration.extension],
    [target.due.duration.value],
    [target.due.duration.comparator],
    [target.due.duration.unit],
    [target.due.duration.system],
    [target.due.duration.code]
FROM openrowset (
        BULK 'Goal/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [target.JSON]  VARCHAR(MAX) '$.target'
    ) AS rowset
    CROSS APPLY openjson (rowset.[target.JSON]) with (
        [target.id]                    NVARCHAR(100)       '$.id',
        [target.extension]             NVARCHAR(MAX)       '$.extension',
        [target.modifierExtension]     NVARCHAR(MAX)       '$.modifierExtension',
        [target.measure.id]            NVARCHAR(100)       '$.measure.id',
        [target.measure.extension]     NVARCHAR(MAX)       '$.measure.extension',
        [target.measure.coding]        NVARCHAR(MAX)       '$.measure.coding',
        [target.measure.text]          NVARCHAR(4000)      '$.measure.text',
        [target.detail.quantity.id]    NVARCHAR(100)       '$.detail.quantity.id',
        [target.detail.quantity.extension] NVARCHAR(MAX)       '$.detail.quantity.extension',
        [target.detail.quantity.value] float               '$.detail.quantity.value',
        [target.detail.quantity.comparator] NVARCHAR(64)        '$.detail.quantity.comparator',
        [target.detail.quantity.unit]  NVARCHAR(100)       '$.detail.quantity.unit',
        [target.detail.quantity.system] VARCHAR(256)        '$.detail.quantity.system',
        [target.detail.quantity.code]  NVARCHAR(4000)      '$.detail.quantity.code',
        [target.detail.range.id]       NVARCHAR(100)       '$.detail.range.id',
        [target.detail.range.extension] NVARCHAR(MAX)       '$.detail.range.extension',
        [target.detail.range.low]      NVARCHAR(MAX)       '$.detail.range.low',
        [target.detail.range.high]     NVARCHAR(MAX)       '$.detail.range.high',
        [target.detail.codeableConcept.id] NVARCHAR(100)       '$.detail.codeableConcept.id',
        [target.detail.codeableConcept.extension] NVARCHAR(MAX)       '$.detail.codeableConcept.extension',
        [target.detail.codeableConcept.coding] NVARCHAR(MAX)       '$.detail.codeableConcept.coding',
        [target.detail.codeableConcept.text] NVARCHAR(4000)      '$.detail.codeableConcept.text',
        [target.detail.string]         NVARCHAR(4000)      '$.detail.string',
        [target.detail.boolean]        bit                 '$.detail.boolean',
        [target.detail.integer]        bigint              '$.detail.integer',
        [target.detail.ratio.id]       NVARCHAR(100)       '$.detail.ratio.id',
        [target.detail.ratio.extension] NVARCHAR(MAX)       '$.detail.ratio.extension',
        [target.detail.ratio.numerator] NVARCHAR(MAX)       '$.detail.ratio.numerator',
        [target.detail.ratio.denominator] NVARCHAR(MAX)       '$.detail.ratio.denominator',
        [target.due.date]              VARCHAR(64)         '$.due.date',
        [target.due.duration.id]       NVARCHAR(100)       '$.due.duration.id',
        [target.due.duration.extension] NVARCHAR(MAX)       '$.due.duration.extension',
        [target.due.duration.value]    float               '$.due.duration.value',
        [target.due.duration.comparator] NVARCHAR(64)        '$.due.duration.comparator',
        [target.due.duration.unit]     NVARCHAR(100)       '$.due.duration.unit',
        [target.due.duration.system]   VARCHAR(256)        '$.due.duration.system',
        [target.due.duration.code]     NVARCHAR(4000)      '$.due.duration.code'
    ) j

GO

CREATE VIEW fhir.GoalAddresses AS
SELECT
    [id],
    [addresses.JSON],
    [addresses.id],
    [addresses.extension],
    [addresses.reference],
    [addresses.type],
    [addresses.identifier.id],
    [addresses.identifier.extension],
    [addresses.identifier.use],
    [addresses.identifier.type],
    [addresses.identifier.system],
    [addresses.identifier.value],
    [addresses.identifier.period],
    [addresses.identifier.assigner],
    [addresses.display]
FROM openrowset (
        BULK 'Goal/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [addresses.JSON]  VARCHAR(MAX) '$.addresses'
    ) AS rowset
    CROSS APPLY openjson (rowset.[addresses.JSON]) with (
        [addresses.id]                 NVARCHAR(100)       '$.id',
        [addresses.extension]          NVARCHAR(MAX)       '$.extension',
        [addresses.reference]          NVARCHAR(4000)      '$.reference',
        [addresses.type]               VARCHAR(256)        '$.type',
        [addresses.identifier.id]      NVARCHAR(100)       '$.identifier.id',
        [addresses.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [addresses.identifier.use]     NVARCHAR(64)        '$.identifier.use',
        [addresses.identifier.type]    NVARCHAR(MAX)       '$.identifier.type',
        [addresses.identifier.system]  VARCHAR(256)        '$.identifier.system',
        [addresses.identifier.value]   NVARCHAR(4000)      '$.identifier.value',
        [addresses.identifier.period]  NVARCHAR(MAX)       '$.identifier.period',
        [addresses.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [addresses.display]            NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.GoalNote AS
SELECT
    [id],
    [note.JSON],
    [note.id],
    [note.extension],
    [note.time],
    [note.text],
    [note.author.reference.id],
    [note.author.reference.extension],
    [note.author.reference.reference],
    [note.author.reference.type],
    [note.author.reference.identifier],
    [note.author.reference.display],
    [note.author.string]
FROM openrowset (
        BULK 'Goal/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [note.JSON]  VARCHAR(MAX) '$.note'
    ) AS rowset
    CROSS APPLY openjson (rowset.[note.JSON]) with (
        [note.id]                      NVARCHAR(100)       '$.id',
        [note.extension]               NVARCHAR(MAX)       '$.extension',
        [note.time]                    VARCHAR(64)         '$.time',
        [note.text]                    NVARCHAR(MAX)       '$.text',
        [note.author.reference.id]     NVARCHAR(100)       '$.author.reference.id',
        [note.author.reference.extension] NVARCHAR(MAX)       '$.author.reference.extension',
        [note.author.reference.reference] NVARCHAR(4000)      '$.author.reference.reference',
        [note.author.reference.type]   VARCHAR(256)        '$.author.reference.type',
        [note.author.reference.identifier] NVARCHAR(MAX)       '$.author.reference.identifier',
        [note.author.reference.display] NVARCHAR(4000)      '$.author.reference.display',
        [note.author.string]           NVARCHAR(4000)      '$.author.string'
    ) j

GO

CREATE VIEW fhir.GoalOutcome AS
SELECT
    [id],
    [outcome.JSON],
    [outcome.id],
    [outcome.extension],
    [outcome.concept.id],
    [outcome.concept.extension],
    [outcome.concept.coding],
    [outcome.concept.text],
    [outcome.reference.id],
    [outcome.reference.extension],
    [outcome.reference.reference],
    [outcome.reference.type],
    [outcome.reference.identifier],
    [outcome.reference.display]
FROM openrowset (
        BULK 'Goal/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [outcome.JSON]  VARCHAR(MAX) '$.outcome'
    ) AS rowset
    CROSS APPLY openjson (rowset.[outcome.JSON]) with (
        [outcome.id]                   NVARCHAR(100)       '$.id',
        [outcome.extension]            NVARCHAR(MAX)       '$.extension',
        [outcome.concept.id]           NVARCHAR(100)       '$.concept.id',
        [outcome.concept.extension]    NVARCHAR(MAX)       '$.concept.extension',
        [outcome.concept.coding]       NVARCHAR(MAX)       '$.concept.coding',
        [outcome.concept.text]         NVARCHAR(4000)      '$.concept.text',
        [outcome.reference.id]         NVARCHAR(100)       '$.reference.id',
        [outcome.reference.extension]  NVARCHAR(MAX)       '$.reference.extension',
        [outcome.reference.reference]  NVARCHAR(4000)      '$.reference.reference',
        [outcome.reference.type]       VARCHAR(256)        '$.reference.type',
        [outcome.reference.identifier] NVARCHAR(MAX)       '$.reference.identifier',
        [outcome.reference.display]    NVARCHAR(4000)      '$.reference.display'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[GraphDefinition] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [url] VARCHAR(256),
    [identifier] VARCHAR(MAX),
    [version] NVARCHAR(100),
    [name] NVARCHAR(500),
    [title] NVARCHAR(4000),
    [status] NVARCHAR(100),
    [experimental] bit,
    [date] VARCHAR(64),
    [publisher] NVARCHAR(500),
    [contact] VARCHAR(MAX),
    [description] NVARCHAR(MAX),
    [useContext] VARCHAR(MAX),
    [jurisdiction] VARCHAR(MAX),
    [purpose] NVARCHAR(MAX),
    [copyright] NVARCHAR(MAX),
    [start] NVARCHAR(100),
    [profile] VARCHAR(256),
    [link] VARCHAR(MAX),
) WITH (
    LOCATION='/GraphDefinition/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.GraphDefinitionIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'GraphDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.GraphDefinitionContact AS
SELECT
    [id],
    [contact.JSON],
    [contact.id],
    [contact.extension],
    [contact.name],
    [contact.telecom]
FROM openrowset (
        BULK 'GraphDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [contact.JSON]  VARCHAR(MAX) '$.contact'
    ) AS rowset
    CROSS APPLY openjson (rowset.[contact.JSON]) with (
        [contact.id]                   NVARCHAR(100)       '$.id',
        [contact.extension]            NVARCHAR(MAX)       '$.extension',
        [contact.name]                 NVARCHAR(500)       '$.name',
        [contact.telecom]              NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.GraphDefinitionUseContext AS
SELECT
    [id],
    [useContext.JSON],
    [useContext.id],
    [useContext.extension],
    [useContext.code.id],
    [useContext.code.extension],
    [useContext.code.system],
    [useContext.code.version],
    [useContext.code.code],
    [useContext.code.display],
    [useContext.code.userSelected],
    [useContext.value.codeableConcept.id],
    [useContext.value.codeableConcept.extension],
    [useContext.value.codeableConcept.coding],
    [useContext.value.codeableConcept.text],
    [useContext.value.quantity.id],
    [useContext.value.quantity.extension],
    [useContext.value.quantity.value],
    [useContext.value.quantity.comparator],
    [useContext.value.quantity.unit],
    [useContext.value.quantity.system],
    [useContext.value.quantity.code],
    [useContext.value.range.id],
    [useContext.value.range.extension],
    [useContext.value.range.low],
    [useContext.value.range.high],
    [useContext.value.reference.id],
    [useContext.value.reference.extension],
    [useContext.value.reference.reference],
    [useContext.value.reference.type],
    [useContext.value.reference.identifier],
    [useContext.value.reference.display]
FROM openrowset (
        BULK 'GraphDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [useContext.JSON]  VARCHAR(MAX) '$.useContext'
    ) AS rowset
    CROSS APPLY openjson (rowset.[useContext.JSON]) with (
        [useContext.id]                NVARCHAR(100)       '$.id',
        [useContext.extension]         NVARCHAR(MAX)       '$.extension',
        [useContext.code.id]           NVARCHAR(100)       '$.code.id',
        [useContext.code.extension]    NVARCHAR(MAX)       '$.code.extension',
        [useContext.code.system]       VARCHAR(256)        '$.code.system',
        [useContext.code.version]      NVARCHAR(100)       '$.code.version',
        [useContext.code.code]         NVARCHAR(4000)      '$.code.code',
        [useContext.code.display]      NVARCHAR(4000)      '$.code.display',
        [useContext.code.userSelected] bit                 '$.code.userSelected',
        [useContext.value.codeableConcept.id] NVARCHAR(100)       '$.value.codeableConcept.id',
        [useContext.value.codeableConcept.extension] NVARCHAR(MAX)       '$.value.codeableConcept.extension',
        [useContext.value.codeableConcept.coding] NVARCHAR(MAX)       '$.value.codeableConcept.coding',
        [useContext.value.codeableConcept.text] NVARCHAR(4000)      '$.value.codeableConcept.text',
        [useContext.value.quantity.id] NVARCHAR(100)       '$.value.quantity.id',
        [useContext.value.quantity.extension] NVARCHAR(MAX)       '$.value.quantity.extension',
        [useContext.value.quantity.value] float               '$.value.quantity.value',
        [useContext.value.quantity.comparator] NVARCHAR(64)        '$.value.quantity.comparator',
        [useContext.value.quantity.unit] NVARCHAR(100)       '$.value.quantity.unit',
        [useContext.value.quantity.system] VARCHAR(256)        '$.value.quantity.system',
        [useContext.value.quantity.code] NVARCHAR(4000)      '$.value.quantity.code',
        [useContext.value.range.id]    NVARCHAR(100)       '$.value.range.id',
        [useContext.value.range.extension] NVARCHAR(MAX)       '$.value.range.extension',
        [useContext.value.range.low]   NVARCHAR(MAX)       '$.value.range.low',
        [useContext.value.range.high]  NVARCHAR(MAX)       '$.value.range.high',
        [useContext.value.reference.id] NVARCHAR(100)       '$.value.reference.id',
        [useContext.value.reference.extension] NVARCHAR(MAX)       '$.value.reference.extension',
        [useContext.value.reference.reference] NVARCHAR(4000)      '$.value.reference.reference',
        [useContext.value.reference.type] VARCHAR(256)        '$.value.reference.type',
        [useContext.value.reference.identifier] NVARCHAR(MAX)       '$.value.reference.identifier',
        [useContext.value.reference.display] NVARCHAR(4000)      '$.value.reference.display'
    ) j

GO

CREATE VIEW fhir.GraphDefinitionJurisdiction AS
SELECT
    [id],
    [jurisdiction.JSON],
    [jurisdiction.id],
    [jurisdiction.extension],
    [jurisdiction.coding],
    [jurisdiction.text]
FROM openrowset (
        BULK 'GraphDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [jurisdiction.JSON]  VARCHAR(MAX) '$.jurisdiction'
    ) AS rowset
    CROSS APPLY openjson (rowset.[jurisdiction.JSON]) with (
        [jurisdiction.id]              NVARCHAR(100)       '$.id',
        [jurisdiction.extension]       NVARCHAR(MAX)       '$.extension',
        [jurisdiction.coding]          NVARCHAR(MAX)       '$.coding' AS JSON,
        [jurisdiction.text]            NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.GraphDefinitionLink AS
SELECT
    [id],
    [link.JSON],
    [link.id],
    [link.extension],
    [link.modifierExtension],
    [link.path],
    [link.sliceName],
    [link.min],
    [link.max],
    [link.description],
    [link.target]
FROM openrowset (
        BULK 'GraphDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [link.JSON]  VARCHAR(MAX) '$.link'
    ) AS rowset
    CROSS APPLY openjson (rowset.[link.JSON]) with (
        [link.id]                      NVARCHAR(100)       '$.id',
        [link.extension]               NVARCHAR(MAX)       '$.extension',
        [link.modifierExtension]       NVARCHAR(MAX)       '$.modifierExtension',
        [link.path]                    NVARCHAR(4000)      '$.path',
        [link.sliceName]               NVARCHAR(500)       '$.sliceName',
        [link.min]                     bigint              '$.min',
        [link.max]                     NVARCHAR(100)       '$.max',
        [link.description]             NVARCHAR(4000)      '$.description',
        [link.target]                  NVARCHAR(MAX)       '$.target' AS JSON
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[Group] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [active] bit,
    [type] NVARCHAR(100),
    [actual] bit,
    [code.id] NVARCHAR(100),
    [code.extension] NVARCHAR(MAX),
    [code.coding] VARCHAR(MAX),
    [code.text] NVARCHAR(4000),
    [name] NVARCHAR(500),
    [quantity] bigint,
    [managingEntity.id] NVARCHAR(100),
    [managingEntity.extension] NVARCHAR(MAX),
    [managingEntity.reference] NVARCHAR(4000),
    [managingEntity.type] VARCHAR(256),
    [managingEntity.identifier.id] NVARCHAR(100),
    [managingEntity.identifier.extension] NVARCHAR(MAX),
    [managingEntity.identifier.use] NVARCHAR(64),
    [managingEntity.identifier.type] NVARCHAR(MAX),
    [managingEntity.identifier.system] VARCHAR(256),
    [managingEntity.identifier.value] NVARCHAR(4000),
    [managingEntity.identifier.period] NVARCHAR(MAX),
    [managingEntity.identifier.assigner] NVARCHAR(MAX),
    [managingEntity.display] NVARCHAR(4000),
    [characteristic] VARCHAR(MAX),
    [member] VARCHAR(MAX),
) WITH (
    LOCATION='/Group/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.GroupIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'Group/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.GroupCharacteristic AS
SELECT
    [id],
    [characteristic.JSON],
    [characteristic.id],
    [characteristic.extension],
    [characteristic.modifierExtension],
    [characteristic.code.id],
    [characteristic.code.extension],
    [characteristic.code.coding],
    [characteristic.code.text],
    [characteristic.exclude],
    [characteristic.period.id],
    [characteristic.period.extension],
    [characteristic.period.start],
    [characteristic.period.end],
    [characteristic.value.codeableConcept.id],
    [characteristic.value.codeableConcept.extension],
    [characteristic.value.codeableConcept.coding],
    [characteristic.value.codeableConcept.text],
    [characteristic.value.boolean],
    [characteristic.value.quantity.id],
    [characteristic.value.quantity.extension],
    [characteristic.value.quantity.value],
    [characteristic.value.quantity.comparator],
    [characteristic.value.quantity.unit],
    [characteristic.value.quantity.system],
    [characteristic.value.quantity.code],
    [characteristic.value.range.id],
    [characteristic.value.range.extension],
    [characteristic.value.range.low],
    [characteristic.value.range.high],
    [characteristic.value.reference.id],
    [characteristic.value.reference.extension],
    [characteristic.value.reference.reference],
    [characteristic.value.reference.type],
    [characteristic.value.reference.identifier],
    [characteristic.value.reference.display]
FROM openrowset (
        BULK 'Group/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [characteristic.JSON]  VARCHAR(MAX) '$.characteristic'
    ) AS rowset
    CROSS APPLY openjson (rowset.[characteristic.JSON]) with (
        [characteristic.id]            NVARCHAR(100)       '$.id',
        [characteristic.extension]     NVARCHAR(MAX)       '$.extension',
        [characteristic.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [characteristic.code.id]       NVARCHAR(100)       '$.code.id',
        [characteristic.code.extension] NVARCHAR(MAX)       '$.code.extension',
        [characteristic.code.coding]   NVARCHAR(MAX)       '$.code.coding',
        [characteristic.code.text]     NVARCHAR(4000)      '$.code.text',
        [characteristic.exclude]       bit                 '$.exclude',
        [characteristic.period.id]     NVARCHAR(100)       '$.period.id',
        [characteristic.period.extension] NVARCHAR(MAX)       '$.period.extension',
        [characteristic.period.start]  VARCHAR(64)         '$.period.start',
        [characteristic.period.end]    VARCHAR(64)         '$.period.end',
        [characteristic.value.codeableConcept.id] NVARCHAR(100)       '$.value.codeableConcept.id',
        [characteristic.value.codeableConcept.extension] NVARCHAR(MAX)       '$.value.codeableConcept.extension',
        [characteristic.value.codeableConcept.coding] NVARCHAR(MAX)       '$.value.codeableConcept.coding',
        [characteristic.value.codeableConcept.text] NVARCHAR(4000)      '$.value.codeableConcept.text',
        [characteristic.value.boolean] bit                 '$.value.boolean',
        [characteristic.value.quantity.id] NVARCHAR(100)       '$.value.quantity.id',
        [characteristic.value.quantity.extension] NVARCHAR(MAX)       '$.value.quantity.extension',
        [characteristic.value.quantity.value] float               '$.value.quantity.value',
        [characteristic.value.quantity.comparator] NVARCHAR(64)        '$.value.quantity.comparator',
        [characteristic.value.quantity.unit] NVARCHAR(100)       '$.value.quantity.unit',
        [characteristic.value.quantity.system] VARCHAR(256)        '$.value.quantity.system',
        [characteristic.value.quantity.code] NVARCHAR(4000)      '$.value.quantity.code',
        [characteristic.value.range.id] NVARCHAR(100)       '$.value.range.id',
        [characteristic.value.range.extension] NVARCHAR(MAX)       '$.value.range.extension',
        [characteristic.value.range.low] NVARCHAR(MAX)       '$.value.range.low',
        [characteristic.value.range.high] NVARCHAR(MAX)       '$.value.range.high',
        [characteristic.value.reference.id] NVARCHAR(100)       '$.value.reference.id',
        [characteristic.value.reference.extension] NVARCHAR(MAX)       '$.value.reference.extension',
        [characteristic.value.reference.reference] NVARCHAR(4000)      '$.value.reference.reference',
        [characteristic.value.reference.type] VARCHAR(256)        '$.value.reference.type',
        [characteristic.value.reference.identifier] NVARCHAR(MAX)       '$.value.reference.identifier',
        [characteristic.value.reference.display] NVARCHAR(4000)      '$.value.reference.display'
    ) j

GO

CREATE VIEW fhir.GroupMember AS
SELECT
    [id],
    [member.JSON],
    [member.id],
    [member.extension],
    [member.modifierExtension],
    [member.entity.id],
    [member.entity.extension],
    [member.entity.reference],
    [member.entity.type],
    [member.entity.identifier],
    [member.entity.display],
    [member.period.id],
    [member.period.extension],
    [member.period.start],
    [member.period.end],
    [member.inactive]
FROM openrowset (
        BULK 'Group/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [member.JSON]  VARCHAR(MAX) '$.member'
    ) AS rowset
    CROSS APPLY openjson (rowset.[member.JSON]) with (
        [member.id]                    NVARCHAR(100)       '$.id',
        [member.extension]             NVARCHAR(MAX)       '$.extension',
        [member.modifierExtension]     NVARCHAR(MAX)       '$.modifierExtension',
        [member.entity.id]             NVARCHAR(100)       '$.entity.id',
        [member.entity.extension]      NVARCHAR(MAX)       '$.entity.extension',
        [member.entity.reference]      NVARCHAR(4000)      '$.entity.reference',
        [member.entity.type]           VARCHAR(256)        '$.entity.type',
        [member.entity.identifier]     NVARCHAR(MAX)       '$.entity.identifier',
        [member.entity.display]        NVARCHAR(4000)      '$.entity.display',
        [member.period.id]             NVARCHAR(100)       '$.period.id',
        [member.period.extension]      NVARCHAR(MAX)       '$.period.extension',
        [member.period.start]          VARCHAR(64)         '$.period.start',
        [member.period.end]            VARCHAR(64)         '$.period.end',
        [member.inactive]              bit                 '$.inactive'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[GuidanceResponse] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [requestIdentifier.id] NVARCHAR(100),
    [requestIdentifier.extension] NVARCHAR(MAX),
    [requestIdentifier.use] NVARCHAR(64),
    [requestIdentifier.type.id] NVARCHAR(100),
    [requestIdentifier.type.extension] NVARCHAR(MAX),
    [requestIdentifier.type.coding] NVARCHAR(MAX),
    [requestIdentifier.type.text] NVARCHAR(4000),
    [requestIdentifier.system] VARCHAR(256),
    [requestIdentifier.value] NVARCHAR(4000),
    [requestIdentifier.period.id] NVARCHAR(100),
    [requestIdentifier.period.extension] NVARCHAR(MAX),
    [requestIdentifier.period.start] VARCHAR(64),
    [requestIdentifier.period.end] VARCHAR(64),
    [requestIdentifier.assigner.id] NVARCHAR(100),
    [requestIdentifier.assigner.extension] NVARCHAR(MAX),
    [requestIdentifier.assigner.reference] NVARCHAR(4000),
    [requestIdentifier.assigner.type] VARCHAR(256),
    [requestIdentifier.assigner.identifier] NVARCHAR(MAX),
    [requestIdentifier.assigner.display] NVARCHAR(4000),
    [identifier] VARCHAR(MAX),
    [status] NVARCHAR(100),
    [subject.id] NVARCHAR(100),
    [subject.extension] NVARCHAR(MAX),
    [subject.reference] NVARCHAR(4000),
    [subject.type] VARCHAR(256),
    [subject.identifier.id] NVARCHAR(100),
    [subject.identifier.extension] NVARCHAR(MAX),
    [subject.identifier.use] NVARCHAR(64),
    [subject.identifier.type] NVARCHAR(MAX),
    [subject.identifier.system] VARCHAR(256),
    [subject.identifier.value] NVARCHAR(4000),
    [subject.identifier.period] NVARCHAR(MAX),
    [subject.identifier.assigner] NVARCHAR(MAX),
    [subject.display] NVARCHAR(4000),
    [encounter.id] NVARCHAR(100),
    [encounter.extension] NVARCHAR(MAX),
    [encounter.reference] NVARCHAR(4000),
    [encounter.type] VARCHAR(256),
    [encounter.identifier.id] NVARCHAR(100),
    [encounter.identifier.extension] NVARCHAR(MAX),
    [encounter.identifier.use] NVARCHAR(64),
    [encounter.identifier.type] NVARCHAR(MAX),
    [encounter.identifier.system] VARCHAR(256),
    [encounter.identifier.value] NVARCHAR(4000),
    [encounter.identifier.period] NVARCHAR(MAX),
    [encounter.identifier.assigner] NVARCHAR(MAX),
    [encounter.display] NVARCHAR(4000),
    [occurrenceDateTime] VARCHAR(64),
    [performer.id] NVARCHAR(100),
    [performer.extension] NVARCHAR(MAX),
    [performer.reference] NVARCHAR(4000),
    [performer.type] VARCHAR(256),
    [performer.identifier.id] NVARCHAR(100),
    [performer.identifier.extension] NVARCHAR(MAX),
    [performer.identifier.use] NVARCHAR(64),
    [performer.identifier.type] NVARCHAR(MAX),
    [performer.identifier.system] VARCHAR(256),
    [performer.identifier.value] NVARCHAR(4000),
    [performer.identifier.period] NVARCHAR(MAX),
    [performer.identifier.assigner] NVARCHAR(MAX),
    [performer.display] NVARCHAR(4000),
    [reason] VARCHAR(MAX),
    [note] VARCHAR(MAX),
    [evaluationMessage] VARCHAR(MAX),
    [outputParameters.id] NVARCHAR(100),
    [outputParameters.extension] NVARCHAR(MAX),
    [outputParameters.reference] NVARCHAR(4000),
    [outputParameters.type] VARCHAR(256),
    [outputParameters.identifier.id] NVARCHAR(100),
    [outputParameters.identifier.extension] NVARCHAR(MAX),
    [outputParameters.identifier.use] NVARCHAR(64),
    [outputParameters.identifier.type] NVARCHAR(MAX),
    [outputParameters.identifier.system] VARCHAR(256),
    [outputParameters.identifier.value] NVARCHAR(4000),
    [outputParameters.identifier.period] NVARCHAR(MAX),
    [outputParameters.identifier.assigner] NVARCHAR(MAX),
    [outputParameters.display] NVARCHAR(4000),
    [result.id] NVARCHAR(100),
    [result.extension] NVARCHAR(MAX),
    [result.reference] NVARCHAR(4000),
    [result.type] VARCHAR(256),
    [result.identifier.id] NVARCHAR(100),
    [result.identifier.extension] NVARCHAR(MAX),
    [result.identifier.use] NVARCHAR(64),
    [result.identifier.type] NVARCHAR(MAX),
    [result.identifier.system] VARCHAR(256),
    [result.identifier.value] NVARCHAR(4000),
    [result.identifier.period] NVARCHAR(MAX),
    [result.identifier.assigner] NVARCHAR(MAX),
    [result.display] NVARCHAR(4000),
    [dataRequirement] VARCHAR(MAX),
    [module.uri] VARCHAR(256),
    [module.canonical] VARCHAR(256),
    [module.codeableConcept.id] NVARCHAR(100),
    [module.codeableConcept.extension] NVARCHAR(MAX),
    [module.codeableConcept.coding] VARCHAR(MAX),
    [module.codeableConcept.text] NVARCHAR(4000),
) WITH (
    LOCATION='/GuidanceResponse/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.GuidanceResponseIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'GuidanceResponse/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.GuidanceResponseReason AS
SELECT
    [id],
    [reason.JSON],
    [reason.id],
    [reason.extension],
    [reason.concept.id],
    [reason.concept.extension],
    [reason.concept.coding],
    [reason.concept.text],
    [reason.reference.id],
    [reason.reference.extension],
    [reason.reference.reference],
    [reason.reference.type],
    [reason.reference.identifier],
    [reason.reference.display]
FROM openrowset (
        BULK 'GuidanceResponse/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [reason.JSON]  VARCHAR(MAX) '$.reason'
    ) AS rowset
    CROSS APPLY openjson (rowset.[reason.JSON]) with (
        [reason.id]                    NVARCHAR(100)       '$.id',
        [reason.extension]             NVARCHAR(MAX)       '$.extension',
        [reason.concept.id]            NVARCHAR(100)       '$.concept.id',
        [reason.concept.extension]     NVARCHAR(MAX)       '$.concept.extension',
        [reason.concept.coding]        NVARCHAR(MAX)       '$.concept.coding',
        [reason.concept.text]          NVARCHAR(4000)      '$.concept.text',
        [reason.reference.id]          NVARCHAR(100)       '$.reference.id',
        [reason.reference.extension]   NVARCHAR(MAX)       '$.reference.extension',
        [reason.reference.reference]   NVARCHAR(4000)      '$.reference.reference',
        [reason.reference.type]        VARCHAR(256)        '$.reference.type',
        [reason.reference.identifier]  NVARCHAR(MAX)       '$.reference.identifier',
        [reason.reference.display]     NVARCHAR(4000)      '$.reference.display'
    ) j

GO

CREATE VIEW fhir.GuidanceResponseNote AS
SELECT
    [id],
    [note.JSON],
    [note.id],
    [note.extension],
    [note.time],
    [note.text],
    [note.author.reference.id],
    [note.author.reference.extension],
    [note.author.reference.reference],
    [note.author.reference.type],
    [note.author.reference.identifier],
    [note.author.reference.display],
    [note.author.string]
FROM openrowset (
        BULK 'GuidanceResponse/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [note.JSON]  VARCHAR(MAX) '$.note'
    ) AS rowset
    CROSS APPLY openjson (rowset.[note.JSON]) with (
        [note.id]                      NVARCHAR(100)       '$.id',
        [note.extension]               NVARCHAR(MAX)       '$.extension',
        [note.time]                    VARCHAR(64)         '$.time',
        [note.text]                    NVARCHAR(MAX)       '$.text',
        [note.author.reference.id]     NVARCHAR(100)       '$.author.reference.id',
        [note.author.reference.extension] NVARCHAR(MAX)       '$.author.reference.extension',
        [note.author.reference.reference] NVARCHAR(4000)      '$.author.reference.reference',
        [note.author.reference.type]   VARCHAR(256)        '$.author.reference.type',
        [note.author.reference.identifier] NVARCHAR(MAX)       '$.author.reference.identifier',
        [note.author.reference.display] NVARCHAR(4000)      '$.author.reference.display',
        [note.author.string]           NVARCHAR(4000)      '$.author.string'
    ) j

GO

CREATE VIEW fhir.GuidanceResponseEvaluationMessage AS
SELECT
    [id],
    [evaluationMessage.JSON],
    [evaluationMessage.id],
    [evaluationMessage.extension],
    [evaluationMessage.reference],
    [evaluationMessage.type],
    [evaluationMessage.identifier.id],
    [evaluationMessage.identifier.extension],
    [evaluationMessage.identifier.use],
    [evaluationMessage.identifier.type],
    [evaluationMessage.identifier.system],
    [evaluationMessage.identifier.value],
    [evaluationMessage.identifier.period],
    [evaluationMessage.identifier.assigner],
    [evaluationMessage.display]
FROM openrowset (
        BULK 'GuidanceResponse/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [evaluationMessage.JSON]  VARCHAR(MAX) '$.evaluationMessage'
    ) AS rowset
    CROSS APPLY openjson (rowset.[evaluationMessage.JSON]) with (
        [evaluationMessage.id]         NVARCHAR(100)       '$.id',
        [evaluationMessage.extension]  NVARCHAR(MAX)       '$.extension',
        [evaluationMessage.reference]  NVARCHAR(4000)      '$.reference',
        [evaluationMessage.type]       VARCHAR(256)        '$.type',
        [evaluationMessage.identifier.id] NVARCHAR(100)       '$.identifier.id',
        [evaluationMessage.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [evaluationMessage.identifier.use] NVARCHAR(64)        '$.identifier.use',
        [evaluationMessage.identifier.type] NVARCHAR(MAX)       '$.identifier.type',
        [evaluationMessage.identifier.system] VARCHAR(256)        '$.identifier.system',
        [evaluationMessage.identifier.value] NVARCHAR(4000)      '$.identifier.value',
        [evaluationMessage.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [evaluationMessage.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [evaluationMessage.display]    NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.GuidanceResponseDataRequirement AS
SELECT
    [id],
    [dataRequirement.JSON],
    [dataRequirement.id],
    [dataRequirement.extension],
    [dataRequirement.type],
    [dataRequirement.profile],
    [dataRequirement.mustSupport],
    [dataRequirement.codeFilter],
    [dataRequirement.dateFilter],
    [dataRequirement.limit],
    [dataRequirement.sort],
    [dataRequirement.subject.codeableConcept.id],
    [dataRequirement.subject.codeableConcept.extension],
    [dataRequirement.subject.codeableConcept.coding],
    [dataRequirement.subject.codeableConcept.text],
    [dataRequirement.subject.reference.id],
    [dataRequirement.subject.reference.extension],
    [dataRequirement.subject.reference.reference],
    [dataRequirement.subject.reference.type],
    [dataRequirement.subject.reference.identifier],
    [dataRequirement.subject.reference.display]
FROM openrowset (
        BULK 'GuidanceResponse/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [dataRequirement.JSON]  VARCHAR(MAX) '$.dataRequirement'
    ) AS rowset
    CROSS APPLY openjson (rowset.[dataRequirement.JSON]) with (
        [dataRequirement.id]           NVARCHAR(100)       '$.id',
        [dataRequirement.extension]    NVARCHAR(MAX)       '$.extension',
        [dataRequirement.type]         NVARCHAR(100)       '$.type',
        [dataRequirement.profile]      NVARCHAR(MAX)       '$.profile' AS JSON,
        [dataRequirement.mustSupport]  NVARCHAR(MAX)       '$.mustSupport' AS JSON,
        [dataRequirement.codeFilter]   NVARCHAR(MAX)       '$.codeFilter' AS JSON,
        [dataRequirement.dateFilter]   NVARCHAR(MAX)       '$.dateFilter' AS JSON,
        [dataRequirement.limit]        bigint              '$.limit',
        [dataRequirement.sort]         NVARCHAR(MAX)       '$.sort' AS JSON,
        [dataRequirement.subject.codeableConcept.id] NVARCHAR(100)       '$.subject.codeableConcept.id',
        [dataRequirement.subject.codeableConcept.extension] NVARCHAR(MAX)       '$.subject.codeableConcept.extension',
        [dataRequirement.subject.codeableConcept.coding] NVARCHAR(MAX)       '$.subject.codeableConcept.coding',
        [dataRequirement.subject.codeableConcept.text] NVARCHAR(4000)      '$.subject.codeableConcept.text',
        [dataRequirement.subject.reference.id] NVARCHAR(100)       '$.subject.reference.id',
        [dataRequirement.subject.reference.extension] NVARCHAR(MAX)       '$.subject.reference.extension',
        [dataRequirement.subject.reference.reference] NVARCHAR(4000)      '$.subject.reference.reference',
        [dataRequirement.subject.reference.type] VARCHAR(256)        '$.subject.reference.type',
        [dataRequirement.subject.reference.identifier] NVARCHAR(MAX)       '$.subject.reference.identifier',
        [dataRequirement.subject.reference.display] NVARCHAR(4000)      '$.subject.reference.display'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[HealthcareService] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [active] bit,
    [providedBy.id] NVARCHAR(100),
    [providedBy.extension] NVARCHAR(MAX),
    [providedBy.reference] NVARCHAR(4000),
    [providedBy.type] VARCHAR(256),
    [providedBy.identifier.id] NVARCHAR(100),
    [providedBy.identifier.extension] NVARCHAR(MAX),
    [providedBy.identifier.use] NVARCHAR(64),
    [providedBy.identifier.type] NVARCHAR(MAX),
    [providedBy.identifier.system] VARCHAR(256),
    [providedBy.identifier.value] NVARCHAR(4000),
    [providedBy.identifier.period] NVARCHAR(MAX),
    [providedBy.identifier.assigner] NVARCHAR(MAX),
    [providedBy.display] NVARCHAR(4000),
    [category] VARCHAR(MAX),
    [type] VARCHAR(MAX),
    [specialty] VARCHAR(MAX),
    [location] VARCHAR(MAX),
    [name] NVARCHAR(500),
    [comment] NVARCHAR(4000),
    [extraDetails] NVARCHAR(MAX),
    [photo.id] NVARCHAR(100),
    [photo.extension] NVARCHAR(MAX),
    [photo.contentType] NVARCHAR(100),
    [photo.language] NVARCHAR(100),
    [photo.data] NVARCHAR(MAX),
    [photo.url] VARCHAR(256),
    [photo.size] NVARCHAR(MAX),
    [photo.hash] NVARCHAR(MAX),
    [photo.title] NVARCHAR(4000),
    [photo.creation] VARCHAR(64),
    [photo.height] bigint,
    [photo.width] bigint,
    [photo.frames] bigint,
    [photo.duration] float,
    [photo.pages] bigint,
    [telecom] VARCHAR(MAX),
    [coverageArea] VARCHAR(MAX),
    [serviceProvisionCode] VARCHAR(MAX),
    [eligibility] VARCHAR(MAX),
    [program] VARCHAR(MAX),
    [characteristic] VARCHAR(MAX),
    [communication] VARCHAR(MAX),
    [referralMethod] VARCHAR(MAX),
    [appointmentRequired] bit,
    [availableTime] VARCHAR(MAX),
    [notAvailable] VARCHAR(MAX),
    [availabilityExceptions] NVARCHAR(4000),
    [endpoint] VARCHAR(MAX),
) WITH (
    LOCATION='/HealthcareService/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.HealthcareServiceIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'HealthcareService/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.HealthcareServiceCategory AS
SELECT
    [id],
    [category.JSON],
    [category.id],
    [category.extension],
    [category.coding],
    [category.text]
FROM openrowset (
        BULK 'HealthcareService/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [category.JSON]  VARCHAR(MAX) '$.category'
    ) AS rowset
    CROSS APPLY openjson (rowset.[category.JSON]) with (
        [category.id]                  NVARCHAR(100)       '$.id',
        [category.extension]           NVARCHAR(MAX)       '$.extension',
        [category.coding]              NVARCHAR(MAX)       '$.coding' AS JSON,
        [category.text]                NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.HealthcareServiceType AS
SELECT
    [id],
    [type.JSON],
    [type.id],
    [type.extension],
    [type.coding],
    [type.text]
FROM openrowset (
        BULK 'HealthcareService/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [type.JSON]  VARCHAR(MAX) '$.type'
    ) AS rowset
    CROSS APPLY openjson (rowset.[type.JSON]) with (
        [type.id]                      NVARCHAR(100)       '$.id',
        [type.extension]               NVARCHAR(MAX)       '$.extension',
        [type.coding]                  NVARCHAR(MAX)       '$.coding' AS JSON,
        [type.text]                    NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.HealthcareServiceSpecialty AS
SELECT
    [id],
    [specialty.JSON],
    [specialty.id],
    [specialty.extension],
    [specialty.coding],
    [specialty.text]
FROM openrowset (
        BULK 'HealthcareService/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [specialty.JSON]  VARCHAR(MAX) '$.specialty'
    ) AS rowset
    CROSS APPLY openjson (rowset.[specialty.JSON]) with (
        [specialty.id]                 NVARCHAR(100)       '$.id',
        [specialty.extension]          NVARCHAR(MAX)       '$.extension',
        [specialty.coding]             NVARCHAR(MAX)       '$.coding' AS JSON,
        [specialty.text]               NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.HealthcareServiceLocation AS
SELECT
    [id],
    [location.JSON],
    [location.id],
    [location.extension],
    [location.reference],
    [location.type],
    [location.identifier.id],
    [location.identifier.extension],
    [location.identifier.use],
    [location.identifier.type],
    [location.identifier.system],
    [location.identifier.value],
    [location.identifier.period],
    [location.identifier.assigner],
    [location.display]
FROM openrowset (
        BULK 'HealthcareService/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [location.JSON]  VARCHAR(MAX) '$.location'
    ) AS rowset
    CROSS APPLY openjson (rowset.[location.JSON]) with (
        [location.id]                  NVARCHAR(100)       '$.id',
        [location.extension]           NVARCHAR(MAX)       '$.extension',
        [location.reference]           NVARCHAR(4000)      '$.reference',
        [location.type]                VARCHAR(256)        '$.type',
        [location.identifier.id]       NVARCHAR(100)       '$.identifier.id',
        [location.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [location.identifier.use]      NVARCHAR(64)        '$.identifier.use',
        [location.identifier.type]     NVARCHAR(MAX)       '$.identifier.type',
        [location.identifier.system]   VARCHAR(256)        '$.identifier.system',
        [location.identifier.value]    NVARCHAR(4000)      '$.identifier.value',
        [location.identifier.period]   NVARCHAR(MAX)       '$.identifier.period',
        [location.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [location.display]             NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.HealthcareServiceTelecom AS
SELECT
    [id],
    [telecom.JSON],
    [telecom.id],
    [telecom.extension],
    [telecom.system],
    [telecom.value],
    [telecom.use],
    [telecom.rank],
    [telecom.period.id],
    [telecom.period.extension],
    [telecom.period.start],
    [telecom.period.end]
FROM openrowset (
        BULK 'HealthcareService/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [telecom.JSON]  VARCHAR(MAX) '$.telecom'
    ) AS rowset
    CROSS APPLY openjson (rowset.[telecom.JSON]) with (
        [telecom.id]                   NVARCHAR(100)       '$.id',
        [telecom.extension]            NVARCHAR(MAX)       '$.extension',
        [telecom.system]               NVARCHAR(64)        '$.system',
        [telecom.value]                NVARCHAR(4000)      '$.value',
        [telecom.use]                  NVARCHAR(64)        '$.use',
        [telecom.rank]                 bigint              '$.rank',
        [telecom.period.id]            NVARCHAR(100)       '$.period.id',
        [telecom.period.extension]     NVARCHAR(MAX)       '$.period.extension',
        [telecom.period.start]         VARCHAR(64)         '$.period.start',
        [telecom.period.end]           VARCHAR(64)         '$.period.end'
    ) j

GO

CREATE VIEW fhir.HealthcareServiceCoverageArea AS
SELECT
    [id],
    [coverageArea.JSON],
    [coverageArea.id],
    [coverageArea.extension],
    [coverageArea.reference],
    [coverageArea.type],
    [coverageArea.identifier.id],
    [coverageArea.identifier.extension],
    [coverageArea.identifier.use],
    [coverageArea.identifier.type],
    [coverageArea.identifier.system],
    [coverageArea.identifier.value],
    [coverageArea.identifier.period],
    [coverageArea.identifier.assigner],
    [coverageArea.display]
FROM openrowset (
        BULK 'HealthcareService/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [coverageArea.JSON]  VARCHAR(MAX) '$.coverageArea'
    ) AS rowset
    CROSS APPLY openjson (rowset.[coverageArea.JSON]) with (
        [coverageArea.id]              NVARCHAR(100)       '$.id',
        [coverageArea.extension]       NVARCHAR(MAX)       '$.extension',
        [coverageArea.reference]       NVARCHAR(4000)      '$.reference',
        [coverageArea.type]            VARCHAR(256)        '$.type',
        [coverageArea.identifier.id]   NVARCHAR(100)       '$.identifier.id',
        [coverageArea.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [coverageArea.identifier.use]  NVARCHAR(64)        '$.identifier.use',
        [coverageArea.identifier.type] NVARCHAR(MAX)       '$.identifier.type',
        [coverageArea.identifier.system] VARCHAR(256)        '$.identifier.system',
        [coverageArea.identifier.value] NVARCHAR(4000)      '$.identifier.value',
        [coverageArea.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [coverageArea.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [coverageArea.display]         NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.HealthcareServiceServiceProvisionCode AS
SELECT
    [id],
    [serviceProvisionCode.JSON],
    [serviceProvisionCode.id],
    [serviceProvisionCode.extension],
    [serviceProvisionCode.coding],
    [serviceProvisionCode.text]
FROM openrowset (
        BULK 'HealthcareService/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [serviceProvisionCode.JSON]  VARCHAR(MAX) '$.serviceProvisionCode'
    ) AS rowset
    CROSS APPLY openjson (rowset.[serviceProvisionCode.JSON]) with (
        [serviceProvisionCode.id]      NVARCHAR(100)       '$.id',
        [serviceProvisionCode.extension] NVARCHAR(MAX)       '$.extension',
        [serviceProvisionCode.coding]  NVARCHAR(MAX)       '$.coding' AS JSON,
        [serviceProvisionCode.text]    NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.HealthcareServiceEligibility AS
SELECT
    [id],
    [eligibility.JSON],
    [eligibility.id],
    [eligibility.extension],
    [eligibility.modifierExtension],
    [eligibility.code.id],
    [eligibility.code.extension],
    [eligibility.code.coding],
    [eligibility.code.text],
    [eligibility.comment]
FROM openrowset (
        BULK 'HealthcareService/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [eligibility.JSON]  VARCHAR(MAX) '$.eligibility'
    ) AS rowset
    CROSS APPLY openjson (rowset.[eligibility.JSON]) with (
        [eligibility.id]               NVARCHAR(100)       '$.id',
        [eligibility.extension]        NVARCHAR(MAX)       '$.extension',
        [eligibility.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [eligibility.code.id]          NVARCHAR(100)       '$.code.id',
        [eligibility.code.extension]   NVARCHAR(MAX)       '$.code.extension',
        [eligibility.code.coding]      NVARCHAR(MAX)       '$.code.coding',
        [eligibility.code.text]        NVARCHAR(4000)      '$.code.text',
        [eligibility.comment]          NVARCHAR(MAX)       '$.comment'
    ) j

GO

CREATE VIEW fhir.HealthcareServiceProgram AS
SELECT
    [id],
    [program.JSON],
    [program.id],
    [program.extension],
    [program.coding],
    [program.text]
FROM openrowset (
        BULK 'HealthcareService/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [program.JSON]  VARCHAR(MAX) '$.program'
    ) AS rowset
    CROSS APPLY openjson (rowset.[program.JSON]) with (
        [program.id]                   NVARCHAR(100)       '$.id',
        [program.extension]            NVARCHAR(MAX)       '$.extension',
        [program.coding]               NVARCHAR(MAX)       '$.coding' AS JSON,
        [program.text]                 NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.HealthcareServiceCharacteristic AS
SELECT
    [id],
    [characteristic.JSON],
    [characteristic.id],
    [characteristic.extension],
    [characteristic.coding],
    [characteristic.text]
FROM openrowset (
        BULK 'HealthcareService/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [characteristic.JSON]  VARCHAR(MAX) '$.characteristic'
    ) AS rowset
    CROSS APPLY openjson (rowset.[characteristic.JSON]) with (
        [characteristic.id]            NVARCHAR(100)       '$.id',
        [characteristic.extension]     NVARCHAR(MAX)       '$.extension',
        [characteristic.coding]        NVARCHAR(MAX)       '$.coding' AS JSON,
        [characteristic.text]          NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.HealthcareServiceCommunication AS
SELECT
    [id],
    [communication.JSON],
    [communication.id],
    [communication.extension],
    [communication.coding],
    [communication.text]
FROM openrowset (
        BULK 'HealthcareService/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [communication.JSON]  VARCHAR(MAX) '$.communication'
    ) AS rowset
    CROSS APPLY openjson (rowset.[communication.JSON]) with (
        [communication.id]             NVARCHAR(100)       '$.id',
        [communication.extension]      NVARCHAR(MAX)       '$.extension',
        [communication.coding]         NVARCHAR(MAX)       '$.coding' AS JSON,
        [communication.text]           NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.HealthcareServiceReferralMethod AS
SELECT
    [id],
    [referralMethod.JSON],
    [referralMethod.id],
    [referralMethod.extension],
    [referralMethod.coding],
    [referralMethod.text]
FROM openrowset (
        BULK 'HealthcareService/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [referralMethod.JSON]  VARCHAR(MAX) '$.referralMethod'
    ) AS rowset
    CROSS APPLY openjson (rowset.[referralMethod.JSON]) with (
        [referralMethod.id]            NVARCHAR(100)       '$.id',
        [referralMethod.extension]     NVARCHAR(MAX)       '$.extension',
        [referralMethod.coding]        NVARCHAR(MAX)       '$.coding' AS JSON,
        [referralMethod.text]          NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.HealthcareServiceAvailableTime AS
SELECT
    [id],
    [availableTime.JSON],
    [availableTime.id],
    [availableTime.extension],
    [availableTime.modifierExtension],
    [availableTime.daysOfWeek],
    [availableTime.allDay],
    [availableTime.availableStartTime],
    [availableTime.availableEndTime]
FROM openrowset (
        BULK 'HealthcareService/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [availableTime.JSON]  VARCHAR(MAX) '$.availableTime'
    ) AS rowset
    CROSS APPLY openjson (rowset.[availableTime.JSON]) with (
        [availableTime.id]             NVARCHAR(100)       '$.id',
        [availableTime.extension]      NVARCHAR(MAX)       '$.extension',
        [availableTime.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [availableTime.daysOfWeek]     NVARCHAR(MAX)       '$.daysOfWeek' AS JSON,
        [availableTime.allDay]         bit                 '$.allDay',
        [availableTime.availableStartTime] NVARCHAR(MAX)       '$.availableStartTime',
        [availableTime.availableEndTime] NVARCHAR(MAX)       '$.availableEndTime'
    ) j

GO

CREATE VIEW fhir.HealthcareServiceNotAvailable AS
SELECT
    [id],
    [notAvailable.JSON],
    [notAvailable.id],
    [notAvailable.extension],
    [notAvailable.modifierExtension],
    [notAvailable.description],
    [notAvailable.during.id],
    [notAvailable.during.extension],
    [notAvailable.during.start],
    [notAvailable.during.end]
FROM openrowset (
        BULK 'HealthcareService/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [notAvailable.JSON]  VARCHAR(MAX) '$.notAvailable'
    ) AS rowset
    CROSS APPLY openjson (rowset.[notAvailable.JSON]) with (
        [notAvailable.id]              NVARCHAR(100)       '$.id',
        [notAvailable.extension]       NVARCHAR(MAX)       '$.extension',
        [notAvailable.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [notAvailable.description]     NVARCHAR(4000)      '$.description',
        [notAvailable.during.id]       NVARCHAR(100)       '$.during.id',
        [notAvailable.during.extension] NVARCHAR(MAX)       '$.during.extension',
        [notAvailable.during.start]    VARCHAR(64)         '$.during.start',
        [notAvailable.during.end]      VARCHAR(64)         '$.during.end'
    ) j

GO

CREATE VIEW fhir.HealthcareServiceEndpoint AS
SELECT
    [id],
    [endpoint.JSON],
    [endpoint.id],
    [endpoint.extension],
    [endpoint.reference],
    [endpoint.type],
    [endpoint.identifier.id],
    [endpoint.identifier.extension],
    [endpoint.identifier.use],
    [endpoint.identifier.type],
    [endpoint.identifier.system],
    [endpoint.identifier.value],
    [endpoint.identifier.period],
    [endpoint.identifier.assigner],
    [endpoint.display]
FROM openrowset (
        BULK 'HealthcareService/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [endpoint.JSON]  VARCHAR(MAX) '$.endpoint'
    ) AS rowset
    CROSS APPLY openjson (rowset.[endpoint.JSON]) with (
        [endpoint.id]                  NVARCHAR(100)       '$.id',
        [endpoint.extension]           NVARCHAR(MAX)       '$.extension',
        [endpoint.reference]           NVARCHAR(4000)      '$.reference',
        [endpoint.type]                VARCHAR(256)        '$.type',
        [endpoint.identifier.id]       NVARCHAR(100)       '$.identifier.id',
        [endpoint.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [endpoint.identifier.use]      NVARCHAR(64)        '$.identifier.use',
        [endpoint.identifier.type]     NVARCHAR(MAX)       '$.identifier.type',
        [endpoint.identifier.system]   VARCHAR(256)        '$.identifier.system',
        [endpoint.identifier.value]    NVARCHAR(4000)      '$.identifier.value',
        [endpoint.identifier.period]   NVARCHAR(MAX)       '$.identifier.period',
        [endpoint.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [endpoint.display]             NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[ImagingSelection] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [basedOn] VARCHAR(MAX),
    [subject.id] NVARCHAR(100),
    [subject.extension] NVARCHAR(MAX),
    [subject.reference] NVARCHAR(4000),
    [subject.type] VARCHAR(256),
    [subject.identifier.id] NVARCHAR(100),
    [subject.identifier.extension] NVARCHAR(MAX),
    [subject.identifier.use] NVARCHAR(64),
    [subject.identifier.type] NVARCHAR(MAX),
    [subject.identifier.system] VARCHAR(256),
    [subject.identifier.value] NVARCHAR(4000),
    [subject.identifier.period] NVARCHAR(MAX),
    [subject.identifier.assigner] NVARCHAR(MAX),
    [subject.display] NVARCHAR(4000),
    [issued] VARCHAR(64),
    [performer] VARCHAR(MAX),
    [code.id] NVARCHAR(100),
    [code.extension] NVARCHAR(MAX),
    [code.coding] VARCHAR(MAX),
    [code.text] NVARCHAR(4000),
    [studyUid] VARCHAR(64),
    [derivedFrom] VARCHAR(MAX),
    [endpoint] VARCHAR(MAX),
    [seriesUid] VARCHAR(64),
    [frameOfReferenceUid] VARCHAR(64),
    [bodySite.id] NVARCHAR(100),
    [bodySite.extension] NVARCHAR(MAX),
    [bodySite.system] VARCHAR(256),
    [bodySite.version] NVARCHAR(100),
    [bodySite.code] NVARCHAR(4000),
    [bodySite.display] NVARCHAR(4000),
    [bodySite.userSelected] bit,
    [instance] VARCHAR(MAX),
    [imageRegion.id] NVARCHAR(100),
    [imageRegion.extension] NVARCHAR(MAX),
    [imageRegion.modifierExtension] NVARCHAR(MAX),
    [imageRegion.regionType] NVARCHAR(4000),
    [imageRegion.coordinateType] NVARCHAR(4000),
    [imageRegion.coordinates] VARCHAR(MAX),
) WITH (
    LOCATION='/ImagingSelection/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.ImagingSelectionIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'ImagingSelection/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.ImagingSelectionBasedOn AS
SELECT
    [id],
    [basedOn.JSON],
    [basedOn.id],
    [basedOn.extension],
    [basedOn.reference],
    [basedOn.type],
    [basedOn.identifier.id],
    [basedOn.identifier.extension],
    [basedOn.identifier.use],
    [basedOn.identifier.type],
    [basedOn.identifier.system],
    [basedOn.identifier.value],
    [basedOn.identifier.period],
    [basedOn.identifier.assigner],
    [basedOn.display]
FROM openrowset (
        BULK 'ImagingSelection/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [basedOn.JSON]  VARCHAR(MAX) '$.basedOn'
    ) AS rowset
    CROSS APPLY openjson (rowset.[basedOn.JSON]) with (
        [basedOn.id]                   NVARCHAR(100)       '$.id',
        [basedOn.extension]            NVARCHAR(MAX)       '$.extension',
        [basedOn.reference]            NVARCHAR(4000)      '$.reference',
        [basedOn.type]                 VARCHAR(256)        '$.type',
        [basedOn.identifier.id]        NVARCHAR(100)       '$.identifier.id',
        [basedOn.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [basedOn.identifier.use]       NVARCHAR(64)        '$.identifier.use',
        [basedOn.identifier.type]      NVARCHAR(MAX)       '$.identifier.type',
        [basedOn.identifier.system]    VARCHAR(256)        '$.identifier.system',
        [basedOn.identifier.value]     NVARCHAR(4000)      '$.identifier.value',
        [basedOn.identifier.period]    NVARCHAR(MAX)       '$.identifier.period',
        [basedOn.identifier.assigner]  NVARCHAR(MAX)       '$.identifier.assigner',
        [basedOn.display]              NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.ImagingSelectionPerformer AS
SELECT
    [id],
    [performer.JSON],
    [performer.id],
    [performer.extension],
    [performer.modifierExtension],
    [performer.function.id],
    [performer.function.extension],
    [performer.function.coding],
    [performer.function.text],
    [performer.actor.id],
    [performer.actor.extension],
    [performer.actor.reference],
    [performer.actor.type],
    [performer.actor.identifier],
    [performer.actor.display]
FROM openrowset (
        BULK 'ImagingSelection/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [performer.JSON]  VARCHAR(MAX) '$.performer'
    ) AS rowset
    CROSS APPLY openjson (rowset.[performer.JSON]) with (
        [performer.id]                 NVARCHAR(100)       '$.id',
        [performer.extension]          NVARCHAR(MAX)       '$.extension',
        [performer.modifierExtension]  NVARCHAR(MAX)       '$.modifierExtension',
        [performer.function.id]        NVARCHAR(100)       '$.function.id',
        [performer.function.extension] NVARCHAR(MAX)       '$.function.extension',
        [performer.function.coding]    NVARCHAR(MAX)       '$.function.coding',
        [performer.function.text]      NVARCHAR(4000)      '$.function.text',
        [performer.actor.id]           NVARCHAR(100)       '$.actor.id',
        [performer.actor.extension]    NVARCHAR(MAX)       '$.actor.extension',
        [performer.actor.reference]    NVARCHAR(4000)      '$.actor.reference',
        [performer.actor.type]         VARCHAR(256)        '$.actor.type',
        [performer.actor.identifier]   NVARCHAR(MAX)       '$.actor.identifier',
        [performer.actor.display]      NVARCHAR(4000)      '$.actor.display'
    ) j

GO

CREATE VIEW fhir.ImagingSelectionDerivedFrom AS
SELECT
    [id],
    [derivedFrom.JSON],
    [derivedFrom.id],
    [derivedFrom.extension],
    [derivedFrom.reference],
    [derivedFrom.type],
    [derivedFrom.identifier.id],
    [derivedFrom.identifier.extension],
    [derivedFrom.identifier.use],
    [derivedFrom.identifier.type],
    [derivedFrom.identifier.system],
    [derivedFrom.identifier.value],
    [derivedFrom.identifier.period],
    [derivedFrom.identifier.assigner],
    [derivedFrom.display]
FROM openrowset (
        BULK 'ImagingSelection/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [derivedFrom.JSON]  VARCHAR(MAX) '$.derivedFrom'
    ) AS rowset
    CROSS APPLY openjson (rowset.[derivedFrom.JSON]) with (
        [derivedFrom.id]               NVARCHAR(100)       '$.id',
        [derivedFrom.extension]        NVARCHAR(MAX)       '$.extension',
        [derivedFrom.reference]        NVARCHAR(4000)      '$.reference',
        [derivedFrom.type]             VARCHAR(256)        '$.type',
        [derivedFrom.identifier.id]    NVARCHAR(100)       '$.identifier.id',
        [derivedFrom.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [derivedFrom.identifier.use]   NVARCHAR(64)        '$.identifier.use',
        [derivedFrom.identifier.type]  NVARCHAR(MAX)       '$.identifier.type',
        [derivedFrom.identifier.system] VARCHAR(256)        '$.identifier.system',
        [derivedFrom.identifier.value] NVARCHAR(4000)      '$.identifier.value',
        [derivedFrom.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [derivedFrom.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [derivedFrom.display]          NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.ImagingSelectionEndpoint AS
SELECT
    [id],
    [endpoint.JSON],
    [endpoint.id],
    [endpoint.extension],
    [endpoint.reference],
    [endpoint.type],
    [endpoint.identifier.id],
    [endpoint.identifier.extension],
    [endpoint.identifier.use],
    [endpoint.identifier.type],
    [endpoint.identifier.system],
    [endpoint.identifier.value],
    [endpoint.identifier.period],
    [endpoint.identifier.assigner],
    [endpoint.display]
FROM openrowset (
        BULK 'ImagingSelection/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [endpoint.JSON]  VARCHAR(MAX) '$.endpoint'
    ) AS rowset
    CROSS APPLY openjson (rowset.[endpoint.JSON]) with (
        [endpoint.id]                  NVARCHAR(100)       '$.id',
        [endpoint.extension]           NVARCHAR(MAX)       '$.extension',
        [endpoint.reference]           NVARCHAR(4000)      '$.reference',
        [endpoint.type]                VARCHAR(256)        '$.type',
        [endpoint.identifier.id]       NVARCHAR(100)       '$.identifier.id',
        [endpoint.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [endpoint.identifier.use]      NVARCHAR(64)        '$.identifier.use',
        [endpoint.identifier.type]     NVARCHAR(MAX)       '$.identifier.type',
        [endpoint.identifier.system]   VARCHAR(256)        '$.identifier.system',
        [endpoint.identifier.value]    NVARCHAR(4000)      '$.identifier.value',
        [endpoint.identifier.period]   NVARCHAR(MAX)       '$.identifier.period',
        [endpoint.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [endpoint.display]             NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.ImagingSelectionInstance AS
SELECT
    [id],
    [instance.JSON],
    [instance.id],
    [instance.extension],
    [instance.modifierExtension],
    [instance.uid],
    [instance.sopClass.id],
    [instance.sopClass.extension],
    [instance.sopClass.system],
    [instance.sopClass.version],
    [instance.sopClass.code],
    [instance.sopClass.display],
    [instance.sopClass.userSelected],
    [instance.frameList],
    [instance.observationUid],
    [instance.segmentList],
    [instance.roiList]
FROM openrowset (
        BULK 'ImagingSelection/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [instance.JSON]  VARCHAR(MAX) '$.instance'
    ) AS rowset
    CROSS APPLY openjson (rowset.[instance.JSON]) with (
        [instance.id]                  NVARCHAR(100)       '$.id',
        [instance.extension]           NVARCHAR(MAX)       '$.extension',
        [instance.modifierExtension]   NVARCHAR(MAX)       '$.modifierExtension',
        [instance.uid]                 VARCHAR(64)         '$.uid',
        [instance.sopClass.id]         NVARCHAR(100)       '$.sopClass.id',
        [instance.sopClass.extension]  NVARCHAR(MAX)       '$.sopClass.extension',
        [instance.sopClass.system]     VARCHAR(256)        '$.sopClass.system',
        [instance.sopClass.version]    NVARCHAR(100)       '$.sopClass.version',
        [instance.sopClass.code]       NVARCHAR(4000)      '$.sopClass.code',
        [instance.sopClass.display]    NVARCHAR(4000)      '$.sopClass.display',
        [instance.sopClass.userSelected] bit                 '$.sopClass.userSelected',
        [instance.frameList]           NVARCHAR(4000)      '$.frameList',
        [instance.observationUid]      NVARCHAR(MAX)       '$.observationUid' AS JSON,
        [instance.segmentList]         NVARCHAR(4000)      '$.segmentList',
        [instance.roiList]             NVARCHAR(4000)      '$.roiList'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[ImagingStudy] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [status] NVARCHAR(100),
    [modality] VARCHAR(MAX),
    [subject.id] NVARCHAR(100),
    [subject.extension] NVARCHAR(MAX),
    [subject.reference] NVARCHAR(4000),
    [subject.type] VARCHAR(256),
    [subject.identifier.id] NVARCHAR(100),
    [subject.identifier.extension] NVARCHAR(MAX),
    [subject.identifier.use] NVARCHAR(64),
    [subject.identifier.type] NVARCHAR(MAX),
    [subject.identifier.system] VARCHAR(256),
    [subject.identifier.value] NVARCHAR(4000),
    [subject.identifier.period] NVARCHAR(MAX),
    [subject.identifier.assigner] NVARCHAR(MAX),
    [subject.display] NVARCHAR(4000),
    [encounter.id] NVARCHAR(100),
    [encounter.extension] NVARCHAR(MAX),
    [encounter.reference] NVARCHAR(4000),
    [encounter.type] VARCHAR(256),
    [encounter.identifier.id] NVARCHAR(100),
    [encounter.identifier.extension] NVARCHAR(MAX),
    [encounter.identifier.use] NVARCHAR(64),
    [encounter.identifier.type] NVARCHAR(MAX),
    [encounter.identifier.system] VARCHAR(256),
    [encounter.identifier.value] NVARCHAR(4000),
    [encounter.identifier.period] NVARCHAR(MAX),
    [encounter.identifier.assigner] NVARCHAR(MAX),
    [encounter.display] NVARCHAR(4000),
    [started] VARCHAR(64),
    [basedOn] VARCHAR(MAX),
    [referrer.id] NVARCHAR(100),
    [referrer.extension] NVARCHAR(MAX),
    [referrer.reference] NVARCHAR(4000),
    [referrer.type] VARCHAR(256),
    [referrer.identifier.id] NVARCHAR(100),
    [referrer.identifier.extension] NVARCHAR(MAX),
    [referrer.identifier.use] NVARCHAR(64),
    [referrer.identifier.type] NVARCHAR(MAX),
    [referrer.identifier.system] VARCHAR(256),
    [referrer.identifier.value] NVARCHAR(4000),
    [referrer.identifier.period] NVARCHAR(MAX),
    [referrer.identifier.assigner] NVARCHAR(MAX),
    [referrer.display] NVARCHAR(4000),
    [interpreter] VARCHAR(MAX),
    [endpoint] VARCHAR(MAX),
    [numberOfSeries] bigint,
    [numberOfInstances] bigint,
    [procedure] VARCHAR(MAX),
    [location.id] NVARCHAR(100),
    [location.extension] NVARCHAR(MAX),
    [location.reference] NVARCHAR(4000),
    [location.type] VARCHAR(256),
    [location.identifier.id] NVARCHAR(100),
    [location.identifier.extension] NVARCHAR(MAX),
    [location.identifier.use] NVARCHAR(64),
    [location.identifier.type] NVARCHAR(MAX),
    [location.identifier.system] VARCHAR(256),
    [location.identifier.value] NVARCHAR(4000),
    [location.identifier.period] NVARCHAR(MAX),
    [location.identifier.assigner] NVARCHAR(MAX),
    [location.display] NVARCHAR(4000),
    [reason] VARCHAR(MAX),
    [note] VARCHAR(MAX),
    [description] NVARCHAR(4000),
    [series] VARCHAR(MAX),
) WITH (
    LOCATION='/ImagingStudy/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.ImagingStudyIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'ImagingStudy/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.ImagingStudyModality AS
SELECT
    [id],
    [modality.JSON],
    [modality.id],
    [modality.extension],
    [modality.system],
    [modality.version],
    [modality.code],
    [modality.display],
    [modality.userSelected]
FROM openrowset (
        BULK 'ImagingStudy/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [modality.JSON]  VARCHAR(MAX) '$.modality'
    ) AS rowset
    CROSS APPLY openjson (rowset.[modality.JSON]) with (
        [modality.id]                  NVARCHAR(100)       '$.id',
        [modality.extension]           NVARCHAR(MAX)       '$.extension',
        [modality.system]              VARCHAR(256)        '$.system',
        [modality.version]             NVARCHAR(100)       '$.version',
        [modality.code]                NVARCHAR(4000)      '$.code',
        [modality.display]             NVARCHAR(4000)      '$.display',
        [modality.userSelected]        bit                 '$.userSelected'
    ) j

GO

CREATE VIEW fhir.ImagingStudyBasedOn AS
SELECT
    [id],
    [basedOn.JSON],
    [basedOn.id],
    [basedOn.extension],
    [basedOn.reference],
    [basedOn.type],
    [basedOn.identifier.id],
    [basedOn.identifier.extension],
    [basedOn.identifier.use],
    [basedOn.identifier.type],
    [basedOn.identifier.system],
    [basedOn.identifier.value],
    [basedOn.identifier.period],
    [basedOn.identifier.assigner],
    [basedOn.display]
FROM openrowset (
        BULK 'ImagingStudy/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [basedOn.JSON]  VARCHAR(MAX) '$.basedOn'
    ) AS rowset
    CROSS APPLY openjson (rowset.[basedOn.JSON]) with (
        [basedOn.id]                   NVARCHAR(100)       '$.id',
        [basedOn.extension]            NVARCHAR(MAX)       '$.extension',
        [basedOn.reference]            NVARCHAR(4000)      '$.reference',
        [basedOn.type]                 VARCHAR(256)        '$.type',
        [basedOn.identifier.id]        NVARCHAR(100)       '$.identifier.id',
        [basedOn.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [basedOn.identifier.use]       NVARCHAR(64)        '$.identifier.use',
        [basedOn.identifier.type]      NVARCHAR(MAX)       '$.identifier.type',
        [basedOn.identifier.system]    VARCHAR(256)        '$.identifier.system',
        [basedOn.identifier.value]     NVARCHAR(4000)      '$.identifier.value',
        [basedOn.identifier.period]    NVARCHAR(MAX)       '$.identifier.period',
        [basedOn.identifier.assigner]  NVARCHAR(MAX)       '$.identifier.assigner',
        [basedOn.display]              NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.ImagingStudyInterpreter AS
SELECT
    [id],
    [interpreter.JSON],
    [interpreter.id],
    [interpreter.extension],
    [interpreter.reference],
    [interpreter.type],
    [interpreter.identifier.id],
    [interpreter.identifier.extension],
    [interpreter.identifier.use],
    [interpreter.identifier.type],
    [interpreter.identifier.system],
    [interpreter.identifier.value],
    [interpreter.identifier.period],
    [interpreter.identifier.assigner],
    [interpreter.display]
FROM openrowset (
        BULK 'ImagingStudy/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [interpreter.JSON]  VARCHAR(MAX) '$.interpreter'
    ) AS rowset
    CROSS APPLY openjson (rowset.[interpreter.JSON]) with (
        [interpreter.id]               NVARCHAR(100)       '$.id',
        [interpreter.extension]        NVARCHAR(MAX)       '$.extension',
        [interpreter.reference]        NVARCHAR(4000)      '$.reference',
        [interpreter.type]             VARCHAR(256)        '$.type',
        [interpreter.identifier.id]    NVARCHAR(100)       '$.identifier.id',
        [interpreter.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [interpreter.identifier.use]   NVARCHAR(64)        '$.identifier.use',
        [interpreter.identifier.type]  NVARCHAR(MAX)       '$.identifier.type',
        [interpreter.identifier.system] VARCHAR(256)        '$.identifier.system',
        [interpreter.identifier.value] NVARCHAR(4000)      '$.identifier.value',
        [interpreter.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [interpreter.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [interpreter.display]          NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.ImagingStudyEndpoint AS
SELECT
    [id],
    [endpoint.JSON],
    [endpoint.id],
    [endpoint.extension],
    [endpoint.reference],
    [endpoint.type],
    [endpoint.identifier.id],
    [endpoint.identifier.extension],
    [endpoint.identifier.use],
    [endpoint.identifier.type],
    [endpoint.identifier.system],
    [endpoint.identifier.value],
    [endpoint.identifier.period],
    [endpoint.identifier.assigner],
    [endpoint.display]
FROM openrowset (
        BULK 'ImagingStudy/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [endpoint.JSON]  VARCHAR(MAX) '$.endpoint'
    ) AS rowset
    CROSS APPLY openjson (rowset.[endpoint.JSON]) with (
        [endpoint.id]                  NVARCHAR(100)       '$.id',
        [endpoint.extension]           NVARCHAR(MAX)       '$.extension',
        [endpoint.reference]           NVARCHAR(4000)      '$.reference',
        [endpoint.type]                VARCHAR(256)        '$.type',
        [endpoint.identifier.id]       NVARCHAR(100)       '$.identifier.id',
        [endpoint.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [endpoint.identifier.use]      NVARCHAR(64)        '$.identifier.use',
        [endpoint.identifier.type]     NVARCHAR(MAX)       '$.identifier.type',
        [endpoint.identifier.system]   VARCHAR(256)        '$.identifier.system',
        [endpoint.identifier.value]    NVARCHAR(4000)      '$.identifier.value',
        [endpoint.identifier.period]   NVARCHAR(MAX)       '$.identifier.period',
        [endpoint.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [endpoint.display]             NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.ImagingStudyProcedure AS
SELECT
    [id],
    [procedure.JSON],
    [procedure.id],
    [procedure.extension],
    [procedure.concept.id],
    [procedure.concept.extension],
    [procedure.concept.coding],
    [procedure.concept.text],
    [procedure.reference.id],
    [procedure.reference.extension],
    [procedure.reference.reference],
    [procedure.reference.type],
    [procedure.reference.identifier],
    [procedure.reference.display]
FROM openrowset (
        BULK 'ImagingStudy/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [procedure.JSON]  VARCHAR(MAX) '$.procedure'
    ) AS rowset
    CROSS APPLY openjson (rowset.[procedure.JSON]) with (
        [procedure.id]                 NVARCHAR(100)       '$.id',
        [procedure.extension]          NVARCHAR(MAX)       '$.extension',
        [procedure.concept.id]         NVARCHAR(100)       '$.concept.id',
        [procedure.concept.extension]  NVARCHAR(MAX)       '$.concept.extension',
        [procedure.concept.coding]     NVARCHAR(MAX)       '$.concept.coding',
        [procedure.concept.text]       NVARCHAR(4000)      '$.concept.text',
        [procedure.reference.id]       NVARCHAR(100)       '$.reference.id',
        [procedure.reference.extension] NVARCHAR(MAX)       '$.reference.extension',
        [procedure.reference.reference] NVARCHAR(4000)      '$.reference.reference',
        [procedure.reference.type]     VARCHAR(256)        '$.reference.type',
        [procedure.reference.identifier] NVARCHAR(MAX)       '$.reference.identifier',
        [procedure.reference.display]  NVARCHAR(4000)      '$.reference.display'
    ) j

GO

CREATE VIEW fhir.ImagingStudyReason AS
SELECT
    [id],
    [reason.JSON],
    [reason.id],
    [reason.extension],
    [reason.concept.id],
    [reason.concept.extension],
    [reason.concept.coding],
    [reason.concept.text],
    [reason.reference.id],
    [reason.reference.extension],
    [reason.reference.reference],
    [reason.reference.type],
    [reason.reference.identifier],
    [reason.reference.display]
FROM openrowset (
        BULK 'ImagingStudy/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [reason.JSON]  VARCHAR(MAX) '$.reason'
    ) AS rowset
    CROSS APPLY openjson (rowset.[reason.JSON]) with (
        [reason.id]                    NVARCHAR(100)       '$.id',
        [reason.extension]             NVARCHAR(MAX)       '$.extension',
        [reason.concept.id]            NVARCHAR(100)       '$.concept.id',
        [reason.concept.extension]     NVARCHAR(MAX)       '$.concept.extension',
        [reason.concept.coding]        NVARCHAR(MAX)       '$.concept.coding',
        [reason.concept.text]          NVARCHAR(4000)      '$.concept.text',
        [reason.reference.id]          NVARCHAR(100)       '$.reference.id',
        [reason.reference.extension]   NVARCHAR(MAX)       '$.reference.extension',
        [reason.reference.reference]   NVARCHAR(4000)      '$.reference.reference',
        [reason.reference.type]        VARCHAR(256)        '$.reference.type',
        [reason.reference.identifier]  NVARCHAR(MAX)       '$.reference.identifier',
        [reason.reference.display]     NVARCHAR(4000)      '$.reference.display'
    ) j

GO

CREATE VIEW fhir.ImagingStudyNote AS
SELECT
    [id],
    [note.JSON],
    [note.id],
    [note.extension],
    [note.time],
    [note.text],
    [note.author.reference.id],
    [note.author.reference.extension],
    [note.author.reference.reference],
    [note.author.reference.type],
    [note.author.reference.identifier],
    [note.author.reference.display],
    [note.author.string]
FROM openrowset (
        BULK 'ImagingStudy/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [note.JSON]  VARCHAR(MAX) '$.note'
    ) AS rowset
    CROSS APPLY openjson (rowset.[note.JSON]) with (
        [note.id]                      NVARCHAR(100)       '$.id',
        [note.extension]               NVARCHAR(MAX)       '$.extension',
        [note.time]                    VARCHAR(64)         '$.time',
        [note.text]                    NVARCHAR(MAX)       '$.text',
        [note.author.reference.id]     NVARCHAR(100)       '$.author.reference.id',
        [note.author.reference.extension] NVARCHAR(MAX)       '$.author.reference.extension',
        [note.author.reference.reference] NVARCHAR(4000)      '$.author.reference.reference',
        [note.author.reference.type]   VARCHAR(256)        '$.author.reference.type',
        [note.author.reference.identifier] NVARCHAR(MAX)       '$.author.reference.identifier',
        [note.author.reference.display] NVARCHAR(4000)      '$.author.reference.display',
        [note.author.string]           NVARCHAR(4000)      '$.author.string'
    ) j

GO

CREATE VIEW fhir.ImagingStudySeries AS
SELECT
    [id],
    [series.JSON],
    [series.id],
    [series.extension],
    [series.modifierExtension],
    [series.uid],
    [series.number],
    [series.modality.id],
    [series.modality.extension],
    [series.modality.system],
    [series.modality.version],
    [series.modality.code],
    [series.modality.display],
    [series.modality.userSelected],
    [series.description],
    [series.numberOfInstances],
    [series.endpoint],
    [series.bodySite.id],
    [series.bodySite.extension],
    [series.bodySite.system],
    [series.bodySite.version],
    [series.bodySite.code],
    [series.bodySite.display],
    [series.bodySite.userSelected],
    [series.laterality.id],
    [series.laterality.extension],
    [series.laterality.system],
    [series.laterality.version],
    [series.laterality.code],
    [series.laterality.display],
    [series.laterality.userSelected],
    [series.specimen],
    [series.started],
    [series.performer],
    [series.instance]
FROM openrowset (
        BULK 'ImagingStudy/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [series.JSON]  VARCHAR(MAX) '$.series'
    ) AS rowset
    CROSS APPLY openjson (rowset.[series.JSON]) with (
        [series.id]                    NVARCHAR(100)       '$.id',
        [series.extension]             NVARCHAR(MAX)       '$.extension',
        [series.modifierExtension]     NVARCHAR(MAX)       '$.modifierExtension',
        [series.uid]                   VARCHAR(64)         '$.uid',
        [series.number]                bigint              '$.number',
        [series.modality.id]           NVARCHAR(100)       '$.modality.id',
        [series.modality.extension]    NVARCHAR(MAX)       '$.modality.extension',
        [series.modality.system]       VARCHAR(256)        '$.modality.system',
        [series.modality.version]      NVARCHAR(100)       '$.modality.version',
        [series.modality.code]         NVARCHAR(4000)      '$.modality.code',
        [series.modality.display]      NVARCHAR(4000)      '$.modality.display',
        [series.modality.userSelected] bit                 '$.modality.userSelected',
        [series.description]           NVARCHAR(4000)      '$.description',
        [series.numberOfInstances]     bigint              '$.numberOfInstances',
        [series.endpoint]              NVARCHAR(MAX)       '$.endpoint' AS JSON,
        [series.bodySite.id]           NVARCHAR(100)       '$.bodySite.id',
        [series.bodySite.extension]    NVARCHAR(MAX)       '$.bodySite.extension',
        [series.bodySite.system]       VARCHAR(256)        '$.bodySite.system',
        [series.bodySite.version]      NVARCHAR(100)       '$.bodySite.version',
        [series.bodySite.code]         NVARCHAR(4000)      '$.bodySite.code',
        [series.bodySite.display]      NVARCHAR(4000)      '$.bodySite.display',
        [series.bodySite.userSelected] bit                 '$.bodySite.userSelected',
        [series.laterality.id]         NVARCHAR(100)       '$.laterality.id',
        [series.laterality.extension]  NVARCHAR(MAX)       '$.laterality.extension',
        [series.laterality.system]     VARCHAR(256)        '$.laterality.system',
        [series.laterality.version]    NVARCHAR(100)       '$.laterality.version',
        [series.laterality.code]       NVARCHAR(4000)      '$.laterality.code',
        [series.laterality.display]    NVARCHAR(4000)      '$.laterality.display',
        [series.laterality.userSelected] bit                 '$.laterality.userSelected',
        [series.specimen]              NVARCHAR(MAX)       '$.specimen' AS JSON,
        [series.started]               VARCHAR(64)         '$.started',
        [series.performer]             NVARCHAR(MAX)       '$.performer' AS JSON,
        [series.instance]              NVARCHAR(MAX)       '$.instance' AS JSON
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[Immunization] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [instantiatesCanonical] VARCHAR(MAX),
    [instantiatesUri] VARCHAR(MAX),
    [basedOn] VARCHAR(MAX),
    [status] NVARCHAR(100),
    [statusReason.id] NVARCHAR(100),
    [statusReason.extension] NVARCHAR(MAX),
    [statusReason.coding] VARCHAR(MAX),
    [statusReason.text] NVARCHAR(4000),
    [vaccineCode.id] NVARCHAR(100),
    [vaccineCode.extension] NVARCHAR(MAX),
    [vaccineCode.coding] VARCHAR(MAX),
    [vaccineCode.text] NVARCHAR(4000),
    [manufacturer.id] NVARCHAR(100),
    [manufacturer.extension] NVARCHAR(MAX),
    [manufacturer.reference] NVARCHAR(4000),
    [manufacturer.type] VARCHAR(256),
    [manufacturer.identifier.id] NVARCHAR(100),
    [manufacturer.identifier.extension] NVARCHAR(MAX),
    [manufacturer.identifier.use] NVARCHAR(64),
    [manufacturer.identifier.type] NVARCHAR(MAX),
    [manufacturer.identifier.system] VARCHAR(256),
    [manufacturer.identifier.value] NVARCHAR(4000),
    [manufacturer.identifier.period] NVARCHAR(MAX),
    [manufacturer.identifier.assigner] NVARCHAR(MAX),
    [manufacturer.display] NVARCHAR(4000),
    [lotNumber] NVARCHAR(100),
    [expirationDate] VARCHAR(64),
    [patient.id] NVARCHAR(100),
    [patient.extension] NVARCHAR(MAX),
    [patient.reference] NVARCHAR(4000),
    [patient.type] VARCHAR(256),
    [patient.identifier.id] NVARCHAR(100),
    [patient.identifier.extension] NVARCHAR(MAX),
    [patient.identifier.use] NVARCHAR(64),
    [patient.identifier.type] NVARCHAR(MAX),
    [patient.identifier.system] VARCHAR(256),
    [patient.identifier.value] NVARCHAR(4000),
    [patient.identifier.period] NVARCHAR(MAX),
    [patient.identifier.assigner] NVARCHAR(MAX),
    [patient.display] NVARCHAR(4000),
    [encounter.id] NVARCHAR(100),
    [encounter.extension] NVARCHAR(MAX),
    [encounter.reference] NVARCHAR(4000),
    [encounter.type] VARCHAR(256),
    [encounter.identifier.id] NVARCHAR(100),
    [encounter.identifier.extension] NVARCHAR(MAX),
    [encounter.identifier.use] NVARCHAR(64),
    [encounter.identifier.type] NVARCHAR(MAX),
    [encounter.identifier.system] VARCHAR(256),
    [encounter.identifier.value] NVARCHAR(4000),
    [encounter.identifier.period] NVARCHAR(MAX),
    [encounter.identifier.assigner] NVARCHAR(MAX),
    [encounter.display] NVARCHAR(4000),
    [recorded] VARCHAR(64),
    [primarySource] bit,
    [location.id] NVARCHAR(100),
    [location.extension] NVARCHAR(MAX),
    [location.reference] NVARCHAR(4000),
    [location.type] VARCHAR(256),
    [location.identifier.id] NVARCHAR(100),
    [location.identifier.extension] NVARCHAR(MAX),
    [location.identifier.use] NVARCHAR(64),
    [location.identifier.type] NVARCHAR(MAX),
    [location.identifier.system] VARCHAR(256),
    [location.identifier.value] NVARCHAR(4000),
    [location.identifier.period] NVARCHAR(MAX),
    [location.identifier.assigner] NVARCHAR(MAX),
    [location.display] NVARCHAR(4000),
    [site.id] NVARCHAR(100),
    [site.extension] NVARCHAR(MAX),
    [site.coding] VARCHAR(MAX),
    [site.text] NVARCHAR(4000),
    [route.id] NVARCHAR(100),
    [route.extension] NVARCHAR(MAX),
    [route.coding] VARCHAR(MAX),
    [route.text] NVARCHAR(4000),
    [doseQuantity.id] NVARCHAR(100),
    [doseQuantity.extension] NVARCHAR(MAX),
    [doseQuantity.value] float,
    [doseQuantity.comparator] NVARCHAR(64),
    [doseQuantity.unit] NVARCHAR(100),
    [doseQuantity.system] VARCHAR(256),
    [doseQuantity.code] NVARCHAR(4000),
    [performer] VARCHAR(MAX),
    [note] VARCHAR(MAX),
    [reason] VARCHAR(MAX),
    [isSubpotent] bit,
    [subpotentReason] VARCHAR(MAX),
    [education] VARCHAR(MAX),
    [programEligibility] VARCHAR(MAX),
    [fundingSource.id] NVARCHAR(100),
    [fundingSource.extension] NVARCHAR(MAX),
    [fundingSource.coding] VARCHAR(MAX),
    [fundingSource.text] NVARCHAR(4000),
    [reaction] VARCHAR(MAX),
    [protocolApplied] VARCHAR(MAX),
    [occurrence.dateTime] VARCHAR(64),
    [occurrence.string] NVARCHAR(4000),
    [informationSource.codeableConcept.id] NVARCHAR(100),
    [informationSource.codeableConcept.extension] NVARCHAR(MAX),
    [informationSource.codeableConcept.coding] VARCHAR(MAX),
    [informationSource.codeableConcept.text] NVARCHAR(4000),
    [informationSource.reference.id] NVARCHAR(100),
    [informationSource.reference.extension] NVARCHAR(MAX),
    [informationSource.reference.reference] NVARCHAR(4000),
    [informationSource.reference.type] VARCHAR(256),
    [informationSource.reference.identifier.id] NVARCHAR(100),
    [informationSource.reference.identifier.extension] NVARCHAR(MAX),
    [informationSource.reference.identifier.use] NVARCHAR(64),
    [informationSource.reference.identifier.type] NVARCHAR(MAX),
    [informationSource.reference.identifier.system] VARCHAR(256),
    [informationSource.reference.identifier.value] NVARCHAR(4000),
    [informationSource.reference.identifier.period] NVARCHAR(MAX),
    [informationSource.reference.identifier.assigner] NVARCHAR(MAX),
    [informationSource.reference.display] NVARCHAR(4000),
) WITH (
    LOCATION='/Immunization/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.ImmunizationIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'Immunization/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.ImmunizationInstantiatesCanonical AS
SELECT
    [id],
    [instantiatesCanonical.JSON],
    [instantiatesCanonical]
FROM openrowset (
        BULK 'Immunization/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [instantiatesCanonical.JSON]  VARCHAR(MAX) '$.instantiatesCanonical'
    ) AS rowset
    CROSS APPLY openjson (rowset.[instantiatesCanonical.JSON]) with (
        [instantiatesCanonical]        NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.ImmunizationInstantiatesUri AS
SELECT
    [id],
    [instantiatesUri.JSON],
    [instantiatesUri]
FROM openrowset (
        BULK 'Immunization/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [instantiatesUri.JSON]  VARCHAR(MAX) '$.instantiatesUri'
    ) AS rowset
    CROSS APPLY openjson (rowset.[instantiatesUri.JSON]) with (
        [instantiatesUri]              NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.ImmunizationBasedOn AS
SELECT
    [id],
    [basedOn.JSON],
    [basedOn.id],
    [basedOn.extension],
    [basedOn.reference],
    [basedOn.type],
    [basedOn.identifier.id],
    [basedOn.identifier.extension],
    [basedOn.identifier.use],
    [basedOn.identifier.type],
    [basedOn.identifier.system],
    [basedOn.identifier.value],
    [basedOn.identifier.period],
    [basedOn.identifier.assigner],
    [basedOn.display]
FROM openrowset (
        BULK 'Immunization/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [basedOn.JSON]  VARCHAR(MAX) '$.basedOn'
    ) AS rowset
    CROSS APPLY openjson (rowset.[basedOn.JSON]) with (
        [basedOn.id]                   NVARCHAR(100)       '$.id',
        [basedOn.extension]            NVARCHAR(MAX)       '$.extension',
        [basedOn.reference]            NVARCHAR(4000)      '$.reference',
        [basedOn.type]                 VARCHAR(256)        '$.type',
        [basedOn.identifier.id]        NVARCHAR(100)       '$.identifier.id',
        [basedOn.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [basedOn.identifier.use]       NVARCHAR(64)        '$.identifier.use',
        [basedOn.identifier.type]      NVARCHAR(MAX)       '$.identifier.type',
        [basedOn.identifier.system]    VARCHAR(256)        '$.identifier.system',
        [basedOn.identifier.value]     NVARCHAR(4000)      '$.identifier.value',
        [basedOn.identifier.period]    NVARCHAR(MAX)       '$.identifier.period',
        [basedOn.identifier.assigner]  NVARCHAR(MAX)       '$.identifier.assigner',
        [basedOn.display]              NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.ImmunizationPerformer AS
SELECT
    [id],
    [performer.JSON],
    [performer.id],
    [performer.extension],
    [performer.modifierExtension],
    [performer.function.id],
    [performer.function.extension],
    [performer.function.coding],
    [performer.function.text],
    [performer.actor.id],
    [performer.actor.extension],
    [performer.actor.reference],
    [performer.actor.type],
    [performer.actor.identifier],
    [performer.actor.display]
FROM openrowset (
        BULK 'Immunization/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [performer.JSON]  VARCHAR(MAX) '$.performer'
    ) AS rowset
    CROSS APPLY openjson (rowset.[performer.JSON]) with (
        [performer.id]                 NVARCHAR(100)       '$.id',
        [performer.extension]          NVARCHAR(MAX)       '$.extension',
        [performer.modifierExtension]  NVARCHAR(MAX)       '$.modifierExtension',
        [performer.function.id]        NVARCHAR(100)       '$.function.id',
        [performer.function.extension] NVARCHAR(MAX)       '$.function.extension',
        [performer.function.coding]    NVARCHAR(MAX)       '$.function.coding',
        [performer.function.text]      NVARCHAR(4000)      '$.function.text',
        [performer.actor.id]           NVARCHAR(100)       '$.actor.id',
        [performer.actor.extension]    NVARCHAR(MAX)       '$.actor.extension',
        [performer.actor.reference]    NVARCHAR(4000)      '$.actor.reference',
        [performer.actor.type]         VARCHAR(256)        '$.actor.type',
        [performer.actor.identifier]   NVARCHAR(MAX)       '$.actor.identifier',
        [performer.actor.display]      NVARCHAR(4000)      '$.actor.display'
    ) j

GO

CREATE VIEW fhir.ImmunizationNote AS
SELECT
    [id],
    [note.JSON],
    [note.id],
    [note.extension],
    [note.time],
    [note.text],
    [note.author.reference.id],
    [note.author.reference.extension],
    [note.author.reference.reference],
    [note.author.reference.type],
    [note.author.reference.identifier],
    [note.author.reference.display],
    [note.author.string]
FROM openrowset (
        BULK 'Immunization/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [note.JSON]  VARCHAR(MAX) '$.note'
    ) AS rowset
    CROSS APPLY openjson (rowset.[note.JSON]) with (
        [note.id]                      NVARCHAR(100)       '$.id',
        [note.extension]               NVARCHAR(MAX)       '$.extension',
        [note.time]                    VARCHAR(64)         '$.time',
        [note.text]                    NVARCHAR(MAX)       '$.text',
        [note.author.reference.id]     NVARCHAR(100)       '$.author.reference.id',
        [note.author.reference.extension] NVARCHAR(MAX)       '$.author.reference.extension',
        [note.author.reference.reference] NVARCHAR(4000)      '$.author.reference.reference',
        [note.author.reference.type]   VARCHAR(256)        '$.author.reference.type',
        [note.author.reference.identifier] NVARCHAR(MAX)       '$.author.reference.identifier',
        [note.author.reference.display] NVARCHAR(4000)      '$.author.reference.display',
        [note.author.string]           NVARCHAR(4000)      '$.author.string'
    ) j

GO

CREATE VIEW fhir.ImmunizationReason AS
SELECT
    [id],
    [reason.JSON],
    [reason.id],
    [reason.extension],
    [reason.concept.id],
    [reason.concept.extension],
    [reason.concept.coding],
    [reason.concept.text],
    [reason.reference.id],
    [reason.reference.extension],
    [reason.reference.reference],
    [reason.reference.type],
    [reason.reference.identifier],
    [reason.reference.display]
FROM openrowset (
        BULK 'Immunization/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [reason.JSON]  VARCHAR(MAX) '$.reason'
    ) AS rowset
    CROSS APPLY openjson (rowset.[reason.JSON]) with (
        [reason.id]                    NVARCHAR(100)       '$.id',
        [reason.extension]             NVARCHAR(MAX)       '$.extension',
        [reason.concept.id]            NVARCHAR(100)       '$.concept.id',
        [reason.concept.extension]     NVARCHAR(MAX)       '$.concept.extension',
        [reason.concept.coding]        NVARCHAR(MAX)       '$.concept.coding',
        [reason.concept.text]          NVARCHAR(4000)      '$.concept.text',
        [reason.reference.id]          NVARCHAR(100)       '$.reference.id',
        [reason.reference.extension]   NVARCHAR(MAX)       '$.reference.extension',
        [reason.reference.reference]   NVARCHAR(4000)      '$.reference.reference',
        [reason.reference.type]        VARCHAR(256)        '$.reference.type',
        [reason.reference.identifier]  NVARCHAR(MAX)       '$.reference.identifier',
        [reason.reference.display]     NVARCHAR(4000)      '$.reference.display'
    ) j

GO

CREATE VIEW fhir.ImmunizationSubpotentReason AS
SELECT
    [id],
    [subpotentReason.JSON],
    [subpotentReason.id],
    [subpotentReason.extension],
    [subpotentReason.coding],
    [subpotentReason.text]
FROM openrowset (
        BULK 'Immunization/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [subpotentReason.JSON]  VARCHAR(MAX) '$.subpotentReason'
    ) AS rowset
    CROSS APPLY openjson (rowset.[subpotentReason.JSON]) with (
        [subpotentReason.id]           NVARCHAR(100)       '$.id',
        [subpotentReason.extension]    NVARCHAR(MAX)       '$.extension',
        [subpotentReason.coding]       NVARCHAR(MAX)       '$.coding' AS JSON,
        [subpotentReason.text]         NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.ImmunizationEducation AS
SELECT
    [id],
    [education.JSON],
    [education.id],
    [education.extension],
    [education.modifierExtension],
    [education.documentType],
    [education.reference],
    [education.publicationDate],
    [education.presentationDate]
FROM openrowset (
        BULK 'Immunization/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [education.JSON]  VARCHAR(MAX) '$.education'
    ) AS rowset
    CROSS APPLY openjson (rowset.[education.JSON]) with (
        [education.id]                 NVARCHAR(100)       '$.id',
        [education.extension]          NVARCHAR(MAX)       '$.extension',
        [education.modifierExtension]  NVARCHAR(MAX)       '$.modifierExtension',
        [education.documentType]       NVARCHAR(100)       '$.documentType',
        [education.reference]          VARCHAR(256)        '$.reference',
        [education.publicationDate]    VARCHAR(64)         '$.publicationDate',
        [education.presentationDate]   VARCHAR(64)         '$.presentationDate'
    ) j

GO

CREATE VIEW fhir.ImmunizationProgramEligibility AS
SELECT
    [id],
    [programEligibility.JSON],
    [programEligibility.id],
    [programEligibility.extension],
    [programEligibility.coding],
    [programEligibility.text]
FROM openrowset (
        BULK 'Immunization/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [programEligibility.JSON]  VARCHAR(MAX) '$.programEligibility'
    ) AS rowset
    CROSS APPLY openjson (rowset.[programEligibility.JSON]) with (
        [programEligibility.id]        NVARCHAR(100)       '$.id',
        [programEligibility.extension] NVARCHAR(MAX)       '$.extension',
        [programEligibility.coding]    NVARCHAR(MAX)       '$.coding' AS JSON,
        [programEligibility.text]      NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.ImmunizationReaction AS
SELECT
    [id],
    [reaction.JSON],
    [reaction.id],
    [reaction.extension],
    [reaction.modifierExtension],
    [reaction.date],
    [reaction.detail.id],
    [reaction.detail.extension],
    [reaction.detail.reference],
    [reaction.detail.type],
    [reaction.detail.identifier],
    [reaction.detail.display],
    [reaction.reported]
FROM openrowset (
        BULK 'Immunization/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [reaction.JSON]  VARCHAR(MAX) '$.reaction'
    ) AS rowset
    CROSS APPLY openjson (rowset.[reaction.JSON]) with (
        [reaction.id]                  NVARCHAR(100)       '$.id',
        [reaction.extension]           NVARCHAR(MAX)       '$.extension',
        [reaction.modifierExtension]   NVARCHAR(MAX)       '$.modifierExtension',
        [reaction.date]                VARCHAR(64)         '$.date',
        [reaction.detail.id]           NVARCHAR(100)       '$.detail.id',
        [reaction.detail.extension]    NVARCHAR(MAX)       '$.detail.extension',
        [reaction.detail.reference]    NVARCHAR(4000)      '$.detail.reference',
        [reaction.detail.type]         VARCHAR(256)        '$.detail.type',
        [reaction.detail.identifier]   NVARCHAR(MAX)       '$.detail.identifier',
        [reaction.detail.display]      NVARCHAR(4000)      '$.detail.display',
        [reaction.reported]            bit                 '$.reported'
    ) j

GO

CREATE VIEW fhir.ImmunizationProtocolApplied AS
SELECT
    [id],
    [protocolApplied.JSON],
    [protocolApplied.id],
    [protocolApplied.extension],
    [protocolApplied.modifierExtension],
    [protocolApplied.series],
    [protocolApplied.authority.id],
    [protocolApplied.authority.extension],
    [protocolApplied.authority.reference],
    [protocolApplied.authority.type],
    [protocolApplied.authority.identifier],
    [protocolApplied.authority.display],
    [protocolApplied.targetDisease],
    [protocolApplied.doseNumber],
    [protocolApplied.seriesDoses]
FROM openrowset (
        BULK 'Immunization/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [protocolApplied.JSON]  VARCHAR(MAX) '$.protocolApplied'
    ) AS rowset
    CROSS APPLY openjson (rowset.[protocolApplied.JSON]) with (
        [protocolApplied.id]           NVARCHAR(100)       '$.id',
        [protocolApplied.extension]    NVARCHAR(MAX)       '$.extension',
        [protocolApplied.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [protocolApplied.series]       NVARCHAR(4000)      '$.series',
        [protocolApplied.authority.id] NVARCHAR(100)       '$.authority.id',
        [protocolApplied.authority.extension] NVARCHAR(MAX)       '$.authority.extension',
        [protocolApplied.authority.reference] NVARCHAR(4000)      '$.authority.reference',
        [protocolApplied.authority.type] VARCHAR(256)        '$.authority.type',
        [protocolApplied.authority.identifier] NVARCHAR(MAX)       '$.authority.identifier',
        [protocolApplied.authority.display] NVARCHAR(4000)      '$.authority.display',
        [protocolApplied.targetDisease] NVARCHAR(MAX)       '$.targetDisease' AS JSON,
        [protocolApplied.doseNumber]   NVARCHAR(4000)      '$.doseNumber',
        [protocolApplied.seriesDoses]  NVARCHAR(4000)      '$.seriesDoses'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[ImmunizationEvaluation] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [status] NVARCHAR(100),
    [patient.id] NVARCHAR(100),
    [patient.extension] NVARCHAR(MAX),
    [patient.reference] NVARCHAR(4000),
    [patient.type] VARCHAR(256),
    [patient.identifier.id] NVARCHAR(100),
    [patient.identifier.extension] NVARCHAR(MAX),
    [patient.identifier.use] NVARCHAR(64),
    [patient.identifier.type] NVARCHAR(MAX),
    [patient.identifier.system] VARCHAR(256),
    [patient.identifier.value] NVARCHAR(4000),
    [patient.identifier.period] NVARCHAR(MAX),
    [patient.identifier.assigner] NVARCHAR(MAX),
    [patient.display] NVARCHAR(4000),
    [date] VARCHAR(64),
    [authority.id] NVARCHAR(100),
    [authority.extension] NVARCHAR(MAX),
    [authority.reference] NVARCHAR(4000),
    [authority.type] VARCHAR(256),
    [authority.identifier.id] NVARCHAR(100),
    [authority.identifier.extension] NVARCHAR(MAX),
    [authority.identifier.use] NVARCHAR(64),
    [authority.identifier.type] NVARCHAR(MAX),
    [authority.identifier.system] VARCHAR(256),
    [authority.identifier.value] NVARCHAR(4000),
    [authority.identifier.period] NVARCHAR(MAX),
    [authority.identifier.assigner] NVARCHAR(MAX),
    [authority.display] NVARCHAR(4000),
    [targetDisease.id] NVARCHAR(100),
    [targetDisease.extension] NVARCHAR(MAX),
    [targetDisease.coding] VARCHAR(MAX),
    [targetDisease.text] NVARCHAR(4000),
    [immunizationEvent.id] NVARCHAR(100),
    [immunizationEvent.extension] NVARCHAR(MAX),
    [immunizationEvent.reference] NVARCHAR(4000),
    [immunizationEvent.type] VARCHAR(256),
    [immunizationEvent.identifier.id] NVARCHAR(100),
    [immunizationEvent.identifier.extension] NVARCHAR(MAX),
    [immunizationEvent.identifier.use] NVARCHAR(64),
    [immunizationEvent.identifier.type] NVARCHAR(MAX),
    [immunizationEvent.identifier.system] VARCHAR(256),
    [immunizationEvent.identifier.value] NVARCHAR(4000),
    [immunizationEvent.identifier.period] NVARCHAR(MAX),
    [immunizationEvent.identifier.assigner] NVARCHAR(MAX),
    [immunizationEvent.display] NVARCHAR(4000),
    [doseStatus.id] NVARCHAR(100),
    [doseStatus.extension] NVARCHAR(MAX),
    [doseStatus.coding] VARCHAR(MAX),
    [doseStatus.text] NVARCHAR(4000),
    [doseStatusReason] VARCHAR(MAX),
    [description] NVARCHAR(4000),
    [series] NVARCHAR(4000),
    [doseNumber] NVARCHAR(4000),
    [seriesDoses] NVARCHAR(4000),
) WITH (
    LOCATION='/ImmunizationEvaluation/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.ImmunizationEvaluationIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'ImmunizationEvaluation/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.ImmunizationEvaluationDoseStatusReason AS
SELECT
    [id],
    [doseStatusReason.JSON],
    [doseStatusReason.id],
    [doseStatusReason.extension],
    [doseStatusReason.coding],
    [doseStatusReason.text]
FROM openrowset (
        BULK 'ImmunizationEvaluation/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [doseStatusReason.JSON]  VARCHAR(MAX) '$.doseStatusReason'
    ) AS rowset
    CROSS APPLY openjson (rowset.[doseStatusReason.JSON]) with (
        [doseStatusReason.id]          NVARCHAR(100)       '$.id',
        [doseStatusReason.extension]   NVARCHAR(MAX)       '$.extension',
        [doseStatusReason.coding]      NVARCHAR(MAX)       '$.coding' AS JSON,
        [doseStatusReason.text]        NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[ImmunizationRecommendation] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [instantiatesCanonical] VARCHAR(MAX),
    [instantiatesUri] VARCHAR(MAX),
    [patient.id] NVARCHAR(100),
    [patient.extension] NVARCHAR(MAX),
    [patient.reference] NVARCHAR(4000),
    [patient.type] VARCHAR(256),
    [patient.identifier.id] NVARCHAR(100),
    [patient.identifier.extension] NVARCHAR(MAX),
    [patient.identifier.use] NVARCHAR(64),
    [patient.identifier.type] NVARCHAR(MAX),
    [patient.identifier.system] VARCHAR(256),
    [patient.identifier.value] NVARCHAR(4000),
    [patient.identifier.period] NVARCHAR(MAX),
    [patient.identifier.assigner] NVARCHAR(MAX),
    [patient.display] NVARCHAR(4000),
    [date] VARCHAR(64),
    [authority.id] NVARCHAR(100),
    [authority.extension] NVARCHAR(MAX),
    [authority.reference] NVARCHAR(4000),
    [authority.type] VARCHAR(256),
    [authority.identifier.id] NVARCHAR(100),
    [authority.identifier.extension] NVARCHAR(MAX),
    [authority.identifier.use] NVARCHAR(64),
    [authority.identifier.type] NVARCHAR(MAX),
    [authority.identifier.system] VARCHAR(256),
    [authority.identifier.value] NVARCHAR(4000),
    [authority.identifier.period] NVARCHAR(MAX),
    [authority.identifier.assigner] NVARCHAR(MAX),
    [authority.display] NVARCHAR(4000),
    [recommendation] VARCHAR(MAX),
) WITH (
    LOCATION='/ImmunizationRecommendation/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.ImmunizationRecommendationIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'ImmunizationRecommendation/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.ImmunizationRecommendationInstantiatesCanonical AS
SELECT
    [id],
    [instantiatesCanonical.JSON],
    [instantiatesCanonical]
FROM openrowset (
        BULK 'ImmunizationRecommendation/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [instantiatesCanonical.JSON]  VARCHAR(MAX) '$.instantiatesCanonical'
    ) AS rowset
    CROSS APPLY openjson (rowset.[instantiatesCanonical.JSON]) with (
        [instantiatesCanonical]        NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.ImmunizationRecommendationInstantiatesUri AS
SELECT
    [id],
    [instantiatesUri.JSON],
    [instantiatesUri]
FROM openrowset (
        BULK 'ImmunizationRecommendation/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [instantiatesUri.JSON]  VARCHAR(MAX) '$.instantiatesUri'
    ) AS rowset
    CROSS APPLY openjson (rowset.[instantiatesUri.JSON]) with (
        [instantiatesUri]              NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.ImmunizationRecommendationRecommendation AS
SELECT
    [id],
    [recommendation.JSON],
    [recommendation.id],
    [recommendation.extension],
    [recommendation.modifierExtension],
    [recommendation.vaccineCode],
    [recommendation.targetDisease],
    [recommendation.contraindicatedVaccineCode],
    [recommendation.forecastStatus.id],
    [recommendation.forecastStatus.extension],
    [recommendation.forecastStatus.coding],
    [recommendation.forecastStatus.text],
    [recommendation.forecastReason],
    [recommendation.dateCriterion],
    [recommendation.description],
    [recommendation.series],
    [recommendation.doseNumber],
    [recommendation.seriesDoses],
    [recommendation.supportingImmunization],
    [recommendation.supportingPatientInformation]
FROM openrowset (
        BULK 'ImmunizationRecommendation/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [recommendation.JSON]  VARCHAR(MAX) '$.recommendation'
    ) AS rowset
    CROSS APPLY openjson (rowset.[recommendation.JSON]) with (
        [recommendation.id]            NVARCHAR(100)       '$.id',
        [recommendation.extension]     NVARCHAR(MAX)       '$.extension',
        [recommendation.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [recommendation.vaccineCode]   NVARCHAR(MAX)       '$.vaccineCode' AS JSON,
        [recommendation.targetDisease] NVARCHAR(MAX)       '$.targetDisease' AS JSON,
        [recommendation.contraindicatedVaccineCode] NVARCHAR(MAX)       '$.contraindicatedVaccineCode' AS JSON,
        [recommendation.forecastStatus.id] NVARCHAR(100)       '$.forecastStatus.id',
        [recommendation.forecastStatus.extension] NVARCHAR(MAX)       '$.forecastStatus.extension',
        [recommendation.forecastStatus.coding] NVARCHAR(MAX)       '$.forecastStatus.coding',
        [recommendation.forecastStatus.text] NVARCHAR(4000)      '$.forecastStatus.text',
        [recommendation.forecastReason] NVARCHAR(MAX)       '$.forecastReason' AS JSON,
        [recommendation.dateCriterion] NVARCHAR(MAX)       '$.dateCriterion' AS JSON,
        [recommendation.description]   NVARCHAR(4000)      '$.description',
        [recommendation.series]        NVARCHAR(4000)      '$.series',
        [recommendation.doseNumber]    NVARCHAR(4000)      '$.doseNumber',
        [recommendation.seriesDoses]   NVARCHAR(4000)      '$.seriesDoses',
        [recommendation.supportingImmunization] NVARCHAR(MAX)       '$.supportingImmunization' AS JSON,
        [recommendation.supportingPatientInformation] NVARCHAR(MAX)       '$.supportingPatientInformation' AS JSON
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[ImplementationGuide] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [url] VARCHAR(256),
    [identifier] VARCHAR(MAX),
    [version] NVARCHAR(100),
    [name] NVARCHAR(500),
    [title] NVARCHAR(4000),
    [status] NVARCHAR(100),
    [experimental] bit,
    [date] VARCHAR(64),
    [publisher] NVARCHAR(500),
    [contact] VARCHAR(MAX),
    [description] NVARCHAR(MAX),
    [useContext] VARCHAR(MAX),
    [jurisdiction] VARCHAR(MAX),
    [purpose] NVARCHAR(MAX),
    [copyright] NVARCHAR(MAX),
    [packageId] VARCHAR(64),
    [license] NVARCHAR(4000),
    [fhirVersion] VARCHAR(MAX),
    [dependsOn] VARCHAR(MAX),
    [global] VARCHAR(MAX),
    [definition.id] NVARCHAR(100),
    [definition.extension] NVARCHAR(MAX),
    [definition.modifierExtension] NVARCHAR(MAX),
    [definition.grouping] VARCHAR(MAX),
    [definition.resource] VARCHAR(MAX),
    [definition.page.id] NVARCHAR(100),
    [definition.page.extension] NVARCHAR(MAX),
    [definition.page.modifierExtension] NVARCHAR(MAX),
    [definition.page.title] NVARCHAR(4000),
    [definition.page.generation] NVARCHAR(4000),
    [definition.page.page] NVARCHAR(MAX),
    [definition.page.name.url] VARCHAR(256),
    [definition.page.name.reference] NVARCHAR(MAX),
    [definition.parameter] VARCHAR(MAX),
    [definition.template] VARCHAR(MAX),
    [manifest.id] NVARCHAR(100),
    [manifest.extension] NVARCHAR(MAX),
    [manifest.modifierExtension] NVARCHAR(MAX),
    [manifest.rendering] VARCHAR(256),
    [manifest.resource] VARCHAR(MAX),
    [manifest.page] VARCHAR(MAX),
    [manifest.image] VARCHAR(MAX),
    [manifest.other] VARCHAR(MAX),
) WITH (
    LOCATION='/ImplementationGuide/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.ImplementationGuideIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'ImplementationGuide/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.ImplementationGuideContact AS
SELECT
    [id],
    [contact.JSON],
    [contact.id],
    [contact.extension],
    [contact.name],
    [contact.telecom]
FROM openrowset (
        BULK 'ImplementationGuide/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [contact.JSON]  VARCHAR(MAX) '$.contact'
    ) AS rowset
    CROSS APPLY openjson (rowset.[contact.JSON]) with (
        [contact.id]                   NVARCHAR(100)       '$.id',
        [contact.extension]            NVARCHAR(MAX)       '$.extension',
        [contact.name]                 NVARCHAR(500)       '$.name',
        [contact.telecom]              NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.ImplementationGuideUseContext AS
SELECT
    [id],
    [useContext.JSON],
    [useContext.id],
    [useContext.extension],
    [useContext.code.id],
    [useContext.code.extension],
    [useContext.code.system],
    [useContext.code.version],
    [useContext.code.code],
    [useContext.code.display],
    [useContext.code.userSelected],
    [useContext.value.codeableConcept.id],
    [useContext.value.codeableConcept.extension],
    [useContext.value.codeableConcept.coding],
    [useContext.value.codeableConcept.text],
    [useContext.value.quantity.id],
    [useContext.value.quantity.extension],
    [useContext.value.quantity.value],
    [useContext.value.quantity.comparator],
    [useContext.value.quantity.unit],
    [useContext.value.quantity.system],
    [useContext.value.quantity.code],
    [useContext.value.range.id],
    [useContext.value.range.extension],
    [useContext.value.range.low],
    [useContext.value.range.high],
    [useContext.value.reference.id],
    [useContext.value.reference.extension],
    [useContext.value.reference.reference],
    [useContext.value.reference.type],
    [useContext.value.reference.identifier],
    [useContext.value.reference.display]
FROM openrowset (
        BULK 'ImplementationGuide/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [useContext.JSON]  VARCHAR(MAX) '$.useContext'
    ) AS rowset
    CROSS APPLY openjson (rowset.[useContext.JSON]) with (
        [useContext.id]                NVARCHAR(100)       '$.id',
        [useContext.extension]         NVARCHAR(MAX)       '$.extension',
        [useContext.code.id]           NVARCHAR(100)       '$.code.id',
        [useContext.code.extension]    NVARCHAR(MAX)       '$.code.extension',
        [useContext.code.system]       VARCHAR(256)        '$.code.system',
        [useContext.code.version]      NVARCHAR(100)       '$.code.version',
        [useContext.code.code]         NVARCHAR(4000)      '$.code.code',
        [useContext.code.display]      NVARCHAR(4000)      '$.code.display',
        [useContext.code.userSelected] bit                 '$.code.userSelected',
        [useContext.value.codeableConcept.id] NVARCHAR(100)       '$.value.codeableConcept.id',
        [useContext.value.codeableConcept.extension] NVARCHAR(MAX)       '$.value.codeableConcept.extension',
        [useContext.value.codeableConcept.coding] NVARCHAR(MAX)       '$.value.codeableConcept.coding',
        [useContext.value.codeableConcept.text] NVARCHAR(4000)      '$.value.codeableConcept.text',
        [useContext.value.quantity.id] NVARCHAR(100)       '$.value.quantity.id',
        [useContext.value.quantity.extension] NVARCHAR(MAX)       '$.value.quantity.extension',
        [useContext.value.quantity.value] float               '$.value.quantity.value',
        [useContext.value.quantity.comparator] NVARCHAR(64)        '$.value.quantity.comparator',
        [useContext.value.quantity.unit] NVARCHAR(100)       '$.value.quantity.unit',
        [useContext.value.quantity.system] VARCHAR(256)        '$.value.quantity.system',
        [useContext.value.quantity.code] NVARCHAR(4000)      '$.value.quantity.code',
        [useContext.value.range.id]    NVARCHAR(100)       '$.value.range.id',
        [useContext.value.range.extension] NVARCHAR(MAX)       '$.value.range.extension',
        [useContext.value.range.low]   NVARCHAR(MAX)       '$.value.range.low',
        [useContext.value.range.high]  NVARCHAR(MAX)       '$.value.range.high',
        [useContext.value.reference.id] NVARCHAR(100)       '$.value.reference.id',
        [useContext.value.reference.extension] NVARCHAR(MAX)       '$.value.reference.extension',
        [useContext.value.reference.reference] NVARCHAR(4000)      '$.value.reference.reference',
        [useContext.value.reference.type] VARCHAR(256)        '$.value.reference.type',
        [useContext.value.reference.identifier] NVARCHAR(MAX)       '$.value.reference.identifier',
        [useContext.value.reference.display] NVARCHAR(4000)      '$.value.reference.display'
    ) j

GO

CREATE VIEW fhir.ImplementationGuideJurisdiction AS
SELECT
    [id],
    [jurisdiction.JSON],
    [jurisdiction.id],
    [jurisdiction.extension],
    [jurisdiction.coding],
    [jurisdiction.text]
FROM openrowset (
        BULK 'ImplementationGuide/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [jurisdiction.JSON]  VARCHAR(MAX) '$.jurisdiction'
    ) AS rowset
    CROSS APPLY openjson (rowset.[jurisdiction.JSON]) with (
        [jurisdiction.id]              NVARCHAR(100)       '$.id',
        [jurisdiction.extension]       NVARCHAR(MAX)       '$.extension',
        [jurisdiction.coding]          NVARCHAR(MAX)       '$.coding' AS JSON,
        [jurisdiction.text]            NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.ImplementationGuideFhirVersion AS
SELECT
    [id],
    [fhirVersion.JSON],
    [fhirVersion]
FROM openrowset (
        BULK 'ImplementationGuide/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [fhirVersion.JSON]  VARCHAR(MAX) '$.fhirVersion'
    ) AS rowset
    CROSS APPLY openjson (rowset.[fhirVersion.JSON]) with (
        [fhirVersion]                  NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.ImplementationGuideDependsOn AS
SELECT
    [id],
    [dependsOn.JSON],
    [dependsOn.id],
    [dependsOn.extension],
    [dependsOn.modifierExtension],
    [dependsOn.uri],
    [dependsOn.packageId],
    [dependsOn.version]
FROM openrowset (
        BULK 'ImplementationGuide/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [dependsOn.JSON]  VARCHAR(MAX) '$.dependsOn'
    ) AS rowset
    CROSS APPLY openjson (rowset.[dependsOn.JSON]) with (
        [dependsOn.id]                 NVARCHAR(100)       '$.id',
        [dependsOn.extension]          NVARCHAR(MAX)       '$.extension',
        [dependsOn.modifierExtension]  NVARCHAR(MAX)       '$.modifierExtension',
        [dependsOn.uri]                VARCHAR(256)        '$.uri',
        [dependsOn.packageId]          VARCHAR(64)         '$.packageId',
        [dependsOn.version]            NVARCHAR(100)       '$.version'
    ) j

GO

CREATE VIEW fhir.ImplementationGuideGlobal AS
SELECT
    [id],
    [global.JSON],
    [global.id],
    [global.extension],
    [global.modifierExtension],
    [global.type],
    [global.profile]
FROM openrowset (
        BULK 'ImplementationGuide/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [global.JSON]  VARCHAR(MAX) '$.global'
    ) AS rowset
    CROSS APPLY openjson (rowset.[global.JSON]) with (
        [global.id]                    NVARCHAR(100)       '$.id',
        [global.extension]             NVARCHAR(MAX)       '$.extension',
        [global.modifierExtension]     NVARCHAR(MAX)       '$.modifierExtension',
        [global.type]                  NVARCHAR(100)       '$.type',
        [global.profile]               VARCHAR(256)        '$.profile'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[Ingredient] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier.id] NVARCHAR(100),
    [identifier.extension] NVARCHAR(MAX),
    [identifier.use] NVARCHAR(64),
    [identifier.type.id] NVARCHAR(100),
    [identifier.type.extension] NVARCHAR(MAX),
    [identifier.type.coding] NVARCHAR(MAX),
    [identifier.type.text] NVARCHAR(4000),
    [identifier.system] VARCHAR(256),
    [identifier.value] NVARCHAR(4000),
    [identifier.period.id] NVARCHAR(100),
    [identifier.period.extension] NVARCHAR(MAX),
    [identifier.period.start] VARCHAR(64),
    [identifier.period.end] VARCHAR(64),
    [identifier.assigner.id] NVARCHAR(100),
    [identifier.assigner.extension] NVARCHAR(MAX),
    [identifier.assigner.reference] NVARCHAR(4000),
    [identifier.assigner.type] VARCHAR(256),
    [identifier.assigner.identifier] NVARCHAR(MAX),
    [identifier.assigner.display] NVARCHAR(4000),
    [status] NVARCHAR(100),
    [for] VARCHAR(MAX),
    [role.id] NVARCHAR(100),
    [role.extension] NVARCHAR(MAX),
    [role.coding] VARCHAR(MAX),
    [role.text] NVARCHAR(4000),
    [function] VARCHAR(MAX),
    [group.id] NVARCHAR(100),
    [group.extension] NVARCHAR(MAX),
    [group.coding] VARCHAR(MAX),
    [group.text] NVARCHAR(4000),
    [allergenicIndicator] bit,
    [manufacturer] VARCHAR(MAX),
    [substance.id] NVARCHAR(100),
    [substance.extension] NVARCHAR(MAX),
    [substance.modifierExtension] NVARCHAR(MAX),
    [substance.code.id] NVARCHAR(100),
    [substance.code.extension] NVARCHAR(MAX),
    [substance.code.concept] NVARCHAR(MAX),
    [substance.code.reference] NVARCHAR(MAX),
    [substance.strength] VARCHAR(MAX),
) WITH (
    LOCATION='/Ingredient/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.IngredientFor AS
SELECT
    [id],
    [for.JSON],
    [for.id],
    [for.extension],
    [for.reference],
    [for.type],
    [for.identifier.id],
    [for.identifier.extension],
    [for.identifier.use],
    [for.identifier.type],
    [for.identifier.system],
    [for.identifier.value],
    [for.identifier.period],
    [for.identifier.assigner],
    [for.display]
FROM openrowset (
        BULK 'Ingredient/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [for.JSON]  VARCHAR(MAX) '$.for'
    ) AS rowset
    CROSS APPLY openjson (rowset.[for.JSON]) with (
        [for.id]                       NVARCHAR(100)       '$.id',
        [for.extension]                NVARCHAR(MAX)       '$.extension',
        [for.reference]                NVARCHAR(4000)      '$.reference',
        [for.type]                     VARCHAR(256)        '$.type',
        [for.identifier.id]            NVARCHAR(100)       '$.identifier.id',
        [for.identifier.extension]     NVARCHAR(MAX)       '$.identifier.extension',
        [for.identifier.use]           NVARCHAR(64)        '$.identifier.use',
        [for.identifier.type]          NVARCHAR(MAX)       '$.identifier.type',
        [for.identifier.system]        VARCHAR(256)        '$.identifier.system',
        [for.identifier.value]         NVARCHAR(4000)      '$.identifier.value',
        [for.identifier.period]        NVARCHAR(MAX)       '$.identifier.period',
        [for.identifier.assigner]      NVARCHAR(MAX)       '$.identifier.assigner',
        [for.display]                  NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.IngredientFunction AS
SELECT
    [id],
    [function.JSON],
    [function.id],
    [function.extension],
    [function.coding],
    [function.text]
FROM openrowset (
        BULK 'Ingredient/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [function.JSON]  VARCHAR(MAX) '$.function'
    ) AS rowset
    CROSS APPLY openjson (rowset.[function.JSON]) with (
        [function.id]                  NVARCHAR(100)       '$.id',
        [function.extension]           NVARCHAR(MAX)       '$.extension',
        [function.coding]              NVARCHAR(MAX)       '$.coding' AS JSON,
        [function.text]                NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.IngredientManufacturer AS
SELECT
    [id],
    [manufacturer.JSON],
    [manufacturer.id],
    [manufacturer.extension],
    [manufacturer.modifierExtension],
    [manufacturer.role.id],
    [manufacturer.role.extension],
    [manufacturer.role.system],
    [manufacturer.role.version],
    [manufacturer.role.code],
    [manufacturer.role.display],
    [manufacturer.role.userSelected],
    [manufacturer.manufacturer.id],
    [manufacturer.manufacturer.extension],
    [manufacturer.manufacturer.reference],
    [manufacturer.manufacturer.type],
    [manufacturer.manufacturer.identifier],
    [manufacturer.manufacturer.display]
FROM openrowset (
        BULK 'Ingredient/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [manufacturer.JSON]  VARCHAR(MAX) '$.manufacturer'
    ) AS rowset
    CROSS APPLY openjson (rowset.[manufacturer.JSON]) with (
        [manufacturer.id]              NVARCHAR(100)       '$.id',
        [manufacturer.extension]       NVARCHAR(MAX)       '$.extension',
        [manufacturer.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [manufacturer.role.id]         NVARCHAR(100)       '$.role.id',
        [manufacturer.role.extension]  NVARCHAR(MAX)       '$.role.extension',
        [manufacturer.role.system]     VARCHAR(256)        '$.role.system',
        [manufacturer.role.version]    NVARCHAR(100)       '$.role.version',
        [manufacturer.role.code]       NVARCHAR(4000)      '$.role.code',
        [manufacturer.role.display]    NVARCHAR(4000)      '$.role.display',
        [manufacturer.role.userSelected] bit                 '$.role.userSelected',
        [manufacturer.manufacturer.id] NVARCHAR(100)       '$.manufacturer.id',
        [manufacturer.manufacturer.extension] NVARCHAR(MAX)       '$.manufacturer.extension',
        [manufacturer.manufacturer.reference] NVARCHAR(4000)      '$.manufacturer.reference',
        [manufacturer.manufacturer.type] VARCHAR(256)        '$.manufacturer.type',
        [manufacturer.manufacturer.identifier] NVARCHAR(MAX)       '$.manufacturer.identifier',
        [manufacturer.manufacturer.display] NVARCHAR(4000)      '$.manufacturer.display'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[InsurancePlan] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [status] NVARCHAR(100),
    [type] VARCHAR(MAX),
    [name] NVARCHAR(500),
    [alias] VARCHAR(MAX),
    [period.id] NVARCHAR(100),
    [period.extension] NVARCHAR(MAX),
    [period.start] VARCHAR(64),
    [period.end] VARCHAR(64),
    [ownedBy.id] NVARCHAR(100),
    [ownedBy.extension] NVARCHAR(MAX),
    [ownedBy.reference] NVARCHAR(4000),
    [ownedBy.type] VARCHAR(256),
    [ownedBy.identifier.id] NVARCHAR(100),
    [ownedBy.identifier.extension] NVARCHAR(MAX),
    [ownedBy.identifier.use] NVARCHAR(64),
    [ownedBy.identifier.type] NVARCHAR(MAX),
    [ownedBy.identifier.system] VARCHAR(256),
    [ownedBy.identifier.value] NVARCHAR(4000),
    [ownedBy.identifier.period] NVARCHAR(MAX),
    [ownedBy.identifier.assigner] NVARCHAR(MAX),
    [ownedBy.display] NVARCHAR(4000),
    [administeredBy.id] NVARCHAR(100),
    [administeredBy.extension] NVARCHAR(MAX),
    [administeredBy.reference] NVARCHAR(4000),
    [administeredBy.type] VARCHAR(256),
    [administeredBy.identifier.id] NVARCHAR(100),
    [administeredBy.identifier.extension] NVARCHAR(MAX),
    [administeredBy.identifier.use] NVARCHAR(64),
    [administeredBy.identifier.type] NVARCHAR(MAX),
    [administeredBy.identifier.system] VARCHAR(256),
    [administeredBy.identifier.value] NVARCHAR(4000),
    [administeredBy.identifier.period] NVARCHAR(MAX),
    [administeredBy.identifier.assigner] NVARCHAR(MAX),
    [administeredBy.display] NVARCHAR(4000),
    [coverageArea] VARCHAR(MAX),
    [contact] VARCHAR(MAX),
    [endpoint] VARCHAR(MAX),
    [network] VARCHAR(MAX),
    [coverage] VARCHAR(MAX),
    [plan] VARCHAR(MAX),
) WITH (
    LOCATION='/InsurancePlan/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.InsurancePlanIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'InsurancePlan/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.InsurancePlanType AS
SELECT
    [id],
    [type.JSON],
    [type.id],
    [type.extension],
    [type.coding],
    [type.text]
FROM openrowset (
        BULK 'InsurancePlan/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [type.JSON]  VARCHAR(MAX) '$.type'
    ) AS rowset
    CROSS APPLY openjson (rowset.[type.JSON]) with (
        [type.id]                      NVARCHAR(100)       '$.id',
        [type.extension]               NVARCHAR(MAX)       '$.extension',
        [type.coding]                  NVARCHAR(MAX)       '$.coding' AS JSON,
        [type.text]                    NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.InsurancePlanAlias AS
SELECT
    [id],
    [alias.JSON],
    [alias]
FROM openrowset (
        BULK 'InsurancePlan/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [alias.JSON]  VARCHAR(MAX) '$.alias'
    ) AS rowset
    CROSS APPLY openjson (rowset.[alias.JSON]) with (
        [alias]                        NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.InsurancePlanCoverageArea AS
SELECT
    [id],
    [coverageArea.JSON],
    [coverageArea.id],
    [coverageArea.extension],
    [coverageArea.reference],
    [coverageArea.type],
    [coverageArea.identifier.id],
    [coverageArea.identifier.extension],
    [coverageArea.identifier.use],
    [coverageArea.identifier.type],
    [coverageArea.identifier.system],
    [coverageArea.identifier.value],
    [coverageArea.identifier.period],
    [coverageArea.identifier.assigner],
    [coverageArea.display]
FROM openrowset (
        BULK 'InsurancePlan/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [coverageArea.JSON]  VARCHAR(MAX) '$.coverageArea'
    ) AS rowset
    CROSS APPLY openjson (rowset.[coverageArea.JSON]) with (
        [coverageArea.id]              NVARCHAR(100)       '$.id',
        [coverageArea.extension]       NVARCHAR(MAX)       '$.extension',
        [coverageArea.reference]       NVARCHAR(4000)      '$.reference',
        [coverageArea.type]            VARCHAR(256)        '$.type',
        [coverageArea.identifier.id]   NVARCHAR(100)       '$.identifier.id',
        [coverageArea.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [coverageArea.identifier.use]  NVARCHAR(64)        '$.identifier.use',
        [coverageArea.identifier.type] NVARCHAR(MAX)       '$.identifier.type',
        [coverageArea.identifier.system] VARCHAR(256)        '$.identifier.system',
        [coverageArea.identifier.value] NVARCHAR(4000)      '$.identifier.value',
        [coverageArea.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [coverageArea.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [coverageArea.display]         NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.InsurancePlanContact AS
SELECT
    [id],
    [contact.JSON],
    [contact.id],
    [contact.extension],
    [contact.modifierExtension],
    [contact.purpose.id],
    [contact.purpose.extension],
    [contact.purpose.coding],
    [contact.purpose.text],
    [contact.name.id],
    [contact.name.extension],
    [contact.name.use],
    [contact.name.text],
    [contact.name.family],
    [contact.name.given],
    [contact.name.prefix],
    [contact.name.suffix],
    [contact.name.period],
    [contact.telecom],
    [contact.address.id],
    [contact.address.extension],
    [contact.address.use],
    [contact.address.type],
    [contact.address.text],
    [contact.address.line],
    [contact.address.city],
    [contact.address.district],
    [contact.address.state],
    [contact.address.postalCode],
    [contact.address.country],
    [contact.address.period]
FROM openrowset (
        BULK 'InsurancePlan/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [contact.JSON]  VARCHAR(MAX) '$.contact'
    ) AS rowset
    CROSS APPLY openjson (rowset.[contact.JSON]) with (
        [contact.id]                   NVARCHAR(100)       '$.id',
        [contact.extension]            NVARCHAR(MAX)       '$.extension',
        [contact.modifierExtension]    NVARCHAR(MAX)       '$.modifierExtension',
        [contact.purpose.id]           NVARCHAR(100)       '$.purpose.id',
        [contact.purpose.extension]    NVARCHAR(MAX)       '$.purpose.extension',
        [contact.purpose.coding]       NVARCHAR(MAX)       '$.purpose.coding',
        [contact.purpose.text]         NVARCHAR(4000)      '$.purpose.text',
        [contact.name.id]              NVARCHAR(100)       '$.name.id',
        [contact.name.extension]       NVARCHAR(MAX)       '$.name.extension',
        [contact.name.use]             NVARCHAR(64)        '$.name.use',
        [contact.name.text]            NVARCHAR(4000)      '$.name.text',
        [contact.name.family]          NVARCHAR(500)       '$.name.family',
        [contact.name.given]           NVARCHAR(MAX)       '$.name.given',
        [contact.name.prefix]          NVARCHAR(MAX)       '$.name.prefix',
        [contact.name.suffix]          NVARCHAR(MAX)       '$.name.suffix',
        [contact.name.period]          NVARCHAR(MAX)       '$.name.period',
        [contact.telecom]              NVARCHAR(MAX)       '$.telecom' AS JSON,
        [contact.address.id]           NVARCHAR(100)       '$.address.id',
        [contact.address.extension]    NVARCHAR(MAX)       '$.address.extension',
        [contact.address.use]          NVARCHAR(64)        '$.address.use',
        [contact.address.type]         NVARCHAR(64)        '$.address.type',
        [contact.address.text]         NVARCHAR(4000)      '$.address.text',
        [contact.address.line]         NVARCHAR(MAX)       '$.address.line',
        [contact.address.city]         NVARCHAR(500)       '$.address.city',
        [contact.address.district]     NVARCHAR(500)       '$.address.district',
        [contact.address.state]        NVARCHAR(500)       '$.address.state',
        [contact.address.postalCode]   NVARCHAR(100)       '$.address.postalCode',
        [contact.address.country]      NVARCHAR(500)       '$.address.country',
        [contact.address.period]       NVARCHAR(MAX)       '$.address.period'
    ) j

GO

CREATE VIEW fhir.InsurancePlanEndpoint AS
SELECT
    [id],
    [endpoint.JSON],
    [endpoint.id],
    [endpoint.extension],
    [endpoint.reference],
    [endpoint.type],
    [endpoint.identifier.id],
    [endpoint.identifier.extension],
    [endpoint.identifier.use],
    [endpoint.identifier.type],
    [endpoint.identifier.system],
    [endpoint.identifier.value],
    [endpoint.identifier.period],
    [endpoint.identifier.assigner],
    [endpoint.display]
FROM openrowset (
        BULK 'InsurancePlan/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [endpoint.JSON]  VARCHAR(MAX) '$.endpoint'
    ) AS rowset
    CROSS APPLY openjson (rowset.[endpoint.JSON]) with (
        [endpoint.id]                  NVARCHAR(100)       '$.id',
        [endpoint.extension]           NVARCHAR(MAX)       '$.extension',
        [endpoint.reference]           NVARCHAR(4000)      '$.reference',
        [endpoint.type]                VARCHAR(256)        '$.type',
        [endpoint.identifier.id]       NVARCHAR(100)       '$.identifier.id',
        [endpoint.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [endpoint.identifier.use]      NVARCHAR(64)        '$.identifier.use',
        [endpoint.identifier.type]     NVARCHAR(MAX)       '$.identifier.type',
        [endpoint.identifier.system]   VARCHAR(256)        '$.identifier.system',
        [endpoint.identifier.value]    NVARCHAR(4000)      '$.identifier.value',
        [endpoint.identifier.period]   NVARCHAR(MAX)       '$.identifier.period',
        [endpoint.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [endpoint.display]             NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.InsurancePlanNetwork AS
SELECT
    [id],
    [network.JSON],
    [network.id],
    [network.extension],
    [network.reference],
    [network.type],
    [network.identifier.id],
    [network.identifier.extension],
    [network.identifier.use],
    [network.identifier.type],
    [network.identifier.system],
    [network.identifier.value],
    [network.identifier.period],
    [network.identifier.assigner],
    [network.display]
FROM openrowset (
        BULK 'InsurancePlan/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [network.JSON]  VARCHAR(MAX) '$.network'
    ) AS rowset
    CROSS APPLY openjson (rowset.[network.JSON]) with (
        [network.id]                   NVARCHAR(100)       '$.id',
        [network.extension]            NVARCHAR(MAX)       '$.extension',
        [network.reference]            NVARCHAR(4000)      '$.reference',
        [network.type]                 VARCHAR(256)        '$.type',
        [network.identifier.id]        NVARCHAR(100)       '$.identifier.id',
        [network.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [network.identifier.use]       NVARCHAR(64)        '$.identifier.use',
        [network.identifier.type]      NVARCHAR(MAX)       '$.identifier.type',
        [network.identifier.system]    VARCHAR(256)        '$.identifier.system',
        [network.identifier.value]     NVARCHAR(4000)      '$.identifier.value',
        [network.identifier.period]    NVARCHAR(MAX)       '$.identifier.period',
        [network.identifier.assigner]  NVARCHAR(MAX)       '$.identifier.assigner',
        [network.display]              NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.InsurancePlanCoverage AS
SELECT
    [id],
    [coverage.JSON],
    [coverage.id],
    [coverage.extension],
    [coverage.modifierExtension],
    [coverage.type.id],
    [coverage.type.extension],
    [coverage.type.coding],
    [coverage.type.text],
    [coverage.network],
    [coverage.benefit]
FROM openrowset (
        BULK 'InsurancePlan/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [coverage.JSON]  VARCHAR(MAX) '$.coverage'
    ) AS rowset
    CROSS APPLY openjson (rowset.[coverage.JSON]) with (
        [coverage.id]                  NVARCHAR(100)       '$.id',
        [coverage.extension]           NVARCHAR(MAX)       '$.extension',
        [coverage.modifierExtension]   NVARCHAR(MAX)       '$.modifierExtension',
        [coverage.type.id]             NVARCHAR(100)       '$.type.id',
        [coverage.type.extension]      NVARCHAR(MAX)       '$.type.extension',
        [coverage.type.coding]         NVARCHAR(MAX)       '$.type.coding',
        [coverage.type.text]           NVARCHAR(4000)      '$.type.text',
        [coverage.network]             NVARCHAR(MAX)       '$.network' AS JSON,
        [coverage.benefit]             NVARCHAR(MAX)       '$.benefit' AS JSON
    ) j

GO

CREATE VIEW fhir.InsurancePlanPlan AS
SELECT
    [id],
    [plan.JSON],
    [plan.id],
    [plan.extension],
    [plan.modifierExtension],
    [plan.identifier],
    [plan.type.id],
    [plan.type.extension],
    [plan.type.coding],
    [plan.type.text],
    [plan.coverageArea],
    [plan.network],
    [plan.generalCost],
    [plan.specificCost]
FROM openrowset (
        BULK 'InsurancePlan/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [plan.JSON]  VARCHAR(MAX) '$.plan'
    ) AS rowset
    CROSS APPLY openjson (rowset.[plan.JSON]) with (
        [plan.id]                      NVARCHAR(100)       '$.id',
        [plan.extension]               NVARCHAR(MAX)       '$.extension',
        [plan.modifierExtension]       NVARCHAR(MAX)       '$.modifierExtension',
        [plan.identifier]              NVARCHAR(MAX)       '$.identifier' AS JSON,
        [plan.type.id]                 NVARCHAR(100)       '$.type.id',
        [plan.type.extension]          NVARCHAR(MAX)       '$.type.extension',
        [plan.type.coding]             NVARCHAR(MAX)       '$.type.coding',
        [plan.type.text]               NVARCHAR(4000)      '$.type.text',
        [plan.coverageArea]            NVARCHAR(MAX)       '$.coverageArea' AS JSON,
        [plan.network]                 NVARCHAR(MAX)       '$.network' AS JSON,
        [plan.generalCost]             NVARCHAR(MAX)       '$.generalCost' AS JSON,
        [plan.specificCost]            NVARCHAR(MAX)       '$.specificCost' AS JSON
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[InventoryReport] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [status] NVARCHAR(100),
    [countType] NVARCHAR(4000),
    [operationType.id] NVARCHAR(100),
    [operationType.extension] NVARCHAR(MAX),
    [operationType.coding] VARCHAR(MAX),
    [operationType.text] NVARCHAR(4000),
    [operationTypeReason.id] NVARCHAR(100),
    [operationTypeReason.extension] NVARCHAR(MAX),
    [operationTypeReason.coding] VARCHAR(MAX),
    [operationTypeReason.text] NVARCHAR(4000),
    [reportedDateTime] VARCHAR(64),
    [reporter.id] NVARCHAR(100),
    [reporter.extension] NVARCHAR(MAX),
    [reporter.reference] NVARCHAR(4000),
    [reporter.type] VARCHAR(256),
    [reporter.identifier.id] NVARCHAR(100),
    [reporter.identifier.extension] NVARCHAR(MAX),
    [reporter.identifier.use] NVARCHAR(64),
    [reporter.identifier.type] NVARCHAR(MAX),
    [reporter.identifier.system] VARCHAR(256),
    [reporter.identifier.value] NVARCHAR(4000),
    [reporter.identifier.period] NVARCHAR(MAX),
    [reporter.identifier.assigner] NVARCHAR(MAX),
    [reporter.display] NVARCHAR(4000),
    [reportingPeriod.id] NVARCHAR(100),
    [reportingPeriod.extension] NVARCHAR(MAX),
    [reportingPeriod.start] VARCHAR(64),
    [reportingPeriod.end] VARCHAR(64),
    [inventoryListing] VARCHAR(MAX),
    [note.id] NVARCHAR(100),
    [note.extension] NVARCHAR(MAX),
    [note.time] VARCHAR(64),
    [note.text] NVARCHAR(MAX),
    [note.author.reference.id] NVARCHAR(100),
    [note.author.reference.extension] NVARCHAR(MAX),
    [note.author.reference.reference] NVARCHAR(4000),
    [note.author.reference.type] VARCHAR(256),
    [note.author.reference.identifier] NVARCHAR(MAX),
    [note.author.reference.display] NVARCHAR(4000),
    [note.author.string] NVARCHAR(4000),
) WITH (
    LOCATION='/InventoryReport/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.InventoryReportIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'InventoryReport/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.InventoryReportInventoryListing AS
SELECT
    [id],
    [inventoryListing.JSON],
    [inventoryListing.id],
    [inventoryListing.extension],
    [inventoryListing.modifierExtension],
    [inventoryListing.location.id],
    [inventoryListing.location.extension],
    [inventoryListing.location.reference],
    [inventoryListing.location.type],
    [inventoryListing.location.identifier],
    [inventoryListing.location.display],
    [inventoryListing.itemStatus.id],
    [inventoryListing.itemStatus.extension],
    [inventoryListing.itemStatus.coding],
    [inventoryListing.itemStatus.text],
    [inventoryListing.countingDateTime],
    [inventoryListing.items]
FROM openrowset (
        BULK 'InventoryReport/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [inventoryListing.JSON]  VARCHAR(MAX) '$.inventoryListing'
    ) AS rowset
    CROSS APPLY openjson (rowset.[inventoryListing.JSON]) with (
        [inventoryListing.id]          NVARCHAR(100)       '$.id',
        [inventoryListing.extension]   NVARCHAR(MAX)       '$.extension',
        [inventoryListing.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [inventoryListing.location.id] NVARCHAR(100)       '$.location.id',
        [inventoryListing.location.extension] NVARCHAR(MAX)       '$.location.extension',
        [inventoryListing.location.reference] NVARCHAR(4000)      '$.location.reference',
        [inventoryListing.location.type] VARCHAR(256)        '$.location.type',
        [inventoryListing.location.identifier] NVARCHAR(MAX)       '$.location.identifier',
        [inventoryListing.location.display] NVARCHAR(4000)      '$.location.display',
        [inventoryListing.itemStatus.id] NVARCHAR(100)       '$.itemStatus.id',
        [inventoryListing.itemStatus.extension] NVARCHAR(MAX)       '$.itemStatus.extension',
        [inventoryListing.itemStatus.coding] NVARCHAR(MAX)       '$.itemStatus.coding',
        [inventoryListing.itemStatus.text] NVARCHAR(4000)      '$.itemStatus.text',
        [inventoryListing.countingDateTime] VARCHAR(64)         '$.countingDateTime',
        [inventoryListing.items]       NVARCHAR(MAX)       '$.items' AS JSON
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[Invoice] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [status] NVARCHAR(100),
    [cancelledReason] NVARCHAR(4000),
    [type.id] NVARCHAR(100),
    [type.extension] NVARCHAR(MAX),
    [type.coding] VARCHAR(MAX),
    [type.text] NVARCHAR(4000),
    [subject.id] NVARCHAR(100),
    [subject.extension] NVARCHAR(MAX),
    [subject.reference] NVARCHAR(4000),
    [subject.type] VARCHAR(256),
    [subject.identifier.id] NVARCHAR(100),
    [subject.identifier.extension] NVARCHAR(MAX),
    [subject.identifier.use] NVARCHAR(64),
    [subject.identifier.type] NVARCHAR(MAX),
    [subject.identifier.system] VARCHAR(256),
    [subject.identifier.value] NVARCHAR(4000),
    [subject.identifier.period] NVARCHAR(MAX),
    [subject.identifier.assigner] NVARCHAR(MAX),
    [subject.display] NVARCHAR(4000),
    [recipient.id] NVARCHAR(100),
    [recipient.extension] NVARCHAR(MAX),
    [recipient.reference] NVARCHAR(4000),
    [recipient.type] VARCHAR(256),
    [recipient.identifier.id] NVARCHAR(100),
    [recipient.identifier.extension] NVARCHAR(MAX),
    [recipient.identifier.use] NVARCHAR(64),
    [recipient.identifier.type] NVARCHAR(MAX),
    [recipient.identifier.system] VARCHAR(256),
    [recipient.identifier.value] NVARCHAR(4000),
    [recipient.identifier.period] NVARCHAR(MAX),
    [recipient.identifier.assigner] NVARCHAR(MAX),
    [recipient.display] NVARCHAR(4000),
    [date] VARCHAR(64),
    [participant] VARCHAR(MAX),
    [issuer.id] NVARCHAR(100),
    [issuer.extension] NVARCHAR(MAX),
    [issuer.reference] NVARCHAR(4000),
    [issuer.type] VARCHAR(256),
    [issuer.identifier.id] NVARCHAR(100),
    [issuer.identifier.extension] NVARCHAR(MAX),
    [issuer.identifier.use] NVARCHAR(64),
    [issuer.identifier.type] NVARCHAR(MAX),
    [issuer.identifier.system] VARCHAR(256),
    [issuer.identifier.value] NVARCHAR(4000),
    [issuer.identifier.period] NVARCHAR(MAX),
    [issuer.identifier.assigner] NVARCHAR(MAX),
    [issuer.display] NVARCHAR(4000),
    [account.id] NVARCHAR(100),
    [account.extension] NVARCHAR(MAX),
    [account.reference] NVARCHAR(4000),
    [account.type] VARCHAR(256),
    [account.identifier.id] NVARCHAR(100),
    [account.identifier.extension] NVARCHAR(MAX),
    [account.identifier.use] NVARCHAR(64),
    [account.identifier.type] NVARCHAR(MAX),
    [account.identifier.system] VARCHAR(256),
    [account.identifier.value] NVARCHAR(4000),
    [account.identifier.period] NVARCHAR(MAX),
    [account.identifier.assigner] NVARCHAR(MAX),
    [account.display] NVARCHAR(4000),
    [lineItem] VARCHAR(MAX),
    [totalPriceComponent] VARCHAR(MAX),
    [totalNet.id] NVARCHAR(100),
    [totalNet.extension] NVARCHAR(MAX),
    [totalNet.value] float,
    [totalNet.currency] NVARCHAR(100),
    [totalGross.id] NVARCHAR(100),
    [totalGross.extension] NVARCHAR(MAX),
    [totalGross.value] float,
    [totalGross.currency] NVARCHAR(100),
    [paymentTerms] NVARCHAR(MAX),
    [note] VARCHAR(MAX),
) WITH (
    LOCATION='/Invoice/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.InvoiceIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'Invoice/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.InvoiceParticipant AS
SELECT
    [id],
    [participant.JSON],
    [participant.id],
    [participant.extension],
    [participant.modifierExtension],
    [participant.role.id],
    [participant.role.extension],
    [participant.role.coding],
    [participant.role.text],
    [participant.actor.id],
    [participant.actor.extension],
    [participant.actor.reference],
    [participant.actor.type],
    [participant.actor.identifier],
    [participant.actor.display]
FROM openrowset (
        BULK 'Invoice/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [participant.JSON]  VARCHAR(MAX) '$.participant'
    ) AS rowset
    CROSS APPLY openjson (rowset.[participant.JSON]) with (
        [participant.id]               NVARCHAR(100)       '$.id',
        [participant.extension]        NVARCHAR(MAX)       '$.extension',
        [participant.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [participant.role.id]          NVARCHAR(100)       '$.role.id',
        [participant.role.extension]   NVARCHAR(MAX)       '$.role.extension',
        [participant.role.coding]      NVARCHAR(MAX)       '$.role.coding',
        [participant.role.text]        NVARCHAR(4000)      '$.role.text',
        [participant.actor.id]         NVARCHAR(100)       '$.actor.id',
        [participant.actor.extension]  NVARCHAR(MAX)       '$.actor.extension',
        [participant.actor.reference]  NVARCHAR(4000)      '$.actor.reference',
        [participant.actor.type]       VARCHAR(256)        '$.actor.type',
        [participant.actor.identifier] NVARCHAR(MAX)       '$.actor.identifier',
        [participant.actor.display]    NVARCHAR(4000)      '$.actor.display'
    ) j

GO

CREATE VIEW fhir.InvoiceLineItem AS
SELECT
    [id],
    [lineItem.JSON],
    [lineItem.id],
    [lineItem.extension],
    [lineItem.modifierExtension],
    [lineItem.sequence],
    [lineItem.priceComponent],
    [lineItem.chargeItem.reference.id],
    [lineItem.chargeItem.reference.extension],
    [lineItem.chargeItem.reference.reference],
    [lineItem.chargeItem.reference.type],
    [lineItem.chargeItem.reference.identifier],
    [lineItem.chargeItem.reference.display],
    [lineItem.chargeItem.codeableConcept.id],
    [lineItem.chargeItem.codeableConcept.extension],
    [lineItem.chargeItem.codeableConcept.coding],
    [lineItem.chargeItem.codeableConcept.text]
FROM openrowset (
        BULK 'Invoice/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [lineItem.JSON]  VARCHAR(MAX) '$.lineItem'
    ) AS rowset
    CROSS APPLY openjson (rowset.[lineItem.JSON]) with (
        [lineItem.id]                  NVARCHAR(100)       '$.id',
        [lineItem.extension]           NVARCHAR(MAX)       '$.extension',
        [lineItem.modifierExtension]   NVARCHAR(MAX)       '$.modifierExtension',
        [lineItem.sequence]            bigint              '$.sequence',
        [lineItem.priceComponent]      NVARCHAR(MAX)       '$.priceComponent' AS JSON,
        [lineItem.chargeItem.reference.id] NVARCHAR(100)       '$.chargeItem.reference.id',
        [lineItem.chargeItem.reference.extension] NVARCHAR(MAX)       '$.chargeItem.reference.extension',
        [lineItem.chargeItem.reference.reference] NVARCHAR(4000)      '$.chargeItem.reference.reference',
        [lineItem.chargeItem.reference.type] VARCHAR(256)        '$.chargeItem.reference.type',
        [lineItem.chargeItem.reference.identifier] NVARCHAR(MAX)       '$.chargeItem.reference.identifier',
        [lineItem.chargeItem.reference.display] NVARCHAR(4000)      '$.chargeItem.reference.display',
        [lineItem.chargeItem.codeableConcept.id] NVARCHAR(100)       '$.chargeItem.codeableConcept.id',
        [lineItem.chargeItem.codeableConcept.extension] NVARCHAR(MAX)       '$.chargeItem.codeableConcept.extension',
        [lineItem.chargeItem.codeableConcept.coding] NVARCHAR(MAX)       '$.chargeItem.codeableConcept.coding',
        [lineItem.chargeItem.codeableConcept.text] NVARCHAR(4000)      '$.chargeItem.codeableConcept.text'
    ) j

GO

CREATE VIEW fhir.InvoiceTotalPriceComponent AS
SELECT
    [id],
    [totalPriceComponent.JSON],
    [totalPriceComponent.id],
    [totalPriceComponent.extension],
    [totalPriceComponent.modifierExtension],
    [totalPriceComponent.type],
    [totalPriceComponent.code.id],
    [totalPriceComponent.code.extension],
    [totalPriceComponent.code.coding],
    [totalPriceComponent.code.text],
    [totalPriceComponent.factor],
    [totalPriceComponent.amount.id],
    [totalPriceComponent.amount.extension],
    [totalPriceComponent.amount.value],
    [totalPriceComponent.amount.currency]
FROM openrowset (
        BULK 'Invoice/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [totalPriceComponent.JSON]  VARCHAR(MAX) '$.totalPriceComponent'
    ) AS rowset
    CROSS APPLY openjson (rowset.[totalPriceComponent.JSON]) with (
        [totalPriceComponent.id]       NVARCHAR(100)       '$.id',
        [totalPriceComponent.extension] NVARCHAR(MAX)       '$.extension',
        [totalPriceComponent.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [totalPriceComponent.type]     NVARCHAR(100)       '$.type',
        [totalPriceComponent.code.id]  NVARCHAR(100)       '$.code.id',
        [totalPriceComponent.code.extension] NVARCHAR(MAX)       '$.code.extension',
        [totalPriceComponent.code.coding] NVARCHAR(MAX)       '$.code.coding',
        [totalPriceComponent.code.text] NVARCHAR(4000)      '$.code.text',
        [totalPriceComponent.factor]   float               '$.factor',
        [totalPriceComponent.amount.id] NVARCHAR(100)       '$.amount.id',
        [totalPriceComponent.amount.extension] NVARCHAR(MAX)       '$.amount.extension',
        [totalPriceComponent.amount.value] float               '$.amount.value',
        [totalPriceComponent.amount.currency] NVARCHAR(100)       '$.amount.currency'
    ) j

GO

CREATE VIEW fhir.InvoiceNote AS
SELECT
    [id],
    [note.JSON],
    [note.id],
    [note.extension],
    [note.time],
    [note.text],
    [note.author.reference.id],
    [note.author.reference.extension],
    [note.author.reference.reference],
    [note.author.reference.type],
    [note.author.reference.identifier],
    [note.author.reference.display],
    [note.author.string]
FROM openrowset (
        BULK 'Invoice/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [note.JSON]  VARCHAR(MAX) '$.note'
    ) AS rowset
    CROSS APPLY openjson (rowset.[note.JSON]) with (
        [note.id]                      NVARCHAR(100)       '$.id',
        [note.extension]               NVARCHAR(MAX)       '$.extension',
        [note.time]                    VARCHAR(64)         '$.time',
        [note.text]                    NVARCHAR(MAX)       '$.text',
        [note.author.reference.id]     NVARCHAR(100)       '$.author.reference.id',
        [note.author.reference.extension] NVARCHAR(MAX)       '$.author.reference.extension',
        [note.author.reference.reference] NVARCHAR(4000)      '$.author.reference.reference',
        [note.author.reference.type]   VARCHAR(256)        '$.author.reference.type',
        [note.author.reference.identifier] NVARCHAR(MAX)       '$.author.reference.identifier',
        [note.author.reference.display] NVARCHAR(4000)      '$.author.reference.display',
        [note.author.string]           NVARCHAR(4000)      '$.author.string'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[Library] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [url] VARCHAR(256),
    [identifier] VARCHAR(MAX),
    [version] NVARCHAR(100),
    [name] NVARCHAR(500),
    [title] NVARCHAR(4000),
    [status] NVARCHAR(100),
    [experimental] bit,
    [date] VARCHAR(64),
    [publisher] NVARCHAR(500),
    [contact] VARCHAR(MAX),
    [description] NVARCHAR(MAX),
    [useContext] VARCHAR(MAX),
    [jurisdiction] VARCHAR(MAX),
    [purpose] NVARCHAR(MAX),
    [copyright] NVARCHAR(MAX),
    [approvalDate] VARCHAR(64),
    [lastReviewDate] VARCHAR(64),
    [effectivePeriod.id] NVARCHAR(100),
    [effectivePeriod.extension] NVARCHAR(MAX),
    [effectivePeriod.start] VARCHAR(64),
    [effectivePeriod.end] VARCHAR(64),
    [topic] VARCHAR(MAX),
    [author] VARCHAR(MAX),
    [editor] VARCHAR(MAX),
    [reviewer] VARCHAR(MAX),
    [endorser] VARCHAR(MAX),
    [relatedArtifact] VARCHAR(MAX),
    [subtitle] NVARCHAR(4000),
    [type.id] NVARCHAR(100),
    [type.extension] NVARCHAR(MAX),
    [type.coding] VARCHAR(MAX),
    [type.text] NVARCHAR(4000),
    [usage] NVARCHAR(4000),
    [parameter] VARCHAR(MAX),
    [dataRequirement] VARCHAR(MAX),
    [content] VARCHAR(MAX),
    [subject.codeableConcept.id] NVARCHAR(100),
    [subject.codeableConcept.extension] NVARCHAR(MAX),
    [subject.codeableConcept.coding] VARCHAR(MAX),
    [subject.codeableConcept.text] NVARCHAR(4000),
    [subject.reference.id] NVARCHAR(100),
    [subject.reference.extension] NVARCHAR(MAX),
    [subject.reference.reference] NVARCHAR(4000),
    [subject.reference.type] VARCHAR(256),
    [subject.reference.identifier.id] NVARCHAR(100),
    [subject.reference.identifier.extension] NVARCHAR(MAX),
    [subject.reference.identifier.use] NVARCHAR(64),
    [subject.reference.identifier.type] NVARCHAR(MAX),
    [subject.reference.identifier.system] VARCHAR(256),
    [subject.reference.identifier.value] NVARCHAR(4000),
    [subject.reference.identifier.period] NVARCHAR(MAX),
    [subject.reference.identifier.assigner] NVARCHAR(MAX),
    [subject.reference.display] NVARCHAR(4000),
) WITH (
    LOCATION='/Library/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.LibraryIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'Library/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.LibraryContact AS
SELECT
    [id],
    [contact.JSON],
    [contact.id],
    [contact.extension],
    [contact.name],
    [contact.telecom]
FROM openrowset (
        BULK 'Library/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [contact.JSON]  VARCHAR(MAX) '$.contact'
    ) AS rowset
    CROSS APPLY openjson (rowset.[contact.JSON]) with (
        [contact.id]                   NVARCHAR(100)       '$.id',
        [contact.extension]            NVARCHAR(MAX)       '$.extension',
        [contact.name]                 NVARCHAR(500)       '$.name',
        [contact.telecom]              NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.LibraryUseContext AS
SELECT
    [id],
    [useContext.JSON],
    [useContext.id],
    [useContext.extension],
    [useContext.code.id],
    [useContext.code.extension],
    [useContext.code.system],
    [useContext.code.version],
    [useContext.code.code],
    [useContext.code.display],
    [useContext.code.userSelected],
    [useContext.value.codeableConcept.id],
    [useContext.value.codeableConcept.extension],
    [useContext.value.codeableConcept.coding],
    [useContext.value.codeableConcept.text],
    [useContext.value.quantity.id],
    [useContext.value.quantity.extension],
    [useContext.value.quantity.value],
    [useContext.value.quantity.comparator],
    [useContext.value.quantity.unit],
    [useContext.value.quantity.system],
    [useContext.value.quantity.code],
    [useContext.value.range.id],
    [useContext.value.range.extension],
    [useContext.value.range.low],
    [useContext.value.range.high],
    [useContext.value.reference.id],
    [useContext.value.reference.extension],
    [useContext.value.reference.reference],
    [useContext.value.reference.type],
    [useContext.value.reference.identifier],
    [useContext.value.reference.display]
FROM openrowset (
        BULK 'Library/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [useContext.JSON]  VARCHAR(MAX) '$.useContext'
    ) AS rowset
    CROSS APPLY openjson (rowset.[useContext.JSON]) with (
        [useContext.id]                NVARCHAR(100)       '$.id',
        [useContext.extension]         NVARCHAR(MAX)       '$.extension',
        [useContext.code.id]           NVARCHAR(100)       '$.code.id',
        [useContext.code.extension]    NVARCHAR(MAX)       '$.code.extension',
        [useContext.code.system]       VARCHAR(256)        '$.code.system',
        [useContext.code.version]      NVARCHAR(100)       '$.code.version',
        [useContext.code.code]         NVARCHAR(4000)      '$.code.code',
        [useContext.code.display]      NVARCHAR(4000)      '$.code.display',
        [useContext.code.userSelected] bit                 '$.code.userSelected',
        [useContext.value.codeableConcept.id] NVARCHAR(100)       '$.value.codeableConcept.id',
        [useContext.value.codeableConcept.extension] NVARCHAR(MAX)       '$.value.codeableConcept.extension',
        [useContext.value.codeableConcept.coding] NVARCHAR(MAX)       '$.value.codeableConcept.coding',
        [useContext.value.codeableConcept.text] NVARCHAR(4000)      '$.value.codeableConcept.text',
        [useContext.value.quantity.id] NVARCHAR(100)       '$.value.quantity.id',
        [useContext.value.quantity.extension] NVARCHAR(MAX)       '$.value.quantity.extension',
        [useContext.value.quantity.value] float               '$.value.quantity.value',
        [useContext.value.quantity.comparator] NVARCHAR(64)        '$.value.quantity.comparator',
        [useContext.value.quantity.unit] NVARCHAR(100)       '$.value.quantity.unit',
        [useContext.value.quantity.system] VARCHAR(256)        '$.value.quantity.system',
        [useContext.value.quantity.code] NVARCHAR(4000)      '$.value.quantity.code',
        [useContext.value.range.id]    NVARCHAR(100)       '$.value.range.id',
        [useContext.value.range.extension] NVARCHAR(MAX)       '$.value.range.extension',
        [useContext.value.range.low]   NVARCHAR(MAX)       '$.value.range.low',
        [useContext.value.range.high]  NVARCHAR(MAX)       '$.value.range.high',
        [useContext.value.reference.id] NVARCHAR(100)       '$.value.reference.id',
        [useContext.value.reference.extension] NVARCHAR(MAX)       '$.value.reference.extension',
        [useContext.value.reference.reference] NVARCHAR(4000)      '$.value.reference.reference',
        [useContext.value.reference.type] VARCHAR(256)        '$.value.reference.type',
        [useContext.value.reference.identifier] NVARCHAR(MAX)       '$.value.reference.identifier',
        [useContext.value.reference.display] NVARCHAR(4000)      '$.value.reference.display'
    ) j

GO

CREATE VIEW fhir.LibraryJurisdiction AS
SELECT
    [id],
    [jurisdiction.JSON],
    [jurisdiction.id],
    [jurisdiction.extension],
    [jurisdiction.coding],
    [jurisdiction.text]
FROM openrowset (
        BULK 'Library/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [jurisdiction.JSON]  VARCHAR(MAX) '$.jurisdiction'
    ) AS rowset
    CROSS APPLY openjson (rowset.[jurisdiction.JSON]) with (
        [jurisdiction.id]              NVARCHAR(100)       '$.id',
        [jurisdiction.extension]       NVARCHAR(MAX)       '$.extension',
        [jurisdiction.coding]          NVARCHAR(MAX)       '$.coding' AS JSON,
        [jurisdiction.text]            NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.LibraryTopic AS
SELECT
    [id],
    [topic.JSON],
    [topic.id],
    [topic.extension],
    [topic.coding],
    [topic.text]
FROM openrowset (
        BULK 'Library/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [topic.JSON]  VARCHAR(MAX) '$.topic'
    ) AS rowset
    CROSS APPLY openjson (rowset.[topic.JSON]) with (
        [topic.id]                     NVARCHAR(100)       '$.id',
        [topic.extension]              NVARCHAR(MAX)       '$.extension',
        [topic.coding]                 NVARCHAR(MAX)       '$.coding' AS JSON,
        [topic.text]                   NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.LibraryAuthor AS
SELECT
    [id],
    [author.JSON],
    [author.id],
    [author.extension],
    [author.name],
    [author.telecom]
FROM openrowset (
        BULK 'Library/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [author.JSON]  VARCHAR(MAX) '$.author'
    ) AS rowset
    CROSS APPLY openjson (rowset.[author.JSON]) with (
        [author.id]                    NVARCHAR(100)       '$.id',
        [author.extension]             NVARCHAR(MAX)       '$.extension',
        [author.name]                  NVARCHAR(500)       '$.name',
        [author.telecom]               NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.LibraryEditor AS
SELECT
    [id],
    [editor.JSON],
    [editor.id],
    [editor.extension],
    [editor.name],
    [editor.telecom]
FROM openrowset (
        BULK 'Library/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [editor.JSON]  VARCHAR(MAX) '$.editor'
    ) AS rowset
    CROSS APPLY openjson (rowset.[editor.JSON]) with (
        [editor.id]                    NVARCHAR(100)       '$.id',
        [editor.extension]             NVARCHAR(MAX)       '$.extension',
        [editor.name]                  NVARCHAR(500)       '$.name',
        [editor.telecom]               NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.LibraryReviewer AS
SELECT
    [id],
    [reviewer.JSON],
    [reviewer.id],
    [reviewer.extension],
    [reviewer.name],
    [reviewer.telecom]
FROM openrowset (
        BULK 'Library/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [reviewer.JSON]  VARCHAR(MAX) '$.reviewer'
    ) AS rowset
    CROSS APPLY openjson (rowset.[reviewer.JSON]) with (
        [reviewer.id]                  NVARCHAR(100)       '$.id',
        [reviewer.extension]           NVARCHAR(MAX)       '$.extension',
        [reviewer.name]                NVARCHAR(500)       '$.name',
        [reviewer.telecom]             NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.LibraryEndorser AS
SELECT
    [id],
    [endorser.JSON],
    [endorser.id],
    [endorser.extension],
    [endorser.name],
    [endorser.telecom]
FROM openrowset (
        BULK 'Library/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [endorser.JSON]  VARCHAR(MAX) '$.endorser'
    ) AS rowset
    CROSS APPLY openjson (rowset.[endorser.JSON]) with (
        [endorser.id]                  NVARCHAR(100)       '$.id',
        [endorser.extension]           NVARCHAR(MAX)       '$.extension',
        [endorser.name]                NVARCHAR(500)       '$.name',
        [endorser.telecom]             NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.LibraryRelatedArtifact AS
SELECT
    [id],
    [relatedArtifact.JSON],
    [relatedArtifact.id],
    [relatedArtifact.extension],
    [relatedArtifact.type],
    [relatedArtifact.classifier],
    [relatedArtifact.label],
    [relatedArtifact.display],
    [relatedArtifact.citation],
    [relatedArtifact.document.id],
    [relatedArtifact.document.extension],
    [relatedArtifact.document.contentType],
    [relatedArtifact.document.language],
    [relatedArtifact.document.data],
    [relatedArtifact.document.url],
    [relatedArtifact.document.size],
    [relatedArtifact.document.hash],
    [relatedArtifact.document.title],
    [relatedArtifact.document.creation],
    [relatedArtifact.document.height],
    [relatedArtifact.document.width],
    [relatedArtifact.document.frames],
    [relatedArtifact.document.duration],
    [relatedArtifact.document.pages],
    [relatedArtifact.resource],
    [relatedArtifact.resourceReference.id],
    [relatedArtifact.resourceReference.extension],
    [relatedArtifact.resourceReference.reference],
    [relatedArtifact.resourceReference.type],
    [relatedArtifact.resourceReference.identifier],
    [relatedArtifact.resourceReference.display]
FROM openrowset (
        BULK 'Library/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [relatedArtifact.JSON]  VARCHAR(MAX) '$.relatedArtifact'
    ) AS rowset
    CROSS APPLY openjson (rowset.[relatedArtifact.JSON]) with (
        [relatedArtifact.id]           NVARCHAR(100)       '$.id',
        [relatedArtifact.extension]    NVARCHAR(MAX)       '$.extension',
        [relatedArtifact.type]         NVARCHAR(64)        '$.type',
        [relatedArtifact.classifier]   NVARCHAR(MAX)       '$.classifier' AS JSON,
        [relatedArtifact.label]        NVARCHAR(100)       '$.label',
        [relatedArtifact.display]      NVARCHAR(4000)      '$.display',
        [relatedArtifact.citation]     NVARCHAR(MAX)       '$.citation',
        [relatedArtifact.document.id]  NVARCHAR(100)       '$.document.id',
        [relatedArtifact.document.extension] NVARCHAR(MAX)       '$.document.extension',
        [relatedArtifact.document.contentType] NVARCHAR(100)       '$.document.contentType',
        [relatedArtifact.document.language] NVARCHAR(100)       '$.document.language',
        [relatedArtifact.document.data] NVARCHAR(MAX)       '$.document.data',
        [relatedArtifact.document.url] VARCHAR(256)        '$.document.url',
        [relatedArtifact.document.size] NVARCHAR(MAX)       '$.document.size',
        [relatedArtifact.document.hash] NVARCHAR(MAX)       '$.document.hash',
        [relatedArtifact.document.title] NVARCHAR(4000)      '$.document.title',
        [relatedArtifact.document.creation] VARCHAR(64)         '$.document.creation',
        [relatedArtifact.document.height] bigint              '$.document.height',
        [relatedArtifact.document.width] bigint              '$.document.width',
        [relatedArtifact.document.frames] bigint              '$.document.frames',
        [relatedArtifact.document.duration] float               '$.document.duration',
        [relatedArtifact.document.pages] bigint              '$.document.pages',
        [relatedArtifact.resource]     VARCHAR(256)        '$.resource',
        [relatedArtifact.resourceReference.id] NVARCHAR(100)       '$.resourceReference.id',
        [relatedArtifact.resourceReference.extension] NVARCHAR(MAX)       '$.resourceReference.extension',
        [relatedArtifact.resourceReference.reference] NVARCHAR(4000)      '$.resourceReference.reference',
        [relatedArtifact.resourceReference.type] VARCHAR(256)        '$.resourceReference.type',
        [relatedArtifact.resourceReference.identifier] NVARCHAR(MAX)       '$.resourceReference.identifier',
        [relatedArtifact.resourceReference.display] NVARCHAR(4000)      '$.resourceReference.display'
    ) j

GO

CREATE VIEW fhir.LibraryParameter AS
SELECT
    [id],
    [parameter.JSON],
    [parameter.id],
    [parameter.extension],
    [parameter.name],
    [parameter.use],
    [parameter.min],
    [parameter.max],
    [parameter.documentation],
    [parameter.type],
    [parameter.profile]
FROM openrowset (
        BULK 'Library/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [parameter.JSON]  VARCHAR(MAX) '$.parameter'
    ) AS rowset
    CROSS APPLY openjson (rowset.[parameter.JSON]) with (
        [parameter.id]                 NVARCHAR(100)       '$.id',
        [parameter.extension]          NVARCHAR(MAX)       '$.extension',
        [parameter.name]               NVARCHAR(500)       '$.name',
        [parameter.use]                NVARCHAR(100)       '$.use',
        [parameter.min]                bigint              '$.min',
        [parameter.max]                NVARCHAR(100)       '$.max',
        [parameter.documentation]      NVARCHAR(4000)      '$.documentation',
        [parameter.type]               NVARCHAR(100)       '$.type',
        [parameter.profile]            VARCHAR(256)        '$.profile'
    ) j

GO

CREATE VIEW fhir.LibraryDataRequirement AS
SELECT
    [id],
    [dataRequirement.JSON],
    [dataRequirement.id],
    [dataRequirement.extension],
    [dataRequirement.type],
    [dataRequirement.profile],
    [dataRequirement.mustSupport],
    [dataRequirement.codeFilter],
    [dataRequirement.dateFilter],
    [dataRequirement.limit],
    [dataRequirement.sort],
    [dataRequirement.subject.codeableConcept.id],
    [dataRequirement.subject.codeableConcept.extension],
    [dataRequirement.subject.codeableConcept.coding],
    [dataRequirement.subject.codeableConcept.text],
    [dataRequirement.subject.reference.id],
    [dataRequirement.subject.reference.extension],
    [dataRequirement.subject.reference.reference],
    [dataRequirement.subject.reference.type],
    [dataRequirement.subject.reference.identifier],
    [dataRequirement.subject.reference.display]
FROM openrowset (
        BULK 'Library/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [dataRequirement.JSON]  VARCHAR(MAX) '$.dataRequirement'
    ) AS rowset
    CROSS APPLY openjson (rowset.[dataRequirement.JSON]) with (
        [dataRequirement.id]           NVARCHAR(100)       '$.id',
        [dataRequirement.extension]    NVARCHAR(MAX)       '$.extension',
        [dataRequirement.type]         NVARCHAR(100)       '$.type',
        [dataRequirement.profile]      NVARCHAR(MAX)       '$.profile' AS JSON,
        [dataRequirement.mustSupport]  NVARCHAR(MAX)       '$.mustSupport' AS JSON,
        [dataRequirement.codeFilter]   NVARCHAR(MAX)       '$.codeFilter' AS JSON,
        [dataRequirement.dateFilter]   NVARCHAR(MAX)       '$.dateFilter' AS JSON,
        [dataRequirement.limit]        bigint              '$.limit',
        [dataRequirement.sort]         NVARCHAR(MAX)       '$.sort' AS JSON,
        [dataRequirement.subject.codeableConcept.id] NVARCHAR(100)       '$.subject.codeableConcept.id',
        [dataRequirement.subject.codeableConcept.extension] NVARCHAR(MAX)       '$.subject.codeableConcept.extension',
        [dataRequirement.subject.codeableConcept.coding] NVARCHAR(MAX)       '$.subject.codeableConcept.coding',
        [dataRequirement.subject.codeableConcept.text] NVARCHAR(4000)      '$.subject.codeableConcept.text',
        [dataRequirement.subject.reference.id] NVARCHAR(100)       '$.subject.reference.id',
        [dataRequirement.subject.reference.extension] NVARCHAR(MAX)       '$.subject.reference.extension',
        [dataRequirement.subject.reference.reference] NVARCHAR(4000)      '$.subject.reference.reference',
        [dataRequirement.subject.reference.type] VARCHAR(256)        '$.subject.reference.type',
        [dataRequirement.subject.reference.identifier] NVARCHAR(MAX)       '$.subject.reference.identifier',
        [dataRequirement.subject.reference.display] NVARCHAR(4000)      '$.subject.reference.display'
    ) j

GO

CREATE VIEW fhir.LibraryContent AS
SELECT
    [id],
    [content.JSON],
    [content.id],
    [content.extension],
    [content.contentType],
    [content.language],
    [content.data],
    [content.url],
    [content.size],
    [content.hash],
    [content.title],
    [content.creation],
    [content.height],
    [content.width],
    [content.frames],
    [content.duration],
    [content.pages]
FROM openrowset (
        BULK 'Library/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [content.JSON]  VARCHAR(MAX) '$.content'
    ) AS rowset
    CROSS APPLY openjson (rowset.[content.JSON]) with (
        [content.id]                   NVARCHAR(100)       '$.id',
        [content.extension]            NVARCHAR(MAX)       '$.extension',
        [content.contentType]          NVARCHAR(100)       '$.contentType',
        [content.language]             NVARCHAR(100)       '$.language',
        [content.data]                 NVARCHAR(MAX)       '$.data',
        [content.url]                  VARCHAR(256)        '$.url',
        [content.size]                 NVARCHAR(MAX)       '$.size',
        [content.hash]                 NVARCHAR(MAX)       '$.hash',
        [content.title]                NVARCHAR(4000)      '$.title',
        [content.creation]             VARCHAR(64)         '$.creation',
        [content.height]               bigint              '$.height',
        [content.width]                bigint              '$.width',
        [content.frames]               bigint              '$.frames',
        [content.duration]             float               '$.duration',
        [content.pages]                bigint              '$.pages'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[Linkage] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [active] bit,
    [author.id] NVARCHAR(100),
    [author.extension] NVARCHAR(MAX),
    [author.reference] NVARCHAR(4000),
    [author.type] VARCHAR(256),
    [author.identifier.id] NVARCHAR(100),
    [author.identifier.extension] NVARCHAR(MAX),
    [author.identifier.use] NVARCHAR(64),
    [author.identifier.type] NVARCHAR(MAX),
    [author.identifier.system] VARCHAR(256),
    [author.identifier.value] NVARCHAR(4000),
    [author.identifier.period] NVARCHAR(MAX),
    [author.identifier.assigner] NVARCHAR(MAX),
    [author.display] NVARCHAR(4000),
    [item] VARCHAR(MAX),
) WITH (
    LOCATION='/Linkage/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.LinkageItem AS
SELECT
    [id],
    [item.JSON],
    [item.id],
    [item.extension],
    [item.modifierExtension],
    [item.type],
    [item.resource.id],
    [item.resource.extension],
    [item.resource.reference],
    [item.resource.type],
    [item.resource.identifier],
    [item.resource.display]
FROM openrowset (
        BULK 'Linkage/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [item.JSON]  VARCHAR(MAX) '$.item'
    ) AS rowset
    CROSS APPLY openjson (rowset.[item.JSON]) with (
        [item.id]                      NVARCHAR(100)       '$.id',
        [item.extension]               NVARCHAR(MAX)       '$.extension',
        [item.modifierExtension]       NVARCHAR(MAX)       '$.modifierExtension',
        [item.type]                    NVARCHAR(100)       '$.type',
        [item.resource.id]             NVARCHAR(100)       '$.resource.id',
        [item.resource.extension]      NVARCHAR(MAX)       '$.resource.extension',
        [item.resource.reference]      NVARCHAR(4000)      '$.resource.reference',
        [item.resource.type]           VARCHAR(256)        '$.resource.type',
        [item.resource.identifier]     NVARCHAR(MAX)       '$.resource.identifier',
        [item.resource.display]        NVARCHAR(4000)      '$.resource.display'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[List] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [status] NVARCHAR(100),
    [mode] NVARCHAR(100),
    [title] NVARCHAR(4000),
    [code.id] NVARCHAR(100),
    [code.extension] NVARCHAR(MAX),
    [code.coding] VARCHAR(MAX),
    [code.text] NVARCHAR(4000),
    [subject.id] NVARCHAR(100),
    [subject.extension] NVARCHAR(MAX),
    [subject.reference] NVARCHAR(4000),
    [subject.type] VARCHAR(256),
    [subject.identifier.id] NVARCHAR(100),
    [subject.identifier.extension] NVARCHAR(MAX),
    [subject.identifier.use] NVARCHAR(64),
    [subject.identifier.type] NVARCHAR(MAX),
    [subject.identifier.system] VARCHAR(256),
    [subject.identifier.value] NVARCHAR(4000),
    [subject.identifier.period] NVARCHAR(MAX),
    [subject.identifier.assigner] NVARCHAR(MAX),
    [subject.display] NVARCHAR(4000),
    [encounter.id] NVARCHAR(100),
    [encounter.extension] NVARCHAR(MAX),
    [encounter.reference] NVARCHAR(4000),
    [encounter.type] VARCHAR(256),
    [encounter.identifier.id] NVARCHAR(100),
    [encounter.identifier.extension] NVARCHAR(MAX),
    [encounter.identifier.use] NVARCHAR(64),
    [encounter.identifier.type] NVARCHAR(MAX),
    [encounter.identifier.system] VARCHAR(256),
    [encounter.identifier.value] NVARCHAR(4000),
    [encounter.identifier.period] NVARCHAR(MAX),
    [encounter.identifier.assigner] NVARCHAR(MAX),
    [encounter.display] NVARCHAR(4000),
    [date] VARCHAR(64),
    [source.id] NVARCHAR(100),
    [source.extension] NVARCHAR(MAX),
    [source.reference] NVARCHAR(4000),
    [source.type] VARCHAR(256),
    [source.identifier.id] NVARCHAR(100),
    [source.identifier.extension] NVARCHAR(MAX),
    [source.identifier.use] NVARCHAR(64),
    [source.identifier.type] NVARCHAR(MAX),
    [source.identifier.system] VARCHAR(256),
    [source.identifier.value] NVARCHAR(4000),
    [source.identifier.period] NVARCHAR(MAX),
    [source.identifier.assigner] NVARCHAR(MAX),
    [source.display] NVARCHAR(4000),
    [orderedBy.id] NVARCHAR(100),
    [orderedBy.extension] NVARCHAR(MAX),
    [orderedBy.coding] VARCHAR(MAX),
    [orderedBy.text] NVARCHAR(4000),
    [note] VARCHAR(MAX),
    [entry] VARCHAR(MAX),
    [emptyReason.id] NVARCHAR(100),
    [emptyReason.extension] NVARCHAR(MAX),
    [emptyReason.coding] VARCHAR(MAX),
    [emptyReason.text] NVARCHAR(4000),
) WITH (
    LOCATION='/List/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.ListIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'List/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.ListNote AS
SELECT
    [id],
    [note.JSON],
    [note.id],
    [note.extension],
    [note.time],
    [note.text],
    [note.author.reference.id],
    [note.author.reference.extension],
    [note.author.reference.reference],
    [note.author.reference.type],
    [note.author.reference.identifier],
    [note.author.reference.display],
    [note.author.string]
FROM openrowset (
        BULK 'List/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [note.JSON]  VARCHAR(MAX) '$.note'
    ) AS rowset
    CROSS APPLY openjson (rowset.[note.JSON]) with (
        [note.id]                      NVARCHAR(100)       '$.id',
        [note.extension]               NVARCHAR(MAX)       '$.extension',
        [note.time]                    VARCHAR(64)         '$.time',
        [note.text]                    NVARCHAR(MAX)       '$.text',
        [note.author.reference.id]     NVARCHAR(100)       '$.author.reference.id',
        [note.author.reference.extension] NVARCHAR(MAX)       '$.author.reference.extension',
        [note.author.reference.reference] NVARCHAR(4000)      '$.author.reference.reference',
        [note.author.reference.type]   VARCHAR(256)        '$.author.reference.type',
        [note.author.reference.identifier] NVARCHAR(MAX)       '$.author.reference.identifier',
        [note.author.reference.display] NVARCHAR(4000)      '$.author.reference.display',
        [note.author.string]           NVARCHAR(4000)      '$.author.string'
    ) j

GO

CREATE VIEW fhir.ListEntry AS
SELECT
    [id],
    [entry.JSON],
    [entry.id],
    [entry.extension],
    [entry.modifierExtension],
    [entry.flag.id],
    [entry.flag.extension],
    [entry.flag.coding],
    [entry.flag.text],
    [entry.deleted],
    [entry.date],
    [entry.item.id],
    [entry.item.extension],
    [entry.item.reference],
    [entry.item.type],
    [entry.item.identifier],
    [entry.item.display]
FROM openrowset (
        BULK 'List/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [entry.JSON]  VARCHAR(MAX) '$.entry'
    ) AS rowset
    CROSS APPLY openjson (rowset.[entry.JSON]) with (
        [entry.id]                     NVARCHAR(100)       '$.id',
        [entry.extension]              NVARCHAR(MAX)       '$.extension',
        [entry.modifierExtension]      NVARCHAR(MAX)       '$.modifierExtension',
        [entry.flag.id]                NVARCHAR(100)       '$.flag.id',
        [entry.flag.extension]         NVARCHAR(MAX)       '$.flag.extension',
        [entry.flag.coding]            NVARCHAR(MAX)       '$.flag.coding',
        [entry.flag.text]              NVARCHAR(4000)      '$.flag.text',
        [entry.deleted]                bit                 '$.deleted',
        [entry.date]                   VARCHAR(64)         '$.date',
        [entry.item.id]                NVARCHAR(100)       '$.item.id',
        [entry.item.extension]         NVARCHAR(MAX)       '$.item.extension',
        [entry.item.reference]         NVARCHAR(4000)      '$.item.reference',
        [entry.item.type]              VARCHAR(256)        '$.item.type',
        [entry.item.identifier]        NVARCHAR(MAX)       '$.item.identifier',
        [entry.item.display]           NVARCHAR(4000)      '$.item.display'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[Location] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [status] NVARCHAR(100),
    [operationalStatus.id] NVARCHAR(100),
    [operationalStatus.extension] NVARCHAR(MAX),
    [operationalStatus.system] VARCHAR(256),
    [operationalStatus.version] NVARCHAR(100),
    [operationalStatus.code] NVARCHAR(4000),
    [operationalStatus.display] NVARCHAR(4000),
    [operationalStatus.userSelected] bit,
    [name] NVARCHAR(500),
    [alias] VARCHAR(MAX),
    [description] NVARCHAR(4000),
    [mode] NVARCHAR(100),
    [type] VARCHAR(MAX),
    [telecom] VARCHAR(MAX),
    [address.id] NVARCHAR(100),
    [address.extension] NVARCHAR(MAX),
    [address.use] NVARCHAR(64),
    [address.type] NVARCHAR(64),
    [address.text] NVARCHAR(4000),
    [address.line] VARCHAR(MAX),
    [address.city] NVARCHAR(500),
    [address.district] NVARCHAR(500),
    [address.state] NVARCHAR(500),
    [address.postalCode] NVARCHAR(100),
    [address.country] NVARCHAR(500),
    [address.period.id] NVARCHAR(100),
    [address.period.extension] NVARCHAR(MAX),
    [address.period.start] VARCHAR(64),
    [address.period.end] VARCHAR(64),
    [physicalType.id] NVARCHAR(100),
    [physicalType.extension] NVARCHAR(MAX),
    [physicalType.coding] VARCHAR(MAX),
    [physicalType.text] NVARCHAR(4000),
    [position.id] NVARCHAR(100),
    [position.extension] NVARCHAR(MAX),
    [position.modifierExtension] NVARCHAR(MAX),
    [position.longitude] float,
    [position.latitude] float,
    [position.altitude] float,
    [managingOrganization.id] NVARCHAR(100),
    [managingOrganization.extension] NVARCHAR(MAX),
    [managingOrganization.reference] NVARCHAR(4000),
    [managingOrganization.type] VARCHAR(256),
    [managingOrganization.identifier.id] NVARCHAR(100),
    [managingOrganization.identifier.extension] NVARCHAR(MAX),
    [managingOrganization.identifier.use] NVARCHAR(64),
    [managingOrganization.identifier.type] NVARCHAR(MAX),
    [managingOrganization.identifier.system] VARCHAR(256),
    [managingOrganization.identifier.value] NVARCHAR(4000),
    [managingOrganization.identifier.period] NVARCHAR(MAX),
    [managingOrganization.identifier.assigner] NVARCHAR(MAX),
    [managingOrganization.display] NVARCHAR(4000),
    [partOf.id] NVARCHAR(100),
    [partOf.extension] NVARCHAR(MAX),
    [partOf.reference] NVARCHAR(4000),
    [partOf.type] VARCHAR(256),
    [partOf.identifier.id] NVARCHAR(100),
    [partOf.identifier.extension] NVARCHAR(MAX),
    [partOf.identifier.use] NVARCHAR(64),
    [partOf.identifier.type] NVARCHAR(MAX),
    [partOf.identifier.system] VARCHAR(256),
    [partOf.identifier.value] NVARCHAR(4000),
    [partOf.identifier.period] NVARCHAR(MAX),
    [partOf.identifier.assigner] NVARCHAR(MAX),
    [partOf.display] NVARCHAR(4000),
    [hoursOfOperation] VARCHAR(MAX),
    [availabilityExceptions] NVARCHAR(4000),
    [endpoint] VARCHAR(MAX),
) WITH (
    LOCATION='/Location/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.LocationIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'Location/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.LocationAlias AS
SELECT
    [id],
    [alias.JSON],
    [alias]
FROM openrowset (
        BULK 'Location/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [alias.JSON]  VARCHAR(MAX) '$.alias'
    ) AS rowset
    CROSS APPLY openjson (rowset.[alias.JSON]) with (
        [alias]                        NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.LocationType AS
SELECT
    [id],
    [type.JSON],
    [type.id],
    [type.extension],
    [type.coding],
    [type.text]
FROM openrowset (
        BULK 'Location/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [type.JSON]  VARCHAR(MAX) '$.type'
    ) AS rowset
    CROSS APPLY openjson (rowset.[type.JSON]) with (
        [type.id]                      NVARCHAR(100)       '$.id',
        [type.extension]               NVARCHAR(MAX)       '$.extension',
        [type.coding]                  NVARCHAR(MAX)       '$.coding' AS JSON,
        [type.text]                    NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.LocationTelecom AS
SELECT
    [id],
    [telecom.JSON],
    [telecom.id],
    [telecom.extension],
    [telecom.system],
    [telecom.value],
    [telecom.use],
    [telecom.rank],
    [telecom.period.id],
    [telecom.period.extension],
    [telecom.period.start],
    [telecom.period.end]
FROM openrowset (
        BULK 'Location/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [telecom.JSON]  VARCHAR(MAX) '$.telecom'
    ) AS rowset
    CROSS APPLY openjson (rowset.[telecom.JSON]) with (
        [telecom.id]                   NVARCHAR(100)       '$.id',
        [telecom.extension]            NVARCHAR(MAX)       '$.extension',
        [telecom.system]               NVARCHAR(64)        '$.system',
        [telecom.value]                NVARCHAR(4000)      '$.value',
        [telecom.use]                  NVARCHAR(64)        '$.use',
        [telecom.rank]                 bigint              '$.rank',
        [telecom.period.id]            NVARCHAR(100)       '$.period.id',
        [telecom.period.extension]     NVARCHAR(MAX)       '$.period.extension',
        [telecom.period.start]         VARCHAR(64)         '$.period.start',
        [telecom.period.end]           VARCHAR(64)         '$.period.end'
    ) j

GO

CREATE VIEW fhir.LocationHoursOfOperation AS
SELECT
    [id],
    [hoursOfOperation.JSON],
    [hoursOfOperation.id],
    [hoursOfOperation.extension],
    [hoursOfOperation.modifierExtension],
    [hoursOfOperation.daysOfWeek],
    [hoursOfOperation.allDay],
    [hoursOfOperation.openingTime],
    [hoursOfOperation.closingTime]
FROM openrowset (
        BULK 'Location/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [hoursOfOperation.JSON]  VARCHAR(MAX) '$.hoursOfOperation'
    ) AS rowset
    CROSS APPLY openjson (rowset.[hoursOfOperation.JSON]) with (
        [hoursOfOperation.id]          NVARCHAR(100)       '$.id',
        [hoursOfOperation.extension]   NVARCHAR(MAX)       '$.extension',
        [hoursOfOperation.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [hoursOfOperation.daysOfWeek]  NVARCHAR(MAX)       '$.daysOfWeek' AS JSON,
        [hoursOfOperation.allDay]      bit                 '$.allDay',
        [hoursOfOperation.openingTime] NVARCHAR(MAX)       '$.openingTime',
        [hoursOfOperation.closingTime] NVARCHAR(MAX)       '$.closingTime'
    ) j

GO

CREATE VIEW fhir.LocationEndpoint AS
SELECT
    [id],
    [endpoint.JSON],
    [endpoint.id],
    [endpoint.extension],
    [endpoint.reference],
    [endpoint.type],
    [endpoint.identifier.id],
    [endpoint.identifier.extension],
    [endpoint.identifier.use],
    [endpoint.identifier.type],
    [endpoint.identifier.system],
    [endpoint.identifier.value],
    [endpoint.identifier.period],
    [endpoint.identifier.assigner],
    [endpoint.display]
FROM openrowset (
        BULK 'Location/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [endpoint.JSON]  VARCHAR(MAX) '$.endpoint'
    ) AS rowset
    CROSS APPLY openjson (rowset.[endpoint.JSON]) with (
        [endpoint.id]                  NVARCHAR(100)       '$.id',
        [endpoint.extension]           NVARCHAR(MAX)       '$.extension',
        [endpoint.reference]           NVARCHAR(4000)      '$.reference',
        [endpoint.type]                VARCHAR(256)        '$.type',
        [endpoint.identifier.id]       NVARCHAR(100)       '$.identifier.id',
        [endpoint.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [endpoint.identifier.use]      NVARCHAR(64)        '$.identifier.use',
        [endpoint.identifier.type]     NVARCHAR(MAX)       '$.identifier.type',
        [endpoint.identifier.system]   VARCHAR(256)        '$.identifier.system',
        [endpoint.identifier.value]    NVARCHAR(4000)      '$.identifier.value',
        [endpoint.identifier.period]   NVARCHAR(MAX)       '$.identifier.period',
        [endpoint.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [endpoint.display]             NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[ManufacturedItemDefinition] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [status] NVARCHAR(100),
    [manufacturedDoseForm.id] NVARCHAR(100),
    [manufacturedDoseForm.extension] NVARCHAR(MAX),
    [manufacturedDoseForm.coding] VARCHAR(MAX),
    [manufacturedDoseForm.text] NVARCHAR(4000),
    [unitOfPresentation.id] NVARCHAR(100),
    [unitOfPresentation.extension] NVARCHAR(MAX),
    [unitOfPresentation.coding] VARCHAR(MAX),
    [unitOfPresentation.text] NVARCHAR(4000),
    [manufacturer] VARCHAR(MAX),
    [ingredient] VARCHAR(MAX),
    [property] VARCHAR(MAX),
) WITH (
    LOCATION='/ManufacturedItemDefinition/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.ManufacturedItemDefinitionIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'ManufacturedItemDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.ManufacturedItemDefinitionManufacturer AS
SELECT
    [id],
    [manufacturer.JSON],
    [manufacturer.id],
    [manufacturer.extension],
    [manufacturer.reference],
    [manufacturer.type],
    [manufacturer.identifier.id],
    [manufacturer.identifier.extension],
    [manufacturer.identifier.use],
    [manufacturer.identifier.type],
    [manufacturer.identifier.system],
    [manufacturer.identifier.value],
    [manufacturer.identifier.period],
    [manufacturer.identifier.assigner],
    [manufacturer.display]
FROM openrowset (
        BULK 'ManufacturedItemDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [manufacturer.JSON]  VARCHAR(MAX) '$.manufacturer'
    ) AS rowset
    CROSS APPLY openjson (rowset.[manufacturer.JSON]) with (
        [manufacturer.id]              NVARCHAR(100)       '$.id',
        [manufacturer.extension]       NVARCHAR(MAX)       '$.extension',
        [manufacturer.reference]       NVARCHAR(4000)      '$.reference',
        [manufacturer.type]            VARCHAR(256)        '$.type',
        [manufacturer.identifier.id]   NVARCHAR(100)       '$.identifier.id',
        [manufacturer.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [manufacturer.identifier.use]  NVARCHAR(64)        '$.identifier.use',
        [manufacturer.identifier.type] NVARCHAR(MAX)       '$.identifier.type',
        [manufacturer.identifier.system] VARCHAR(256)        '$.identifier.system',
        [manufacturer.identifier.value] NVARCHAR(4000)      '$.identifier.value',
        [manufacturer.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [manufacturer.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [manufacturer.display]         NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.ManufacturedItemDefinitionIngredient AS
SELECT
    [id],
    [ingredient.JSON],
    [ingredient.id],
    [ingredient.extension],
    [ingredient.coding],
    [ingredient.text]
FROM openrowset (
        BULK 'ManufacturedItemDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [ingredient.JSON]  VARCHAR(MAX) '$.ingredient'
    ) AS rowset
    CROSS APPLY openjson (rowset.[ingredient.JSON]) with (
        [ingredient.id]                NVARCHAR(100)       '$.id',
        [ingredient.extension]         NVARCHAR(MAX)       '$.extension',
        [ingredient.coding]            NVARCHAR(MAX)       '$.coding' AS JSON,
        [ingredient.text]              NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.ManufacturedItemDefinitionProperty AS
SELECT
    [id],
    [property.JSON],
    [property.id],
    [property.extension],
    [property.modifierExtension],
    [property.type.id],
    [property.type.extension],
    [property.type.coding],
    [property.type.text],
    [property.value.codeableConcept.id],
    [property.value.codeableConcept.extension],
    [property.value.codeableConcept.coding],
    [property.value.codeableConcept.text],
    [property.value.quantity.id],
    [property.value.quantity.extension],
    [property.value.quantity.value],
    [property.value.quantity.comparator],
    [property.value.quantity.unit],
    [property.value.quantity.system],
    [property.value.quantity.code],
    [property.value.date],
    [property.value.boolean],
    [property.value.attachment.id],
    [property.value.attachment.extension],
    [property.value.attachment.contentType],
    [property.value.attachment.language],
    [property.value.attachment.data],
    [property.value.attachment.url],
    [property.value.attachment.size],
    [property.value.attachment.hash],
    [property.value.attachment.title],
    [property.value.attachment.creation],
    [property.value.attachment.height],
    [property.value.attachment.width],
    [property.value.attachment.frames],
    [property.value.attachment.duration],
    [property.value.attachment.pages]
FROM openrowset (
        BULK 'ManufacturedItemDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [property.JSON]  VARCHAR(MAX) '$.property'
    ) AS rowset
    CROSS APPLY openjson (rowset.[property.JSON]) with (
        [property.id]                  NVARCHAR(100)       '$.id',
        [property.extension]           NVARCHAR(MAX)       '$.extension',
        [property.modifierExtension]   NVARCHAR(MAX)       '$.modifierExtension',
        [property.type.id]             NVARCHAR(100)       '$.type.id',
        [property.type.extension]      NVARCHAR(MAX)       '$.type.extension',
        [property.type.coding]         NVARCHAR(MAX)       '$.type.coding',
        [property.type.text]           NVARCHAR(4000)      '$.type.text',
        [property.value.codeableConcept.id] NVARCHAR(100)       '$.value.codeableConcept.id',
        [property.value.codeableConcept.extension] NVARCHAR(MAX)       '$.value.codeableConcept.extension',
        [property.value.codeableConcept.coding] NVARCHAR(MAX)       '$.value.codeableConcept.coding',
        [property.value.codeableConcept.text] NVARCHAR(4000)      '$.value.codeableConcept.text',
        [property.value.quantity.id]   NVARCHAR(100)       '$.value.quantity.id',
        [property.value.quantity.extension] NVARCHAR(MAX)       '$.value.quantity.extension',
        [property.value.quantity.value] float               '$.value.quantity.value',
        [property.value.quantity.comparator] NVARCHAR(64)        '$.value.quantity.comparator',
        [property.value.quantity.unit] NVARCHAR(100)       '$.value.quantity.unit',
        [property.value.quantity.system] VARCHAR(256)        '$.value.quantity.system',
        [property.value.quantity.code] NVARCHAR(4000)      '$.value.quantity.code',
        [property.value.date]          VARCHAR(64)         '$.value.date',
        [property.value.boolean]       bit                 '$.value.boolean',
        [property.value.attachment.id] NVARCHAR(100)       '$.value.attachment.id',
        [property.value.attachment.extension] NVARCHAR(MAX)       '$.value.attachment.extension',
        [property.value.attachment.contentType] NVARCHAR(100)       '$.value.attachment.contentType',
        [property.value.attachment.language] NVARCHAR(100)       '$.value.attachment.language',
        [property.value.attachment.data] NVARCHAR(MAX)       '$.value.attachment.data',
        [property.value.attachment.url] VARCHAR(256)        '$.value.attachment.url',
        [property.value.attachment.size] NVARCHAR(MAX)       '$.value.attachment.size',
        [property.value.attachment.hash] NVARCHAR(MAX)       '$.value.attachment.hash',
        [property.value.attachment.title] NVARCHAR(4000)      '$.value.attachment.title',
        [property.value.attachment.creation] VARCHAR(64)         '$.value.attachment.creation',
        [property.value.attachment.height] bigint              '$.value.attachment.height',
        [property.value.attachment.width] bigint              '$.value.attachment.width',
        [property.value.attachment.frames] bigint              '$.value.attachment.frames',
        [property.value.attachment.duration] float               '$.value.attachment.duration',
        [property.value.attachment.pages] bigint              '$.value.attachment.pages'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[Measure] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [url] VARCHAR(256),
    [identifier] VARCHAR(MAX),
    [version] NVARCHAR(100),
    [name] NVARCHAR(500),
    [title] NVARCHAR(4000),
    [status] NVARCHAR(100),
    [experimental] bit,
    [date] VARCHAR(64),
    [publisher] NVARCHAR(500),
    [contact] VARCHAR(MAX),
    [description] NVARCHAR(MAX),
    [useContext] VARCHAR(MAX),
    [jurisdiction] VARCHAR(MAX),
    [purpose] NVARCHAR(MAX),
    [copyright] NVARCHAR(MAX),
    [approvalDate] VARCHAR(64),
    [lastReviewDate] VARCHAR(64),
    [effectivePeriod.id] NVARCHAR(100),
    [effectivePeriod.extension] NVARCHAR(MAX),
    [effectivePeriod.start] VARCHAR(64),
    [effectivePeriod.end] VARCHAR(64),
    [topic] VARCHAR(MAX),
    [author] VARCHAR(MAX),
    [editor] VARCHAR(MAX),
    [reviewer] VARCHAR(MAX),
    [endorser] VARCHAR(MAX),
    [relatedArtifact] VARCHAR(MAX),
    [subtitle] NVARCHAR(4000),
    [basis] NVARCHAR(4000),
    [usage] NVARCHAR(4000),
    [library] VARCHAR(MAX),
    [disclaimer] NVARCHAR(MAX),
    [scoring.id] NVARCHAR(100),
    [scoring.extension] NVARCHAR(MAX),
    [scoring.coding] VARCHAR(MAX),
    [scoring.text] NVARCHAR(4000),
    [scoringUnit.id] NVARCHAR(100),
    [scoringUnit.extension] NVARCHAR(MAX),
    [scoringUnit.coding] VARCHAR(MAX),
    [scoringUnit.text] NVARCHAR(4000),
    [compositeScoring.id] NVARCHAR(100),
    [compositeScoring.extension] NVARCHAR(MAX),
    [compositeScoring.coding] VARCHAR(MAX),
    [compositeScoring.text] NVARCHAR(4000),
    [type] VARCHAR(MAX),
    [riskAdjustment] NVARCHAR(4000),
    [rateAggregation] NVARCHAR(100),
    [rationale] NVARCHAR(MAX),
    [clinicalRecommendationStatement] NVARCHAR(MAX),
    [improvementNotation.id] NVARCHAR(100),
    [improvementNotation.extension] NVARCHAR(MAX),
    [improvementNotation.coding] VARCHAR(MAX),
    [improvementNotation.text] NVARCHAR(4000),
    [definition] VARCHAR(MAX),
    [guidance] NVARCHAR(MAX),
    [group] VARCHAR(MAX),
    [supplementalData] VARCHAR(MAX),
    [subject.codeableConcept.id] NVARCHAR(100),
    [subject.codeableConcept.extension] NVARCHAR(MAX),
    [subject.codeableConcept.coding] VARCHAR(MAX),
    [subject.codeableConcept.text] NVARCHAR(4000),
    [subject.reference.id] NVARCHAR(100),
    [subject.reference.extension] NVARCHAR(MAX),
    [subject.reference.reference] NVARCHAR(4000),
    [subject.reference.type] VARCHAR(256),
    [subject.reference.identifier.id] NVARCHAR(100),
    [subject.reference.identifier.extension] NVARCHAR(MAX),
    [subject.reference.identifier.use] NVARCHAR(64),
    [subject.reference.identifier.type] NVARCHAR(MAX),
    [subject.reference.identifier.system] VARCHAR(256),
    [subject.reference.identifier.value] NVARCHAR(4000),
    [subject.reference.identifier.period] NVARCHAR(MAX),
    [subject.reference.identifier.assigner] NVARCHAR(MAX),
    [subject.reference.display] NVARCHAR(4000),
) WITH (
    LOCATION='/Measure/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.MeasureIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'Measure/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.MeasureContact AS
SELECT
    [id],
    [contact.JSON],
    [contact.id],
    [contact.extension],
    [contact.name],
    [contact.telecom]
FROM openrowset (
        BULK 'Measure/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [contact.JSON]  VARCHAR(MAX) '$.contact'
    ) AS rowset
    CROSS APPLY openjson (rowset.[contact.JSON]) with (
        [contact.id]                   NVARCHAR(100)       '$.id',
        [contact.extension]            NVARCHAR(MAX)       '$.extension',
        [contact.name]                 NVARCHAR(500)       '$.name',
        [contact.telecom]              NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.MeasureUseContext AS
SELECT
    [id],
    [useContext.JSON],
    [useContext.id],
    [useContext.extension],
    [useContext.code.id],
    [useContext.code.extension],
    [useContext.code.system],
    [useContext.code.version],
    [useContext.code.code],
    [useContext.code.display],
    [useContext.code.userSelected],
    [useContext.value.codeableConcept.id],
    [useContext.value.codeableConcept.extension],
    [useContext.value.codeableConcept.coding],
    [useContext.value.codeableConcept.text],
    [useContext.value.quantity.id],
    [useContext.value.quantity.extension],
    [useContext.value.quantity.value],
    [useContext.value.quantity.comparator],
    [useContext.value.quantity.unit],
    [useContext.value.quantity.system],
    [useContext.value.quantity.code],
    [useContext.value.range.id],
    [useContext.value.range.extension],
    [useContext.value.range.low],
    [useContext.value.range.high],
    [useContext.value.reference.id],
    [useContext.value.reference.extension],
    [useContext.value.reference.reference],
    [useContext.value.reference.type],
    [useContext.value.reference.identifier],
    [useContext.value.reference.display]
FROM openrowset (
        BULK 'Measure/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [useContext.JSON]  VARCHAR(MAX) '$.useContext'
    ) AS rowset
    CROSS APPLY openjson (rowset.[useContext.JSON]) with (
        [useContext.id]                NVARCHAR(100)       '$.id',
        [useContext.extension]         NVARCHAR(MAX)       '$.extension',
        [useContext.code.id]           NVARCHAR(100)       '$.code.id',
        [useContext.code.extension]    NVARCHAR(MAX)       '$.code.extension',
        [useContext.code.system]       VARCHAR(256)        '$.code.system',
        [useContext.code.version]      NVARCHAR(100)       '$.code.version',
        [useContext.code.code]         NVARCHAR(4000)      '$.code.code',
        [useContext.code.display]      NVARCHAR(4000)      '$.code.display',
        [useContext.code.userSelected] bit                 '$.code.userSelected',
        [useContext.value.codeableConcept.id] NVARCHAR(100)       '$.value.codeableConcept.id',
        [useContext.value.codeableConcept.extension] NVARCHAR(MAX)       '$.value.codeableConcept.extension',
        [useContext.value.codeableConcept.coding] NVARCHAR(MAX)       '$.value.codeableConcept.coding',
        [useContext.value.codeableConcept.text] NVARCHAR(4000)      '$.value.codeableConcept.text',
        [useContext.value.quantity.id] NVARCHAR(100)       '$.value.quantity.id',
        [useContext.value.quantity.extension] NVARCHAR(MAX)       '$.value.quantity.extension',
        [useContext.value.quantity.value] float               '$.value.quantity.value',
        [useContext.value.quantity.comparator] NVARCHAR(64)        '$.value.quantity.comparator',
        [useContext.value.quantity.unit] NVARCHAR(100)       '$.value.quantity.unit',
        [useContext.value.quantity.system] VARCHAR(256)        '$.value.quantity.system',
        [useContext.value.quantity.code] NVARCHAR(4000)      '$.value.quantity.code',
        [useContext.value.range.id]    NVARCHAR(100)       '$.value.range.id',
        [useContext.value.range.extension] NVARCHAR(MAX)       '$.value.range.extension',
        [useContext.value.range.low]   NVARCHAR(MAX)       '$.value.range.low',
        [useContext.value.range.high]  NVARCHAR(MAX)       '$.value.range.high',
        [useContext.value.reference.id] NVARCHAR(100)       '$.value.reference.id',
        [useContext.value.reference.extension] NVARCHAR(MAX)       '$.value.reference.extension',
        [useContext.value.reference.reference] NVARCHAR(4000)      '$.value.reference.reference',
        [useContext.value.reference.type] VARCHAR(256)        '$.value.reference.type',
        [useContext.value.reference.identifier] NVARCHAR(MAX)       '$.value.reference.identifier',
        [useContext.value.reference.display] NVARCHAR(4000)      '$.value.reference.display'
    ) j

GO

CREATE VIEW fhir.MeasureJurisdiction AS
SELECT
    [id],
    [jurisdiction.JSON],
    [jurisdiction.id],
    [jurisdiction.extension],
    [jurisdiction.coding],
    [jurisdiction.text]
FROM openrowset (
        BULK 'Measure/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [jurisdiction.JSON]  VARCHAR(MAX) '$.jurisdiction'
    ) AS rowset
    CROSS APPLY openjson (rowset.[jurisdiction.JSON]) with (
        [jurisdiction.id]              NVARCHAR(100)       '$.id',
        [jurisdiction.extension]       NVARCHAR(MAX)       '$.extension',
        [jurisdiction.coding]          NVARCHAR(MAX)       '$.coding' AS JSON,
        [jurisdiction.text]            NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.MeasureTopic AS
SELECT
    [id],
    [topic.JSON],
    [topic.id],
    [topic.extension],
    [topic.coding],
    [topic.text]
FROM openrowset (
        BULK 'Measure/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [topic.JSON]  VARCHAR(MAX) '$.topic'
    ) AS rowset
    CROSS APPLY openjson (rowset.[topic.JSON]) with (
        [topic.id]                     NVARCHAR(100)       '$.id',
        [topic.extension]              NVARCHAR(MAX)       '$.extension',
        [topic.coding]                 NVARCHAR(MAX)       '$.coding' AS JSON,
        [topic.text]                   NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.MeasureAuthor AS
SELECT
    [id],
    [author.JSON],
    [author.id],
    [author.extension],
    [author.name],
    [author.telecom]
FROM openrowset (
        BULK 'Measure/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [author.JSON]  VARCHAR(MAX) '$.author'
    ) AS rowset
    CROSS APPLY openjson (rowset.[author.JSON]) with (
        [author.id]                    NVARCHAR(100)       '$.id',
        [author.extension]             NVARCHAR(MAX)       '$.extension',
        [author.name]                  NVARCHAR(500)       '$.name',
        [author.telecom]               NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.MeasureEditor AS
SELECT
    [id],
    [editor.JSON],
    [editor.id],
    [editor.extension],
    [editor.name],
    [editor.telecom]
FROM openrowset (
        BULK 'Measure/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [editor.JSON]  VARCHAR(MAX) '$.editor'
    ) AS rowset
    CROSS APPLY openjson (rowset.[editor.JSON]) with (
        [editor.id]                    NVARCHAR(100)       '$.id',
        [editor.extension]             NVARCHAR(MAX)       '$.extension',
        [editor.name]                  NVARCHAR(500)       '$.name',
        [editor.telecom]               NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.MeasureReviewer AS
SELECT
    [id],
    [reviewer.JSON],
    [reviewer.id],
    [reviewer.extension],
    [reviewer.name],
    [reviewer.telecom]
FROM openrowset (
        BULK 'Measure/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [reviewer.JSON]  VARCHAR(MAX) '$.reviewer'
    ) AS rowset
    CROSS APPLY openjson (rowset.[reviewer.JSON]) with (
        [reviewer.id]                  NVARCHAR(100)       '$.id',
        [reviewer.extension]           NVARCHAR(MAX)       '$.extension',
        [reviewer.name]                NVARCHAR(500)       '$.name',
        [reviewer.telecom]             NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.MeasureEndorser AS
SELECT
    [id],
    [endorser.JSON],
    [endorser.id],
    [endorser.extension],
    [endorser.name],
    [endorser.telecom]
FROM openrowset (
        BULK 'Measure/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [endorser.JSON]  VARCHAR(MAX) '$.endorser'
    ) AS rowset
    CROSS APPLY openjson (rowset.[endorser.JSON]) with (
        [endorser.id]                  NVARCHAR(100)       '$.id',
        [endorser.extension]           NVARCHAR(MAX)       '$.extension',
        [endorser.name]                NVARCHAR(500)       '$.name',
        [endorser.telecom]             NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.MeasureRelatedArtifact AS
SELECT
    [id],
    [relatedArtifact.JSON],
    [relatedArtifact.id],
    [relatedArtifact.extension],
    [relatedArtifact.type],
    [relatedArtifact.classifier],
    [relatedArtifact.label],
    [relatedArtifact.display],
    [relatedArtifact.citation],
    [relatedArtifact.document.id],
    [relatedArtifact.document.extension],
    [relatedArtifact.document.contentType],
    [relatedArtifact.document.language],
    [relatedArtifact.document.data],
    [relatedArtifact.document.url],
    [relatedArtifact.document.size],
    [relatedArtifact.document.hash],
    [relatedArtifact.document.title],
    [relatedArtifact.document.creation],
    [relatedArtifact.document.height],
    [relatedArtifact.document.width],
    [relatedArtifact.document.frames],
    [relatedArtifact.document.duration],
    [relatedArtifact.document.pages],
    [relatedArtifact.resource],
    [relatedArtifact.resourceReference.id],
    [relatedArtifact.resourceReference.extension],
    [relatedArtifact.resourceReference.reference],
    [relatedArtifact.resourceReference.type],
    [relatedArtifact.resourceReference.identifier],
    [relatedArtifact.resourceReference.display]
FROM openrowset (
        BULK 'Measure/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [relatedArtifact.JSON]  VARCHAR(MAX) '$.relatedArtifact'
    ) AS rowset
    CROSS APPLY openjson (rowset.[relatedArtifact.JSON]) with (
        [relatedArtifact.id]           NVARCHAR(100)       '$.id',
        [relatedArtifact.extension]    NVARCHAR(MAX)       '$.extension',
        [relatedArtifact.type]         NVARCHAR(64)        '$.type',
        [relatedArtifact.classifier]   NVARCHAR(MAX)       '$.classifier' AS JSON,
        [relatedArtifact.label]        NVARCHAR(100)       '$.label',
        [relatedArtifact.display]      NVARCHAR(4000)      '$.display',
        [relatedArtifact.citation]     NVARCHAR(MAX)       '$.citation',
        [relatedArtifact.document.id]  NVARCHAR(100)       '$.document.id',
        [relatedArtifact.document.extension] NVARCHAR(MAX)       '$.document.extension',
        [relatedArtifact.document.contentType] NVARCHAR(100)       '$.document.contentType',
        [relatedArtifact.document.language] NVARCHAR(100)       '$.document.language',
        [relatedArtifact.document.data] NVARCHAR(MAX)       '$.document.data',
        [relatedArtifact.document.url] VARCHAR(256)        '$.document.url',
        [relatedArtifact.document.size] NVARCHAR(MAX)       '$.document.size',
        [relatedArtifact.document.hash] NVARCHAR(MAX)       '$.document.hash',
        [relatedArtifact.document.title] NVARCHAR(4000)      '$.document.title',
        [relatedArtifact.document.creation] VARCHAR(64)         '$.document.creation',
        [relatedArtifact.document.height] bigint              '$.document.height',
        [relatedArtifact.document.width] bigint              '$.document.width',
        [relatedArtifact.document.frames] bigint              '$.document.frames',
        [relatedArtifact.document.duration] float               '$.document.duration',
        [relatedArtifact.document.pages] bigint              '$.document.pages',
        [relatedArtifact.resource]     VARCHAR(256)        '$.resource',
        [relatedArtifact.resourceReference.id] NVARCHAR(100)       '$.resourceReference.id',
        [relatedArtifact.resourceReference.extension] NVARCHAR(MAX)       '$.resourceReference.extension',
        [relatedArtifact.resourceReference.reference] NVARCHAR(4000)      '$.resourceReference.reference',
        [relatedArtifact.resourceReference.type] VARCHAR(256)        '$.resourceReference.type',
        [relatedArtifact.resourceReference.identifier] NVARCHAR(MAX)       '$.resourceReference.identifier',
        [relatedArtifact.resourceReference.display] NVARCHAR(4000)      '$.resourceReference.display'
    ) j

GO

CREATE VIEW fhir.MeasureLibrary AS
SELECT
    [id],
    [library.JSON],
    [library]
FROM openrowset (
        BULK 'Measure/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [library.JSON]  VARCHAR(MAX) '$.library'
    ) AS rowset
    CROSS APPLY openjson (rowset.[library.JSON]) with (
        [library]                      NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.MeasureType AS
SELECT
    [id],
    [type.JSON],
    [type.id],
    [type.extension],
    [type.coding],
    [type.text]
FROM openrowset (
        BULK 'Measure/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [type.JSON]  VARCHAR(MAX) '$.type'
    ) AS rowset
    CROSS APPLY openjson (rowset.[type.JSON]) with (
        [type.id]                      NVARCHAR(100)       '$.id',
        [type.extension]               NVARCHAR(MAX)       '$.extension',
        [type.coding]                  NVARCHAR(MAX)       '$.coding' AS JSON,
        [type.text]                    NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.MeasureDefinition AS
SELECT
    [id],
    [definition.JSON],
    [definition]
FROM openrowset (
        BULK 'Measure/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [definition.JSON]  VARCHAR(MAX) '$.definition'
    ) AS rowset
    CROSS APPLY openjson (rowset.[definition.JSON]) with (
        [definition]                   NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.MeasureGroup AS
SELECT
    [id],
    [group.JSON],
    [group.id],
    [group.extension],
    [group.modifierExtension],
    [group.code.id],
    [group.code.extension],
    [group.code.coding],
    [group.code.text],
    [group.description],
    [group.type],
    [group.basis],
    [group.scoring.id],
    [group.scoring.extension],
    [group.scoring.coding],
    [group.scoring.text],
    [group.scoringUnit.id],
    [group.scoringUnit.extension],
    [group.scoringUnit.coding],
    [group.scoringUnit.text],
    [group.improvementNotation.id],
    [group.improvementNotation.extension],
    [group.improvementNotation.coding],
    [group.improvementNotation.text],
    [group.population],
    [group.stratifier]
FROM openrowset (
        BULK 'Measure/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [group.JSON]  VARCHAR(MAX) '$.group'
    ) AS rowset
    CROSS APPLY openjson (rowset.[group.JSON]) with (
        [group.id]                     NVARCHAR(100)       '$.id',
        [group.extension]              NVARCHAR(MAX)       '$.extension',
        [group.modifierExtension]      NVARCHAR(MAX)       '$.modifierExtension',
        [group.code.id]                NVARCHAR(100)       '$.code.id',
        [group.code.extension]         NVARCHAR(MAX)       '$.code.extension',
        [group.code.coding]            NVARCHAR(MAX)       '$.code.coding',
        [group.code.text]              NVARCHAR(4000)      '$.code.text',
        [group.description]            NVARCHAR(4000)      '$.description',
        [group.type]                   NVARCHAR(MAX)       '$.type' AS JSON,
        [group.basis]                  NVARCHAR(4000)      '$.basis',
        [group.scoring.id]             NVARCHAR(100)       '$.scoring.id',
        [group.scoring.extension]      NVARCHAR(MAX)       '$.scoring.extension',
        [group.scoring.coding]         NVARCHAR(MAX)       '$.scoring.coding',
        [group.scoring.text]           NVARCHAR(4000)      '$.scoring.text',
        [group.scoringUnit.id]         NVARCHAR(100)       '$.scoringUnit.id',
        [group.scoringUnit.extension]  NVARCHAR(MAX)       '$.scoringUnit.extension',
        [group.scoringUnit.coding]     NVARCHAR(MAX)       '$.scoringUnit.coding',
        [group.scoringUnit.text]       NVARCHAR(4000)      '$.scoringUnit.text',
        [group.improvementNotation.id] NVARCHAR(100)       '$.improvementNotation.id',
        [group.improvementNotation.extension] NVARCHAR(MAX)       '$.improvementNotation.extension',
        [group.improvementNotation.coding] NVARCHAR(MAX)       '$.improvementNotation.coding',
        [group.improvementNotation.text] NVARCHAR(4000)      '$.improvementNotation.text',
        [group.population]             NVARCHAR(MAX)       '$.population' AS JSON,
        [group.stratifier]             NVARCHAR(MAX)       '$.stratifier' AS JSON
    ) j

GO

CREATE VIEW fhir.MeasureSupplementalData AS
SELECT
    [id],
    [supplementalData.JSON],
    [supplementalData.id],
    [supplementalData.extension],
    [supplementalData.modifierExtension],
    [supplementalData.code.id],
    [supplementalData.code.extension],
    [supplementalData.code.coding],
    [supplementalData.code.text],
    [supplementalData.usage],
    [supplementalData.description],
    [supplementalData.criteria.id],
    [supplementalData.criteria.extension],
    [supplementalData.criteria.description],
    [supplementalData.criteria.name],
    [supplementalData.criteria.language],
    [supplementalData.criteria.expression],
    [supplementalData.criteria.reference]
FROM openrowset (
        BULK 'Measure/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [supplementalData.JSON]  VARCHAR(MAX) '$.supplementalData'
    ) AS rowset
    CROSS APPLY openjson (rowset.[supplementalData.JSON]) with (
        [supplementalData.id]          NVARCHAR(100)       '$.id',
        [supplementalData.extension]   NVARCHAR(MAX)       '$.extension',
        [supplementalData.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [supplementalData.code.id]     NVARCHAR(100)       '$.code.id',
        [supplementalData.code.extension] NVARCHAR(MAX)       '$.code.extension',
        [supplementalData.code.coding] NVARCHAR(MAX)       '$.code.coding',
        [supplementalData.code.text]   NVARCHAR(4000)      '$.code.text',
        [supplementalData.usage]       NVARCHAR(MAX)       '$.usage' AS JSON,
        [supplementalData.description] NVARCHAR(4000)      '$.description',
        [supplementalData.criteria.id] NVARCHAR(100)       '$.criteria.id',
        [supplementalData.criteria.extension] NVARCHAR(MAX)       '$.criteria.extension',
        [supplementalData.criteria.description] NVARCHAR(4000)      '$.criteria.description',
        [supplementalData.criteria.name] VARCHAR(64)         '$.criteria.name',
        [supplementalData.criteria.language] NVARCHAR(100)       '$.criteria.language',
        [supplementalData.criteria.expression] NVARCHAR(4000)      '$.criteria.expression',
        [supplementalData.criteria.reference] VARCHAR(256)        '$.criteria.reference'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[MeasureReport] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [status] NVARCHAR(100),
    [type] NVARCHAR(100),
    [dataUpdateType] NVARCHAR(4000),
    [measure] VARCHAR(256),
    [subject.id] NVARCHAR(100),
    [subject.extension] NVARCHAR(MAX),
    [subject.reference] NVARCHAR(4000),
    [subject.type] VARCHAR(256),
    [subject.identifier.id] NVARCHAR(100),
    [subject.identifier.extension] NVARCHAR(MAX),
    [subject.identifier.use] NVARCHAR(64),
    [subject.identifier.type] NVARCHAR(MAX),
    [subject.identifier.system] VARCHAR(256),
    [subject.identifier.value] NVARCHAR(4000),
    [subject.identifier.period] NVARCHAR(MAX),
    [subject.identifier.assigner] NVARCHAR(MAX),
    [subject.display] NVARCHAR(4000),
    [date] VARCHAR(64),
    [reporter.id] NVARCHAR(100),
    [reporter.extension] NVARCHAR(MAX),
    [reporter.reference] NVARCHAR(4000),
    [reporter.type] VARCHAR(256),
    [reporter.identifier.id] NVARCHAR(100),
    [reporter.identifier.extension] NVARCHAR(MAX),
    [reporter.identifier.use] NVARCHAR(64),
    [reporter.identifier.type] NVARCHAR(MAX),
    [reporter.identifier.system] VARCHAR(256),
    [reporter.identifier.value] NVARCHAR(4000),
    [reporter.identifier.period] NVARCHAR(MAX),
    [reporter.identifier.assigner] NVARCHAR(MAX),
    [reporter.display] NVARCHAR(4000),
    [reportingVendor.id] NVARCHAR(100),
    [reportingVendor.extension] NVARCHAR(MAX),
    [reportingVendor.reference] NVARCHAR(4000),
    [reportingVendor.type] VARCHAR(256),
    [reportingVendor.identifier.id] NVARCHAR(100),
    [reportingVendor.identifier.extension] NVARCHAR(MAX),
    [reportingVendor.identifier.use] NVARCHAR(64),
    [reportingVendor.identifier.type] NVARCHAR(MAX),
    [reportingVendor.identifier.system] VARCHAR(256),
    [reportingVendor.identifier.value] NVARCHAR(4000),
    [reportingVendor.identifier.period] NVARCHAR(MAX),
    [reportingVendor.identifier.assigner] NVARCHAR(MAX),
    [reportingVendor.display] NVARCHAR(4000),
    [period.id] NVARCHAR(100),
    [period.extension] NVARCHAR(MAX),
    [period.start] VARCHAR(64),
    [period.end] VARCHAR(64),
    [scoring.id] NVARCHAR(100),
    [scoring.extension] NVARCHAR(MAX),
    [scoring.coding] VARCHAR(MAX),
    [scoring.text] NVARCHAR(4000),
    [improvementNotation.id] NVARCHAR(100),
    [improvementNotation.extension] NVARCHAR(MAX),
    [improvementNotation.coding] VARCHAR(MAX),
    [improvementNotation.text] NVARCHAR(4000),
    [group] VARCHAR(MAX),
    [evaluatedResource] VARCHAR(MAX),
) WITH (
    LOCATION='/MeasureReport/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.MeasureReportIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'MeasureReport/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.MeasureReportGroup AS
SELECT
    [id],
    [group.JSON],
    [group.id],
    [group.extension],
    [group.modifierExtension],
    [group.code.id],
    [group.code.extension],
    [group.code.coding],
    [group.code.text],
    [group.population],
    [group.stratifier],
    [group.measureScore.quantity.id],
    [group.measureScore.quantity.extension],
    [group.measureScore.quantity.value],
    [group.measureScore.quantity.comparator],
    [group.measureScore.quantity.unit],
    [group.measureScore.quantity.system],
    [group.measureScore.quantity.code],
    [group.measureScore.dateTime],
    [group.measureScore.codeableConcept.id],
    [group.measureScore.codeableConcept.extension],
    [group.measureScore.codeableConcept.coding],
    [group.measureScore.codeableConcept.text],
    [group.measureScore.period.id],
    [group.measureScore.period.extension],
    [group.measureScore.period.start],
    [group.measureScore.period.end],
    [group.measureScore.range.id],
    [group.measureScore.range.extension],
    [group.measureScore.range.low],
    [group.measureScore.range.high],
    [group.measureScore.duration.id],
    [group.measureScore.duration.extension],
    [group.measureScore.duration.value],
    [group.measureScore.duration.comparator],
    [group.measureScore.duration.unit],
    [group.measureScore.duration.system],
    [group.measureScore.duration.code]
FROM openrowset (
        BULK 'MeasureReport/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [group.JSON]  VARCHAR(MAX) '$.group'
    ) AS rowset
    CROSS APPLY openjson (rowset.[group.JSON]) with (
        [group.id]                     NVARCHAR(100)       '$.id',
        [group.extension]              NVARCHAR(MAX)       '$.extension',
        [group.modifierExtension]      NVARCHAR(MAX)       '$.modifierExtension',
        [group.code.id]                NVARCHAR(100)       '$.code.id',
        [group.code.extension]         NVARCHAR(MAX)       '$.code.extension',
        [group.code.coding]            NVARCHAR(MAX)       '$.code.coding',
        [group.code.text]              NVARCHAR(4000)      '$.code.text',
        [group.population]             NVARCHAR(MAX)       '$.population' AS JSON,
        [group.stratifier]             NVARCHAR(MAX)       '$.stratifier' AS JSON,
        [group.measureScore.quantity.id] NVARCHAR(100)       '$.measureScore.quantity.id',
        [group.measureScore.quantity.extension] NVARCHAR(MAX)       '$.measureScore.quantity.extension',
        [group.measureScore.quantity.value] float               '$.measureScore.quantity.value',
        [group.measureScore.quantity.comparator] NVARCHAR(64)        '$.measureScore.quantity.comparator',
        [group.measureScore.quantity.unit] NVARCHAR(100)       '$.measureScore.quantity.unit',
        [group.measureScore.quantity.system] VARCHAR(256)        '$.measureScore.quantity.system',
        [group.measureScore.quantity.code] NVARCHAR(4000)      '$.measureScore.quantity.code',
        [group.measureScore.dateTime]  VARCHAR(64)         '$.measureScore.dateTime',
        [group.measureScore.codeableConcept.id] NVARCHAR(100)       '$.measureScore.codeableConcept.id',
        [group.measureScore.codeableConcept.extension] NVARCHAR(MAX)       '$.measureScore.codeableConcept.extension',
        [group.measureScore.codeableConcept.coding] NVARCHAR(MAX)       '$.measureScore.codeableConcept.coding',
        [group.measureScore.codeableConcept.text] NVARCHAR(4000)      '$.measureScore.codeableConcept.text',
        [group.measureScore.period.id] NVARCHAR(100)       '$.measureScore.period.id',
        [group.measureScore.period.extension] NVARCHAR(MAX)       '$.measureScore.period.extension',
        [group.measureScore.period.start] VARCHAR(64)         '$.measureScore.period.start',
        [group.measureScore.period.end] VARCHAR(64)         '$.measureScore.period.end',
        [group.measureScore.range.id]  NVARCHAR(100)       '$.measureScore.range.id',
        [group.measureScore.range.extension] NVARCHAR(MAX)       '$.measureScore.range.extension',
        [group.measureScore.range.low] NVARCHAR(MAX)       '$.measureScore.range.low',
        [group.measureScore.range.high] NVARCHAR(MAX)       '$.measureScore.range.high',
        [group.measureScore.duration.id] NVARCHAR(100)       '$.measureScore.duration.id',
        [group.measureScore.duration.extension] NVARCHAR(MAX)       '$.measureScore.duration.extension',
        [group.measureScore.duration.value] float               '$.measureScore.duration.value',
        [group.measureScore.duration.comparator] NVARCHAR(64)        '$.measureScore.duration.comparator',
        [group.measureScore.duration.unit] NVARCHAR(100)       '$.measureScore.duration.unit',
        [group.measureScore.duration.system] VARCHAR(256)        '$.measureScore.duration.system',
        [group.measureScore.duration.code] NVARCHAR(4000)      '$.measureScore.duration.code'
    ) j

GO

CREATE VIEW fhir.MeasureReportEvaluatedResource AS
SELECT
    [id],
    [evaluatedResource.JSON],
    [evaluatedResource.id],
    [evaluatedResource.extension],
    [evaluatedResource.reference],
    [evaluatedResource.type],
    [evaluatedResource.identifier.id],
    [evaluatedResource.identifier.extension],
    [evaluatedResource.identifier.use],
    [evaluatedResource.identifier.type],
    [evaluatedResource.identifier.system],
    [evaluatedResource.identifier.value],
    [evaluatedResource.identifier.period],
    [evaluatedResource.identifier.assigner],
    [evaluatedResource.display]
FROM openrowset (
        BULK 'MeasureReport/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [evaluatedResource.JSON]  VARCHAR(MAX) '$.evaluatedResource'
    ) AS rowset
    CROSS APPLY openjson (rowset.[evaluatedResource.JSON]) with (
        [evaluatedResource.id]         NVARCHAR(100)       '$.id',
        [evaluatedResource.extension]  NVARCHAR(MAX)       '$.extension',
        [evaluatedResource.reference]  NVARCHAR(4000)      '$.reference',
        [evaluatedResource.type]       VARCHAR(256)        '$.type',
        [evaluatedResource.identifier.id] NVARCHAR(100)       '$.identifier.id',
        [evaluatedResource.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [evaluatedResource.identifier.use] NVARCHAR(64)        '$.identifier.use',
        [evaluatedResource.identifier.type] NVARCHAR(MAX)       '$.identifier.type',
        [evaluatedResource.identifier.system] VARCHAR(256)        '$.identifier.system',
        [evaluatedResource.identifier.value] NVARCHAR(4000)      '$.identifier.value',
        [evaluatedResource.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [evaluatedResource.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [evaluatedResource.display]    NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[Medication] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [code.id] NVARCHAR(100),
    [code.extension] NVARCHAR(MAX),
    [code.coding] VARCHAR(MAX),
    [code.text] NVARCHAR(4000),
    [status] NVARCHAR(100),
    [marketingAuthorizationHolder.id] NVARCHAR(100),
    [marketingAuthorizationHolder.extension] NVARCHAR(MAX),
    [marketingAuthorizationHolder.reference] NVARCHAR(4000),
    [marketingAuthorizationHolder.type] VARCHAR(256),
    [marketingAuthorizationHolder.identifier.id] NVARCHAR(100),
    [marketingAuthorizationHolder.identifier.extension] NVARCHAR(MAX),
    [marketingAuthorizationHolder.identifier.use] NVARCHAR(64),
    [marketingAuthorizationHolder.identifier.type] NVARCHAR(MAX),
    [marketingAuthorizationHolder.identifier.system] VARCHAR(256),
    [marketingAuthorizationHolder.identifier.value] NVARCHAR(4000),
    [marketingAuthorizationHolder.identifier.period] NVARCHAR(MAX),
    [marketingAuthorizationHolder.identifier.assigner] NVARCHAR(MAX),
    [marketingAuthorizationHolder.display] NVARCHAR(4000),
    [doseForm.id] NVARCHAR(100),
    [doseForm.extension] NVARCHAR(MAX),
    [doseForm.coding] VARCHAR(MAX),
    [doseForm.text] NVARCHAR(4000),
    [totalVolume.id] NVARCHAR(100),
    [totalVolume.extension] NVARCHAR(MAX),
    [totalVolume.numerator.id] NVARCHAR(100),
    [totalVolume.numerator.extension] NVARCHAR(MAX),
    [totalVolume.numerator.value] float,
    [totalVolume.numerator.comparator] NVARCHAR(64),
    [totalVolume.numerator.unit] NVARCHAR(100),
    [totalVolume.numerator.system] VARCHAR(256),
    [totalVolume.numerator.code] NVARCHAR(4000),
    [totalVolume.denominator.id] NVARCHAR(100),
    [totalVolume.denominator.extension] NVARCHAR(MAX),
    [totalVolume.denominator.value] float,
    [totalVolume.denominator.comparator] NVARCHAR(64),
    [totalVolume.denominator.unit] NVARCHAR(100),
    [totalVolume.denominator.system] VARCHAR(256),
    [totalVolume.denominator.code] NVARCHAR(4000),
    [ingredient] VARCHAR(MAX),
    [batch.id] NVARCHAR(100),
    [batch.extension] NVARCHAR(MAX),
    [batch.modifierExtension] NVARCHAR(MAX),
    [batch.lotNumber] NVARCHAR(100),
    [batch.expirationDate] VARCHAR(64),
) WITH (
    LOCATION='/Medication/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.MedicationIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'Medication/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.MedicationIngredient AS
SELECT
    [id],
    [ingredient.JSON],
    [ingredient.id],
    [ingredient.extension],
    [ingredient.modifierExtension],
    [ingredient.item.id],
    [ingredient.item.extension],
    [ingredient.item.concept],
    [ingredient.item.reference],
    [ingredient.isActive],
    [ingredient.strength.ratio.id],
    [ingredient.strength.ratio.extension],
    [ingredient.strength.ratio.numerator],
    [ingredient.strength.ratio.denominator],
    [ingredient.strength.codeableConcept.id],
    [ingredient.strength.codeableConcept.extension],
    [ingredient.strength.codeableConcept.coding],
    [ingredient.strength.codeableConcept.text],
    [ingredient.strength.quantity.id],
    [ingredient.strength.quantity.extension],
    [ingredient.strength.quantity.value],
    [ingredient.strength.quantity.comparator],
    [ingredient.strength.quantity.unit],
    [ingredient.strength.quantity.system],
    [ingredient.strength.quantity.code]
FROM openrowset (
        BULK 'Medication/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [ingredient.JSON]  VARCHAR(MAX) '$.ingredient'
    ) AS rowset
    CROSS APPLY openjson (rowset.[ingredient.JSON]) with (
        [ingredient.id]                NVARCHAR(100)       '$.id',
        [ingredient.extension]         NVARCHAR(MAX)       '$.extension',
        [ingredient.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [ingredient.item.id]           NVARCHAR(100)       '$.item.id',
        [ingredient.item.extension]    NVARCHAR(MAX)       '$.item.extension',
        [ingredient.item.concept]      NVARCHAR(MAX)       '$.item.concept',
        [ingredient.item.reference]    NVARCHAR(MAX)       '$.item.reference',
        [ingredient.isActive]          bit                 '$.isActive',
        [ingredient.strength.ratio.id] NVARCHAR(100)       '$.strength.ratio.id',
        [ingredient.strength.ratio.extension] NVARCHAR(MAX)       '$.strength.ratio.extension',
        [ingredient.strength.ratio.numerator] NVARCHAR(MAX)       '$.strength.ratio.numerator',
        [ingredient.strength.ratio.denominator] NVARCHAR(MAX)       '$.strength.ratio.denominator',
        [ingredient.strength.codeableConcept.id] NVARCHAR(100)       '$.strength.codeableConcept.id',
        [ingredient.strength.codeableConcept.extension] NVARCHAR(MAX)       '$.strength.codeableConcept.extension',
        [ingredient.strength.codeableConcept.coding] NVARCHAR(MAX)       '$.strength.codeableConcept.coding',
        [ingredient.strength.codeableConcept.text] NVARCHAR(4000)      '$.strength.codeableConcept.text',
        [ingredient.strength.quantity.id] NVARCHAR(100)       '$.strength.quantity.id',
        [ingredient.strength.quantity.extension] NVARCHAR(MAX)       '$.strength.quantity.extension',
        [ingredient.strength.quantity.value] float               '$.strength.quantity.value',
        [ingredient.strength.quantity.comparator] NVARCHAR(64)        '$.strength.quantity.comparator',
        [ingredient.strength.quantity.unit] NVARCHAR(100)       '$.strength.quantity.unit',
        [ingredient.strength.quantity.system] VARCHAR(256)        '$.strength.quantity.system',
        [ingredient.strength.quantity.code] NVARCHAR(4000)      '$.strength.quantity.code'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[MedicationAdministration] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [instantiatesCanonical] VARCHAR(MAX),
    [instantiatesUri] VARCHAR(MAX),
    [basedOn] VARCHAR(MAX),
    [partOf] VARCHAR(MAX),
    [status] NVARCHAR(100),
    [statusReason] VARCHAR(MAX),
    [category] VARCHAR(MAX),
    [medication.id] NVARCHAR(100),
    [medication.extension] NVARCHAR(MAX),
    [medication.concept.id] NVARCHAR(100),
    [medication.concept.extension] NVARCHAR(MAX),
    [medication.concept.coding] NVARCHAR(MAX),
    [medication.concept.text] NVARCHAR(4000),
    [medication.reference.id] NVARCHAR(100),
    [medication.reference.extension] NVARCHAR(MAX),
    [medication.reference.reference] NVARCHAR(4000),
    [medication.reference.type] VARCHAR(256),
    [medication.reference.identifier] NVARCHAR(MAX),
    [medication.reference.display] NVARCHAR(4000),
    [subject.id] NVARCHAR(100),
    [subject.extension] NVARCHAR(MAX),
    [subject.reference] NVARCHAR(4000),
    [subject.type] VARCHAR(256),
    [subject.identifier.id] NVARCHAR(100),
    [subject.identifier.extension] NVARCHAR(MAX),
    [subject.identifier.use] NVARCHAR(64),
    [subject.identifier.type] NVARCHAR(MAX),
    [subject.identifier.system] VARCHAR(256),
    [subject.identifier.value] NVARCHAR(4000),
    [subject.identifier.period] NVARCHAR(MAX),
    [subject.identifier.assigner] NVARCHAR(MAX),
    [subject.display] NVARCHAR(4000),
    [encounter.id] NVARCHAR(100),
    [encounter.extension] NVARCHAR(MAX),
    [encounter.reference] NVARCHAR(4000),
    [encounter.type] VARCHAR(256),
    [encounter.identifier.id] NVARCHAR(100),
    [encounter.identifier.extension] NVARCHAR(MAX),
    [encounter.identifier.use] NVARCHAR(64),
    [encounter.identifier.type] NVARCHAR(MAX),
    [encounter.identifier.system] VARCHAR(256),
    [encounter.identifier.value] NVARCHAR(4000),
    [encounter.identifier.period] NVARCHAR(MAX),
    [encounter.identifier.assigner] NVARCHAR(MAX),
    [encounter.display] NVARCHAR(4000),
    [supportingInformation] VARCHAR(MAX),
    [recorded] VARCHAR(64),
    [performer] VARCHAR(MAX),
    [reason] VARCHAR(MAX),
    [request.id] NVARCHAR(100),
    [request.extension] NVARCHAR(MAX),
    [request.reference] NVARCHAR(4000),
    [request.type] VARCHAR(256),
    [request.identifier.id] NVARCHAR(100),
    [request.identifier.extension] NVARCHAR(MAX),
    [request.identifier.use] NVARCHAR(64),
    [request.identifier.type] NVARCHAR(MAX),
    [request.identifier.system] VARCHAR(256),
    [request.identifier.value] NVARCHAR(4000),
    [request.identifier.period] NVARCHAR(MAX),
    [request.identifier.assigner] NVARCHAR(MAX),
    [request.display] NVARCHAR(4000),
    [device] VARCHAR(MAX),
    [note] VARCHAR(MAX),
    [dosage.id] NVARCHAR(100),
    [dosage.extension] NVARCHAR(MAX),
    [dosage.modifierExtension] NVARCHAR(MAX),
    [dosage.text] NVARCHAR(4000),
    [dosage.site.id] NVARCHAR(100),
    [dosage.site.extension] NVARCHAR(MAX),
    [dosage.site.coding] NVARCHAR(MAX),
    [dosage.site.text] NVARCHAR(4000),
    [dosage.route.id] NVARCHAR(100),
    [dosage.route.extension] NVARCHAR(MAX),
    [dosage.route.coding] NVARCHAR(MAX),
    [dosage.route.text] NVARCHAR(4000),
    [dosage.method.id] NVARCHAR(100),
    [dosage.method.extension] NVARCHAR(MAX),
    [dosage.method.coding] NVARCHAR(MAX),
    [dosage.method.text] NVARCHAR(4000),
    [dosage.dose.id] NVARCHAR(100),
    [dosage.dose.extension] NVARCHAR(MAX),
    [dosage.dose.value] float,
    [dosage.dose.comparator] NVARCHAR(64),
    [dosage.dose.unit] NVARCHAR(100),
    [dosage.dose.system] VARCHAR(256),
    [dosage.dose.code] NVARCHAR(4000),
    [dosage.rateQuantity.id] NVARCHAR(100),
    [dosage.rateQuantity.extension] NVARCHAR(MAX),
    [dosage.rateQuantity.value] float,
    [dosage.rateQuantity.comparator] NVARCHAR(64),
    [dosage.rateQuantity.unit] NVARCHAR(100),
    [dosage.rateQuantity.system] VARCHAR(256),
    [dosage.rateQuantity.code] NVARCHAR(4000),
    [dosage.rate.ratio.id] NVARCHAR(100),
    [dosage.rate.ratio.extension] NVARCHAR(MAX),
    [dosage.rate.ratio.numerator] NVARCHAR(MAX),
    [dosage.rate.ratio.denominator] NVARCHAR(MAX),
    [dosage.rate.quantity.id] NVARCHAR(100),
    [dosage.rate.quantity.extension] NVARCHAR(MAX),
    [dosage.rate.quantity.value] float,
    [dosage.rate.quantity.comparator] NVARCHAR(64),
    [dosage.rate.quantity.unit] NVARCHAR(100),
    [dosage.rate.quantity.system] VARCHAR(256),
    [dosage.rate.quantity.code] NVARCHAR(4000),
    [eventHistory] VARCHAR(MAX),
    [occurence.dateTime] VARCHAR(64),
    [occurence.period.id] NVARCHAR(100),
    [occurence.period.extension] NVARCHAR(MAX),
    [occurence.period.start] VARCHAR(64),
    [occurence.period.end] VARCHAR(64),
) WITH (
    LOCATION='/MedicationAdministration/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.MedicationAdministrationIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'MedicationAdministration/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.MedicationAdministrationInstantiatesCanonical AS
SELECT
    [id],
    [instantiatesCanonical.JSON],
    [instantiatesCanonical]
FROM openrowset (
        BULK 'MedicationAdministration/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [instantiatesCanonical.JSON]  VARCHAR(MAX) '$.instantiatesCanonical'
    ) AS rowset
    CROSS APPLY openjson (rowset.[instantiatesCanonical.JSON]) with (
        [instantiatesCanonical]        NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.MedicationAdministrationInstantiatesUri AS
SELECT
    [id],
    [instantiatesUri.JSON],
    [instantiatesUri]
FROM openrowset (
        BULK 'MedicationAdministration/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [instantiatesUri.JSON]  VARCHAR(MAX) '$.instantiatesUri'
    ) AS rowset
    CROSS APPLY openjson (rowset.[instantiatesUri.JSON]) with (
        [instantiatesUri]              NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.MedicationAdministrationBasedOn AS
SELECT
    [id],
    [basedOn.JSON],
    [basedOn.id],
    [basedOn.extension],
    [basedOn.reference],
    [basedOn.type],
    [basedOn.identifier.id],
    [basedOn.identifier.extension],
    [basedOn.identifier.use],
    [basedOn.identifier.type],
    [basedOn.identifier.system],
    [basedOn.identifier.value],
    [basedOn.identifier.period],
    [basedOn.identifier.assigner],
    [basedOn.display]
FROM openrowset (
        BULK 'MedicationAdministration/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [basedOn.JSON]  VARCHAR(MAX) '$.basedOn'
    ) AS rowset
    CROSS APPLY openjson (rowset.[basedOn.JSON]) with (
        [basedOn.id]                   NVARCHAR(100)       '$.id',
        [basedOn.extension]            NVARCHAR(MAX)       '$.extension',
        [basedOn.reference]            NVARCHAR(4000)      '$.reference',
        [basedOn.type]                 VARCHAR(256)        '$.type',
        [basedOn.identifier.id]        NVARCHAR(100)       '$.identifier.id',
        [basedOn.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [basedOn.identifier.use]       NVARCHAR(64)        '$.identifier.use',
        [basedOn.identifier.type]      NVARCHAR(MAX)       '$.identifier.type',
        [basedOn.identifier.system]    VARCHAR(256)        '$.identifier.system',
        [basedOn.identifier.value]     NVARCHAR(4000)      '$.identifier.value',
        [basedOn.identifier.period]    NVARCHAR(MAX)       '$.identifier.period',
        [basedOn.identifier.assigner]  NVARCHAR(MAX)       '$.identifier.assigner',
        [basedOn.display]              NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.MedicationAdministrationPartOf AS
SELECT
    [id],
    [partOf.JSON],
    [partOf.id],
    [partOf.extension],
    [partOf.reference],
    [partOf.type],
    [partOf.identifier.id],
    [partOf.identifier.extension],
    [partOf.identifier.use],
    [partOf.identifier.type],
    [partOf.identifier.system],
    [partOf.identifier.value],
    [partOf.identifier.period],
    [partOf.identifier.assigner],
    [partOf.display]
FROM openrowset (
        BULK 'MedicationAdministration/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [partOf.JSON]  VARCHAR(MAX) '$.partOf'
    ) AS rowset
    CROSS APPLY openjson (rowset.[partOf.JSON]) with (
        [partOf.id]                    NVARCHAR(100)       '$.id',
        [partOf.extension]             NVARCHAR(MAX)       '$.extension',
        [partOf.reference]             NVARCHAR(4000)      '$.reference',
        [partOf.type]                  VARCHAR(256)        '$.type',
        [partOf.identifier.id]         NVARCHAR(100)       '$.identifier.id',
        [partOf.identifier.extension]  NVARCHAR(MAX)       '$.identifier.extension',
        [partOf.identifier.use]        NVARCHAR(64)        '$.identifier.use',
        [partOf.identifier.type]       NVARCHAR(MAX)       '$.identifier.type',
        [partOf.identifier.system]     VARCHAR(256)        '$.identifier.system',
        [partOf.identifier.value]      NVARCHAR(4000)      '$.identifier.value',
        [partOf.identifier.period]     NVARCHAR(MAX)       '$.identifier.period',
        [partOf.identifier.assigner]   NVARCHAR(MAX)       '$.identifier.assigner',
        [partOf.display]               NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.MedicationAdministrationStatusReason AS
SELECT
    [id],
    [statusReason.JSON],
    [statusReason.id],
    [statusReason.extension],
    [statusReason.coding],
    [statusReason.text]
FROM openrowset (
        BULK 'MedicationAdministration/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [statusReason.JSON]  VARCHAR(MAX) '$.statusReason'
    ) AS rowset
    CROSS APPLY openjson (rowset.[statusReason.JSON]) with (
        [statusReason.id]              NVARCHAR(100)       '$.id',
        [statusReason.extension]       NVARCHAR(MAX)       '$.extension',
        [statusReason.coding]          NVARCHAR(MAX)       '$.coding' AS JSON,
        [statusReason.text]            NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.MedicationAdministrationCategory AS
SELECT
    [id],
    [category.JSON],
    [category.id],
    [category.extension],
    [category.coding],
    [category.text]
FROM openrowset (
        BULK 'MedicationAdministration/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [category.JSON]  VARCHAR(MAX) '$.category'
    ) AS rowset
    CROSS APPLY openjson (rowset.[category.JSON]) with (
        [category.id]                  NVARCHAR(100)       '$.id',
        [category.extension]           NVARCHAR(MAX)       '$.extension',
        [category.coding]              NVARCHAR(MAX)       '$.coding' AS JSON,
        [category.text]                NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.MedicationAdministrationSupportingInformation AS
SELECT
    [id],
    [supportingInformation.JSON],
    [supportingInformation.id],
    [supportingInformation.extension],
    [supportingInformation.reference],
    [supportingInformation.type],
    [supportingInformation.identifier.id],
    [supportingInformation.identifier.extension],
    [supportingInformation.identifier.use],
    [supportingInformation.identifier.type],
    [supportingInformation.identifier.system],
    [supportingInformation.identifier.value],
    [supportingInformation.identifier.period],
    [supportingInformation.identifier.assigner],
    [supportingInformation.display]
FROM openrowset (
        BULK 'MedicationAdministration/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [supportingInformation.JSON]  VARCHAR(MAX) '$.supportingInformation'
    ) AS rowset
    CROSS APPLY openjson (rowset.[supportingInformation.JSON]) with (
        [supportingInformation.id]     NVARCHAR(100)       '$.id',
        [supportingInformation.extension] NVARCHAR(MAX)       '$.extension',
        [supportingInformation.reference] NVARCHAR(4000)      '$.reference',
        [supportingInformation.type]   VARCHAR(256)        '$.type',
        [supportingInformation.identifier.id] NVARCHAR(100)       '$.identifier.id',
        [supportingInformation.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [supportingInformation.identifier.use] NVARCHAR(64)        '$.identifier.use',
        [supportingInformation.identifier.type] NVARCHAR(MAX)       '$.identifier.type',
        [supportingInformation.identifier.system] VARCHAR(256)        '$.identifier.system',
        [supportingInformation.identifier.value] NVARCHAR(4000)      '$.identifier.value',
        [supportingInformation.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [supportingInformation.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [supportingInformation.display] NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.MedicationAdministrationPerformer AS
SELECT
    [id],
    [performer.JSON],
    [performer.id],
    [performer.extension],
    [performer.modifierExtension],
    [performer.function.id],
    [performer.function.extension],
    [performer.function.coding],
    [performer.function.text],
    [performer.actor.id],
    [performer.actor.extension],
    [performer.actor.reference],
    [performer.actor.type],
    [performer.actor.identifier],
    [performer.actor.display]
FROM openrowset (
        BULK 'MedicationAdministration/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [performer.JSON]  VARCHAR(MAX) '$.performer'
    ) AS rowset
    CROSS APPLY openjson (rowset.[performer.JSON]) with (
        [performer.id]                 NVARCHAR(100)       '$.id',
        [performer.extension]          NVARCHAR(MAX)       '$.extension',
        [performer.modifierExtension]  NVARCHAR(MAX)       '$.modifierExtension',
        [performer.function.id]        NVARCHAR(100)       '$.function.id',
        [performer.function.extension] NVARCHAR(MAX)       '$.function.extension',
        [performer.function.coding]    NVARCHAR(MAX)       '$.function.coding',
        [performer.function.text]      NVARCHAR(4000)      '$.function.text',
        [performer.actor.id]           NVARCHAR(100)       '$.actor.id',
        [performer.actor.extension]    NVARCHAR(MAX)       '$.actor.extension',
        [performer.actor.reference]    NVARCHAR(4000)      '$.actor.reference',
        [performer.actor.type]         VARCHAR(256)        '$.actor.type',
        [performer.actor.identifier]   NVARCHAR(MAX)       '$.actor.identifier',
        [performer.actor.display]      NVARCHAR(4000)      '$.actor.display'
    ) j

GO

CREATE VIEW fhir.MedicationAdministrationReason AS
SELECT
    [id],
    [reason.JSON],
    [reason.id],
    [reason.extension],
    [reason.concept.id],
    [reason.concept.extension],
    [reason.concept.coding],
    [reason.concept.text],
    [reason.reference.id],
    [reason.reference.extension],
    [reason.reference.reference],
    [reason.reference.type],
    [reason.reference.identifier],
    [reason.reference.display]
FROM openrowset (
        BULK 'MedicationAdministration/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [reason.JSON]  VARCHAR(MAX) '$.reason'
    ) AS rowset
    CROSS APPLY openjson (rowset.[reason.JSON]) with (
        [reason.id]                    NVARCHAR(100)       '$.id',
        [reason.extension]             NVARCHAR(MAX)       '$.extension',
        [reason.concept.id]            NVARCHAR(100)       '$.concept.id',
        [reason.concept.extension]     NVARCHAR(MAX)       '$.concept.extension',
        [reason.concept.coding]        NVARCHAR(MAX)       '$.concept.coding',
        [reason.concept.text]          NVARCHAR(4000)      '$.concept.text',
        [reason.reference.id]          NVARCHAR(100)       '$.reference.id',
        [reason.reference.extension]   NVARCHAR(MAX)       '$.reference.extension',
        [reason.reference.reference]   NVARCHAR(4000)      '$.reference.reference',
        [reason.reference.type]        VARCHAR(256)        '$.reference.type',
        [reason.reference.identifier]  NVARCHAR(MAX)       '$.reference.identifier',
        [reason.reference.display]     NVARCHAR(4000)      '$.reference.display'
    ) j

GO

CREATE VIEW fhir.MedicationAdministrationDevice AS
SELECT
    [id],
    [device.JSON],
    [device.id],
    [device.extension],
    [device.reference],
    [device.type],
    [device.identifier.id],
    [device.identifier.extension],
    [device.identifier.use],
    [device.identifier.type],
    [device.identifier.system],
    [device.identifier.value],
    [device.identifier.period],
    [device.identifier.assigner],
    [device.display]
FROM openrowset (
        BULK 'MedicationAdministration/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [device.JSON]  VARCHAR(MAX) '$.device'
    ) AS rowset
    CROSS APPLY openjson (rowset.[device.JSON]) with (
        [device.id]                    NVARCHAR(100)       '$.id',
        [device.extension]             NVARCHAR(MAX)       '$.extension',
        [device.reference]             NVARCHAR(4000)      '$.reference',
        [device.type]                  VARCHAR(256)        '$.type',
        [device.identifier.id]         NVARCHAR(100)       '$.identifier.id',
        [device.identifier.extension]  NVARCHAR(MAX)       '$.identifier.extension',
        [device.identifier.use]        NVARCHAR(64)        '$.identifier.use',
        [device.identifier.type]       NVARCHAR(MAX)       '$.identifier.type',
        [device.identifier.system]     VARCHAR(256)        '$.identifier.system',
        [device.identifier.value]      NVARCHAR(4000)      '$.identifier.value',
        [device.identifier.period]     NVARCHAR(MAX)       '$.identifier.period',
        [device.identifier.assigner]   NVARCHAR(MAX)       '$.identifier.assigner',
        [device.display]               NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.MedicationAdministrationNote AS
SELECT
    [id],
    [note.JSON],
    [note.id],
    [note.extension],
    [note.time],
    [note.text],
    [note.author.reference.id],
    [note.author.reference.extension],
    [note.author.reference.reference],
    [note.author.reference.type],
    [note.author.reference.identifier],
    [note.author.reference.display],
    [note.author.string]
FROM openrowset (
        BULK 'MedicationAdministration/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [note.JSON]  VARCHAR(MAX) '$.note'
    ) AS rowset
    CROSS APPLY openjson (rowset.[note.JSON]) with (
        [note.id]                      NVARCHAR(100)       '$.id',
        [note.extension]               NVARCHAR(MAX)       '$.extension',
        [note.time]                    VARCHAR(64)         '$.time',
        [note.text]                    NVARCHAR(MAX)       '$.text',
        [note.author.reference.id]     NVARCHAR(100)       '$.author.reference.id',
        [note.author.reference.extension] NVARCHAR(MAX)       '$.author.reference.extension',
        [note.author.reference.reference] NVARCHAR(4000)      '$.author.reference.reference',
        [note.author.reference.type]   VARCHAR(256)        '$.author.reference.type',
        [note.author.reference.identifier] NVARCHAR(MAX)       '$.author.reference.identifier',
        [note.author.reference.display] NVARCHAR(4000)      '$.author.reference.display',
        [note.author.string]           NVARCHAR(4000)      '$.author.string'
    ) j

GO

CREATE VIEW fhir.MedicationAdministrationEventHistory AS
SELECT
    [id],
    [eventHistory.JSON],
    [eventHistory.id],
    [eventHistory.extension],
    [eventHistory.reference],
    [eventHistory.type],
    [eventHistory.identifier.id],
    [eventHistory.identifier.extension],
    [eventHistory.identifier.use],
    [eventHistory.identifier.type],
    [eventHistory.identifier.system],
    [eventHistory.identifier.value],
    [eventHistory.identifier.period],
    [eventHistory.identifier.assigner],
    [eventHistory.display]
FROM openrowset (
        BULK 'MedicationAdministration/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [eventHistory.JSON]  VARCHAR(MAX) '$.eventHistory'
    ) AS rowset
    CROSS APPLY openjson (rowset.[eventHistory.JSON]) with (
        [eventHistory.id]              NVARCHAR(100)       '$.id',
        [eventHistory.extension]       NVARCHAR(MAX)       '$.extension',
        [eventHistory.reference]       NVARCHAR(4000)      '$.reference',
        [eventHistory.type]            VARCHAR(256)        '$.type',
        [eventHistory.identifier.id]   NVARCHAR(100)       '$.identifier.id',
        [eventHistory.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [eventHistory.identifier.use]  NVARCHAR(64)        '$.identifier.use',
        [eventHistory.identifier.type] NVARCHAR(MAX)       '$.identifier.type',
        [eventHistory.identifier.system] VARCHAR(256)        '$.identifier.system',
        [eventHistory.identifier.value] NVARCHAR(4000)      '$.identifier.value',
        [eventHistory.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [eventHistory.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [eventHistory.display]         NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[MedicationDispense] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [basedOn] VARCHAR(MAX),
    [partOf] VARCHAR(MAX),
    [status] NVARCHAR(100),
    [statusReason.id] NVARCHAR(100),
    [statusReason.extension] NVARCHAR(MAX),
    [statusReason.concept.id] NVARCHAR(100),
    [statusReason.concept.extension] NVARCHAR(MAX),
    [statusReason.concept.coding] NVARCHAR(MAX),
    [statusReason.concept.text] NVARCHAR(4000),
    [statusReason.reference.id] NVARCHAR(100),
    [statusReason.reference.extension] NVARCHAR(MAX),
    [statusReason.reference.reference] NVARCHAR(4000),
    [statusReason.reference.type] VARCHAR(256),
    [statusReason.reference.identifier] NVARCHAR(MAX),
    [statusReason.reference.display] NVARCHAR(4000),
    [statusChanged] VARCHAR(64),
    [category] VARCHAR(MAX),
    [medication.id] NVARCHAR(100),
    [medication.extension] NVARCHAR(MAX),
    [medication.concept.id] NVARCHAR(100),
    [medication.concept.extension] NVARCHAR(MAX),
    [medication.concept.coding] NVARCHAR(MAX),
    [medication.concept.text] NVARCHAR(4000),
    [medication.reference.id] NVARCHAR(100),
    [medication.reference.extension] NVARCHAR(MAX),
    [medication.reference.reference] NVARCHAR(4000),
    [medication.reference.type] VARCHAR(256),
    [medication.reference.identifier] NVARCHAR(MAX),
    [medication.reference.display] NVARCHAR(4000),
    [subject.id] NVARCHAR(100),
    [subject.extension] NVARCHAR(MAX),
    [subject.reference] NVARCHAR(4000),
    [subject.type] VARCHAR(256),
    [subject.identifier.id] NVARCHAR(100),
    [subject.identifier.extension] NVARCHAR(MAX),
    [subject.identifier.use] NVARCHAR(64),
    [subject.identifier.type] NVARCHAR(MAX),
    [subject.identifier.system] VARCHAR(256),
    [subject.identifier.value] NVARCHAR(4000),
    [subject.identifier.period] NVARCHAR(MAX),
    [subject.identifier.assigner] NVARCHAR(MAX),
    [subject.display] NVARCHAR(4000),
    [encounter.id] NVARCHAR(100),
    [encounter.extension] NVARCHAR(MAX),
    [encounter.reference] NVARCHAR(4000),
    [encounter.type] VARCHAR(256),
    [encounter.identifier.id] NVARCHAR(100),
    [encounter.identifier.extension] NVARCHAR(MAX),
    [encounter.identifier.use] NVARCHAR(64),
    [encounter.identifier.type] NVARCHAR(MAX),
    [encounter.identifier.system] VARCHAR(256),
    [encounter.identifier.value] NVARCHAR(4000),
    [encounter.identifier.period] NVARCHAR(MAX),
    [encounter.identifier.assigner] NVARCHAR(MAX),
    [encounter.display] NVARCHAR(4000),
    [supportingInformation] VARCHAR(MAX),
    [performer] VARCHAR(MAX),
    [location.id] NVARCHAR(100),
    [location.extension] NVARCHAR(MAX),
    [location.reference] NVARCHAR(4000),
    [location.type] VARCHAR(256),
    [location.identifier.id] NVARCHAR(100),
    [location.identifier.extension] NVARCHAR(MAX),
    [location.identifier.use] NVARCHAR(64),
    [location.identifier.type] NVARCHAR(MAX),
    [location.identifier.system] VARCHAR(256),
    [location.identifier.value] NVARCHAR(4000),
    [location.identifier.period] NVARCHAR(MAX),
    [location.identifier.assigner] NVARCHAR(MAX),
    [location.display] NVARCHAR(4000),
    [authorizingPrescription] VARCHAR(MAX),
    [type.id] NVARCHAR(100),
    [type.extension] NVARCHAR(MAX),
    [type.coding] VARCHAR(MAX),
    [type.text] NVARCHAR(4000),
    [quantity.id] NVARCHAR(100),
    [quantity.extension] NVARCHAR(MAX),
    [quantity.value] float,
    [quantity.comparator] NVARCHAR(64),
    [quantity.unit] NVARCHAR(100),
    [quantity.system] VARCHAR(256),
    [quantity.code] NVARCHAR(4000),
    [daysSupply.id] NVARCHAR(100),
    [daysSupply.extension] NVARCHAR(MAX),
    [daysSupply.value] float,
    [daysSupply.comparator] NVARCHAR(64),
    [daysSupply.unit] NVARCHAR(100),
    [daysSupply.system] VARCHAR(256),
    [daysSupply.code] NVARCHAR(4000),
    [recorded] VARCHAR(64),
    [whenPrepared] VARCHAR(64),
    [whenHandedOver] VARCHAR(64),
    [destination.id] NVARCHAR(100),
    [destination.extension] NVARCHAR(MAX),
    [destination.reference] NVARCHAR(4000),
    [destination.type] VARCHAR(256),
    [destination.identifier.id] NVARCHAR(100),
    [destination.identifier.extension] NVARCHAR(MAX),
    [destination.identifier.use] NVARCHAR(64),
    [destination.identifier.type] NVARCHAR(MAX),
    [destination.identifier.system] VARCHAR(256),
    [destination.identifier.value] NVARCHAR(4000),
    [destination.identifier.period] NVARCHAR(MAX),
    [destination.identifier.assigner] NVARCHAR(MAX),
    [destination.display] NVARCHAR(4000),
    [receiver] VARCHAR(MAX),
    [note] VARCHAR(MAX),
    [renderedDosageInstruction] NVARCHAR(4000),
    [dosageInstruction] VARCHAR(MAX),
    [substitution.id] NVARCHAR(100),
    [substitution.extension] NVARCHAR(MAX),
    [substitution.modifierExtension] NVARCHAR(MAX),
    [substitution.wasSubstituted] bit,
    [substitution.type.id] NVARCHAR(100),
    [substitution.type.extension] NVARCHAR(MAX),
    [substitution.type.coding] NVARCHAR(MAX),
    [substitution.type.text] NVARCHAR(4000),
    [substitution.reason] VARCHAR(MAX),
    [substitution.responsibleParty.id] NVARCHAR(100),
    [substitution.responsibleParty.extension] NVARCHAR(MAX),
    [substitution.responsibleParty.reference] NVARCHAR(4000),
    [substitution.responsibleParty.type] VARCHAR(256),
    [substitution.responsibleParty.identifier] NVARCHAR(MAX),
    [substitution.responsibleParty.display] NVARCHAR(4000),
    [detectedIssue] VARCHAR(MAX),
    [eventHistory] VARCHAR(MAX),
) WITH (
    LOCATION='/MedicationDispense/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.MedicationDispenseIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'MedicationDispense/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.MedicationDispenseBasedOn AS
SELECT
    [id],
    [basedOn.JSON],
    [basedOn.id],
    [basedOn.extension],
    [basedOn.reference],
    [basedOn.type],
    [basedOn.identifier.id],
    [basedOn.identifier.extension],
    [basedOn.identifier.use],
    [basedOn.identifier.type],
    [basedOn.identifier.system],
    [basedOn.identifier.value],
    [basedOn.identifier.period],
    [basedOn.identifier.assigner],
    [basedOn.display]
FROM openrowset (
        BULK 'MedicationDispense/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [basedOn.JSON]  VARCHAR(MAX) '$.basedOn'
    ) AS rowset
    CROSS APPLY openjson (rowset.[basedOn.JSON]) with (
        [basedOn.id]                   NVARCHAR(100)       '$.id',
        [basedOn.extension]            NVARCHAR(MAX)       '$.extension',
        [basedOn.reference]            NVARCHAR(4000)      '$.reference',
        [basedOn.type]                 VARCHAR(256)        '$.type',
        [basedOn.identifier.id]        NVARCHAR(100)       '$.identifier.id',
        [basedOn.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [basedOn.identifier.use]       NVARCHAR(64)        '$.identifier.use',
        [basedOn.identifier.type]      NVARCHAR(MAX)       '$.identifier.type',
        [basedOn.identifier.system]    VARCHAR(256)        '$.identifier.system',
        [basedOn.identifier.value]     NVARCHAR(4000)      '$.identifier.value',
        [basedOn.identifier.period]    NVARCHAR(MAX)       '$.identifier.period',
        [basedOn.identifier.assigner]  NVARCHAR(MAX)       '$.identifier.assigner',
        [basedOn.display]              NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.MedicationDispensePartOf AS
SELECT
    [id],
    [partOf.JSON],
    [partOf.id],
    [partOf.extension],
    [partOf.reference],
    [partOf.type],
    [partOf.identifier.id],
    [partOf.identifier.extension],
    [partOf.identifier.use],
    [partOf.identifier.type],
    [partOf.identifier.system],
    [partOf.identifier.value],
    [partOf.identifier.period],
    [partOf.identifier.assigner],
    [partOf.display]
FROM openrowset (
        BULK 'MedicationDispense/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [partOf.JSON]  VARCHAR(MAX) '$.partOf'
    ) AS rowset
    CROSS APPLY openjson (rowset.[partOf.JSON]) with (
        [partOf.id]                    NVARCHAR(100)       '$.id',
        [partOf.extension]             NVARCHAR(MAX)       '$.extension',
        [partOf.reference]             NVARCHAR(4000)      '$.reference',
        [partOf.type]                  VARCHAR(256)        '$.type',
        [partOf.identifier.id]         NVARCHAR(100)       '$.identifier.id',
        [partOf.identifier.extension]  NVARCHAR(MAX)       '$.identifier.extension',
        [partOf.identifier.use]        NVARCHAR(64)        '$.identifier.use',
        [partOf.identifier.type]       NVARCHAR(MAX)       '$.identifier.type',
        [partOf.identifier.system]     VARCHAR(256)        '$.identifier.system',
        [partOf.identifier.value]      NVARCHAR(4000)      '$.identifier.value',
        [partOf.identifier.period]     NVARCHAR(MAX)       '$.identifier.period',
        [partOf.identifier.assigner]   NVARCHAR(MAX)       '$.identifier.assigner',
        [partOf.display]               NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.MedicationDispenseCategory AS
SELECT
    [id],
    [category.JSON],
    [category.id],
    [category.extension],
    [category.coding],
    [category.text]
FROM openrowset (
        BULK 'MedicationDispense/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [category.JSON]  VARCHAR(MAX) '$.category'
    ) AS rowset
    CROSS APPLY openjson (rowset.[category.JSON]) with (
        [category.id]                  NVARCHAR(100)       '$.id',
        [category.extension]           NVARCHAR(MAX)       '$.extension',
        [category.coding]              NVARCHAR(MAX)       '$.coding' AS JSON,
        [category.text]                NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.MedicationDispenseSupportingInformation AS
SELECT
    [id],
    [supportingInformation.JSON],
    [supportingInformation.id],
    [supportingInformation.extension],
    [supportingInformation.reference],
    [supportingInformation.type],
    [supportingInformation.identifier.id],
    [supportingInformation.identifier.extension],
    [supportingInformation.identifier.use],
    [supportingInformation.identifier.type],
    [supportingInformation.identifier.system],
    [supportingInformation.identifier.value],
    [supportingInformation.identifier.period],
    [supportingInformation.identifier.assigner],
    [supportingInformation.display]
FROM openrowset (
        BULK 'MedicationDispense/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [supportingInformation.JSON]  VARCHAR(MAX) '$.supportingInformation'
    ) AS rowset
    CROSS APPLY openjson (rowset.[supportingInformation.JSON]) with (
        [supportingInformation.id]     NVARCHAR(100)       '$.id',
        [supportingInformation.extension] NVARCHAR(MAX)       '$.extension',
        [supportingInformation.reference] NVARCHAR(4000)      '$.reference',
        [supportingInformation.type]   VARCHAR(256)        '$.type',
        [supportingInformation.identifier.id] NVARCHAR(100)       '$.identifier.id',
        [supportingInformation.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [supportingInformation.identifier.use] NVARCHAR(64)        '$.identifier.use',
        [supportingInformation.identifier.type] NVARCHAR(MAX)       '$.identifier.type',
        [supportingInformation.identifier.system] VARCHAR(256)        '$.identifier.system',
        [supportingInformation.identifier.value] NVARCHAR(4000)      '$.identifier.value',
        [supportingInformation.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [supportingInformation.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [supportingInformation.display] NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.MedicationDispensePerformer AS
SELECT
    [id],
    [performer.JSON],
    [performer.id],
    [performer.extension],
    [performer.modifierExtension],
    [performer.function.id],
    [performer.function.extension],
    [performer.function.coding],
    [performer.function.text],
    [performer.actor.id],
    [performer.actor.extension],
    [performer.actor.reference],
    [performer.actor.type],
    [performer.actor.identifier],
    [performer.actor.display]
FROM openrowset (
        BULK 'MedicationDispense/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [performer.JSON]  VARCHAR(MAX) '$.performer'
    ) AS rowset
    CROSS APPLY openjson (rowset.[performer.JSON]) with (
        [performer.id]                 NVARCHAR(100)       '$.id',
        [performer.extension]          NVARCHAR(MAX)       '$.extension',
        [performer.modifierExtension]  NVARCHAR(MAX)       '$.modifierExtension',
        [performer.function.id]        NVARCHAR(100)       '$.function.id',
        [performer.function.extension] NVARCHAR(MAX)       '$.function.extension',
        [performer.function.coding]    NVARCHAR(MAX)       '$.function.coding',
        [performer.function.text]      NVARCHAR(4000)      '$.function.text',
        [performer.actor.id]           NVARCHAR(100)       '$.actor.id',
        [performer.actor.extension]    NVARCHAR(MAX)       '$.actor.extension',
        [performer.actor.reference]    NVARCHAR(4000)      '$.actor.reference',
        [performer.actor.type]         VARCHAR(256)        '$.actor.type',
        [performer.actor.identifier]   NVARCHAR(MAX)       '$.actor.identifier',
        [performer.actor.display]      NVARCHAR(4000)      '$.actor.display'
    ) j

GO

CREATE VIEW fhir.MedicationDispenseAuthorizingPrescription AS
SELECT
    [id],
    [authorizingPrescription.JSON],
    [authorizingPrescription.id],
    [authorizingPrescription.extension],
    [authorizingPrescription.reference],
    [authorizingPrescription.type],
    [authorizingPrescription.identifier.id],
    [authorizingPrescription.identifier.extension],
    [authorizingPrescription.identifier.use],
    [authorizingPrescription.identifier.type],
    [authorizingPrescription.identifier.system],
    [authorizingPrescription.identifier.value],
    [authorizingPrescription.identifier.period],
    [authorizingPrescription.identifier.assigner],
    [authorizingPrescription.display]
FROM openrowset (
        BULK 'MedicationDispense/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [authorizingPrescription.JSON]  VARCHAR(MAX) '$.authorizingPrescription'
    ) AS rowset
    CROSS APPLY openjson (rowset.[authorizingPrescription.JSON]) with (
        [authorizingPrescription.id]   NVARCHAR(100)       '$.id',
        [authorizingPrescription.extension] NVARCHAR(MAX)       '$.extension',
        [authorizingPrescription.reference] NVARCHAR(4000)      '$.reference',
        [authorizingPrescription.type] VARCHAR(256)        '$.type',
        [authorizingPrescription.identifier.id] NVARCHAR(100)       '$.identifier.id',
        [authorizingPrescription.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [authorizingPrescription.identifier.use] NVARCHAR(64)        '$.identifier.use',
        [authorizingPrescription.identifier.type] NVARCHAR(MAX)       '$.identifier.type',
        [authorizingPrescription.identifier.system] VARCHAR(256)        '$.identifier.system',
        [authorizingPrescription.identifier.value] NVARCHAR(4000)      '$.identifier.value',
        [authorizingPrescription.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [authorizingPrescription.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [authorizingPrescription.display] NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.MedicationDispenseReceiver AS
SELECT
    [id],
    [receiver.JSON],
    [receiver.id],
    [receiver.extension],
    [receiver.reference],
    [receiver.type],
    [receiver.identifier.id],
    [receiver.identifier.extension],
    [receiver.identifier.use],
    [receiver.identifier.type],
    [receiver.identifier.system],
    [receiver.identifier.value],
    [receiver.identifier.period],
    [receiver.identifier.assigner],
    [receiver.display]
FROM openrowset (
        BULK 'MedicationDispense/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [receiver.JSON]  VARCHAR(MAX) '$.receiver'
    ) AS rowset
    CROSS APPLY openjson (rowset.[receiver.JSON]) with (
        [receiver.id]                  NVARCHAR(100)       '$.id',
        [receiver.extension]           NVARCHAR(MAX)       '$.extension',
        [receiver.reference]           NVARCHAR(4000)      '$.reference',
        [receiver.type]                VARCHAR(256)        '$.type',
        [receiver.identifier.id]       NVARCHAR(100)       '$.identifier.id',
        [receiver.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [receiver.identifier.use]      NVARCHAR(64)        '$.identifier.use',
        [receiver.identifier.type]     NVARCHAR(MAX)       '$.identifier.type',
        [receiver.identifier.system]   VARCHAR(256)        '$.identifier.system',
        [receiver.identifier.value]    NVARCHAR(4000)      '$.identifier.value',
        [receiver.identifier.period]   NVARCHAR(MAX)       '$.identifier.period',
        [receiver.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [receiver.display]             NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.MedicationDispenseNote AS
SELECT
    [id],
    [note.JSON],
    [note.id],
    [note.extension],
    [note.time],
    [note.text],
    [note.author.reference.id],
    [note.author.reference.extension],
    [note.author.reference.reference],
    [note.author.reference.type],
    [note.author.reference.identifier],
    [note.author.reference.display],
    [note.author.string]
FROM openrowset (
        BULK 'MedicationDispense/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [note.JSON]  VARCHAR(MAX) '$.note'
    ) AS rowset
    CROSS APPLY openjson (rowset.[note.JSON]) with (
        [note.id]                      NVARCHAR(100)       '$.id',
        [note.extension]               NVARCHAR(MAX)       '$.extension',
        [note.time]                    VARCHAR(64)         '$.time',
        [note.text]                    NVARCHAR(MAX)       '$.text',
        [note.author.reference.id]     NVARCHAR(100)       '$.author.reference.id',
        [note.author.reference.extension] NVARCHAR(MAX)       '$.author.reference.extension',
        [note.author.reference.reference] NVARCHAR(4000)      '$.author.reference.reference',
        [note.author.reference.type]   VARCHAR(256)        '$.author.reference.type',
        [note.author.reference.identifier] NVARCHAR(MAX)       '$.author.reference.identifier',
        [note.author.reference.display] NVARCHAR(4000)      '$.author.reference.display',
        [note.author.string]           NVARCHAR(4000)      '$.author.string'
    ) j

GO

CREATE VIEW fhir.MedicationDispenseDosageInstruction AS
SELECT
    [id],
    [dosageInstruction.JSON],
    [dosageInstruction.id],
    [dosageInstruction.extension],
    [dosageInstruction.modifierExtension],
    [dosageInstruction.sequence],
    [dosageInstruction.text],
    [dosageInstruction.additionalInstruction],
    [dosageInstruction.patientInstruction],
    [dosageInstruction.timing.id],
    [dosageInstruction.timing.extension],
    [dosageInstruction.timing.modifierExtension],
    [dosageInstruction.timing.event],
    [dosageInstruction.timing.repeat],
    [dosageInstruction.timing.code],
    [dosageInstruction.site.id],
    [dosageInstruction.site.extension],
    [dosageInstruction.site.coding],
    [dosageInstruction.site.text],
    [dosageInstruction.route.id],
    [dosageInstruction.route.extension],
    [dosageInstruction.route.coding],
    [dosageInstruction.route.text],
    [dosageInstruction.method.id],
    [dosageInstruction.method.extension],
    [dosageInstruction.method.coding],
    [dosageInstruction.method.text],
    [dosageInstruction.doseAndRate],
    [dosageInstruction.maxDosePerPeriod.id],
    [dosageInstruction.maxDosePerPeriod.extension],
    [dosageInstruction.maxDosePerPeriod.numerator],
    [dosageInstruction.maxDosePerPeriod.denominator],
    [dosageInstruction.maxDosePerAdministration.id],
    [dosageInstruction.maxDosePerAdministration.extension],
    [dosageInstruction.maxDosePerAdministration.value],
    [dosageInstruction.maxDosePerAdministration.comparator],
    [dosageInstruction.maxDosePerAdministration.unit],
    [dosageInstruction.maxDosePerAdministration.system],
    [dosageInstruction.maxDosePerAdministration.code],
    [dosageInstruction.maxDosePerLifetime.id],
    [dosageInstruction.maxDosePerLifetime.extension],
    [dosageInstruction.maxDosePerLifetime.value],
    [dosageInstruction.maxDosePerLifetime.comparator],
    [dosageInstruction.maxDosePerLifetime.unit],
    [dosageInstruction.maxDosePerLifetime.system],
    [dosageInstruction.maxDosePerLifetime.code],
    [dosageInstruction.asNeeded.boolean],
    [dosageInstruction.asNeeded.codeableConcept.id],
    [dosageInstruction.asNeeded.codeableConcept.extension],
    [dosageInstruction.asNeeded.codeableConcept.coding],
    [dosageInstruction.asNeeded.codeableConcept.text]
FROM openrowset (
        BULK 'MedicationDispense/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [dosageInstruction.JSON]  VARCHAR(MAX) '$.dosageInstruction'
    ) AS rowset
    CROSS APPLY openjson (rowset.[dosageInstruction.JSON]) with (
        [dosageInstruction.id]         NVARCHAR(100)       '$.id',
        [dosageInstruction.extension]  NVARCHAR(MAX)       '$.extension',
        [dosageInstruction.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [dosageInstruction.sequence]   bigint              '$.sequence',
        [dosageInstruction.text]       NVARCHAR(4000)      '$.text',
        [dosageInstruction.additionalInstruction] NVARCHAR(MAX)       '$.additionalInstruction' AS JSON,
        [dosageInstruction.patientInstruction] NVARCHAR(4000)      '$.patientInstruction',
        [dosageInstruction.timing.id]  NVARCHAR(100)       '$.timing.id',
        [dosageInstruction.timing.extension] NVARCHAR(MAX)       '$.timing.extension',
        [dosageInstruction.timing.modifierExtension] NVARCHAR(MAX)       '$.timing.modifierExtension',
        [dosageInstruction.timing.event] NVARCHAR(MAX)       '$.timing.event',
        [dosageInstruction.timing.repeat] NVARCHAR(MAX)       '$.timing.repeat',
        [dosageInstruction.timing.code] NVARCHAR(MAX)       '$.timing.code',
        [dosageInstruction.site.id]    NVARCHAR(100)       '$.site.id',
        [dosageInstruction.site.extension] NVARCHAR(MAX)       '$.site.extension',
        [dosageInstruction.site.coding] NVARCHAR(MAX)       '$.site.coding',
        [dosageInstruction.site.text]  NVARCHAR(4000)      '$.site.text',
        [dosageInstruction.route.id]   NVARCHAR(100)       '$.route.id',
        [dosageInstruction.route.extension] NVARCHAR(MAX)       '$.route.extension',
        [dosageInstruction.route.coding] NVARCHAR(MAX)       '$.route.coding',
        [dosageInstruction.route.text] NVARCHAR(4000)      '$.route.text',
        [dosageInstruction.method.id]  NVARCHAR(100)       '$.method.id',
        [dosageInstruction.method.extension] NVARCHAR(MAX)       '$.method.extension',
        [dosageInstruction.method.coding] NVARCHAR(MAX)       '$.method.coding',
        [dosageInstruction.method.text] NVARCHAR(4000)      '$.method.text',
        [dosageInstruction.doseAndRate] NVARCHAR(MAX)       '$.doseAndRate' AS JSON,
        [dosageInstruction.maxDosePerPeriod.id] NVARCHAR(100)       '$.maxDosePerPeriod.id',
        [dosageInstruction.maxDosePerPeriod.extension] NVARCHAR(MAX)       '$.maxDosePerPeriod.extension',
        [dosageInstruction.maxDosePerPeriod.numerator] NVARCHAR(MAX)       '$.maxDosePerPeriod.numerator',
        [dosageInstruction.maxDosePerPeriod.denominator] NVARCHAR(MAX)       '$.maxDosePerPeriod.denominator',
        [dosageInstruction.maxDosePerAdministration.id] NVARCHAR(100)       '$.maxDosePerAdministration.id',
        [dosageInstruction.maxDosePerAdministration.extension] NVARCHAR(MAX)       '$.maxDosePerAdministration.extension',
        [dosageInstruction.maxDosePerAdministration.value] float               '$.maxDosePerAdministration.value',
        [dosageInstruction.maxDosePerAdministration.comparator] NVARCHAR(64)        '$.maxDosePerAdministration.comparator',
        [dosageInstruction.maxDosePerAdministration.unit] NVARCHAR(100)       '$.maxDosePerAdministration.unit',
        [dosageInstruction.maxDosePerAdministration.system] VARCHAR(256)        '$.maxDosePerAdministration.system',
        [dosageInstruction.maxDosePerAdministration.code] NVARCHAR(4000)      '$.maxDosePerAdministration.code',
        [dosageInstruction.maxDosePerLifetime.id] NVARCHAR(100)       '$.maxDosePerLifetime.id',
        [dosageInstruction.maxDosePerLifetime.extension] NVARCHAR(MAX)       '$.maxDosePerLifetime.extension',
        [dosageInstruction.maxDosePerLifetime.value] float               '$.maxDosePerLifetime.value',
        [dosageInstruction.maxDosePerLifetime.comparator] NVARCHAR(64)        '$.maxDosePerLifetime.comparator',
        [dosageInstruction.maxDosePerLifetime.unit] NVARCHAR(100)       '$.maxDosePerLifetime.unit',
        [dosageInstruction.maxDosePerLifetime.system] VARCHAR(256)        '$.maxDosePerLifetime.system',
        [dosageInstruction.maxDosePerLifetime.code] NVARCHAR(4000)      '$.maxDosePerLifetime.code',
        [dosageInstruction.asNeeded.boolean] bit                 '$.asNeeded.boolean',
        [dosageInstruction.asNeeded.codeableConcept.id] NVARCHAR(100)       '$.asNeeded.codeableConcept.id',
        [dosageInstruction.asNeeded.codeableConcept.extension] NVARCHAR(MAX)       '$.asNeeded.codeableConcept.extension',
        [dosageInstruction.asNeeded.codeableConcept.coding] NVARCHAR(MAX)       '$.asNeeded.codeableConcept.coding',
        [dosageInstruction.asNeeded.codeableConcept.text] NVARCHAR(4000)      '$.asNeeded.codeableConcept.text'
    ) j

GO

CREATE VIEW fhir.MedicationDispenseDetectedIssue AS
SELECT
    [id],
    [detectedIssue.JSON],
    [detectedIssue.id],
    [detectedIssue.extension],
    [detectedIssue.reference],
    [detectedIssue.type],
    [detectedIssue.identifier.id],
    [detectedIssue.identifier.extension],
    [detectedIssue.identifier.use],
    [detectedIssue.identifier.type],
    [detectedIssue.identifier.system],
    [detectedIssue.identifier.value],
    [detectedIssue.identifier.period],
    [detectedIssue.identifier.assigner],
    [detectedIssue.display]
FROM openrowset (
        BULK 'MedicationDispense/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [detectedIssue.JSON]  VARCHAR(MAX) '$.detectedIssue'
    ) AS rowset
    CROSS APPLY openjson (rowset.[detectedIssue.JSON]) with (
        [detectedIssue.id]             NVARCHAR(100)       '$.id',
        [detectedIssue.extension]      NVARCHAR(MAX)       '$.extension',
        [detectedIssue.reference]      NVARCHAR(4000)      '$.reference',
        [detectedIssue.type]           VARCHAR(256)        '$.type',
        [detectedIssue.identifier.id]  NVARCHAR(100)       '$.identifier.id',
        [detectedIssue.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [detectedIssue.identifier.use] NVARCHAR(64)        '$.identifier.use',
        [detectedIssue.identifier.type] NVARCHAR(MAX)       '$.identifier.type',
        [detectedIssue.identifier.system] VARCHAR(256)        '$.identifier.system',
        [detectedIssue.identifier.value] NVARCHAR(4000)      '$.identifier.value',
        [detectedIssue.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [detectedIssue.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [detectedIssue.display]        NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.MedicationDispenseEventHistory AS
SELECT
    [id],
    [eventHistory.JSON],
    [eventHistory.id],
    [eventHistory.extension],
    [eventHistory.reference],
    [eventHistory.type],
    [eventHistory.identifier.id],
    [eventHistory.identifier.extension],
    [eventHistory.identifier.use],
    [eventHistory.identifier.type],
    [eventHistory.identifier.system],
    [eventHistory.identifier.value],
    [eventHistory.identifier.period],
    [eventHistory.identifier.assigner],
    [eventHistory.display]
FROM openrowset (
        BULK 'MedicationDispense/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [eventHistory.JSON]  VARCHAR(MAX) '$.eventHistory'
    ) AS rowset
    CROSS APPLY openjson (rowset.[eventHistory.JSON]) with (
        [eventHistory.id]              NVARCHAR(100)       '$.id',
        [eventHistory.extension]       NVARCHAR(MAX)       '$.extension',
        [eventHistory.reference]       NVARCHAR(4000)      '$.reference',
        [eventHistory.type]            VARCHAR(256)        '$.type',
        [eventHistory.identifier.id]   NVARCHAR(100)       '$.identifier.id',
        [eventHistory.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [eventHistory.identifier.use]  NVARCHAR(64)        '$.identifier.use',
        [eventHistory.identifier.type] NVARCHAR(MAX)       '$.identifier.type',
        [eventHistory.identifier.system] VARCHAR(256)        '$.identifier.system',
        [eventHistory.identifier.value] NVARCHAR(4000)      '$.identifier.value',
        [eventHistory.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [eventHistory.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [eventHistory.display]         NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[MedicationKnowledge] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [code.id] NVARCHAR(100),
    [code.extension] NVARCHAR(MAX),
    [code.coding] VARCHAR(MAX),
    [code.text] NVARCHAR(4000),
    [status] NVARCHAR(100),
    [author.id] NVARCHAR(100),
    [author.extension] NVARCHAR(MAX),
    [author.reference] NVARCHAR(4000),
    [author.type] VARCHAR(256),
    [author.identifier.id] NVARCHAR(100),
    [author.identifier.extension] NVARCHAR(MAX),
    [author.identifier.use] NVARCHAR(64),
    [author.identifier.type] NVARCHAR(MAX),
    [author.identifier.system] VARCHAR(256),
    [author.identifier.value] NVARCHAR(4000),
    [author.identifier.period] NVARCHAR(MAX),
    [author.identifier.assigner] NVARCHAR(MAX),
    [author.display] NVARCHAR(4000),
    [intendedJurisdiction] VARCHAR(MAX),
    [name] VARCHAR(MAX),
    [relatedMedicationKnowledge] VARCHAR(MAX),
    [associatedMedication] VARCHAR(MAX),
    [productType] VARCHAR(MAX),
    [monograph] VARCHAR(MAX),
    [preparationInstruction] NVARCHAR(MAX),
    [cost] VARCHAR(MAX),
    [monitoringProgram] VARCHAR(MAX),
    [indicationGuideline] VARCHAR(MAX),
    [medicineClassification] VARCHAR(MAX),
    [packaging] VARCHAR(MAX),
    [clinicalUseIssue] VARCHAR(MAX),
    [regulatory] VARCHAR(MAX),
    [definitional.id] NVARCHAR(100),
    [definitional.extension] NVARCHAR(MAX),
    [definitional.modifierExtension] NVARCHAR(MAX),
    [definitional.definition] VARCHAR(MAX),
    [definitional.doseForm.id] NVARCHAR(100),
    [definitional.doseForm.extension] NVARCHAR(MAX),
    [definitional.doseForm.coding] NVARCHAR(MAX),
    [definitional.doseForm.text] NVARCHAR(4000),
    [definitional.intendedRoute] VARCHAR(MAX),
    [definitional.ingredient] VARCHAR(MAX),
    [definitional.drugCharacteristic] VARCHAR(MAX),
) WITH (
    LOCATION='/MedicationKnowledge/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.MedicationKnowledgeIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'MedicationKnowledge/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.MedicationKnowledgeIntendedJurisdiction AS
SELECT
    [id],
    [intendedJurisdiction.JSON],
    [intendedJurisdiction.id],
    [intendedJurisdiction.extension],
    [intendedJurisdiction.coding],
    [intendedJurisdiction.text]
FROM openrowset (
        BULK 'MedicationKnowledge/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [intendedJurisdiction.JSON]  VARCHAR(MAX) '$.intendedJurisdiction'
    ) AS rowset
    CROSS APPLY openjson (rowset.[intendedJurisdiction.JSON]) with (
        [intendedJurisdiction.id]      NVARCHAR(100)       '$.id',
        [intendedJurisdiction.extension] NVARCHAR(MAX)       '$.extension',
        [intendedJurisdiction.coding]  NVARCHAR(MAX)       '$.coding' AS JSON,
        [intendedJurisdiction.text]    NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.MedicationKnowledgeName AS
SELECT
    [id],
    [name.JSON],
    [name]
FROM openrowset (
        BULK 'MedicationKnowledge/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [name.JSON]  VARCHAR(MAX) '$.name'
    ) AS rowset
    CROSS APPLY openjson (rowset.[name.JSON]) with (
        [name]                         NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.MedicationKnowledgeRelatedMedicationKnowledge AS
SELECT
    [id],
    [relatedMedicationKnowledge.JSON],
    [relatedMedicationKnowledge.id],
    [relatedMedicationKnowledge.extension],
    [relatedMedicationKnowledge.modifierExtension],
    [relatedMedicationKnowledge.type.id],
    [relatedMedicationKnowledge.type.extension],
    [relatedMedicationKnowledge.type.coding],
    [relatedMedicationKnowledge.type.text],
    [relatedMedicationKnowledge.reference]
FROM openrowset (
        BULK 'MedicationKnowledge/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [relatedMedicationKnowledge.JSON]  VARCHAR(MAX) '$.relatedMedicationKnowledge'
    ) AS rowset
    CROSS APPLY openjson (rowset.[relatedMedicationKnowledge.JSON]) with (
        [relatedMedicationKnowledge.id] NVARCHAR(100)       '$.id',
        [relatedMedicationKnowledge.extension] NVARCHAR(MAX)       '$.extension',
        [relatedMedicationKnowledge.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [relatedMedicationKnowledge.type.id] NVARCHAR(100)       '$.type.id',
        [relatedMedicationKnowledge.type.extension] NVARCHAR(MAX)       '$.type.extension',
        [relatedMedicationKnowledge.type.coding] NVARCHAR(MAX)       '$.type.coding',
        [relatedMedicationKnowledge.type.text] NVARCHAR(4000)      '$.type.text',
        [relatedMedicationKnowledge.reference] NVARCHAR(MAX)       '$.reference' AS JSON
    ) j

GO

CREATE VIEW fhir.MedicationKnowledgeAssociatedMedication AS
SELECT
    [id],
    [associatedMedication.JSON],
    [associatedMedication.id],
    [associatedMedication.extension],
    [associatedMedication.reference],
    [associatedMedication.type],
    [associatedMedication.identifier.id],
    [associatedMedication.identifier.extension],
    [associatedMedication.identifier.use],
    [associatedMedication.identifier.type],
    [associatedMedication.identifier.system],
    [associatedMedication.identifier.value],
    [associatedMedication.identifier.period],
    [associatedMedication.identifier.assigner],
    [associatedMedication.display]
FROM openrowset (
        BULK 'MedicationKnowledge/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [associatedMedication.JSON]  VARCHAR(MAX) '$.associatedMedication'
    ) AS rowset
    CROSS APPLY openjson (rowset.[associatedMedication.JSON]) with (
        [associatedMedication.id]      NVARCHAR(100)       '$.id',
        [associatedMedication.extension] NVARCHAR(MAX)       '$.extension',
        [associatedMedication.reference] NVARCHAR(4000)      '$.reference',
        [associatedMedication.type]    VARCHAR(256)        '$.type',
        [associatedMedication.identifier.id] NVARCHAR(100)       '$.identifier.id',
        [associatedMedication.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [associatedMedication.identifier.use] NVARCHAR(64)        '$.identifier.use',
        [associatedMedication.identifier.type] NVARCHAR(MAX)       '$.identifier.type',
        [associatedMedication.identifier.system] VARCHAR(256)        '$.identifier.system',
        [associatedMedication.identifier.value] NVARCHAR(4000)      '$.identifier.value',
        [associatedMedication.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [associatedMedication.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [associatedMedication.display] NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.MedicationKnowledgeProductType AS
SELECT
    [id],
    [productType.JSON],
    [productType.id],
    [productType.extension],
    [productType.coding],
    [productType.text]
FROM openrowset (
        BULK 'MedicationKnowledge/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [productType.JSON]  VARCHAR(MAX) '$.productType'
    ) AS rowset
    CROSS APPLY openjson (rowset.[productType.JSON]) with (
        [productType.id]               NVARCHAR(100)       '$.id',
        [productType.extension]        NVARCHAR(MAX)       '$.extension',
        [productType.coding]           NVARCHAR(MAX)       '$.coding' AS JSON,
        [productType.text]             NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.MedicationKnowledgeMonograph AS
SELECT
    [id],
    [monograph.JSON],
    [monograph.id],
    [monograph.extension],
    [monograph.modifierExtension],
    [monograph.type.id],
    [monograph.type.extension],
    [monograph.type.coding],
    [monograph.type.text],
    [monograph.source.id],
    [monograph.source.extension],
    [monograph.source.reference],
    [monograph.source.type],
    [monograph.source.identifier],
    [monograph.source.display]
FROM openrowset (
        BULK 'MedicationKnowledge/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [monograph.JSON]  VARCHAR(MAX) '$.monograph'
    ) AS rowset
    CROSS APPLY openjson (rowset.[monograph.JSON]) with (
        [monograph.id]                 NVARCHAR(100)       '$.id',
        [monograph.extension]          NVARCHAR(MAX)       '$.extension',
        [monograph.modifierExtension]  NVARCHAR(MAX)       '$.modifierExtension',
        [monograph.type.id]            NVARCHAR(100)       '$.type.id',
        [monograph.type.extension]     NVARCHAR(MAX)       '$.type.extension',
        [monograph.type.coding]        NVARCHAR(MAX)       '$.type.coding',
        [monograph.type.text]          NVARCHAR(4000)      '$.type.text',
        [monograph.source.id]          NVARCHAR(100)       '$.source.id',
        [monograph.source.extension]   NVARCHAR(MAX)       '$.source.extension',
        [monograph.source.reference]   NVARCHAR(4000)      '$.source.reference',
        [monograph.source.type]        VARCHAR(256)        '$.source.type',
        [monograph.source.identifier]  NVARCHAR(MAX)       '$.source.identifier',
        [monograph.source.display]     NVARCHAR(4000)      '$.source.display'
    ) j

GO

CREATE VIEW fhir.MedicationKnowledgeCost AS
SELECT
    [id],
    [cost.JSON],
    [cost.id],
    [cost.extension],
    [cost.modifierExtension],
    [cost.effectiveDate],
    [cost.type.id],
    [cost.type.extension],
    [cost.type.coding],
    [cost.type.text],
    [cost.source],
    [cost.cost.money.id],
    [cost.cost.money.extension],
    [cost.cost.money.value],
    [cost.cost.money.currency],
    [cost.cost.codeableConcept.id],
    [cost.cost.codeableConcept.extension],
    [cost.cost.codeableConcept.coding],
    [cost.cost.codeableConcept.text]
FROM openrowset (
        BULK 'MedicationKnowledge/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [cost.JSON]  VARCHAR(MAX) '$.cost'
    ) AS rowset
    CROSS APPLY openjson (rowset.[cost.JSON]) with (
        [cost.id]                      NVARCHAR(100)       '$.id',
        [cost.extension]               NVARCHAR(MAX)       '$.extension',
        [cost.modifierExtension]       NVARCHAR(MAX)       '$.modifierExtension',
        [cost.effectiveDate]           NVARCHAR(MAX)       '$.effectiveDate' AS JSON,
        [cost.type.id]                 NVARCHAR(100)       '$.type.id',
        [cost.type.extension]          NVARCHAR(MAX)       '$.type.extension',
        [cost.type.coding]             NVARCHAR(MAX)       '$.type.coding',
        [cost.type.text]               NVARCHAR(4000)      '$.type.text',
        [cost.source]                  NVARCHAR(4000)      '$.source',
        [cost.cost.money.id]           NVARCHAR(100)       '$.cost.money.id',
        [cost.cost.money.extension]    NVARCHAR(MAX)       '$.cost.money.extension',
        [cost.cost.money.value]        float               '$.cost.money.value',
        [cost.cost.money.currency]     NVARCHAR(100)       '$.cost.money.currency',
        [cost.cost.codeableConcept.id] NVARCHAR(100)       '$.cost.codeableConcept.id',
        [cost.cost.codeableConcept.extension] NVARCHAR(MAX)       '$.cost.codeableConcept.extension',
        [cost.cost.codeableConcept.coding] NVARCHAR(MAX)       '$.cost.codeableConcept.coding',
        [cost.cost.codeableConcept.text] NVARCHAR(4000)      '$.cost.codeableConcept.text'
    ) j

GO

CREATE VIEW fhir.MedicationKnowledgeMonitoringProgram AS
SELECT
    [id],
    [monitoringProgram.JSON],
    [monitoringProgram.id],
    [monitoringProgram.extension],
    [monitoringProgram.modifierExtension],
    [monitoringProgram.type.id],
    [monitoringProgram.type.extension],
    [monitoringProgram.type.coding],
    [monitoringProgram.type.text],
    [monitoringProgram.name]
FROM openrowset (
        BULK 'MedicationKnowledge/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [monitoringProgram.JSON]  VARCHAR(MAX) '$.monitoringProgram'
    ) AS rowset
    CROSS APPLY openjson (rowset.[monitoringProgram.JSON]) with (
        [monitoringProgram.id]         NVARCHAR(100)       '$.id',
        [monitoringProgram.extension]  NVARCHAR(MAX)       '$.extension',
        [monitoringProgram.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [monitoringProgram.type.id]    NVARCHAR(100)       '$.type.id',
        [monitoringProgram.type.extension] NVARCHAR(MAX)       '$.type.extension',
        [monitoringProgram.type.coding] NVARCHAR(MAX)       '$.type.coding',
        [monitoringProgram.type.text]  NVARCHAR(4000)      '$.type.text',
        [monitoringProgram.name]       NVARCHAR(500)       '$.name'
    ) j

GO

CREATE VIEW fhir.MedicationKnowledgeIndicationGuideline AS
SELECT
    [id],
    [indicationGuideline.JSON],
    [indicationGuideline.id],
    [indicationGuideline.extension],
    [indicationGuideline.modifierExtension],
    [indicationGuideline.indication],
    [indicationGuideline.dosingGuideline]
FROM openrowset (
        BULK 'MedicationKnowledge/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [indicationGuideline.JSON]  VARCHAR(MAX) '$.indicationGuideline'
    ) AS rowset
    CROSS APPLY openjson (rowset.[indicationGuideline.JSON]) with (
        [indicationGuideline.id]       NVARCHAR(100)       '$.id',
        [indicationGuideline.extension] NVARCHAR(MAX)       '$.extension',
        [indicationGuideline.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [indicationGuideline.indication] NVARCHAR(MAX)       '$.indication' AS JSON,
        [indicationGuideline.dosingGuideline] NVARCHAR(MAX)       '$.dosingGuideline' AS JSON
    ) j

GO

CREATE VIEW fhir.MedicationKnowledgeMedicineClassification AS
SELECT
    [id],
    [medicineClassification.JSON],
    [medicineClassification.id],
    [medicineClassification.extension],
    [medicineClassification.modifierExtension],
    [medicineClassification.type.id],
    [medicineClassification.type.extension],
    [medicineClassification.type.coding],
    [medicineClassification.type.text],
    [medicineClassification.classification],
    [medicineClassification.source.string],
    [medicineClassification.source.uri]
FROM openrowset (
        BULK 'MedicationKnowledge/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [medicineClassification.JSON]  VARCHAR(MAX) '$.medicineClassification'
    ) AS rowset
    CROSS APPLY openjson (rowset.[medicineClassification.JSON]) with (
        [medicineClassification.id]    NVARCHAR(100)       '$.id',
        [medicineClassification.extension] NVARCHAR(MAX)       '$.extension',
        [medicineClassification.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [medicineClassification.type.id] NVARCHAR(100)       '$.type.id',
        [medicineClassification.type.extension] NVARCHAR(MAX)       '$.type.extension',
        [medicineClassification.type.coding] NVARCHAR(MAX)       '$.type.coding',
        [medicineClassification.type.text] NVARCHAR(4000)      '$.type.text',
        [medicineClassification.classification] NVARCHAR(MAX)       '$.classification' AS JSON,
        [medicineClassification.source.string] NVARCHAR(4000)      '$.source.string',
        [medicineClassification.source.uri] VARCHAR(256)        '$.source.uri'
    ) j

GO

CREATE VIEW fhir.MedicationKnowledgePackaging AS
SELECT
    [id],
    [packaging.JSON],
    [packaging.id],
    [packaging.extension],
    [packaging.modifierExtension],
    [packaging.cost],
    [packaging.packagedProduct.id],
    [packaging.packagedProduct.extension],
    [packaging.packagedProduct.reference],
    [packaging.packagedProduct.type],
    [packaging.packagedProduct.identifier],
    [packaging.packagedProduct.display]
FROM openrowset (
        BULK 'MedicationKnowledge/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [packaging.JSON]  VARCHAR(MAX) '$.packaging'
    ) AS rowset
    CROSS APPLY openjson (rowset.[packaging.JSON]) with (
        [packaging.id]                 NVARCHAR(100)       '$.id',
        [packaging.extension]          NVARCHAR(MAX)       '$.extension',
        [packaging.modifierExtension]  NVARCHAR(MAX)       '$.modifierExtension',
        [packaging.cost]               NVARCHAR(MAX)       '$.cost' AS JSON,
        [packaging.packagedProduct.id] NVARCHAR(100)       '$.packagedProduct.id',
        [packaging.packagedProduct.extension] NVARCHAR(MAX)       '$.packagedProduct.extension',
        [packaging.packagedProduct.reference] NVARCHAR(4000)      '$.packagedProduct.reference',
        [packaging.packagedProduct.type] VARCHAR(256)        '$.packagedProduct.type',
        [packaging.packagedProduct.identifier] NVARCHAR(MAX)       '$.packagedProduct.identifier',
        [packaging.packagedProduct.display] NVARCHAR(4000)      '$.packagedProduct.display'
    ) j

GO

CREATE VIEW fhir.MedicationKnowledgeClinicalUseIssue AS
SELECT
    [id],
    [clinicalUseIssue.JSON],
    [clinicalUseIssue.id],
    [clinicalUseIssue.extension],
    [clinicalUseIssue.reference],
    [clinicalUseIssue.type],
    [clinicalUseIssue.identifier.id],
    [clinicalUseIssue.identifier.extension],
    [clinicalUseIssue.identifier.use],
    [clinicalUseIssue.identifier.type],
    [clinicalUseIssue.identifier.system],
    [clinicalUseIssue.identifier.value],
    [clinicalUseIssue.identifier.period],
    [clinicalUseIssue.identifier.assigner],
    [clinicalUseIssue.display]
FROM openrowset (
        BULK 'MedicationKnowledge/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [clinicalUseIssue.JSON]  VARCHAR(MAX) '$.clinicalUseIssue'
    ) AS rowset
    CROSS APPLY openjson (rowset.[clinicalUseIssue.JSON]) with (
        [clinicalUseIssue.id]          NVARCHAR(100)       '$.id',
        [clinicalUseIssue.extension]   NVARCHAR(MAX)       '$.extension',
        [clinicalUseIssue.reference]   NVARCHAR(4000)      '$.reference',
        [clinicalUseIssue.type]        VARCHAR(256)        '$.type',
        [clinicalUseIssue.identifier.id] NVARCHAR(100)       '$.identifier.id',
        [clinicalUseIssue.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [clinicalUseIssue.identifier.use] NVARCHAR(64)        '$.identifier.use',
        [clinicalUseIssue.identifier.type] NVARCHAR(MAX)       '$.identifier.type',
        [clinicalUseIssue.identifier.system] VARCHAR(256)        '$.identifier.system',
        [clinicalUseIssue.identifier.value] NVARCHAR(4000)      '$.identifier.value',
        [clinicalUseIssue.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [clinicalUseIssue.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [clinicalUseIssue.display]     NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.MedicationKnowledgeRegulatory AS
SELECT
    [id],
    [regulatory.JSON],
    [regulatory.id],
    [regulatory.extension],
    [regulatory.modifierExtension],
    [regulatory.regulatoryAuthority.id],
    [regulatory.regulatoryAuthority.extension],
    [regulatory.regulatoryAuthority.reference],
    [regulatory.regulatoryAuthority.type],
    [regulatory.regulatoryAuthority.identifier],
    [regulatory.regulatoryAuthority.display],
    [regulatory.substitution],
    [regulatory.schedule],
    [regulatory.maxDispense.id],
    [regulatory.maxDispense.extension],
    [regulatory.maxDispense.modifierExtension],
    [regulatory.maxDispense.quantity],
    [regulatory.maxDispense.period]
FROM openrowset (
        BULK 'MedicationKnowledge/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [regulatory.JSON]  VARCHAR(MAX) '$.regulatory'
    ) AS rowset
    CROSS APPLY openjson (rowset.[regulatory.JSON]) with (
        [regulatory.id]                NVARCHAR(100)       '$.id',
        [regulatory.extension]         NVARCHAR(MAX)       '$.extension',
        [regulatory.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [regulatory.regulatoryAuthority.id] NVARCHAR(100)       '$.regulatoryAuthority.id',
        [regulatory.regulatoryAuthority.extension] NVARCHAR(MAX)       '$.regulatoryAuthority.extension',
        [regulatory.regulatoryAuthority.reference] NVARCHAR(4000)      '$.regulatoryAuthority.reference',
        [regulatory.regulatoryAuthority.type] VARCHAR(256)        '$.regulatoryAuthority.type',
        [regulatory.regulatoryAuthority.identifier] NVARCHAR(MAX)       '$.regulatoryAuthority.identifier',
        [regulatory.regulatoryAuthority.display] NVARCHAR(4000)      '$.regulatoryAuthority.display',
        [regulatory.substitution]      NVARCHAR(MAX)       '$.substitution' AS JSON,
        [regulatory.schedule]          NVARCHAR(MAX)       '$.schedule' AS JSON,
        [regulatory.maxDispense.id]    NVARCHAR(100)       '$.maxDispense.id',
        [regulatory.maxDispense.extension] NVARCHAR(MAX)       '$.maxDispense.extension',
        [regulatory.maxDispense.modifierExtension] NVARCHAR(MAX)       '$.maxDispense.modifierExtension',
        [regulatory.maxDispense.quantity] NVARCHAR(MAX)       '$.maxDispense.quantity',
        [regulatory.maxDispense.period] NVARCHAR(MAX)       '$.maxDispense.period'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[MedicationRequest] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [instantiatesCanonical] VARCHAR(MAX),
    [instantiatesUri] VARCHAR(MAX),
    [basedOn] VARCHAR(MAX),
    [priorPrescription.id] NVARCHAR(100),
    [priorPrescription.extension] NVARCHAR(MAX),
    [priorPrescription.reference] NVARCHAR(4000),
    [priorPrescription.type] VARCHAR(256),
    [priorPrescription.identifier.id] NVARCHAR(100),
    [priorPrescription.identifier.extension] NVARCHAR(MAX),
    [priorPrescription.identifier.use] NVARCHAR(64),
    [priorPrescription.identifier.type] NVARCHAR(MAX),
    [priorPrescription.identifier.system] VARCHAR(256),
    [priorPrescription.identifier.value] NVARCHAR(4000),
    [priorPrescription.identifier.period] NVARCHAR(MAX),
    [priorPrescription.identifier.assigner] NVARCHAR(MAX),
    [priorPrescription.display] NVARCHAR(4000),
    [groupIdentifier.id] NVARCHAR(100),
    [groupIdentifier.extension] NVARCHAR(MAX),
    [groupIdentifier.use] NVARCHAR(64),
    [groupIdentifier.type.id] NVARCHAR(100),
    [groupIdentifier.type.extension] NVARCHAR(MAX),
    [groupIdentifier.type.coding] NVARCHAR(MAX),
    [groupIdentifier.type.text] NVARCHAR(4000),
    [groupIdentifier.system] VARCHAR(256),
    [groupIdentifier.value] NVARCHAR(4000),
    [groupIdentifier.period.id] NVARCHAR(100),
    [groupIdentifier.period.extension] NVARCHAR(MAX),
    [groupIdentifier.period.start] VARCHAR(64),
    [groupIdentifier.period.end] VARCHAR(64),
    [groupIdentifier.assigner.id] NVARCHAR(100),
    [groupIdentifier.assigner.extension] NVARCHAR(MAX),
    [groupIdentifier.assigner.reference] NVARCHAR(4000),
    [groupIdentifier.assigner.type] VARCHAR(256),
    [groupIdentifier.assigner.identifier] NVARCHAR(MAX),
    [groupIdentifier.assigner.display] NVARCHAR(4000),
    [status] NVARCHAR(100),
    [statusReason.id] NVARCHAR(100),
    [statusReason.extension] NVARCHAR(MAX),
    [statusReason.coding] VARCHAR(MAX),
    [statusReason.text] NVARCHAR(4000),
    [statusChanged] VARCHAR(64),
    [intent] NVARCHAR(100),
    [category] VARCHAR(MAX),
    [priority] NVARCHAR(100),
    [doNotPerform] bit,
    [medication.id] NVARCHAR(100),
    [medication.extension] NVARCHAR(MAX),
    [medication.concept.id] NVARCHAR(100),
    [medication.concept.extension] NVARCHAR(MAX),
    [medication.concept.coding] NVARCHAR(MAX),
    [medication.concept.text] NVARCHAR(4000),
    [medication.reference.id] NVARCHAR(100),
    [medication.reference.extension] NVARCHAR(MAX),
    [medication.reference.reference] NVARCHAR(4000),
    [medication.reference.type] VARCHAR(256),
    [medication.reference.identifier] NVARCHAR(MAX),
    [medication.reference.display] NVARCHAR(4000),
    [subject.id] NVARCHAR(100),
    [subject.extension] NVARCHAR(MAX),
    [subject.reference] NVARCHAR(4000),
    [subject.type] VARCHAR(256),
    [subject.identifier.id] NVARCHAR(100),
    [subject.identifier.extension] NVARCHAR(MAX),
    [subject.identifier.use] NVARCHAR(64),
    [subject.identifier.type] NVARCHAR(MAX),
    [subject.identifier.system] VARCHAR(256),
    [subject.identifier.value] NVARCHAR(4000),
    [subject.identifier.period] NVARCHAR(MAX),
    [subject.identifier.assigner] NVARCHAR(MAX),
    [subject.display] NVARCHAR(4000),
    [informationSource.id] NVARCHAR(100),
    [informationSource.extension] NVARCHAR(MAX),
    [informationSource.reference] NVARCHAR(4000),
    [informationSource.type] VARCHAR(256),
    [informationSource.identifier.id] NVARCHAR(100),
    [informationSource.identifier.extension] NVARCHAR(MAX),
    [informationSource.identifier.use] NVARCHAR(64),
    [informationSource.identifier.type] NVARCHAR(MAX),
    [informationSource.identifier.system] VARCHAR(256),
    [informationSource.identifier.value] NVARCHAR(4000),
    [informationSource.identifier.period] NVARCHAR(MAX),
    [informationSource.identifier.assigner] NVARCHAR(MAX),
    [informationSource.display] NVARCHAR(4000),
    [encounter.id] NVARCHAR(100),
    [encounter.extension] NVARCHAR(MAX),
    [encounter.reference] NVARCHAR(4000),
    [encounter.type] VARCHAR(256),
    [encounter.identifier.id] NVARCHAR(100),
    [encounter.identifier.extension] NVARCHAR(MAX),
    [encounter.identifier.use] NVARCHAR(64),
    [encounter.identifier.type] NVARCHAR(MAX),
    [encounter.identifier.system] VARCHAR(256),
    [encounter.identifier.value] NVARCHAR(4000),
    [encounter.identifier.period] NVARCHAR(MAX),
    [encounter.identifier.assigner] NVARCHAR(MAX),
    [encounter.display] NVARCHAR(4000),
    [supportingInformation] VARCHAR(MAX),
    [authoredOn] VARCHAR(64),
    [requester.id] NVARCHAR(100),
    [requester.extension] NVARCHAR(MAX),
    [requester.reference] NVARCHAR(4000),
    [requester.type] VARCHAR(256),
    [requester.identifier.id] NVARCHAR(100),
    [requester.identifier.extension] NVARCHAR(MAX),
    [requester.identifier.use] NVARCHAR(64),
    [requester.identifier.type] NVARCHAR(MAX),
    [requester.identifier.system] VARCHAR(256),
    [requester.identifier.value] NVARCHAR(4000),
    [requester.identifier.period] NVARCHAR(MAX),
    [requester.identifier.assigner] NVARCHAR(MAX),
    [requester.display] NVARCHAR(4000),
    [reported] bit,
    [performerType.id] NVARCHAR(100),
    [performerType.extension] NVARCHAR(MAX),
    [performerType.coding] VARCHAR(MAX),
    [performerType.text] NVARCHAR(4000),
    [performer.id] NVARCHAR(100),
    [performer.extension] NVARCHAR(MAX),
    [performer.reference] NVARCHAR(4000),
    [performer.type] VARCHAR(256),
    [performer.identifier.id] NVARCHAR(100),
    [performer.identifier.extension] NVARCHAR(MAX),
    [performer.identifier.use] NVARCHAR(64),
    [performer.identifier.type] NVARCHAR(MAX),
    [performer.identifier.system] VARCHAR(256),
    [performer.identifier.value] NVARCHAR(4000),
    [performer.identifier.period] NVARCHAR(MAX),
    [performer.identifier.assigner] NVARCHAR(MAX),
    [performer.display] NVARCHAR(4000),
    [recorder.id] NVARCHAR(100),
    [recorder.extension] NVARCHAR(MAX),
    [recorder.reference] NVARCHAR(4000),
    [recorder.type] VARCHAR(256),
    [recorder.identifier.id] NVARCHAR(100),
    [recorder.identifier.extension] NVARCHAR(MAX),
    [recorder.identifier.use] NVARCHAR(64),
    [recorder.identifier.type] NVARCHAR(MAX),
    [recorder.identifier.system] VARCHAR(256),
    [recorder.identifier.value] NVARCHAR(4000),
    [recorder.identifier.period] NVARCHAR(MAX),
    [recorder.identifier.assigner] NVARCHAR(MAX),
    [recorder.display] NVARCHAR(4000),
    [reason] VARCHAR(MAX),
    [courseOfTherapyType.id] NVARCHAR(100),
    [courseOfTherapyType.extension] NVARCHAR(MAX),
    [courseOfTherapyType.coding] VARCHAR(MAX),
    [courseOfTherapyType.text] NVARCHAR(4000),
    [insurance] VARCHAR(MAX),
    [note] VARCHAR(MAX),
    [dose.id] NVARCHAR(100),
    [dose.extension] NVARCHAR(MAX),
    [dose.modifierExtension] NVARCHAR(MAX),
    [dose.renderedDosageInstruction] NVARCHAR(4000),
    [dose.effectiveDosePeriod] VARCHAR(64),
    [dose.dosageInstruction] VARCHAR(MAX),
    [dispenseRequest.id] NVARCHAR(100),
    [dispenseRequest.extension] NVARCHAR(MAX),
    [dispenseRequest.modifierExtension] NVARCHAR(MAX),
    [dispenseRequest.initialFill.id] NVARCHAR(100),
    [dispenseRequest.initialFill.extension] NVARCHAR(MAX),
    [dispenseRequest.initialFill.modifierExtension] NVARCHAR(MAX),
    [dispenseRequest.initialFill.quantity] NVARCHAR(MAX),
    [dispenseRequest.initialFill.duration] NVARCHAR(MAX),
    [dispenseRequest.dispenseInterval.id] NVARCHAR(100),
    [dispenseRequest.dispenseInterval.extension] NVARCHAR(MAX),
    [dispenseRequest.dispenseInterval.value] float,
    [dispenseRequest.dispenseInterval.comparator] NVARCHAR(64),
    [dispenseRequest.dispenseInterval.unit] NVARCHAR(100),
    [dispenseRequest.dispenseInterval.system] VARCHAR(256),
    [dispenseRequest.dispenseInterval.code] NVARCHAR(4000),
    [dispenseRequest.validityPeriod.id] NVARCHAR(100),
    [dispenseRequest.validityPeriod.extension] NVARCHAR(MAX),
    [dispenseRequest.validityPeriod.start] VARCHAR(64),
    [dispenseRequest.validityPeriod.end] VARCHAR(64),
    [dispenseRequest.numberOfRepeatsAllowed] bigint,
    [dispenseRequest.quantity.id] NVARCHAR(100),
    [dispenseRequest.quantity.extension] NVARCHAR(MAX),
    [dispenseRequest.quantity.value] float,
    [dispenseRequest.quantity.comparator] NVARCHAR(64),
    [dispenseRequest.quantity.unit] NVARCHAR(100),
    [dispenseRequest.quantity.system] VARCHAR(256),
    [dispenseRequest.quantity.code] NVARCHAR(4000),
    [dispenseRequest.expectedSupplyDuration.id] NVARCHAR(100),
    [dispenseRequest.expectedSupplyDuration.extension] NVARCHAR(MAX),
    [dispenseRequest.expectedSupplyDuration.value] float,
    [dispenseRequest.expectedSupplyDuration.comparator] NVARCHAR(64),
    [dispenseRequest.expectedSupplyDuration.unit] NVARCHAR(100),
    [dispenseRequest.expectedSupplyDuration.system] VARCHAR(256),
    [dispenseRequest.expectedSupplyDuration.code] NVARCHAR(4000),
    [dispenseRequest.dispenser.id] NVARCHAR(100),
    [dispenseRequest.dispenser.extension] NVARCHAR(MAX),
    [dispenseRequest.dispenser.reference] NVARCHAR(4000),
    [dispenseRequest.dispenser.type] VARCHAR(256),
    [dispenseRequest.dispenser.identifier] NVARCHAR(MAX),
    [dispenseRequest.dispenser.display] NVARCHAR(4000),
    [dispenseRequest.dispenserInstruction] VARCHAR(MAX),
    [dispenseRequest.doseAdministrationAid.id] NVARCHAR(100),
    [dispenseRequest.doseAdministrationAid.extension] NVARCHAR(MAX),
    [dispenseRequest.doseAdministrationAid.coding] NVARCHAR(MAX),
    [dispenseRequest.doseAdministrationAid.text] NVARCHAR(4000),
    [substitution.id] NVARCHAR(100),
    [substitution.extension] NVARCHAR(MAX),
    [substitution.modifierExtension] NVARCHAR(MAX),
    [substitution.reason.id] NVARCHAR(100),
    [substitution.reason.extension] NVARCHAR(MAX),
    [substitution.reason.coding] NVARCHAR(MAX),
    [substitution.reason.text] NVARCHAR(4000),
    [substitution.allowed.boolean] bit,
    [substitution.allowed.codeableConcept.id] NVARCHAR(100),
    [substitution.allowed.codeableConcept.extension] NVARCHAR(MAX),
    [substitution.allowed.codeableConcept.coding] NVARCHAR(MAX),
    [substitution.allowed.codeableConcept.text] NVARCHAR(4000),
    [detectedIssue] VARCHAR(MAX),
    [eventHistory] VARCHAR(MAX),
) WITH (
    LOCATION='/MedicationRequest/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.MedicationRequestIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'MedicationRequest/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.MedicationRequestInstantiatesCanonical AS
SELECT
    [id],
    [instantiatesCanonical.JSON],
    [instantiatesCanonical]
FROM openrowset (
        BULK 'MedicationRequest/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [instantiatesCanonical.JSON]  VARCHAR(MAX) '$.instantiatesCanonical'
    ) AS rowset
    CROSS APPLY openjson (rowset.[instantiatesCanonical.JSON]) with (
        [instantiatesCanonical]        NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.MedicationRequestInstantiatesUri AS
SELECT
    [id],
    [instantiatesUri.JSON],
    [instantiatesUri]
FROM openrowset (
        BULK 'MedicationRequest/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [instantiatesUri.JSON]  VARCHAR(MAX) '$.instantiatesUri'
    ) AS rowset
    CROSS APPLY openjson (rowset.[instantiatesUri.JSON]) with (
        [instantiatesUri]              NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.MedicationRequestBasedOn AS
SELECT
    [id],
    [basedOn.JSON],
    [basedOn.id],
    [basedOn.extension],
    [basedOn.reference],
    [basedOn.type],
    [basedOn.identifier.id],
    [basedOn.identifier.extension],
    [basedOn.identifier.use],
    [basedOn.identifier.type],
    [basedOn.identifier.system],
    [basedOn.identifier.value],
    [basedOn.identifier.period],
    [basedOn.identifier.assigner],
    [basedOn.display]
FROM openrowset (
        BULK 'MedicationRequest/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [basedOn.JSON]  VARCHAR(MAX) '$.basedOn'
    ) AS rowset
    CROSS APPLY openjson (rowset.[basedOn.JSON]) with (
        [basedOn.id]                   NVARCHAR(100)       '$.id',
        [basedOn.extension]            NVARCHAR(MAX)       '$.extension',
        [basedOn.reference]            NVARCHAR(4000)      '$.reference',
        [basedOn.type]                 VARCHAR(256)        '$.type',
        [basedOn.identifier.id]        NVARCHAR(100)       '$.identifier.id',
        [basedOn.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [basedOn.identifier.use]       NVARCHAR(64)        '$.identifier.use',
        [basedOn.identifier.type]      NVARCHAR(MAX)       '$.identifier.type',
        [basedOn.identifier.system]    VARCHAR(256)        '$.identifier.system',
        [basedOn.identifier.value]     NVARCHAR(4000)      '$.identifier.value',
        [basedOn.identifier.period]    NVARCHAR(MAX)       '$.identifier.period',
        [basedOn.identifier.assigner]  NVARCHAR(MAX)       '$.identifier.assigner',
        [basedOn.display]              NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.MedicationRequestCategory AS
SELECT
    [id],
    [category.JSON],
    [category.id],
    [category.extension],
    [category.coding],
    [category.text]
FROM openrowset (
        BULK 'MedicationRequest/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [category.JSON]  VARCHAR(MAX) '$.category'
    ) AS rowset
    CROSS APPLY openjson (rowset.[category.JSON]) with (
        [category.id]                  NVARCHAR(100)       '$.id',
        [category.extension]           NVARCHAR(MAX)       '$.extension',
        [category.coding]              NVARCHAR(MAX)       '$.coding' AS JSON,
        [category.text]                NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.MedicationRequestSupportingInformation AS
SELECT
    [id],
    [supportingInformation.JSON],
    [supportingInformation.id],
    [supportingInformation.extension],
    [supportingInformation.reference],
    [supportingInformation.type],
    [supportingInformation.identifier.id],
    [supportingInformation.identifier.extension],
    [supportingInformation.identifier.use],
    [supportingInformation.identifier.type],
    [supportingInformation.identifier.system],
    [supportingInformation.identifier.value],
    [supportingInformation.identifier.period],
    [supportingInformation.identifier.assigner],
    [supportingInformation.display]
FROM openrowset (
        BULK 'MedicationRequest/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [supportingInformation.JSON]  VARCHAR(MAX) '$.supportingInformation'
    ) AS rowset
    CROSS APPLY openjson (rowset.[supportingInformation.JSON]) with (
        [supportingInformation.id]     NVARCHAR(100)       '$.id',
        [supportingInformation.extension] NVARCHAR(MAX)       '$.extension',
        [supportingInformation.reference] NVARCHAR(4000)      '$.reference',
        [supportingInformation.type]   VARCHAR(256)        '$.type',
        [supportingInformation.identifier.id] NVARCHAR(100)       '$.identifier.id',
        [supportingInformation.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [supportingInformation.identifier.use] NVARCHAR(64)        '$.identifier.use',
        [supportingInformation.identifier.type] NVARCHAR(MAX)       '$.identifier.type',
        [supportingInformation.identifier.system] VARCHAR(256)        '$.identifier.system',
        [supportingInformation.identifier.value] NVARCHAR(4000)      '$.identifier.value',
        [supportingInformation.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [supportingInformation.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [supportingInformation.display] NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.MedicationRequestReason AS
SELECT
    [id],
    [reason.JSON],
    [reason.id],
    [reason.extension],
    [reason.concept.id],
    [reason.concept.extension],
    [reason.concept.coding],
    [reason.concept.text],
    [reason.reference.id],
    [reason.reference.extension],
    [reason.reference.reference],
    [reason.reference.type],
    [reason.reference.identifier],
    [reason.reference.display]
FROM openrowset (
        BULK 'MedicationRequest/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [reason.JSON]  VARCHAR(MAX) '$.reason'
    ) AS rowset
    CROSS APPLY openjson (rowset.[reason.JSON]) with (
        [reason.id]                    NVARCHAR(100)       '$.id',
        [reason.extension]             NVARCHAR(MAX)       '$.extension',
        [reason.concept.id]            NVARCHAR(100)       '$.concept.id',
        [reason.concept.extension]     NVARCHAR(MAX)       '$.concept.extension',
        [reason.concept.coding]        NVARCHAR(MAX)       '$.concept.coding',
        [reason.concept.text]          NVARCHAR(4000)      '$.concept.text',
        [reason.reference.id]          NVARCHAR(100)       '$.reference.id',
        [reason.reference.extension]   NVARCHAR(MAX)       '$.reference.extension',
        [reason.reference.reference]   NVARCHAR(4000)      '$.reference.reference',
        [reason.reference.type]        VARCHAR(256)        '$.reference.type',
        [reason.reference.identifier]  NVARCHAR(MAX)       '$.reference.identifier',
        [reason.reference.display]     NVARCHAR(4000)      '$.reference.display'
    ) j

GO

CREATE VIEW fhir.MedicationRequestInsurance AS
SELECT
    [id],
    [insurance.JSON],
    [insurance.id],
    [insurance.extension],
    [insurance.reference],
    [insurance.type],
    [insurance.identifier.id],
    [insurance.identifier.extension],
    [insurance.identifier.use],
    [insurance.identifier.type],
    [insurance.identifier.system],
    [insurance.identifier.value],
    [insurance.identifier.period],
    [insurance.identifier.assigner],
    [insurance.display]
FROM openrowset (
        BULK 'MedicationRequest/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [insurance.JSON]  VARCHAR(MAX) '$.insurance'
    ) AS rowset
    CROSS APPLY openjson (rowset.[insurance.JSON]) with (
        [insurance.id]                 NVARCHAR(100)       '$.id',
        [insurance.extension]          NVARCHAR(MAX)       '$.extension',
        [insurance.reference]          NVARCHAR(4000)      '$.reference',
        [insurance.type]               VARCHAR(256)        '$.type',
        [insurance.identifier.id]      NVARCHAR(100)       '$.identifier.id',
        [insurance.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [insurance.identifier.use]     NVARCHAR(64)        '$.identifier.use',
        [insurance.identifier.type]    NVARCHAR(MAX)       '$.identifier.type',
        [insurance.identifier.system]  VARCHAR(256)        '$.identifier.system',
        [insurance.identifier.value]   NVARCHAR(4000)      '$.identifier.value',
        [insurance.identifier.period]  NVARCHAR(MAX)       '$.identifier.period',
        [insurance.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [insurance.display]            NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.MedicationRequestNote AS
SELECT
    [id],
    [note.JSON],
    [note.id],
    [note.extension],
    [note.time],
    [note.text],
    [note.author.reference.id],
    [note.author.reference.extension],
    [note.author.reference.reference],
    [note.author.reference.type],
    [note.author.reference.identifier],
    [note.author.reference.display],
    [note.author.string]
FROM openrowset (
        BULK 'MedicationRequest/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [note.JSON]  VARCHAR(MAX) '$.note'
    ) AS rowset
    CROSS APPLY openjson (rowset.[note.JSON]) with (
        [note.id]                      NVARCHAR(100)       '$.id',
        [note.extension]               NVARCHAR(MAX)       '$.extension',
        [note.time]                    VARCHAR(64)         '$.time',
        [note.text]                    NVARCHAR(MAX)       '$.text',
        [note.author.reference.id]     NVARCHAR(100)       '$.author.reference.id',
        [note.author.reference.extension] NVARCHAR(MAX)       '$.author.reference.extension',
        [note.author.reference.reference] NVARCHAR(4000)      '$.author.reference.reference',
        [note.author.reference.type]   VARCHAR(256)        '$.author.reference.type',
        [note.author.reference.identifier] NVARCHAR(MAX)       '$.author.reference.identifier',
        [note.author.reference.display] NVARCHAR(4000)      '$.author.reference.display',
        [note.author.string]           NVARCHAR(4000)      '$.author.string'
    ) j

GO

CREATE VIEW fhir.MedicationRequestDetectedIssue AS
SELECT
    [id],
    [detectedIssue.JSON],
    [detectedIssue.id],
    [detectedIssue.extension],
    [detectedIssue.reference],
    [detectedIssue.type],
    [detectedIssue.identifier.id],
    [detectedIssue.identifier.extension],
    [detectedIssue.identifier.use],
    [detectedIssue.identifier.type],
    [detectedIssue.identifier.system],
    [detectedIssue.identifier.value],
    [detectedIssue.identifier.period],
    [detectedIssue.identifier.assigner],
    [detectedIssue.display]
FROM openrowset (
        BULK 'MedicationRequest/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [detectedIssue.JSON]  VARCHAR(MAX) '$.detectedIssue'
    ) AS rowset
    CROSS APPLY openjson (rowset.[detectedIssue.JSON]) with (
        [detectedIssue.id]             NVARCHAR(100)       '$.id',
        [detectedIssue.extension]      NVARCHAR(MAX)       '$.extension',
        [detectedIssue.reference]      NVARCHAR(4000)      '$.reference',
        [detectedIssue.type]           VARCHAR(256)        '$.type',
        [detectedIssue.identifier.id]  NVARCHAR(100)       '$.identifier.id',
        [detectedIssue.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [detectedIssue.identifier.use] NVARCHAR(64)        '$.identifier.use',
        [detectedIssue.identifier.type] NVARCHAR(MAX)       '$.identifier.type',
        [detectedIssue.identifier.system] VARCHAR(256)        '$.identifier.system',
        [detectedIssue.identifier.value] NVARCHAR(4000)      '$.identifier.value',
        [detectedIssue.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [detectedIssue.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [detectedIssue.display]        NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.MedicationRequestEventHistory AS
SELECT
    [id],
    [eventHistory.JSON],
    [eventHistory.id],
    [eventHistory.extension],
    [eventHistory.reference],
    [eventHistory.type],
    [eventHistory.identifier.id],
    [eventHistory.identifier.extension],
    [eventHistory.identifier.use],
    [eventHistory.identifier.type],
    [eventHistory.identifier.system],
    [eventHistory.identifier.value],
    [eventHistory.identifier.period],
    [eventHistory.identifier.assigner],
    [eventHistory.display]
FROM openrowset (
        BULK 'MedicationRequest/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [eventHistory.JSON]  VARCHAR(MAX) '$.eventHistory'
    ) AS rowset
    CROSS APPLY openjson (rowset.[eventHistory.JSON]) with (
        [eventHistory.id]              NVARCHAR(100)       '$.id',
        [eventHistory.extension]       NVARCHAR(MAX)       '$.extension',
        [eventHistory.reference]       NVARCHAR(4000)      '$.reference',
        [eventHistory.type]            VARCHAR(256)        '$.type',
        [eventHistory.identifier.id]   NVARCHAR(100)       '$.identifier.id',
        [eventHistory.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [eventHistory.identifier.use]  NVARCHAR(64)        '$.identifier.use',
        [eventHistory.identifier.type] NVARCHAR(MAX)       '$.identifier.type',
        [eventHistory.identifier.system] VARCHAR(256)        '$.identifier.system',
        [eventHistory.identifier.value] NVARCHAR(4000)      '$.identifier.value',
        [eventHistory.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [eventHistory.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [eventHistory.display]         NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[MedicationUsage] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [status] NVARCHAR(100),
    [category] VARCHAR(MAX),
    [medication.id] NVARCHAR(100),
    [medication.extension] NVARCHAR(MAX),
    [medication.concept.id] NVARCHAR(100),
    [medication.concept.extension] NVARCHAR(MAX),
    [medication.concept.coding] NVARCHAR(MAX),
    [medication.concept.text] NVARCHAR(4000),
    [medication.reference.id] NVARCHAR(100),
    [medication.reference.extension] NVARCHAR(MAX),
    [medication.reference.reference] NVARCHAR(4000),
    [medication.reference.type] VARCHAR(256),
    [medication.reference.identifier] NVARCHAR(MAX),
    [medication.reference.display] NVARCHAR(4000),
    [subject.id] NVARCHAR(100),
    [subject.extension] NVARCHAR(MAX),
    [subject.reference] NVARCHAR(4000),
    [subject.type] VARCHAR(256),
    [subject.identifier.id] NVARCHAR(100),
    [subject.identifier.extension] NVARCHAR(MAX),
    [subject.identifier.use] NVARCHAR(64),
    [subject.identifier.type] NVARCHAR(MAX),
    [subject.identifier.system] VARCHAR(256),
    [subject.identifier.value] NVARCHAR(4000),
    [subject.identifier.period] NVARCHAR(MAX),
    [subject.identifier.assigner] NVARCHAR(MAX),
    [subject.display] NVARCHAR(4000),
    [encounter.id] NVARCHAR(100),
    [encounter.extension] NVARCHAR(MAX),
    [encounter.reference] NVARCHAR(4000),
    [encounter.type] VARCHAR(256),
    [encounter.identifier.id] NVARCHAR(100),
    [encounter.identifier.extension] NVARCHAR(MAX),
    [encounter.identifier.use] NVARCHAR(64),
    [encounter.identifier.type] NVARCHAR(MAX),
    [encounter.identifier.system] VARCHAR(256),
    [encounter.identifier.value] NVARCHAR(4000),
    [encounter.identifier.period] NVARCHAR(MAX),
    [encounter.identifier.assigner] NVARCHAR(MAX),
    [encounter.display] NVARCHAR(4000),
    [dateAsserted] VARCHAR(64),
    [informationSource.id] NVARCHAR(100),
    [informationSource.extension] NVARCHAR(MAX),
    [informationSource.reference] NVARCHAR(4000),
    [informationSource.type] VARCHAR(256),
    [informationSource.identifier.id] NVARCHAR(100),
    [informationSource.identifier.extension] NVARCHAR(MAX),
    [informationSource.identifier.use] NVARCHAR(64),
    [informationSource.identifier.type] NVARCHAR(MAX),
    [informationSource.identifier.system] VARCHAR(256),
    [informationSource.identifier.value] NVARCHAR(4000),
    [informationSource.identifier.period] NVARCHAR(MAX),
    [informationSource.identifier.assigner] NVARCHAR(MAX),
    [informationSource.display] NVARCHAR(4000),
    [derivedFrom] VARCHAR(MAX),
    [reason] VARCHAR(MAX),
    [note] VARCHAR(MAX),
    [renderedDosageInstruction] NVARCHAR(4000),
    [dosage] VARCHAR(MAX),
    [adherence.id] NVARCHAR(100),
    [adherence.extension] NVARCHAR(MAX),
    [adherence.modifierExtension] NVARCHAR(MAX),
    [adherence.code.id] NVARCHAR(100),
    [adherence.code.extension] NVARCHAR(MAX),
    [adherence.code.coding] NVARCHAR(MAX),
    [adherence.code.text] NVARCHAR(4000),
    [adherence.reason.id] NVARCHAR(100),
    [adherence.reason.extension] NVARCHAR(MAX),
    [adherence.reason.coding] NVARCHAR(MAX),
    [adherence.reason.text] NVARCHAR(4000),
    [effective.dateTime] VARCHAR(64),
    [effective.period.id] NVARCHAR(100),
    [effective.period.extension] NVARCHAR(MAX),
    [effective.period.start] VARCHAR(64),
    [effective.period.end] VARCHAR(64),
) WITH (
    LOCATION='/MedicationUsage/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.MedicationUsageIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'MedicationUsage/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.MedicationUsageCategory AS
SELECT
    [id],
    [category.JSON],
    [category.id],
    [category.extension],
    [category.coding],
    [category.text]
FROM openrowset (
        BULK 'MedicationUsage/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [category.JSON]  VARCHAR(MAX) '$.category'
    ) AS rowset
    CROSS APPLY openjson (rowset.[category.JSON]) with (
        [category.id]                  NVARCHAR(100)       '$.id',
        [category.extension]           NVARCHAR(MAX)       '$.extension',
        [category.coding]              NVARCHAR(MAX)       '$.coding' AS JSON,
        [category.text]                NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.MedicationUsageDerivedFrom AS
SELECT
    [id],
    [derivedFrom.JSON],
    [derivedFrom.id],
    [derivedFrom.extension],
    [derivedFrom.reference],
    [derivedFrom.type],
    [derivedFrom.identifier.id],
    [derivedFrom.identifier.extension],
    [derivedFrom.identifier.use],
    [derivedFrom.identifier.type],
    [derivedFrom.identifier.system],
    [derivedFrom.identifier.value],
    [derivedFrom.identifier.period],
    [derivedFrom.identifier.assigner],
    [derivedFrom.display]
FROM openrowset (
        BULK 'MedicationUsage/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [derivedFrom.JSON]  VARCHAR(MAX) '$.derivedFrom'
    ) AS rowset
    CROSS APPLY openjson (rowset.[derivedFrom.JSON]) with (
        [derivedFrom.id]               NVARCHAR(100)       '$.id',
        [derivedFrom.extension]        NVARCHAR(MAX)       '$.extension',
        [derivedFrom.reference]        NVARCHAR(4000)      '$.reference',
        [derivedFrom.type]             VARCHAR(256)        '$.type',
        [derivedFrom.identifier.id]    NVARCHAR(100)       '$.identifier.id',
        [derivedFrom.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [derivedFrom.identifier.use]   NVARCHAR(64)        '$.identifier.use',
        [derivedFrom.identifier.type]  NVARCHAR(MAX)       '$.identifier.type',
        [derivedFrom.identifier.system] VARCHAR(256)        '$.identifier.system',
        [derivedFrom.identifier.value] NVARCHAR(4000)      '$.identifier.value',
        [derivedFrom.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [derivedFrom.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [derivedFrom.display]          NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.MedicationUsageReason AS
SELECT
    [id],
    [reason.JSON],
    [reason.id],
    [reason.extension],
    [reason.concept.id],
    [reason.concept.extension],
    [reason.concept.coding],
    [reason.concept.text],
    [reason.reference.id],
    [reason.reference.extension],
    [reason.reference.reference],
    [reason.reference.type],
    [reason.reference.identifier],
    [reason.reference.display]
FROM openrowset (
        BULK 'MedicationUsage/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [reason.JSON]  VARCHAR(MAX) '$.reason'
    ) AS rowset
    CROSS APPLY openjson (rowset.[reason.JSON]) with (
        [reason.id]                    NVARCHAR(100)       '$.id',
        [reason.extension]             NVARCHAR(MAX)       '$.extension',
        [reason.concept.id]            NVARCHAR(100)       '$.concept.id',
        [reason.concept.extension]     NVARCHAR(MAX)       '$.concept.extension',
        [reason.concept.coding]        NVARCHAR(MAX)       '$.concept.coding',
        [reason.concept.text]          NVARCHAR(4000)      '$.concept.text',
        [reason.reference.id]          NVARCHAR(100)       '$.reference.id',
        [reason.reference.extension]   NVARCHAR(MAX)       '$.reference.extension',
        [reason.reference.reference]   NVARCHAR(4000)      '$.reference.reference',
        [reason.reference.type]        VARCHAR(256)        '$.reference.type',
        [reason.reference.identifier]  NVARCHAR(MAX)       '$.reference.identifier',
        [reason.reference.display]     NVARCHAR(4000)      '$.reference.display'
    ) j

GO

CREATE VIEW fhir.MedicationUsageNote AS
SELECT
    [id],
    [note.JSON],
    [note.id],
    [note.extension],
    [note.time],
    [note.text],
    [note.author.reference.id],
    [note.author.reference.extension],
    [note.author.reference.reference],
    [note.author.reference.type],
    [note.author.reference.identifier],
    [note.author.reference.display],
    [note.author.string]
FROM openrowset (
        BULK 'MedicationUsage/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [note.JSON]  VARCHAR(MAX) '$.note'
    ) AS rowset
    CROSS APPLY openjson (rowset.[note.JSON]) with (
        [note.id]                      NVARCHAR(100)       '$.id',
        [note.extension]               NVARCHAR(MAX)       '$.extension',
        [note.time]                    VARCHAR(64)         '$.time',
        [note.text]                    NVARCHAR(MAX)       '$.text',
        [note.author.reference.id]     NVARCHAR(100)       '$.author.reference.id',
        [note.author.reference.extension] NVARCHAR(MAX)       '$.author.reference.extension',
        [note.author.reference.reference] NVARCHAR(4000)      '$.author.reference.reference',
        [note.author.reference.type]   VARCHAR(256)        '$.author.reference.type',
        [note.author.reference.identifier] NVARCHAR(MAX)       '$.author.reference.identifier',
        [note.author.reference.display] NVARCHAR(4000)      '$.author.reference.display',
        [note.author.string]           NVARCHAR(4000)      '$.author.string'
    ) j

GO

CREATE VIEW fhir.MedicationUsageDosage AS
SELECT
    [id],
    [dosage.JSON],
    [dosage.id],
    [dosage.extension],
    [dosage.modifierExtension],
    [dosage.sequence],
    [dosage.text],
    [dosage.additionalInstruction],
    [dosage.patientInstruction],
    [dosage.timing.id],
    [dosage.timing.extension],
    [dosage.timing.modifierExtension],
    [dosage.timing.event],
    [dosage.timing.repeat],
    [dosage.timing.code],
    [dosage.site.id],
    [dosage.site.extension],
    [dosage.site.coding],
    [dosage.site.text],
    [dosage.route.id],
    [dosage.route.extension],
    [dosage.route.coding],
    [dosage.route.text],
    [dosage.method.id],
    [dosage.method.extension],
    [dosage.method.coding],
    [dosage.method.text],
    [dosage.doseAndRate],
    [dosage.maxDosePerPeriod.id],
    [dosage.maxDosePerPeriod.extension],
    [dosage.maxDosePerPeriod.numerator],
    [dosage.maxDosePerPeriod.denominator],
    [dosage.maxDosePerAdministration.id],
    [dosage.maxDosePerAdministration.extension],
    [dosage.maxDosePerAdministration.value],
    [dosage.maxDosePerAdministration.comparator],
    [dosage.maxDosePerAdministration.unit],
    [dosage.maxDosePerAdministration.system],
    [dosage.maxDosePerAdministration.code],
    [dosage.maxDosePerLifetime.id],
    [dosage.maxDosePerLifetime.extension],
    [dosage.maxDosePerLifetime.value],
    [dosage.maxDosePerLifetime.comparator],
    [dosage.maxDosePerLifetime.unit],
    [dosage.maxDosePerLifetime.system],
    [dosage.maxDosePerLifetime.code],
    [dosage.asNeeded.boolean],
    [dosage.asNeeded.codeableConcept.id],
    [dosage.asNeeded.codeableConcept.extension],
    [dosage.asNeeded.codeableConcept.coding],
    [dosage.asNeeded.codeableConcept.text]
FROM openrowset (
        BULK 'MedicationUsage/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [dosage.JSON]  VARCHAR(MAX) '$.dosage'
    ) AS rowset
    CROSS APPLY openjson (rowset.[dosage.JSON]) with (
        [dosage.id]                    NVARCHAR(100)       '$.id',
        [dosage.extension]             NVARCHAR(MAX)       '$.extension',
        [dosage.modifierExtension]     NVARCHAR(MAX)       '$.modifierExtension',
        [dosage.sequence]              bigint              '$.sequence',
        [dosage.text]                  NVARCHAR(4000)      '$.text',
        [dosage.additionalInstruction] NVARCHAR(MAX)       '$.additionalInstruction' AS JSON,
        [dosage.patientInstruction]    NVARCHAR(4000)      '$.patientInstruction',
        [dosage.timing.id]             NVARCHAR(100)       '$.timing.id',
        [dosage.timing.extension]      NVARCHAR(MAX)       '$.timing.extension',
        [dosage.timing.modifierExtension] NVARCHAR(MAX)       '$.timing.modifierExtension',
        [dosage.timing.event]          NVARCHAR(MAX)       '$.timing.event',
        [dosage.timing.repeat]         NVARCHAR(MAX)       '$.timing.repeat',
        [dosage.timing.code]           NVARCHAR(MAX)       '$.timing.code',
        [dosage.site.id]               NVARCHAR(100)       '$.site.id',
        [dosage.site.extension]        NVARCHAR(MAX)       '$.site.extension',
        [dosage.site.coding]           NVARCHAR(MAX)       '$.site.coding',
        [dosage.site.text]             NVARCHAR(4000)      '$.site.text',
        [dosage.route.id]              NVARCHAR(100)       '$.route.id',
        [dosage.route.extension]       NVARCHAR(MAX)       '$.route.extension',
        [dosage.route.coding]          NVARCHAR(MAX)       '$.route.coding',
        [dosage.route.text]            NVARCHAR(4000)      '$.route.text',
        [dosage.method.id]             NVARCHAR(100)       '$.method.id',
        [dosage.method.extension]      NVARCHAR(MAX)       '$.method.extension',
        [dosage.method.coding]         NVARCHAR(MAX)       '$.method.coding',
        [dosage.method.text]           NVARCHAR(4000)      '$.method.text',
        [dosage.doseAndRate]           NVARCHAR(MAX)       '$.doseAndRate' AS JSON,
        [dosage.maxDosePerPeriod.id]   NVARCHAR(100)       '$.maxDosePerPeriod.id',
        [dosage.maxDosePerPeriod.extension] NVARCHAR(MAX)       '$.maxDosePerPeriod.extension',
        [dosage.maxDosePerPeriod.numerator] NVARCHAR(MAX)       '$.maxDosePerPeriod.numerator',
        [dosage.maxDosePerPeriod.denominator] NVARCHAR(MAX)       '$.maxDosePerPeriod.denominator',
        [dosage.maxDosePerAdministration.id] NVARCHAR(100)       '$.maxDosePerAdministration.id',
        [dosage.maxDosePerAdministration.extension] NVARCHAR(MAX)       '$.maxDosePerAdministration.extension',
        [dosage.maxDosePerAdministration.value] float               '$.maxDosePerAdministration.value',
        [dosage.maxDosePerAdministration.comparator] NVARCHAR(64)        '$.maxDosePerAdministration.comparator',
        [dosage.maxDosePerAdministration.unit] NVARCHAR(100)       '$.maxDosePerAdministration.unit',
        [dosage.maxDosePerAdministration.system] VARCHAR(256)        '$.maxDosePerAdministration.system',
        [dosage.maxDosePerAdministration.code] NVARCHAR(4000)      '$.maxDosePerAdministration.code',
        [dosage.maxDosePerLifetime.id] NVARCHAR(100)       '$.maxDosePerLifetime.id',
        [dosage.maxDosePerLifetime.extension] NVARCHAR(MAX)       '$.maxDosePerLifetime.extension',
        [dosage.maxDosePerLifetime.value] float               '$.maxDosePerLifetime.value',
        [dosage.maxDosePerLifetime.comparator] NVARCHAR(64)        '$.maxDosePerLifetime.comparator',
        [dosage.maxDosePerLifetime.unit] NVARCHAR(100)       '$.maxDosePerLifetime.unit',
        [dosage.maxDosePerLifetime.system] VARCHAR(256)        '$.maxDosePerLifetime.system',
        [dosage.maxDosePerLifetime.code] NVARCHAR(4000)      '$.maxDosePerLifetime.code',
        [dosage.asNeeded.boolean]      bit                 '$.asNeeded.boolean',
        [dosage.asNeeded.codeableConcept.id] NVARCHAR(100)       '$.asNeeded.codeableConcept.id',
        [dosage.asNeeded.codeableConcept.extension] NVARCHAR(MAX)       '$.asNeeded.codeableConcept.extension',
        [dosage.asNeeded.codeableConcept.coding] NVARCHAR(MAX)       '$.asNeeded.codeableConcept.coding',
        [dosage.asNeeded.codeableConcept.text] NVARCHAR(4000)      '$.asNeeded.codeableConcept.text'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[MedicinalProductDefinition] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [type.id] NVARCHAR(100),
    [type.extension] NVARCHAR(MAX),
    [type.coding] VARCHAR(MAX),
    [type.text] NVARCHAR(4000),
    [domain.id] NVARCHAR(100),
    [domain.extension] NVARCHAR(MAX),
    [domain.coding] VARCHAR(MAX),
    [domain.text] NVARCHAR(4000),
    [version] NVARCHAR(100),
    [status.id] NVARCHAR(100),
    [status.extension] NVARCHAR(MAX),
    [status.coding] VARCHAR(MAX),
    [status.text] NVARCHAR(4000),
    [statusDate] VARCHAR(64),
    [description] NVARCHAR(MAX),
    [combinedPharmaceuticalDoseForm.id] NVARCHAR(100),
    [combinedPharmaceuticalDoseForm.extension] NVARCHAR(MAX),
    [combinedPharmaceuticalDoseForm.coding] VARCHAR(MAX),
    [combinedPharmaceuticalDoseForm.text] NVARCHAR(4000),
    [route] VARCHAR(MAX),
    [indication] NVARCHAR(MAX),
    [legalStatusOfSupply.id] NVARCHAR(100),
    [legalStatusOfSupply.extension] NVARCHAR(MAX),
    [legalStatusOfSupply.coding] VARCHAR(MAX),
    [legalStatusOfSupply.text] NVARCHAR(4000),
    [additionalMonitoringIndicator.id] NVARCHAR(100),
    [additionalMonitoringIndicator.extension] NVARCHAR(MAX),
    [additionalMonitoringIndicator.coding] VARCHAR(MAX),
    [additionalMonitoringIndicator.text] NVARCHAR(4000),
    [specialMeasures] VARCHAR(MAX),
    [pediatricUseIndicator.id] NVARCHAR(100),
    [pediatricUseIndicator.extension] NVARCHAR(MAX),
    [pediatricUseIndicator.coding] VARCHAR(MAX),
    [pediatricUseIndicator.text] NVARCHAR(4000),
    [classification] VARCHAR(MAX),
    [marketingStatus] VARCHAR(MAX),
    [packagedMedicinalProduct] VARCHAR(MAX),
    [ingredient] VARCHAR(MAX),
    [impurity] VARCHAR(MAX),
    [attachedDocument] VARCHAR(MAX),
    [masterFile] VARCHAR(MAX),
    [contact] VARCHAR(MAX),
    [clinicalTrial] VARCHAR(MAX),
    [code] VARCHAR(MAX),
    [name] VARCHAR(MAX),
    [crossReference] VARCHAR(MAX),
    [operation] VARCHAR(MAX),
    [characteristic] VARCHAR(MAX),
) WITH (
    LOCATION='/MedicinalProductDefinition/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.MedicinalProductDefinitionIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'MedicinalProductDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.MedicinalProductDefinitionRoute AS
SELECT
    [id],
    [route.JSON],
    [route.id],
    [route.extension],
    [route.coding],
    [route.text]
FROM openrowset (
        BULK 'MedicinalProductDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [route.JSON]  VARCHAR(MAX) '$.route'
    ) AS rowset
    CROSS APPLY openjson (rowset.[route.JSON]) with (
        [route.id]                     NVARCHAR(100)       '$.id',
        [route.extension]              NVARCHAR(MAX)       '$.extension',
        [route.coding]                 NVARCHAR(MAX)       '$.coding' AS JSON,
        [route.text]                   NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.MedicinalProductDefinitionSpecialMeasures AS
SELECT
    [id],
    [specialMeasures.JSON],
    [specialMeasures.id],
    [specialMeasures.extension],
    [specialMeasures.coding],
    [specialMeasures.text]
FROM openrowset (
        BULK 'MedicinalProductDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [specialMeasures.JSON]  VARCHAR(MAX) '$.specialMeasures'
    ) AS rowset
    CROSS APPLY openjson (rowset.[specialMeasures.JSON]) with (
        [specialMeasures.id]           NVARCHAR(100)       '$.id',
        [specialMeasures.extension]    NVARCHAR(MAX)       '$.extension',
        [specialMeasures.coding]       NVARCHAR(MAX)       '$.coding' AS JSON,
        [specialMeasures.text]         NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.MedicinalProductDefinitionClassification AS
SELECT
    [id],
    [classification.JSON],
    [classification.id],
    [classification.extension],
    [classification.coding],
    [classification.text]
FROM openrowset (
        BULK 'MedicinalProductDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [classification.JSON]  VARCHAR(MAX) '$.classification'
    ) AS rowset
    CROSS APPLY openjson (rowset.[classification.JSON]) with (
        [classification.id]            NVARCHAR(100)       '$.id',
        [classification.extension]     NVARCHAR(MAX)       '$.extension',
        [classification.coding]        NVARCHAR(MAX)       '$.coding' AS JSON,
        [classification.text]          NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.MedicinalProductDefinitionMarketingStatus AS
SELECT
    [id],
    [marketingStatus.JSON],
    [marketingStatus.id],
    [marketingStatus.extension],
    [marketingStatus.modifierExtension],
    [marketingStatus.country.id],
    [marketingStatus.country.extension],
    [marketingStatus.country.coding],
    [marketingStatus.country.text],
    [marketingStatus.jurisdiction.id],
    [marketingStatus.jurisdiction.extension],
    [marketingStatus.jurisdiction.coding],
    [marketingStatus.jurisdiction.text],
    [marketingStatus.status.id],
    [marketingStatus.status.extension],
    [marketingStatus.status.coding],
    [marketingStatus.status.text],
    [marketingStatus.dateRange.id],
    [marketingStatus.dateRange.extension],
    [marketingStatus.dateRange.start],
    [marketingStatus.dateRange.end],
    [marketingStatus.restoreDate]
FROM openrowset (
        BULK 'MedicinalProductDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [marketingStatus.JSON]  VARCHAR(MAX) '$.marketingStatus'
    ) AS rowset
    CROSS APPLY openjson (rowset.[marketingStatus.JSON]) with (
        [marketingStatus.id]           NVARCHAR(100)       '$.id',
        [marketingStatus.extension]    NVARCHAR(MAX)       '$.extension',
        [marketingStatus.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [marketingStatus.country.id]   NVARCHAR(100)       '$.country.id',
        [marketingStatus.country.extension] NVARCHAR(MAX)       '$.country.extension',
        [marketingStatus.country.coding] NVARCHAR(MAX)       '$.country.coding',
        [marketingStatus.country.text] NVARCHAR(4000)      '$.country.text',
        [marketingStatus.jurisdiction.id] NVARCHAR(100)       '$.jurisdiction.id',
        [marketingStatus.jurisdiction.extension] NVARCHAR(MAX)       '$.jurisdiction.extension',
        [marketingStatus.jurisdiction.coding] NVARCHAR(MAX)       '$.jurisdiction.coding',
        [marketingStatus.jurisdiction.text] NVARCHAR(4000)      '$.jurisdiction.text',
        [marketingStatus.status.id]    NVARCHAR(100)       '$.status.id',
        [marketingStatus.status.extension] NVARCHAR(MAX)       '$.status.extension',
        [marketingStatus.status.coding] NVARCHAR(MAX)       '$.status.coding',
        [marketingStatus.status.text]  NVARCHAR(4000)      '$.status.text',
        [marketingStatus.dateRange.id] NVARCHAR(100)       '$.dateRange.id',
        [marketingStatus.dateRange.extension] NVARCHAR(MAX)       '$.dateRange.extension',
        [marketingStatus.dateRange.start] VARCHAR(64)         '$.dateRange.start',
        [marketingStatus.dateRange.end] VARCHAR(64)         '$.dateRange.end',
        [marketingStatus.restoreDate]  VARCHAR(64)         '$.restoreDate'
    ) j

GO

CREATE VIEW fhir.MedicinalProductDefinitionPackagedMedicinalProduct AS
SELECT
    [id],
    [packagedMedicinalProduct.JSON],
    [packagedMedicinalProduct.id],
    [packagedMedicinalProduct.extension],
    [packagedMedicinalProduct.coding],
    [packagedMedicinalProduct.text]
FROM openrowset (
        BULK 'MedicinalProductDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [packagedMedicinalProduct.JSON]  VARCHAR(MAX) '$.packagedMedicinalProduct'
    ) AS rowset
    CROSS APPLY openjson (rowset.[packagedMedicinalProduct.JSON]) with (
        [packagedMedicinalProduct.id]  NVARCHAR(100)       '$.id',
        [packagedMedicinalProduct.extension] NVARCHAR(MAX)       '$.extension',
        [packagedMedicinalProduct.coding] NVARCHAR(MAX)       '$.coding' AS JSON,
        [packagedMedicinalProduct.text] NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.MedicinalProductDefinitionIngredient AS
SELECT
    [id],
    [ingredient.JSON],
    [ingredient.id],
    [ingredient.extension],
    [ingredient.coding],
    [ingredient.text]
FROM openrowset (
        BULK 'MedicinalProductDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [ingredient.JSON]  VARCHAR(MAX) '$.ingredient'
    ) AS rowset
    CROSS APPLY openjson (rowset.[ingredient.JSON]) with (
        [ingredient.id]                NVARCHAR(100)       '$.id',
        [ingredient.extension]         NVARCHAR(MAX)       '$.extension',
        [ingredient.coding]            NVARCHAR(MAX)       '$.coding' AS JSON,
        [ingredient.text]              NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.MedicinalProductDefinitionImpurity AS
SELECT
    [id],
    [impurity.JSON],
    [impurity.id],
    [impurity.extension],
    [impurity.concept.id],
    [impurity.concept.extension],
    [impurity.concept.coding],
    [impurity.concept.text],
    [impurity.reference.id],
    [impurity.reference.extension],
    [impurity.reference.reference],
    [impurity.reference.type],
    [impurity.reference.identifier],
    [impurity.reference.display]
FROM openrowset (
        BULK 'MedicinalProductDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [impurity.JSON]  VARCHAR(MAX) '$.impurity'
    ) AS rowset
    CROSS APPLY openjson (rowset.[impurity.JSON]) with (
        [impurity.id]                  NVARCHAR(100)       '$.id',
        [impurity.extension]           NVARCHAR(MAX)       '$.extension',
        [impurity.concept.id]          NVARCHAR(100)       '$.concept.id',
        [impurity.concept.extension]   NVARCHAR(MAX)       '$.concept.extension',
        [impurity.concept.coding]      NVARCHAR(MAX)       '$.concept.coding',
        [impurity.concept.text]        NVARCHAR(4000)      '$.concept.text',
        [impurity.reference.id]        NVARCHAR(100)       '$.reference.id',
        [impurity.reference.extension] NVARCHAR(MAX)       '$.reference.extension',
        [impurity.reference.reference] NVARCHAR(4000)      '$.reference.reference',
        [impurity.reference.type]      VARCHAR(256)        '$.reference.type',
        [impurity.reference.identifier] NVARCHAR(MAX)       '$.reference.identifier',
        [impurity.reference.display]   NVARCHAR(4000)      '$.reference.display'
    ) j

GO

CREATE VIEW fhir.MedicinalProductDefinitionAttachedDocument AS
SELECT
    [id],
    [attachedDocument.JSON],
    [attachedDocument.id],
    [attachedDocument.extension],
    [attachedDocument.reference],
    [attachedDocument.type],
    [attachedDocument.identifier.id],
    [attachedDocument.identifier.extension],
    [attachedDocument.identifier.use],
    [attachedDocument.identifier.type],
    [attachedDocument.identifier.system],
    [attachedDocument.identifier.value],
    [attachedDocument.identifier.period],
    [attachedDocument.identifier.assigner],
    [attachedDocument.display]
FROM openrowset (
        BULK 'MedicinalProductDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [attachedDocument.JSON]  VARCHAR(MAX) '$.attachedDocument'
    ) AS rowset
    CROSS APPLY openjson (rowset.[attachedDocument.JSON]) with (
        [attachedDocument.id]          NVARCHAR(100)       '$.id',
        [attachedDocument.extension]   NVARCHAR(MAX)       '$.extension',
        [attachedDocument.reference]   NVARCHAR(4000)      '$.reference',
        [attachedDocument.type]        VARCHAR(256)        '$.type',
        [attachedDocument.identifier.id] NVARCHAR(100)       '$.identifier.id',
        [attachedDocument.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [attachedDocument.identifier.use] NVARCHAR(64)        '$.identifier.use',
        [attachedDocument.identifier.type] NVARCHAR(MAX)       '$.identifier.type',
        [attachedDocument.identifier.system] VARCHAR(256)        '$.identifier.system',
        [attachedDocument.identifier.value] NVARCHAR(4000)      '$.identifier.value',
        [attachedDocument.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [attachedDocument.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [attachedDocument.display]     NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.MedicinalProductDefinitionMasterFile AS
SELECT
    [id],
    [masterFile.JSON],
    [masterFile.id],
    [masterFile.extension],
    [masterFile.reference],
    [masterFile.type],
    [masterFile.identifier.id],
    [masterFile.identifier.extension],
    [masterFile.identifier.use],
    [masterFile.identifier.type],
    [masterFile.identifier.system],
    [masterFile.identifier.value],
    [masterFile.identifier.period],
    [masterFile.identifier.assigner],
    [masterFile.display]
FROM openrowset (
        BULK 'MedicinalProductDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [masterFile.JSON]  VARCHAR(MAX) '$.masterFile'
    ) AS rowset
    CROSS APPLY openjson (rowset.[masterFile.JSON]) with (
        [masterFile.id]                NVARCHAR(100)       '$.id',
        [masterFile.extension]         NVARCHAR(MAX)       '$.extension',
        [masterFile.reference]         NVARCHAR(4000)      '$.reference',
        [masterFile.type]              VARCHAR(256)        '$.type',
        [masterFile.identifier.id]     NVARCHAR(100)       '$.identifier.id',
        [masterFile.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [masterFile.identifier.use]    NVARCHAR(64)        '$.identifier.use',
        [masterFile.identifier.type]   NVARCHAR(MAX)       '$.identifier.type',
        [masterFile.identifier.system] VARCHAR(256)        '$.identifier.system',
        [masterFile.identifier.value]  NVARCHAR(4000)      '$.identifier.value',
        [masterFile.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [masterFile.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [masterFile.display]           NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.MedicinalProductDefinitionContact AS
SELECT
    [id],
    [contact.JSON],
    [contact.id],
    [contact.extension],
    [contact.modifierExtension],
    [contact.type.id],
    [contact.type.extension],
    [contact.type.coding],
    [contact.type.text],
    [contact.contact.id],
    [contact.contact.extension],
    [contact.contact.reference],
    [contact.contact.type],
    [contact.contact.identifier],
    [contact.contact.display]
FROM openrowset (
        BULK 'MedicinalProductDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [contact.JSON]  VARCHAR(MAX) '$.contact'
    ) AS rowset
    CROSS APPLY openjson (rowset.[contact.JSON]) with (
        [contact.id]                   NVARCHAR(100)       '$.id',
        [contact.extension]            NVARCHAR(MAX)       '$.extension',
        [contact.modifierExtension]    NVARCHAR(MAX)       '$.modifierExtension',
        [contact.type.id]              NVARCHAR(100)       '$.type.id',
        [contact.type.extension]       NVARCHAR(MAX)       '$.type.extension',
        [contact.type.coding]          NVARCHAR(MAX)       '$.type.coding',
        [contact.type.text]            NVARCHAR(4000)      '$.type.text',
        [contact.contact.id]           NVARCHAR(100)       '$.contact.id',
        [contact.contact.extension]    NVARCHAR(MAX)       '$.contact.extension',
        [contact.contact.reference]    NVARCHAR(4000)      '$.contact.reference',
        [contact.contact.type]         VARCHAR(256)        '$.contact.type',
        [contact.contact.identifier]   NVARCHAR(MAX)       '$.contact.identifier',
        [contact.contact.display]      NVARCHAR(4000)      '$.contact.display'
    ) j

GO

CREATE VIEW fhir.MedicinalProductDefinitionClinicalTrial AS
SELECT
    [id],
    [clinicalTrial.JSON],
    [clinicalTrial.id],
    [clinicalTrial.extension],
    [clinicalTrial.reference],
    [clinicalTrial.type],
    [clinicalTrial.identifier.id],
    [clinicalTrial.identifier.extension],
    [clinicalTrial.identifier.use],
    [clinicalTrial.identifier.type],
    [clinicalTrial.identifier.system],
    [clinicalTrial.identifier.value],
    [clinicalTrial.identifier.period],
    [clinicalTrial.identifier.assigner],
    [clinicalTrial.display]
FROM openrowset (
        BULK 'MedicinalProductDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [clinicalTrial.JSON]  VARCHAR(MAX) '$.clinicalTrial'
    ) AS rowset
    CROSS APPLY openjson (rowset.[clinicalTrial.JSON]) with (
        [clinicalTrial.id]             NVARCHAR(100)       '$.id',
        [clinicalTrial.extension]      NVARCHAR(MAX)       '$.extension',
        [clinicalTrial.reference]      NVARCHAR(4000)      '$.reference',
        [clinicalTrial.type]           VARCHAR(256)        '$.type',
        [clinicalTrial.identifier.id]  NVARCHAR(100)       '$.identifier.id',
        [clinicalTrial.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [clinicalTrial.identifier.use] NVARCHAR(64)        '$.identifier.use',
        [clinicalTrial.identifier.type] NVARCHAR(MAX)       '$.identifier.type',
        [clinicalTrial.identifier.system] VARCHAR(256)        '$.identifier.system',
        [clinicalTrial.identifier.value] NVARCHAR(4000)      '$.identifier.value',
        [clinicalTrial.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [clinicalTrial.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [clinicalTrial.display]        NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.MedicinalProductDefinitionCode AS
SELECT
    [id],
    [code.JSON],
    [code.id],
    [code.extension],
    [code.system],
    [code.version],
    [code.code],
    [code.display],
    [code.userSelected]
FROM openrowset (
        BULK 'MedicinalProductDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [code.JSON]  VARCHAR(MAX) '$.code'
    ) AS rowset
    CROSS APPLY openjson (rowset.[code.JSON]) with (
        [code.id]                      NVARCHAR(100)       '$.id',
        [code.extension]               NVARCHAR(MAX)       '$.extension',
        [code.system]                  VARCHAR(256)        '$.system',
        [code.version]                 NVARCHAR(100)       '$.version',
        [code.code]                    NVARCHAR(4000)      '$.code',
        [code.display]                 NVARCHAR(4000)      '$.display',
        [code.userSelected]            bit                 '$.userSelected'
    ) j

GO

CREATE VIEW fhir.MedicinalProductDefinitionName AS
SELECT
    [id],
    [name.JSON],
    [name.id],
    [name.extension],
    [name.modifierExtension],
    [name.productName],
    [name.type.id],
    [name.type.extension],
    [name.type.coding],
    [name.type.text],
    [name.namePart],
    [name.countryLanguage]
FROM openrowset (
        BULK 'MedicinalProductDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [name.JSON]  VARCHAR(MAX) '$.name'
    ) AS rowset
    CROSS APPLY openjson (rowset.[name.JSON]) with (
        [name.id]                      NVARCHAR(100)       '$.id',
        [name.extension]               NVARCHAR(MAX)       '$.extension',
        [name.modifierExtension]       NVARCHAR(MAX)       '$.modifierExtension',
        [name.productName]             NVARCHAR(500)       '$.productName',
        [name.type.id]                 NVARCHAR(100)       '$.type.id',
        [name.type.extension]          NVARCHAR(MAX)       '$.type.extension',
        [name.type.coding]             NVARCHAR(MAX)       '$.type.coding',
        [name.type.text]               NVARCHAR(4000)      '$.type.text',
        [name.namePart]                NVARCHAR(MAX)       '$.namePart' AS JSON,
        [name.countryLanguage]         NVARCHAR(MAX)       '$.countryLanguage' AS JSON
    ) j

GO

CREATE VIEW fhir.MedicinalProductDefinitionCrossReference AS
SELECT
    [id],
    [crossReference.JSON],
    [crossReference.id],
    [crossReference.extension],
    [crossReference.modifierExtension],
    [crossReference.product.id],
    [crossReference.product.extension],
    [crossReference.product.concept],
    [crossReference.product.reference],
    [crossReference.type.id],
    [crossReference.type.extension],
    [crossReference.type.coding],
    [crossReference.type.text]
FROM openrowset (
        BULK 'MedicinalProductDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [crossReference.JSON]  VARCHAR(MAX) '$.crossReference'
    ) AS rowset
    CROSS APPLY openjson (rowset.[crossReference.JSON]) with (
        [crossReference.id]            NVARCHAR(100)       '$.id',
        [crossReference.extension]     NVARCHAR(MAX)       '$.extension',
        [crossReference.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [crossReference.product.id]    NVARCHAR(100)       '$.product.id',
        [crossReference.product.extension] NVARCHAR(MAX)       '$.product.extension',
        [crossReference.product.concept] NVARCHAR(MAX)       '$.product.concept',
        [crossReference.product.reference] NVARCHAR(MAX)       '$.product.reference',
        [crossReference.type.id]       NVARCHAR(100)       '$.type.id',
        [crossReference.type.extension] NVARCHAR(MAX)       '$.type.extension',
        [crossReference.type.coding]   NVARCHAR(MAX)       '$.type.coding',
        [crossReference.type.text]     NVARCHAR(4000)      '$.type.text'
    ) j

GO

CREATE VIEW fhir.MedicinalProductDefinitionOperation AS
SELECT
    [id],
    [operation.JSON],
    [operation.id],
    [operation.extension],
    [operation.modifierExtension],
    [operation.type.id],
    [operation.type.extension],
    [operation.type.concept],
    [operation.type.reference],
    [operation.effectiveDate.id],
    [operation.effectiveDate.extension],
    [operation.effectiveDate.start],
    [operation.effectiveDate.end],
    [operation.organization],
    [operation.confidentialityIndicator.id],
    [operation.confidentialityIndicator.extension],
    [operation.confidentialityIndicator.coding],
    [operation.confidentialityIndicator.text]
FROM openrowset (
        BULK 'MedicinalProductDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [operation.JSON]  VARCHAR(MAX) '$.operation'
    ) AS rowset
    CROSS APPLY openjson (rowset.[operation.JSON]) with (
        [operation.id]                 NVARCHAR(100)       '$.id',
        [operation.extension]          NVARCHAR(MAX)       '$.extension',
        [operation.modifierExtension]  NVARCHAR(MAX)       '$.modifierExtension',
        [operation.type.id]            NVARCHAR(100)       '$.type.id',
        [operation.type.extension]     NVARCHAR(MAX)       '$.type.extension',
        [operation.type.concept]       NVARCHAR(MAX)       '$.type.concept',
        [operation.type.reference]     NVARCHAR(MAX)       '$.type.reference',
        [operation.effectiveDate.id]   NVARCHAR(100)       '$.effectiveDate.id',
        [operation.effectiveDate.extension] NVARCHAR(MAX)       '$.effectiveDate.extension',
        [operation.effectiveDate.start] VARCHAR(64)         '$.effectiveDate.start',
        [operation.effectiveDate.end]  VARCHAR(64)         '$.effectiveDate.end',
        [operation.organization]       NVARCHAR(MAX)       '$.organization' AS JSON,
        [operation.confidentialityIndicator.id] NVARCHAR(100)       '$.confidentialityIndicator.id',
        [operation.confidentialityIndicator.extension] NVARCHAR(MAX)       '$.confidentialityIndicator.extension',
        [operation.confidentialityIndicator.coding] NVARCHAR(MAX)       '$.confidentialityIndicator.coding',
        [operation.confidentialityIndicator.text] NVARCHAR(4000)      '$.confidentialityIndicator.text'
    ) j

GO

CREATE VIEW fhir.MedicinalProductDefinitionCharacteristic AS
SELECT
    [id],
    [characteristic.JSON],
    [characteristic.id],
    [characteristic.extension],
    [characteristic.modifierExtension],
    [characteristic.type.id],
    [characteristic.type.extension],
    [characteristic.type.coding],
    [characteristic.type.text],
    [characteristic.value.codeableConcept.id],
    [characteristic.value.codeableConcept.extension],
    [characteristic.value.codeableConcept.coding],
    [characteristic.value.codeableConcept.text],
    [characteristic.value.quantity.id],
    [characteristic.value.quantity.extension],
    [characteristic.value.quantity.value],
    [characteristic.value.quantity.comparator],
    [characteristic.value.quantity.unit],
    [characteristic.value.quantity.system],
    [characteristic.value.quantity.code],
    [characteristic.value.date],
    [characteristic.value.boolean],
    [characteristic.value.attachment.id],
    [characteristic.value.attachment.extension],
    [characteristic.value.attachment.contentType],
    [characteristic.value.attachment.language],
    [characteristic.value.attachment.data],
    [characteristic.value.attachment.url],
    [characteristic.value.attachment.size],
    [characteristic.value.attachment.hash],
    [characteristic.value.attachment.title],
    [characteristic.value.attachment.creation],
    [characteristic.value.attachment.height],
    [characteristic.value.attachment.width],
    [characteristic.value.attachment.frames],
    [characteristic.value.attachment.duration],
    [characteristic.value.attachment.pages]
FROM openrowset (
        BULK 'MedicinalProductDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [characteristic.JSON]  VARCHAR(MAX) '$.characteristic'
    ) AS rowset
    CROSS APPLY openjson (rowset.[characteristic.JSON]) with (
        [characteristic.id]            NVARCHAR(100)       '$.id',
        [characteristic.extension]     NVARCHAR(MAX)       '$.extension',
        [characteristic.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [characteristic.type.id]       NVARCHAR(100)       '$.type.id',
        [characteristic.type.extension] NVARCHAR(MAX)       '$.type.extension',
        [characteristic.type.coding]   NVARCHAR(MAX)       '$.type.coding',
        [characteristic.type.text]     NVARCHAR(4000)      '$.type.text',
        [characteristic.value.codeableConcept.id] NVARCHAR(100)       '$.value.codeableConcept.id',
        [characteristic.value.codeableConcept.extension] NVARCHAR(MAX)       '$.value.codeableConcept.extension',
        [characteristic.value.codeableConcept.coding] NVARCHAR(MAX)       '$.value.codeableConcept.coding',
        [characteristic.value.codeableConcept.text] NVARCHAR(4000)      '$.value.codeableConcept.text',
        [characteristic.value.quantity.id] NVARCHAR(100)       '$.value.quantity.id',
        [characteristic.value.quantity.extension] NVARCHAR(MAX)       '$.value.quantity.extension',
        [characteristic.value.quantity.value] float               '$.value.quantity.value',
        [characteristic.value.quantity.comparator] NVARCHAR(64)        '$.value.quantity.comparator',
        [characteristic.value.quantity.unit] NVARCHAR(100)       '$.value.quantity.unit',
        [characteristic.value.quantity.system] VARCHAR(256)        '$.value.quantity.system',
        [characteristic.value.quantity.code] NVARCHAR(4000)      '$.value.quantity.code',
        [characteristic.value.date]    VARCHAR(64)         '$.value.date',
        [characteristic.value.boolean] bit                 '$.value.boolean',
        [characteristic.value.attachment.id] NVARCHAR(100)       '$.value.attachment.id',
        [characteristic.value.attachment.extension] NVARCHAR(MAX)       '$.value.attachment.extension',
        [characteristic.value.attachment.contentType] NVARCHAR(100)       '$.value.attachment.contentType',
        [characteristic.value.attachment.language] NVARCHAR(100)       '$.value.attachment.language',
        [characteristic.value.attachment.data] NVARCHAR(MAX)       '$.value.attachment.data',
        [characteristic.value.attachment.url] VARCHAR(256)        '$.value.attachment.url',
        [characteristic.value.attachment.size] NVARCHAR(MAX)       '$.value.attachment.size',
        [characteristic.value.attachment.hash] NVARCHAR(MAX)       '$.value.attachment.hash',
        [characteristic.value.attachment.title] NVARCHAR(4000)      '$.value.attachment.title',
        [characteristic.value.attachment.creation] VARCHAR(64)         '$.value.attachment.creation',
        [characteristic.value.attachment.height] bigint              '$.value.attachment.height',
        [characteristic.value.attachment.width] bigint              '$.value.attachment.width',
        [characteristic.value.attachment.frames] bigint              '$.value.attachment.frames',
        [characteristic.value.attachment.duration] float               '$.value.attachment.duration',
        [characteristic.value.attachment.pages] bigint              '$.value.attachment.pages'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[MessageDefinition] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [url] VARCHAR(256),
    [identifier] VARCHAR(MAX),
    [version] NVARCHAR(100),
    [name] NVARCHAR(500),
    [title] NVARCHAR(4000),
    [status] NVARCHAR(100),
    [experimental] bit,
    [date] VARCHAR(64),
    [publisher] NVARCHAR(500),
    [contact] VARCHAR(MAX),
    [description] NVARCHAR(MAX),
    [useContext] VARCHAR(MAX),
    [jurisdiction] VARCHAR(MAX),
    [purpose] NVARCHAR(MAX),
    [copyright] NVARCHAR(MAX),
    [replaces] VARCHAR(MAX),
    [base] VARCHAR(256),
    [parent] VARCHAR(MAX),
    [category] NVARCHAR(4000),
    [focus] VARCHAR(MAX),
    [responseRequired] NVARCHAR(4000),
    [allowedResponse] VARCHAR(MAX),
    [graph] VARCHAR(MAX),
    [event.coding.id] NVARCHAR(100),
    [event.coding.extension] NVARCHAR(MAX),
    [event.coding.system] VARCHAR(256),
    [event.coding.version] NVARCHAR(100),
    [event.coding.code] NVARCHAR(4000),
    [event.coding.display] NVARCHAR(4000),
    [event.coding.userSelected] bit,
    [event.uri] VARCHAR(256),
) WITH (
    LOCATION='/MessageDefinition/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.MessageDefinitionIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'MessageDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.MessageDefinitionContact AS
SELECT
    [id],
    [contact.JSON],
    [contact.id],
    [contact.extension],
    [contact.name],
    [contact.telecom]
FROM openrowset (
        BULK 'MessageDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [contact.JSON]  VARCHAR(MAX) '$.contact'
    ) AS rowset
    CROSS APPLY openjson (rowset.[contact.JSON]) with (
        [contact.id]                   NVARCHAR(100)       '$.id',
        [contact.extension]            NVARCHAR(MAX)       '$.extension',
        [contact.name]                 NVARCHAR(500)       '$.name',
        [contact.telecom]              NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.MessageDefinitionUseContext AS
SELECT
    [id],
    [useContext.JSON],
    [useContext.id],
    [useContext.extension],
    [useContext.code.id],
    [useContext.code.extension],
    [useContext.code.system],
    [useContext.code.version],
    [useContext.code.code],
    [useContext.code.display],
    [useContext.code.userSelected],
    [useContext.value.codeableConcept.id],
    [useContext.value.codeableConcept.extension],
    [useContext.value.codeableConcept.coding],
    [useContext.value.codeableConcept.text],
    [useContext.value.quantity.id],
    [useContext.value.quantity.extension],
    [useContext.value.quantity.value],
    [useContext.value.quantity.comparator],
    [useContext.value.quantity.unit],
    [useContext.value.quantity.system],
    [useContext.value.quantity.code],
    [useContext.value.range.id],
    [useContext.value.range.extension],
    [useContext.value.range.low],
    [useContext.value.range.high],
    [useContext.value.reference.id],
    [useContext.value.reference.extension],
    [useContext.value.reference.reference],
    [useContext.value.reference.type],
    [useContext.value.reference.identifier],
    [useContext.value.reference.display]
FROM openrowset (
        BULK 'MessageDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [useContext.JSON]  VARCHAR(MAX) '$.useContext'
    ) AS rowset
    CROSS APPLY openjson (rowset.[useContext.JSON]) with (
        [useContext.id]                NVARCHAR(100)       '$.id',
        [useContext.extension]         NVARCHAR(MAX)       '$.extension',
        [useContext.code.id]           NVARCHAR(100)       '$.code.id',
        [useContext.code.extension]    NVARCHAR(MAX)       '$.code.extension',
        [useContext.code.system]       VARCHAR(256)        '$.code.system',
        [useContext.code.version]      NVARCHAR(100)       '$.code.version',
        [useContext.code.code]         NVARCHAR(4000)      '$.code.code',
        [useContext.code.display]      NVARCHAR(4000)      '$.code.display',
        [useContext.code.userSelected] bit                 '$.code.userSelected',
        [useContext.value.codeableConcept.id] NVARCHAR(100)       '$.value.codeableConcept.id',
        [useContext.value.codeableConcept.extension] NVARCHAR(MAX)       '$.value.codeableConcept.extension',
        [useContext.value.codeableConcept.coding] NVARCHAR(MAX)       '$.value.codeableConcept.coding',
        [useContext.value.codeableConcept.text] NVARCHAR(4000)      '$.value.codeableConcept.text',
        [useContext.value.quantity.id] NVARCHAR(100)       '$.value.quantity.id',
        [useContext.value.quantity.extension] NVARCHAR(MAX)       '$.value.quantity.extension',
        [useContext.value.quantity.value] float               '$.value.quantity.value',
        [useContext.value.quantity.comparator] NVARCHAR(64)        '$.value.quantity.comparator',
        [useContext.value.quantity.unit] NVARCHAR(100)       '$.value.quantity.unit',
        [useContext.value.quantity.system] VARCHAR(256)        '$.value.quantity.system',
        [useContext.value.quantity.code] NVARCHAR(4000)      '$.value.quantity.code',
        [useContext.value.range.id]    NVARCHAR(100)       '$.value.range.id',
        [useContext.value.range.extension] NVARCHAR(MAX)       '$.value.range.extension',
        [useContext.value.range.low]   NVARCHAR(MAX)       '$.value.range.low',
        [useContext.value.range.high]  NVARCHAR(MAX)       '$.value.range.high',
        [useContext.value.reference.id] NVARCHAR(100)       '$.value.reference.id',
        [useContext.value.reference.extension] NVARCHAR(MAX)       '$.value.reference.extension',
        [useContext.value.reference.reference] NVARCHAR(4000)      '$.value.reference.reference',
        [useContext.value.reference.type] VARCHAR(256)        '$.value.reference.type',
        [useContext.value.reference.identifier] NVARCHAR(MAX)       '$.value.reference.identifier',
        [useContext.value.reference.display] NVARCHAR(4000)      '$.value.reference.display'
    ) j

GO

CREATE VIEW fhir.MessageDefinitionJurisdiction AS
SELECT
    [id],
    [jurisdiction.JSON],
    [jurisdiction.id],
    [jurisdiction.extension],
    [jurisdiction.coding],
    [jurisdiction.text]
FROM openrowset (
        BULK 'MessageDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [jurisdiction.JSON]  VARCHAR(MAX) '$.jurisdiction'
    ) AS rowset
    CROSS APPLY openjson (rowset.[jurisdiction.JSON]) with (
        [jurisdiction.id]              NVARCHAR(100)       '$.id',
        [jurisdiction.extension]       NVARCHAR(MAX)       '$.extension',
        [jurisdiction.coding]          NVARCHAR(MAX)       '$.coding' AS JSON,
        [jurisdiction.text]            NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.MessageDefinitionReplaces AS
SELECT
    [id],
    [replaces.JSON],
    [replaces]
FROM openrowset (
        BULK 'MessageDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [replaces.JSON]  VARCHAR(MAX) '$.replaces'
    ) AS rowset
    CROSS APPLY openjson (rowset.[replaces.JSON]) with (
        [replaces]                     NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.MessageDefinitionParent AS
SELECT
    [id],
    [parent.JSON],
    [parent]
FROM openrowset (
        BULK 'MessageDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [parent.JSON]  VARCHAR(MAX) '$.parent'
    ) AS rowset
    CROSS APPLY openjson (rowset.[parent.JSON]) with (
        [parent]                       NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.MessageDefinitionFocus AS
SELECT
    [id],
    [focus.JSON],
    [focus.id],
    [focus.extension],
    [focus.modifierExtension],
    [focus.code],
    [focus.profile],
    [focus.min],
    [focus.max]
FROM openrowset (
        BULK 'MessageDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [focus.JSON]  VARCHAR(MAX) '$.focus'
    ) AS rowset
    CROSS APPLY openjson (rowset.[focus.JSON]) with (
        [focus.id]                     NVARCHAR(100)       '$.id',
        [focus.extension]              NVARCHAR(MAX)       '$.extension',
        [focus.modifierExtension]      NVARCHAR(MAX)       '$.modifierExtension',
        [focus.code]                   NVARCHAR(4000)      '$.code',
        [focus.profile]                VARCHAR(256)        '$.profile',
        [focus.min]                    bigint              '$.min',
        [focus.max]                    NVARCHAR(100)       '$.max'
    ) j

GO

CREATE VIEW fhir.MessageDefinitionAllowedResponse AS
SELECT
    [id],
    [allowedResponse.JSON],
    [allowedResponse.id],
    [allowedResponse.extension],
    [allowedResponse.modifierExtension],
    [allowedResponse.message],
    [allowedResponse.situation]
FROM openrowset (
        BULK 'MessageDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [allowedResponse.JSON]  VARCHAR(MAX) '$.allowedResponse'
    ) AS rowset
    CROSS APPLY openjson (rowset.[allowedResponse.JSON]) with (
        [allowedResponse.id]           NVARCHAR(100)       '$.id',
        [allowedResponse.extension]    NVARCHAR(MAX)       '$.extension',
        [allowedResponse.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [allowedResponse.message]      VARCHAR(256)        '$.message',
        [allowedResponse.situation]    NVARCHAR(MAX)       '$.situation'
    ) j

GO

CREATE VIEW fhir.MessageDefinitionGraph AS
SELECT
    [id],
    [graph.JSON],
    [graph]
FROM openrowset (
        BULK 'MessageDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [graph.JSON]  VARCHAR(MAX) '$.graph'
    ) AS rowset
    CROSS APPLY openjson (rowset.[graph.JSON]) with (
        [graph]                        NVARCHAR(MAX)       '$'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[MessageHeader] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [destination] VARCHAR(MAX),
    [sender.id] NVARCHAR(100),
    [sender.extension] NVARCHAR(MAX),
    [sender.reference] NVARCHAR(4000),
    [sender.type] VARCHAR(256),
    [sender.identifier.id] NVARCHAR(100),
    [sender.identifier.extension] NVARCHAR(MAX),
    [sender.identifier.use] NVARCHAR(64),
    [sender.identifier.type] NVARCHAR(MAX),
    [sender.identifier.system] VARCHAR(256),
    [sender.identifier.value] NVARCHAR(4000),
    [sender.identifier.period] NVARCHAR(MAX),
    [sender.identifier.assigner] NVARCHAR(MAX),
    [sender.display] NVARCHAR(4000),
    [enterer.id] NVARCHAR(100),
    [enterer.extension] NVARCHAR(MAX),
    [enterer.reference] NVARCHAR(4000),
    [enterer.type] VARCHAR(256),
    [enterer.identifier.id] NVARCHAR(100),
    [enterer.identifier.extension] NVARCHAR(MAX),
    [enterer.identifier.use] NVARCHAR(64),
    [enterer.identifier.type] NVARCHAR(MAX),
    [enterer.identifier.system] VARCHAR(256),
    [enterer.identifier.value] NVARCHAR(4000),
    [enterer.identifier.period] NVARCHAR(MAX),
    [enterer.identifier.assigner] NVARCHAR(MAX),
    [enterer.display] NVARCHAR(4000),
    [author.id] NVARCHAR(100),
    [author.extension] NVARCHAR(MAX),
    [author.reference] NVARCHAR(4000),
    [author.type] VARCHAR(256),
    [author.identifier.id] NVARCHAR(100),
    [author.identifier.extension] NVARCHAR(MAX),
    [author.identifier.use] NVARCHAR(64),
    [author.identifier.type] NVARCHAR(MAX),
    [author.identifier.system] VARCHAR(256),
    [author.identifier.value] NVARCHAR(4000),
    [author.identifier.period] NVARCHAR(MAX),
    [author.identifier.assigner] NVARCHAR(MAX),
    [author.display] NVARCHAR(4000),
    [source.id] NVARCHAR(100),
    [source.extension] NVARCHAR(MAX),
    [source.modifierExtension] NVARCHAR(MAX),
    [source.name] NVARCHAR(500),
    [source.software] NVARCHAR(4000),
    [source.version] NVARCHAR(100),
    [source.contact.id] NVARCHAR(100),
    [source.contact.extension] NVARCHAR(MAX),
    [source.contact.system] NVARCHAR(64),
    [source.contact.value] NVARCHAR(4000),
    [source.contact.use] NVARCHAR(64),
    [source.contact.rank] bigint,
    [source.contact.period] NVARCHAR(MAX),
    [source.endpoint] VARCHAR(256),
    [responsible.id] NVARCHAR(100),
    [responsible.extension] NVARCHAR(MAX),
    [responsible.reference] NVARCHAR(4000),
    [responsible.type] VARCHAR(256),
    [responsible.identifier.id] NVARCHAR(100),
    [responsible.identifier.extension] NVARCHAR(MAX),
    [responsible.identifier.use] NVARCHAR(64),
    [responsible.identifier.type] NVARCHAR(MAX),
    [responsible.identifier.system] VARCHAR(256),
    [responsible.identifier.value] NVARCHAR(4000),
    [responsible.identifier.period] NVARCHAR(MAX),
    [responsible.identifier.assigner] NVARCHAR(MAX),
    [responsible.display] NVARCHAR(4000),
    [reason.id] NVARCHAR(100),
    [reason.extension] NVARCHAR(MAX),
    [reason.coding] VARCHAR(MAX),
    [reason.text] NVARCHAR(4000),
    [response.id] NVARCHAR(100),
    [response.extension] NVARCHAR(MAX),
    [response.modifierExtension] NVARCHAR(MAX),
    [response.identifier] VARCHAR(64),
    [response.code] NVARCHAR(4000),
    [response.details.id] NVARCHAR(100),
    [response.details.extension] NVARCHAR(MAX),
    [response.details.reference] NVARCHAR(4000),
    [response.details.type] VARCHAR(256),
    [response.details.identifier] NVARCHAR(MAX),
    [response.details.display] NVARCHAR(4000),
    [focus] VARCHAR(MAX),
    [definition] VARCHAR(256),
    [event.coding.id] NVARCHAR(100),
    [event.coding.extension] NVARCHAR(MAX),
    [event.coding.system] VARCHAR(256),
    [event.coding.version] NVARCHAR(100),
    [event.coding.code] NVARCHAR(4000),
    [event.coding.display] NVARCHAR(4000),
    [event.coding.userSelected] bit,
    [event.uri] VARCHAR(256),
) WITH (
    LOCATION='/MessageHeader/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.MessageHeaderDestination AS
SELECT
    [id],
    [destination.JSON],
    [destination.id],
    [destination.extension],
    [destination.modifierExtension],
    [destination.name],
    [destination.target.id],
    [destination.target.extension],
    [destination.target.reference],
    [destination.target.type],
    [destination.target.identifier],
    [destination.target.display],
    [destination.endpoint],
    [destination.receiver.id],
    [destination.receiver.extension],
    [destination.receiver.reference],
    [destination.receiver.type],
    [destination.receiver.identifier],
    [destination.receiver.display]
FROM openrowset (
        BULK 'MessageHeader/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [destination.JSON]  VARCHAR(MAX) '$.destination'
    ) AS rowset
    CROSS APPLY openjson (rowset.[destination.JSON]) with (
        [destination.id]               NVARCHAR(100)       '$.id',
        [destination.extension]        NVARCHAR(MAX)       '$.extension',
        [destination.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [destination.name]             NVARCHAR(500)       '$.name',
        [destination.target.id]        NVARCHAR(100)       '$.target.id',
        [destination.target.extension] NVARCHAR(MAX)       '$.target.extension',
        [destination.target.reference] NVARCHAR(4000)      '$.target.reference',
        [destination.target.type]      VARCHAR(256)        '$.target.type',
        [destination.target.identifier] NVARCHAR(MAX)       '$.target.identifier',
        [destination.target.display]   NVARCHAR(4000)      '$.target.display',
        [destination.endpoint]         VARCHAR(256)        '$.endpoint',
        [destination.receiver.id]      NVARCHAR(100)       '$.receiver.id',
        [destination.receiver.extension] NVARCHAR(MAX)       '$.receiver.extension',
        [destination.receiver.reference] NVARCHAR(4000)      '$.receiver.reference',
        [destination.receiver.type]    VARCHAR(256)        '$.receiver.type',
        [destination.receiver.identifier] NVARCHAR(MAX)       '$.receiver.identifier',
        [destination.receiver.display] NVARCHAR(4000)      '$.receiver.display'
    ) j

GO

CREATE VIEW fhir.MessageHeaderFocus AS
SELECT
    [id],
    [focus.JSON],
    [focus.id],
    [focus.extension],
    [focus.reference],
    [focus.type],
    [focus.identifier.id],
    [focus.identifier.extension],
    [focus.identifier.use],
    [focus.identifier.type],
    [focus.identifier.system],
    [focus.identifier.value],
    [focus.identifier.period],
    [focus.identifier.assigner],
    [focus.display]
FROM openrowset (
        BULK 'MessageHeader/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [focus.JSON]  VARCHAR(MAX) '$.focus'
    ) AS rowset
    CROSS APPLY openjson (rowset.[focus.JSON]) with (
        [focus.id]                     NVARCHAR(100)       '$.id',
        [focus.extension]              NVARCHAR(MAX)       '$.extension',
        [focus.reference]              NVARCHAR(4000)      '$.reference',
        [focus.type]                   VARCHAR(256)        '$.type',
        [focus.identifier.id]          NVARCHAR(100)       '$.identifier.id',
        [focus.identifier.extension]   NVARCHAR(MAX)       '$.identifier.extension',
        [focus.identifier.use]         NVARCHAR(64)        '$.identifier.use',
        [focus.identifier.type]        NVARCHAR(MAX)       '$.identifier.type',
        [focus.identifier.system]      VARCHAR(256)        '$.identifier.system',
        [focus.identifier.value]       NVARCHAR(4000)      '$.identifier.value',
        [focus.identifier.period]      NVARCHAR(MAX)       '$.identifier.period',
        [focus.identifier.assigner]    NVARCHAR(MAX)       '$.identifier.assigner',
        [focus.display]                NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[MolecularSequence] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [type] NVARCHAR(100),
    [coordinateSystem] bigint,
    [patient.id] NVARCHAR(100),
    [patient.extension] NVARCHAR(MAX),
    [patient.reference] NVARCHAR(4000),
    [patient.type] VARCHAR(256),
    [patient.identifier.id] NVARCHAR(100),
    [patient.identifier.extension] NVARCHAR(MAX),
    [patient.identifier.use] NVARCHAR(64),
    [patient.identifier.type] NVARCHAR(MAX),
    [patient.identifier.system] VARCHAR(256),
    [patient.identifier.value] NVARCHAR(4000),
    [patient.identifier.period] NVARCHAR(MAX),
    [patient.identifier.assigner] NVARCHAR(MAX),
    [patient.display] NVARCHAR(4000),
    [specimen.id] NVARCHAR(100),
    [specimen.extension] NVARCHAR(MAX),
    [specimen.reference] NVARCHAR(4000),
    [specimen.type] VARCHAR(256),
    [specimen.identifier.id] NVARCHAR(100),
    [specimen.identifier.extension] NVARCHAR(MAX),
    [specimen.identifier.use] NVARCHAR(64),
    [specimen.identifier.type] NVARCHAR(MAX),
    [specimen.identifier.system] VARCHAR(256),
    [specimen.identifier.value] NVARCHAR(4000),
    [specimen.identifier.period] NVARCHAR(MAX),
    [specimen.identifier.assigner] NVARCHAR(MAX),
    [specimen.display] NVARCHAR(4000),
    [device.id] NVARCHAR(100),
    [device.extension] NVARCHAR(MAX),
    [device.reference] NVARCHAR(4000),
    [device.type] VARCHAR(256),
    [device.identifier.id] NVARCHAR(100),
    [device.identifier.extension] NVARCHAR(MAX),
    [device.identifier.use] NVARCHAR(64),
    [device.identifier.type] NVARCHAR(MAX),
    [device.identifier.system] VARCHAR(256),
    [device.identifier.value] NVARCHAR(4000),
    [device.identifier.period] NVARCHAR(MAX),
    [device.identifier.assigner] NVARCHAR(MAX),
    [device.display] NVARCHAR(4000),
    [performer.id] NVARCHAR(100),
    [performer.extension] NVARCHAR(MAX),
    [performer.reference] NVARCHAR(4000),
    [performer.type] VARCHAR(256),
    [performer.identifier.id] NVARCHAR(100),
    [performer.identifier.extension] NVARCHAR(MAX),
    [performer.identifier.use] NVARCHAR(64),
    [performer.identifier.type] NVARCHAR(MAX),
    [performer.identifier.system] VARCHAR(256),
    [performer.identifier.value] NVARCHAR(4000),
    [performer.identifier.period] NVARCHAR(MAX),
    [performer.identifier.assigner] NVARCHAR(MAX),
    [performer.display] NVARCHAR(4000),
    [quantity.id] NVARCHAR(100),
    [quantity.extension] NVARCHAR(MAX),
    [quantity.value] float,
    [quantity.comparator] NVARCHAR(64),
    [quantity.unit] NVARCHAR(100),
    [quantity.system] VARCHAR(256),
    [quantity.code] NVARCHAR(4000),
    [referenceSeq.id] NVARCHAR(100),
    [referenceSeq.extension] NVARCHAR(MAX),
    [referenceSeq.modifierExtension] NVARCHAR(MAX),
    [referenceSeq.chromosome.id] NVARCHAR(100),
    [referenceSeq.chromosome.extension] NVARCHAR(MAX),
    [referenceSeq.chromosome.coding] NVARCHAR(MAX),
    [referenceSeq.chromosome.text] NVARCHAR(4000),
    [referenceSeq.genomeBuild] NVARCHAR(4000),
    [referenceSeq.orientation] NVARCHAR(4000),
    [referenceSeq.referenceSeqId.id] NVARCHAR(100),
    [referenceSeq.referenceSeqId.extension] NVARCHAR(MAX),
    [referenceSeq.referenceSeqId.coding] NVARCHAR(MAX),
    [referenceSeq.referenceSeqId.text] NVARCHAR(4000),
    [referenceSeq.referenceSeqPointer.id] NVARCHAR(100),
    [referenceSeq.referenceSeqPointer.extension] NVARCHAR(MAX),
    [referenceSeq.referenceSeqPointer.reference] NVARCHAR(4000),
    [referenceSeq.referenceSeqPointer.type] VARCHAR(256),
    [referenceSeq.referenceSeqPointer.identifier] NVARCHAR(MAX),
    [referenceSeq.referenceSeqPointer.display] NVARCHAR(4000),
    [referenceSeq.referenceSeqString] NVARCHAR(4000),
    [referenceSeq.strand] NVARCHAR(4000),
    [referenceSeq.windowStart] bigint,
    [referenceSeq.windowEnd] bigint,
    [variant] VARCHAR(MAX),
    [observedSeq] NVARCHAR(4000),
    [quality] VARCHAR(MAX),
    [readCoverage] bigint,
    [repository] VARCHAR(MAX),
    [pointer] VARCHAR(MAX),
    [structureVariant] VARCHAR(MAX),
) WITH (
    LOCATION='/MolecularSequence/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.MolecularSequenceIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'MolecularSequence/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.MolecularSequenceVariant AS
SELECT
    [id],
    [variant.JSON],
    [variant.id],
    [variant.extension],
    [variant.modifierExtension],
    [variant.start],
    [variant.end],
    [variant.observedAllele],
    [variant.referenceAllele],
    [variant.cigar],
    [variant.variantPointer.id],
    [variant.variantPointer.extension],
    [variant.variantPointer.reference],
    [variant.variantPointer.type],
    [variant.variantPointer.identifier],
    [variant.variantPointer.display]
FROM openrowset (
        BULK 'MolecularSequence/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [variant.JSON]  VARCHAR(MAX) '$.variant'
    ) AS rowset
    CROSS APPLY openjson (rowset.[variant.JSON]) with (
        [variant.id]                   NVARCHAR(100)       '$.id',
        [variant.extension]            NVARCHAR(MAX)       '$.extension',
        [variant.modifierExtension]    NVARCHAR(MAX)       '$.modifierExtension',
        [variant.start]                bigint              '$.start',
        [variant.end]                  bigint              '$.end',
        [variant.observedAllele]       NVARCHAR(4000)      '$.observedAllele',
        [variant.referenceAllele]      NVARCHAR(4000)      '$.referenceAllele',
        [variant.cigar]                NVARCHAR(4000)      '$.cigar',
        [variant.variantPointer.id]    NVARCHAR(100)       '$.variantPointer.id',
        [variant.variantPointer.extension] NVARCHAR(MAX)       '$.variantPointer.extension',
        [variant.variantPointer.reference] NVARCHAR(4000)      '$.variantPointer.reference',
        [variant.variantPointer.type]  VARCHAR(256)        '$.variantPointer.type',
        [variant.variantPointer.identifier] NVARCHAR(MAX)       '$.variantPointer.identifier',
        [variant.variantPointer.display] NVARCHAR(4000)      '$.variantPointer.display'
    ) j

GO

CREATE VIEW fhir.MolecularSequenceQuality AS
SELECT
    [id],
    [quality.JSON],
    [quality.id],
    [quality.extension],
    [quality.modifierExtension],
    [quality.type],
    [quality.standardSequence.id],
    [quality.standardSequence.extension],
    [quality.standardSequence.coding],
    [quality.standardSequence.text],
    [quality.start],
    [quality.end],
    [quality.score.id],
    [quality.score.extension],
    [quality.score.value],
    [quality.score.comparator],
    [quality.score.unit],
    [quality.score.system],
    [quality.score.code],
    [quality.method.id],
    [quality.method.extension],
    [quality.method.coding],
    [quality.method.text],
    [quality.truthTP],
    [quality.queryTP],
    [quality.truthFN],
    [quality.queryFP],
    [quality.gtFP],
    [quality.precision],
    [quality.recall],
    [quality.fScore],
    [quality.roc.id],
    [quality.roc.extension],
    [quality.roc.modifierExtension],
    [quality.roc.score],
    [quality.roc.numTP],
    [quality.roc.numFP],
    [quality.roc.numFN],
    [quality.roc.precision],
    [quality.roc.sensitivity],
    [quality.roc.fMeasure]
FROM openrowset (
        BULK 'MolecularSequence/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [quality.JSON]  VARCHAR(MAX) '$.quality'
    ) AS rowset
    CROSS APPLY openjson (rowset.[quality.JSON]) with (
        [quality.id]                   NVARCHAR(100)       '$.id',
        [quality.extension]            NVARCHAR(MAX)       '$.extension',
        [quality.modifierExtension]    NVARCHAR(MAX)       '$.modifierExtension',
        [quality.type]                 NVARCHAR(100)       '$.type',
        [quality.standardSequence.id]  NVARCHAR(100)       '$.standardSequence.id',
        [quality.standardSequence.extension] NVARCHAR(MAX)       '$.standardSequence.extension',
        [quality.standardSequence.coding] NVARCHAR(MAX)       '$.standardSequence.coding',
        [quality.standardSequence.text] NVARCHAR(4000)      '$.standardSequence.text',
        [quality.start]                bigint              '$.start',
        [quality.end]                  bigint              '$.end',
        [quality.score.id]             NVARCHAR(100)       '$.score.id',
        [quality.score.extension]      NVARCHAR(MAX)       '$.score.extension',
        [quality.score.value]          float               '$.score.value',
        [quality.score.comparator]     NVARCHAR(64)        '$.score.comparator',
        [quality.score.unit]           NVARCHAR(100)       '$.score.unit',
        [quality.score.system]         VARCHAR(256)        '$.score.system',
        [quality.score.code]           NVARCHAR(4000)      '$.score.code',
        [quality.method.id]            NVARCHAR(100)       '$.method.id',
        [quality.method.extension]     NVARCHAR(MAX)       '$.method.extension',
        [quality.method.coding]        NVARCHAR(MAX)       '$.method.coding',
        [quality.method.text]          NVARCHAR(4000)      '$.method.text',
        [quality.truthTP]              float               '$.truthTP',
        [quality.queryTP]              float               '$.queryTP',
        [quality.truthFN]              float               '$.truthFN',
        [quality.queryFP]              float               '$.queryFP',
        [quality.gtFP]                 float               '$.gtFP',
        [quality.precision]            float               '$.precision',
        [quality.recall]               float               '$.recall',
        [quality.fScore]               float               '$.fScore',
        [quality.roc.id]               NVARCHAR(100)       '$.roc.id',
        [quality.roc.extension]        NVARCHAR(MAX)       '$.roc.extension',
        [quality.roc.modifierExtension] NVARCHAR(MAX)       '$.roc.modifierExtension',
        [quality.roc.score]            NVARCHAR(MAX)       '$.roc.score',
        [quality.roc.numTP]            NVARCHAR(MAX)       '$.roc.numTP',
        [quality.roc.numFP]            NVARCHAR(MAX)       '$.roc.numFP',
        [quality.roc.numFN]            NVARCHAR(MAX)       '$.roc.numFN',
        [quality.roc.precision]        NVARCHAR(MAX)       '$.roc.precision',
        [quality.roc.sensitivity]      NVARCHAR(MAX)       '$.roc.sensitivity',
        [quality.roc.fMeasure]         NVARCHAR(MAX)       '$.roc.fMeasure'
    ) j

GO

CREATE VIEW fhir.MolecularSequenceRepository AS
SELECT
    [id],
    [repository.JSON],
    [repository.id],
    [repository.extension],
    [repository.modifierExtension],
    [repository.type],
    [repository.url],
    [repository.name],
    [repository.datasetId],
    [repository.variantsetId],
    [repository.readsetId]
FROM openrowset (
        BULK 'MolecularSequence/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [repository.JSON]  VARCHAR(MAX) '$.repository'
    ) AS rowset
    CROSS APPLY openjson (rowset.[repository.JSON]) with (
        [repository.id]                NVARCHAR(100)       '$.id',
        [repository.extension]         NVARCHAR(MAX)       '$.extension',
        [repository.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [repository.type]              NVARCHAR(100)       '$.type',
        [repository.url]               VARCHAR(256)        '$.url',
        [repository.name]              NVARCHAR(500)       '$.name',
        [repository.datasetId]         NVARCHAR(100)       '$.datasetId',
        [repository.variantsetId]      NVARCHAR(100)       '$.variantsetId',
        [repository.readsetId]         NVARCHAR(100)       '$.readsetId'
    ) j

GO

CREATE VIEW fhir.MolecularSequencePointer AS
SELECT
    [id],
    [pointer.JSON],
    [pointer.id],
    [pointer.extension],
    [pointer.reference],
    [pointer.type],
    [pointer.identifier.id],
    [pointer.identifier.extension],
    [pointer.identifier.use],
    [pointer.identifier.type],
    [pointer.identifier.system],
    [pointer.identifier.value],
    [pointer.identifier.period],
    [pointer.identifier.assigner],
    [pointer.display]
FROM openrowset (
        BULK 'MolecularSequence/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [pointer.JSON]  VARCHAR(MAX) '$.pointer'
    ) AS rowset
    CROSS APPLY openjson (rowset.[pointer.JSON]) with (
        [pointer.id]                   NVARCHAR(100)       '$.id',
        [pointer.extension]            NVARCHAR(MAX)       '$.extension',
        [pointer.reference]            NVARCHAR(4000)      '$.reference',
        [pointer.type]                 VARCHAR(256)        '$.type',
        [pointer.identifier.id]        NVARCHAR(100)       '$.identifier.id',
        [pointer.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [pointer.identifier.use]       NVARCHAR(64)        '$.identifier.use',
        [pointer.identifier.type]      NVARCHAR(MAX)       '$.identifier.type',
        [pointer.identifier.system]    VARCHAR(256)        '$.identifier.system',
        [pointer.identifier.value]     NVARCHAR(4000)      '$.identifier.value',
        [pointer.identifier.period]    NVARCHAR(MAX)       '$.identifier.period',
        [pointer.identifier.assigner]  NVARCHAR(MAX)       '$.identifier.assigner',
        [pointer.display]              NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.MolecularSequenceStructureVariant AS
SELECT
    [id],
    [structureVariant.JSON],
    [structureVariant.id],
    [structureVariant.extension],
    [structureVariant.modifierExtension],
    [structureVariant.variantType.id],
    [structureVariant.variantType.extension],
    [structureVariant.variantType.coding],
    [structureVariant.variantType.text],
    [structureVariant.exact],
    [structureVariant.length],
    [structureVariant.outer.id],
    [structureVariant.outer.extension],
    [structureVariant.outer.modifierExtension],
    [structureVariant.outer.start],
    [structureVariant.outer.end],
    [structureVariant.inner.id],
    [structureVariant.inner.extension],
    [structureVariant.inner.modifierExtension],
    [structureVariant.inner.start],
    [structureVariant.inner.end]
FROM openrowset (
        BULK 'MolecularSequence/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [structureVariant.JSON]  VARCHAR(MAX) '$.structureVariant'
    ) AS rowset
    CROSS APPLY openjson (rowset.[structureVariant.JSON]) with (
        [structureVariant.id]          NVARCHAR(100)       '$.id',
        [structureVariant.extension]   NVARCHAR(MAX)       '$.extension',
        [structureVariant.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [structureVariant.variantType.id] NVARCHAR(100)       '$.variantType.id',
        [structureVariant.variantType.extension] NVARCHAR(MAX)       '$.variantType.extension',
        [structureVariant.variantType.coding] NVARCHAR(MAX)       '$.variantType.coding',
        [structureVariant.variantType.text] NVARCHAR(4000)      '$.variantType.text',
        [structureVariant.exact]       bit                 '$.exact',
        [structureVariant.length]      bigint              '$.length',
        [structureVariant.outer.id]    NVARCHAR(100)       '$.outer.id',
        [structureVariant.outer.extension] NVARCHAR(MAX)       '$.outer.extension',
        [structureVariant.outer.modifierExtension] NVARCHAR(MAX)       '$.outer.modifierExtension',
        [structureVariant.outer.start] bigint              '$.outer.start',
        [structureVariant.outer.end]   bigint              '$.outer.end',
        [structureVariant.inner.id]    NVARCHAR(100)       '$.inner.id',
        [structureVariant.inner.extension] NVARCHAR(MAX)       '$.inner.extension',
        [structureVariant.inner.modifierExtension] NVARCHAR(MAX)       '$.inner.modifierExtension',
        [structureVariant.inner.start] bigint              '$.inner.start',
        [structureVariant.inner.end]   bigint              '$.inner.end'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[NamingSystem] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [url] VARCHAR(256),
    [identifier] VARCHAR(MAX),
    [version] NVARCHAR(100),
    [name] NVARCHAR(500),
    [title] NVARCHAR(4000),
    [status] NVARCHAR(100),
    [experimental] bit,
    [date] VARCHAR(64),
    [publisher] NVARCHAR(500),
    [contact] VARCHAR(MAX),
    [description] NVARCHAR(MAX),
    [useContext] VARCHAR(MAX),
    [jurisdiction] VARCHAR(MAX),
    [purpose] NVARCHAR(MAX),
    [copyright] NVARCHAR(MAX),
    [kind] NVARCHAR(100),
    [responsible] NVARCHAR(500),
    [type.id] NVARCHAR(100),
    [type.extension] NVARCHAR(MAX),
    [type.coding] VARCHAR(MAX),
    [type.text] NVARCHAR(4000),
    [usage] NVARCHAR(4000),
    [uniqueId] VARCHAR(MAX),
) WITH (
    LOCATION='/NamingSystem/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.NamingSystemIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'NamingSystem/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.NamingSystemContact AS
SELECT
    [id],
    [contact.JSON],
    [contact.id],
    [contact.extension],
    [contact.name],
    [contact.telecom]
FROM openrowset (
        BULK 'NamingSystem/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [contact.JSON]  VARCHAR(MAX) '$.contact'
    ) AS rowset
    CROSS APPLY openjson (rowset.[contact.JSON]) with (
        [contact.id]                   NVARCHAR(100)       '$.id',
        [contact.extension]            NVARCHAR(MAX)       '$.extension',
        [contact.name]                 NVARCHAR(500)       '$.name',
        [contact.telecom]              NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.NamingSystemUseContext AS
SELECT
    [id],
    [useContext.JSON],
    [useContext.id],
    [useContext.extension],
    [useContext.code.id],
    [useContext.code.extension],
    [useContext.code.system],
    [useContext.code.version],
    [useContext.code.code],
    [useContext.code.display],
    [useContext.code.userSelected],
    [useContext.value.codeableConcept.id],
    [useContext.value.codeableConcept.extension],
    [useContext.value.codeableConcept.coding],
    [useContext.value.codeableConcept.text],
    [useContext.value.quantity.id],
    [useContext.value.quantity.extension],
    [useContext.value.quantity.value],
    [useContext.value.quantity.comparator],
    [useContext.value.quantity.unit],
    [useContext.value.quantity.system],
    [useContext.value.quantity.code],
    [useContext.value.range.id],
    [useContext.value.range.extension],
    [useContext.value.range.low],
    [useContext.value.range.high],
    [useContext.value.reference.id],
    [useContext.value.reference.extension],
    [useContext.value.reference.reference],
    [useContext.value.reference.type],
    [useContext.value.reference.identifier],
    [useContext.value.reference.display]
FROM openrowset (
        BULK 'NamingSystem/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [useContext.JSON]  VARCHAR(MAX) '$.useContext'
    ) AS rowset
    CROSS APPLY openjson (rowset.[useContext.JSON]) with (
        [useContext.id]                NVARCHAR(100)       '$.id',
        [useContext.extension]         NVARCHAR(MAX)       '$.extension',
        [useContext.code.id]           NVARCHAR(100)       '$.code.id',
        [useContext.code.extension]    NVARCHAR(MAX)       '$.code.extension',
        [useContext.code.system]       VARCHAR(256)        '$.code.system',
        [useContext.code.version]      NVARCHAR(100)       '$.code.version',
        [useContext.code.code]         NVARCHAR(4000)      '$.code.code',
        [useContext.code.display]      NVARCHAR(4000)      '$.code.display',
        [useContext.code.userSelected] bit                 '$.code.userSelected',
        [useContext.value.codeableConcept.id] NVARCHAR(100)       '$.value.codeableConcept.id',
        [useContext.value.codeableConcept.extension] NVARCHAR(MAX)       '$.value.codeableConcept.extension',
        [useContext.value.codeableConcept.coding] NVARCHAR(MAX)       '$.value.codeableConcept.coding',
        [useContext.value.codeableConcept.text] NVARCHAR(4000)      '$.value.codeableConcept.text',
        [useContext.value.quantity.id] NVARCHAR(100)       '$.value.quantity.id',
        [useContext.value.quantity.extension] NVARCHAR(MAX)       '$.value.quantity.extension',
        [useContext.value.quantity.value] float               '$.value.quantity.value',
        [useContext.value.quantity.comparator] NVARCHAR(64)        '$.value.quantity.comparator',
        [useContext.value.quantity.unit] NVARCHAR(100)       '$.value.quantity.unit',
        [useContext.value.quantity.system] VARCHAR(256)        '$.value.quantity.system',
        [useContext.value.quantity.code] NVARCHAR(4000)      '$.value.quantity.code',
        [useContext.value.range.id]    NVARCHAR(100)       '$.value.range.id',
        [useContext.value.range.extension] NVARCHAR(MAX)       '$.value.range.extension',
        [useContext.value.range.low]   NVARCHAR(MAX)       '$.value.range.low',
        [useContext.value.range.high]  NVARCHAR(MAX)       '$.value.range.high',
        [useContext.value.reference.id] NVARCHAR(100)       '$.value.reference.id',
        [useContext.value.reference.extension] NVARCHAR(MAX)       '$.value.reference.extension',
        [useContext.value.reference.reference] NVARCHAR(4000)      '$.value.reference.reference',
        [useContext.value.reference.type] VARCHAR(256)        '$.value.reference.type',
        [useContext.value.reference.identifier] NVARCHAR(MAX)       '$.value.reference.identifier',
        [useContext.value.reference.display] NVARCHAR(4000)      '$.value.reference.display'
    ) j

GO

CREATE VIEW fhir.NamingSystemJurisdiction AS
SELECT
    [id],
    [jurisdiction.JSON],
    [jurisdiction.id],
    [jurisdiction.extension],
    [jurisdiction.coding],
    [jurisdiction.text]
FROM openrowset (
        BULK 'NamingSystem/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [jurisdiction.JSON]  VARCHAR(MAX) '$.jurisdiction'
    ) AS rowset
    CROSS APPLY openjson (rowset.[jurisdiction.JSON]) with (
        [jurisdiction.id]              NVARCHAR(100)       '$.id',
        [jurisdiction.extension]       NVARCHAR(MAX)       '$.extension',
        [jurisdiction.coding]          NVARCHAR(MAX)       '$.coding' AS JSON,
        [jurisdiction.text]            NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.NamingSystemUniqueId AS
SELECT
    [id],
    [uniqueId.JSON],
    [uniqueId.id],
    [uniqueId.extension],
    [uniqueId.modifierExtension],
    [uniqueId.type],
    [uniqueId.value],
    [uniqueId.preferred],
    [uniqueId.comment],
    [uniqueId.period.id],
    [uniqueId.period.extension],
    [uniqueId.period.start],
    [uniqueId.period.end],
    [uniqueId.authoritative]
FROM openrowset (
        BULK 'NamingSystem/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [uniqueId.JSON]  VARCHAR(MAX) '$.uniqueId'
    ) AS rowset
    CROSS APPLY openjson (rowset.[uniqueId.JSON]) with (
        [uniqueId.id]                  NVARCHAR(100)       '$.id',
        [uniqueId.extension]           NVARCHAR(MAX)       '$.extension',
        [uniqueId.modifierExtension]   NVARCHAR(MAX)       '$.modifierExtension',
        [uniqueId.type]                NVARCHAR(100)       '$.type',
        [uniqueId.value]               NVARCHAR(4000)      '$.value',
        [uniqueId.preferred]           bit                 '$.preferred',
        [uniqueId.comment]             NVARCHAR(4000)      '$.comment',
        [uniqueId.period.id]           NVARCHAR(100)       '$.period.id',
        [uniqueId.period.extension]    NVARCHAR(MAX)       '$.period.extension',
        [uniqueId.period.start]        VARCHAR(64)         '$.period.start',
        [uniqueId.period.end]          VARCHAR(64)         '$.period.end',
        [uniqueId.authoritative]       bit                 '$.authoritative'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[NutritionIntake] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [instantiatesCanonical] VARCHAR(MAX),
    [instantiatesUri] VARCHAR(MAX),
    [basedOn] VARCHAR(MAX),
    [partOf] VARCHAR(MAX),
    [status] NVARCHAR(100),
    [statusReason] VARCHAR(MAX),
    [code.id] NVARCHAR(100),
    [code.extension] NVARCHAR(MAX),
    [code.coding] VARCHAR(MAX),
    [code.text] NVARCHAR(4000),
    [subject.id] NVARCHAR(100),
    [subject.extension] NVARCHAR(MAX),
    [subject.reference] NVARCHAR(4000),
    [subject.type] VARCHAR(256),
    [subject.identifier.id] NVARCHAR(100),
    [subject.identifier.extension] NVARCHAR(MAX),
    [subject.identifier.use] NVARCHAR(64),
    [subject.identifier.type] NVARCHAR(MAX),
    [subject.identifier.system] VARCHAR(256),
    [subject.identifier.value] NVARCHAR(4000),
    [subject.identifier.period] NVARCHAR(MAX),
    [subject.identifier.assigner] NVARCHAR(MAX),
    [subject.display] NVARCHAR(4000),
    [encounter.id] NVARCHAR(100),
    [encounter.extension] NVARCHAR(MAX),
    [encounter.reference] NVARCHAR(4000),
    [encounter.type] VARCHAR(256),
    [encounter.identifier.id] NVARCHAR(100),
    [encounter.identifier.extension] NVARCHAR(MAX),
    [encounter.identifier.use] NVARCHAR(64),
    [encounter.identifier.type] NVARCHAR(MAX),
    [encounter.identifier.system] VARCHAR(256),
    [encounter.identifier.value] NVARCHAR(4000),
    [encounter.identifier.period] NVARCHAR(MAX),
    [encounter.identifier.assigner] NVARCHAR(MAX),
    [encounter.display] NVARCHAR(4000),
    [recorded] VARCHAR(64),
    [consumedItem] VARCHAR(MAX),
    [ingredientLabel] VARCHAR(MAX),
    [performer] VARCHAR(MAX),
    [location.id] NVARCHAR(100),
    [location.extension] NVARCHAR(MAX),
    [location.reference] NVARCHAR(4000),
    [location.type] VARCHAR(256),
    [location.identifier.id] NVARCHAR(100),
    [location.identifier.extension] NVARCHAR(MAX),
    [location.identifier.use] NVARCHAR(64),
    [location.identifier.type] NVARCHAR(MAX),
    [location.identifier.system] VARCHAR(256),
    [location.identifier.value] NVARCHAR(4000),
    [location.identifier.period] NVARCHAR(MAX),
    [location.identifier.assigner] NVARCHAR(MAX),
    [location.display] NVARCHAR(4000),
    [derivedFrom] VARCHAR(MAX),
    [reason] VARCHAR(MAX),
    [note] VARCHAR(MAX),
    [occurrence.dateTime] VARCHAR(64),
    [occurrence.period.id] NVARCHAR(100),
    [occurrence.period.extension] NVARCHAR(MAX),
    [occurrence.period.start] VARCHAR(64),
    [occurrence.period.end] VARCHAR(64),
    [reported.boolean] bit,
    [reported.reference.id] NVARCHAR(100),
    [reported.reference.extension] NVARCHAR(MAX),
    [reported.reference.reference] NVARCHAR(4000),
    [reported.reference.type] VARCHAR(256),
    [reported.reference.identifier.id] NVARCHAR(100),
    [reported.reference.identifier.extension] NVARCHAR(MAX),
    [reported.reference.identifier.use] NVARCHAR(64),
    [reported.reference.identifier.type] NVARCHAR(MAX),
    [reported.reference.identifier.system] VARCHAR(256),
    [reported.reference.identifier.value] NVARCHAR(4000),
    [reported.reference.identifier.period] NVARCHAR(MAX),
    [reported.reference.identifier.assigner] NVARCHAR(MAX),
    [reported.reference.display] NVARCHAR(4000),
) WITH (
    LOCATION='/NutritionIntake/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.NutritionIntakeIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'NutritionIntake/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.NutritionIntakeInstantiatesCanonical AS
SELECT
    [id],
    [instantiatesCanonical.JSON],
    [instantiatesCanonical]
FROM openrowset (
        BULK 'NutritionIntake/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [instantiatesCanonical.JSON]  VARCHAR(MAX) '$.instantiatesCanonical'
    ) AS rowset
    CROSS APPLY openjson (rowset.[instantiatesCanonical.JSON]) with (
        [instantiatesCanonical]        NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.NutritionIntakeInstantiatesUri AS
SELECT
    [id],
    [instantiatesUri.JSON],
    [instantiatesUri]
FROM openrowset (
        BULK 'NutritionIntake/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [instantiatesUri.JSON]  VARCHAR(MAX) '$.instantiatesUri'
    ) AS rowset
    CROSS APPLY openjson (rowset.[instantiatesUri.JSON]) with (
        [instantiatesUri]              NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.NutritionIntakeBasedOn AS
SELECT
    [id],
    [basedOn.JSON],
    [basedOn.id],
    [basedOn.extension],
    [basedOn.reference],
    [basedOn.type],
    [basedOn.identifier.id],
    [basedOn.identifier.extension],
    [basedOn.identifier.use],
    [basedOn.identifier.type],
    [basedOn.identifier.system],
    [basedOn.identifier.value],
    [basedOn.identifier.period],
    [basedOn.identifier.assigner],
    [basedOn.display]
FROM openrowset (
        BULK 'NutritionIntake/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [basedOn.JSON]  VARCHAR(MAX) '$.basedOn'
    ) AS rowset
    CROSS APPLY openjson (rowset.[basedOn.JSON]) with (
        [basedOn.id]                   NVARCHAR(100)       '$.id',
        [basedOn.extension]            NVARCHAR(MAX)       '$.extension',
        [basedOn.reference]            NVARCHAR(4000)      '$.reference',
        [basedOn.type]                 VARCHAR(256)        '$.type',
        [basedOn.identifier.id]        NVARCHAR(100)       '$.identifier.id',
        [basedOn.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [basedOn.identifier.use]       NVARCHAR(64)        '$.identifier.use',
        [basedOn.identifier.type]      NVARCHAR(MAX)       '$.identifier.type',
        [basedOn.identifier.system]    VARCHAR(256)        '$.identifier.system',
        [basedOn.identifier.value]     NVARCHAR(4000)      '$.identifier.value',
        [basedOn.identifier.period]    NVARCHAR(MAX)       '$.identifier.period',
        [basedOn.identifier.assigner]  NVARCHAR(MAX)       '$.identifier.assigner',
        [basedOn.display]              NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.NutritionIntakePartOf AS
SELECT
    [id],
    [partOf.JSON],
    [partOf.id],
    [partOf.extension],
    [partOf.reference],
    [partOf.type],
    [partOf.identifier.id],
    [partOf.identifier.extension],
    [partOf.identifier.use],
    [partOf.identifier.type],
    [partOf.identifier.system],
    [partOf.identifier.value],
    [partOf.identifier.period],
    [partOf.identifier.assigner],
    [partOf.display]
FROM openrowset (
        BULK 'NutritionIntake/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [partOf.JSON]  VARCHAR(MAX) '$.partOf'
    ) AS rowset
    CROSS APPLY openjson (rowset.[partOf.JSON]) with (
        [partOf.id]                    NVARCHAR(100)       '$.id',
        [partOf.extension]             NVARCHAR(MAX)       '$.extension',
        [partOf.reference]             NVARCHAR(4000)      '$.reference',
        [partOf.type]                  VARCHAR(256)        '$.type',
        [partOf.identifier.id]         NVARCHAR(100)       '$.identifier.id',
        [partOf.identifier.extension]  NVARCHAR(MAX)       '$.identifier.extension',
        [partOf.identifier.use]        NVARCHAR(64)        '$.identifier.use',
        [partOf.identifier.type]       NVARCHAR(MAX)       '$.identifier.type',
        [partOf.identifier.system]     VARCHAR(256)        '$.identifier.system',
        [partOf.identifier.value]      NVARCHAR(4000)      '$.identifier.value',
        [partOf.identifier.period]     NVARCHAR(MAX)       '$.identifier.period',
        [partOf.identifier.assigner]   NVARCHAR(MAX)       '$.identifier.assigner',
        [partOf.display]               NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.NutritionIntakeStatusReason AS
SELECT
    [id],
    [statusReason.JSON],
    [statusReason.id],
    [statusReason.extension],
    [statusReason.coding],
    [statusReason.text]
FROM openrowset (
        BULK 'NutritionIntake/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [statusReason.JSON]  VARCHAR(MAX) '$.statusReason'
    ) AS rowset
    CROSS APPLY openjson (rowset.[statusReason.JSON]) with (
        [statusReason.id]              NVARCHAR(100)       '$.id',
        [statusReason.extension]       NVARCHAR(MAX)       '$.extension',
        [statusReason.coding]          NVARCHAR(MAX)       '$.coding' AS JSON,
        [statusReason.text]            NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.NutritionIntakeConsumedItem AS
SELECT
    [id],
    [consumedItem.JSON],
    [consumedItem.id],
    [consumedItem.extension],
    [consumedItem.modifierExtension],
    [consumedItem.type.id],
    [consumedItem.type.extension],
    [consumedItem.type.coding],
    [consumedItem.type.text],
    [consumedItem.nutritionProduct.id],
    [consumedItem.nutritionProduct.extension],
    [consumedItem.nutritionProduct.concept],
    [consumedItem.nutritionProduct.reference],
    [consumedItem.schedule.id],
    [consumedItem.schedule.extension],
    [consumedItem.schedule.modifierExtension],
    [consumedItem.schedule.event],
    [consumedItem.schedule.repeat],
    [consumedItem.schedule.code],
    [consumedItem.amount.id],
    [consumedItem.amount.extension],
    [consumedItem.amount.value],
    [consumedItem.amount.comparator],
    [consumedItem.amount.unit],
    [consumedItem.amount.system],
    [consumedItem.amount.code],
    [consumedItem.rate.id],
    [consumedItem.rate.extension],
    [consumedItem.rate.value],
    [consumedItem.rate.comparator],
    [consumedItem.rate.unit],
    [consumedItem.rate.system],
    [consumedItem.rate.code],
    [consumedItem.notConsumed],
    [consumedItem.notConsumedReason.id],
    [consumedItem.notConsumedReason.extension],
    [consumedItem.notConsumedReason.coding],
    [consumedItem.notConsumedReason.text]
FROM openrowset (
        BULK 'NutritionIntake/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [consumedItem.JSON]  VARCHAR(MAX) '$.consumedItem'
    ) AS rowset
    CROSS APPLY openjson (rowset.[consumedItem.JSON]) with (
        [consumedItem.id]              NVARCHAR(100)       '$.id',
        [consumedItem.extension]       NVARCHAR(MAX)       '$.extension',
        [consumedItem.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [consumedItem.type.id]         NVARCHAR(100)       '$.type.id',
        [consumedItem.type.extension]  NVARCHAR(MAX)       '$.type.extension',
        [consumedItem.type.coding]     NVARCHAR(MAX)       '$.type.coding',
        [consumedItem.type.text]       NVARCHAR(4000)      '$.type.text',
        [consumedItem.nutritionProduct.id] NVARCHAR(100)       '$.nutritionProduct.id',
        [consumedItem.nutritionProduct.extension] NVARCHAR(MAX)       '$.nutritionProduct.extension',
        [consumedItem.nutritionProduct.concept] NVARCHAR(MAX)       '$.nutritionProduct.concept',
        [consumedItem.nutritionProduct.reference] NVARCHAR(MAX)       '$.nutritionProduct.reference',
        [consumedItem.schedule.id]     NVARCHAR(100)       '$.schedule.id',
        [consumedItem.schedule.extension] NVARCHAR(MAX)       '$.schedule.extension',
        [consumedItem.schedule.modifierExtension] NVARCHAR(MAX)       '$.schedule.modifierExtension',
        [consumedItem.schedule.event]  NVARCHAR(MAX)       '$.schedule.event',
        [consumedItem.schedule.repeat] NVARCHAR(MAX)       '$.schedule.repeat',
        [consumedItem.schedule.code]   NVARCHAR(MAX)       '$.schedule.code',
        [consumedItem.amount.id]       NVARCHAR(100)       '$.amount.id',
        [consumedItem.amount.extension] NVARCHAR(MAX)       '$.amount.extension',
        [consumedItem.amount.value]    float               '$.amount.value',
        [consumedItem.amount.comparator] NVARCHAR(64)        '$.amount.comparator',
        [consumedItem.amount.unit]     NVARCHAR(100)       '$.amount.unit',
        [consumedItem.amount.system]   VARCHAR(256)        '$.amount.system',
        [consumedItem.amount.code]     NVARCHAR(4000)      '$.amount.code',
        [consumedItem.rate.id]         NVARCHAR(100)       '$.rate.id',
        [consumedItem.rate.extension]  NVARCHAR(MAX)       '$.rate.extension',
        [consumedItem.rate.value]      float               '$.rate.value',
        [consumedItem.rate.comparator] NVARCHAR(64)        '$.rate.comparator',
        [consumedItem.rate.unit]       NVARCHAR(100)       '$.rate.unit',
        [consumedItem.rate.system]     VARCHAR(256)        '$.rate.system',
        [consumedItem.rate.code]       NVARCHAR(4000)      '$.rate.code',
        [consumedItem.notConsumed]     bit                 '$.notConsumed',
        [consumedItem.notConsumedReason.id] NVARCHAR(100)       '$.notConsumedReason.id',
        [consumedItem.notConsumedReason.extension] NVARCHAR(MAX)       '$.notConsumedReason.extension',
        [consumedItem.notConsumedReason.coding] NVARCHAR(MAX)       '$.notConsumedReason.coding',
        [consumedItem.notConsumedReason.text] NVARCHAR(4000)      '$.notConsumedReason.text'
    ) j

GO

CREATE VIEW fhir.NutritionIntakeIngredientLabel AS
SELECT
    [id],
    [ingredientLabel.JSON],
    [ingredientLabel.id],
    [ingredientLabel.extension],
    [ingredientLabel.modifierExtension],
    [ingredientLabel.nutrient.id],
    [ingredientLabel.nutrient.extension],
    [ingredientLabel.nutrient.concept],
    [ingredientLabel.nutrient.reference],
    [ingredientLabel.amount.id],
    [ingredientLabel.amount.extension],
    [ingredientLabel.amount.value],
    [ingredientLabel.amount.comparator],
    [ingredientLabel.amount.unit],
    [ingredientLabel.amount.system],
    [ingredientLabel.amount.code]
FROM openrowset (
        BULK 'NutritionIntake/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [ingredientLabel.JSON]  VARCHAR(MAX) '$.ingredientLabel'
    ) AS rowset
    CROSS APPLY openjson (rowset.[ingredientLabel.JSON]) with (
        [ingredientLabel.id]           NVARCHAR(100)       '$.id',
        [ingredientLabel.extension]    NVARCHAR(MAX)       '$.extension',
        [ingredientLabel.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [ingredientLabel.nutrient.id]  NVARCHAR(100)       '$.nutrient.id',
        [ingredientLabel.nutrient.extension] NVARCHAR(MAX)       '$.nutrient.extension',
        [ingredientLabel.nutrient.concept] NVARCHAR(MAX)       '$.nutrient.concept',
        [ingredientLabel.nutrient.reference] NVARCHAR(MAX)       '$.nutrient.reference',
        [ingredientLabel.amount.id]    NVARCHAR(100)       '$.amount.id',
        [ingredientLabel.amount.extension] NVARCHAR(MAX)       '$.amount.extension',
        [ingredientLabel.amount.value] float               '$.amount.value',
        [ingredientLabel.amount.comparator] NVARCHAR(64)        '$.amount.comparator',
        [ingredientLabel.amount.unit]  NVARCHAR(100)       '$.amount.unit',
        [ingredientLabel.amount.system] VARCHAR(256)        '$.amount.system',
        [ingredientLabel.amount.code]  NVARCHAR(4000)      '$.amount.code'
    ) j

GO

CREATE VIEW fhir.NutritionIntakePerformer AS
SELECT
    [id],
    [performer.JSON],
    [performer.id],
    [performer.extension],
    [performer.modifierExtension],
    [performer.function.id],
    [performer.function.extension],
    [performer.function.coding],
    [performer.function.text],
    [performer.actor.id],
    [performer.actor.extension],
    [performer.actor.reference],
    [performer.actor.type],
    [performer.actor.identifier],
    [performer.actor.display]
FROM openrowset (
        BULK 'NutritionIntake/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [performer.JSON]  VARCHAR(MAX) '$.performer'
    ) AS rowset
    CROSS APPLY openjson (rowset.[performer.JSON]) with (
        [performer.id]                 NVARCHAR(100)       '$.id',
        [performer.extension]          NVARCHAR(MAX)       '$.extension',
        [performer.modifierExtension]  NVARCHAR(MAX)       '$.modifierExtension',
        [performer.function.id]        NVARCHAR(100)       '$.function.id',
        [performer.function.extension] NVARCHAR(MAX)       '$.function.extension',
        [performer.function.coding]    NVARCHAR(MAX)       '$.function.coding',
        [performer.function.text]      NVARCHAR(4000)      '$.function.text',
        [performer.actor.id]           NVARCHAR(100)       '$.actor.id',
        [performer.actor.extension]    NVARCHAR(MAX)       '$.actor.extension',
        [performer.actor.reference]    NVARCHAR(4000)      '$.actor.reference',
        [performer.actor.type]         VARCHAR(256)        '$.actor.type',
        [performer.actor.identifier]   NVARCHAR(MAX)       '$.actor.identifier',
        [performer.actor.display]      NVARCHAR(4000)      '$.actor.display'
    ) j

GO

CREATE VIEW fhir.NutritionIntakeDerivedFrom AS
SELECT
    [id],
    [derivedFrom.JSON],
    [derivedFrom.id],
    [derivedFrom.extension],
    [derivedFrom.reference],
    [derivedFrom.type],
    [derivedFrom.identifier.id],
    [derivedFrom.identifier.extension],
    [derivedFrom.identifier.use],
    [derivedFrom.identifier.type],
    [derivedFrom.identifier.system],
    [derivedFrom.identifier.value],
    [derivedFrom.identifier.period],
    [derivedFrom.identifier.assigner],
    [derivedFrom.display]
FROM openrowset (
        BULK 'NutritionIntake/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [derivedFrom.JSON]  VARCHAR(MAX) '$.derivedFrom'
    ) AS rowset
    CROSS APPLY openjson (rowset.[derivedFrom.JSON]) with (
        [derivedFrom.id]               NVARCHAR(100)       '$.id',
        [derivedFrom.extension]        NVARCHAR(MAX)       '$.extension',
        [derivedFrom.reference]        NVARCHAR(4000)      '$.reference',
        [derivedFrom.type]             VARCHAR(256)        '$.type',
        [derivedFrom.identifier.id]    NVARCHAR(100)       '$.identifier.id',
        [derivedFrom.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [derivedFrom.identifier.use]   NVARCHAR(64)        '$.identifier.use',
        [derivedFrom.identifier.type]  NVARCHAR(MAX)       '$.identifier.type',
        [derivedFrom.identifier.system] VARCHAR(256)        '$.identifier.system',
        [derivedFrom.identifier.value] NVARCHAR(4000)      '$.identifier.value',
        [derivedFrom.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [derivedFrom.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [derivedFrom.display]          NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.NutritionIntakeReason AS
SELECT
    [id],
    [reason.JSON],
    [reason.id],
    [reason.extension],
    [reason.concept.id],
    [reason.concept.extension],
    [reason.concept.coding],
    [reason.concept.text],
    [reason.reference.id],
    [reason.reference.extension],
    [reason.reference.reference],
    [reason.reference.type],
    [reason.reference.identifier],
    [reason.reference.display]
FROM openrowset (
        BULK 'NutritionIntake/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [reason.JSON]  VARCHAR(MAX) '$.reason'
    ) AS rowset
    CROSS APPLY openjson (rowset.[reason.JSON]) with (
        [reason.id]                    NVARCHAR(100)       '$.id',
        [reason.extension]             NVARCHAR(MAX)       '$.extension',
        [reason.concept.id]            NVARCHAR(100)       '$.concept.id',
        [reason.concept.extension]     NVARCHAR(MAX)       '$.concept.extension',
        [reason.concept.coding]        NVARCHAR(MAX)       '$.concept.coding',
        [reason.concept.text]          NVARCHAR(4000)      '$.concept.text',
        [reason.reference.id]          NVARCHAR(100)       '$.reference.id',
        [reason.reference.extension]   NVARCHAR(MAX)       '$.reference.extension',
        [reason.reference.reference]   NVARCHAR(4000)      '$.reference.reference',
        [reason.reference.type]        VARCHAR(256)        '$.reference.type',
        [reason.reference.identifier]  NVARCHAR(MAX)       '$.reference.identifier',
        [reason.reference.display]     NVARCHAR(4000)      '$.reference.display'
    ) j

GO

CREATE VIEW fhir.NutritionIntakeNote AS
SELECT
    [id],
    [note.JSON],
    [note.id],
    [note.extension],
    [note.time],
    [note.text],
    [note.author.reference.id],
    [note.author.reference.extension],
    [note.author.reference.reference],
    [note.author.reference.type],
    [note.author.reference.identifier],
    [note.author.reference.display],
    [note.author.string]
FROM openrowset (
        BULK 'NutritionIntake/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [note.JSON]  VARCHAR(MAX) '$.note'
    ) AS rowset
    CROSS APPLY openjson (rowset.[note.JSON]) with (
        [note.id]                      NVARCHAR(100)       '$.id',
        [note.extension]               NVARCHAR(MAX)       '$.extension',
        [note.time]                    VARCHAR(64)         '$.time',
        [note.text]                    NVARCHAR(MAX)       '$.text',
        [note.author.reference.id]     NVARCHAR(100)       '$.author.reference.id',
        [note.author.reference.extension] NVARCHAR(MAX)       '$.author.reference.extension',
        [note.author.reference.reference] NVARCHAR(4000)      '$.author.reference.reference',
        [note.author.reference.type]   VARCHAR(256)        '$.author.reference.type',
        [note.author.reference.identifier] NVARCHAR(MAX)       '$.author.reference.identifier',
        [note.author.reference.display] NVARCHAR(4000)      '$.author.reference.display',
        [note.author.string]           NVARCHAR(4000)      '$.author.string'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[NutritionOrder] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [instantiatesCanonical] VARCHAR(MAX),
    [instantiatesUri] VARCHAR(MAX),
    [instantiates] VARCHAR(MAX),
    [status] NVARCHAR(100),
    [intent] NVARCHAR(100),
    [patient.id] NVARCHAR(100),
    [patient.extension] NVARCHAR(MAX),
    [patient.reference] NVARCHAR(4000),
    [patient.type] VARCHAR(256),
    [patient.identifier.id] NVARCHAR(100),
    [patient.identifier.extension] NVARCHAR(MAX),
    [patient.identifier.use] NVARCHAR(64),
    [patient.identifier.type] NVARCHAR(MAX),
    [patient.identifier.system] VARCHAR(256),
    [patient.identifier.value] NVARCHAR(4000),
    [patient.identifier.period] NVARCHAR(MAX),
    [patient.identifier.assigner] NVARCHAR(MAX),
    [patient.display] NVARCHAR(4000),
    [encounter.id] NVARCHAR(100),
    [encounter.extension] NVARCHAR(MAX),
    [encounter.reference] NVARCHAR(4000),
    [encounter.type] VARCHAR(256),
    [encounter.identifier.id] NVARCHAR(100),
    [encounter.identifier.extension] NVARCHAR(MAX),
    [encounter.identifier.use] NVARCHAR(64),
    [encounter.identifier.type] NVARCHAR(MAX),
    [encounter.identifier.system] VARCHAR(256),
    [encounter.identifier.value] NVARCHAR(4000),
    [encounter.identifier.period] NVARCHAR(MAX),
    [encounter.identifier.assigner] NVARCHAR(MAX),
    [encounter.display] NVARCHAR(4000),
    [dateTime] VARCHAR(64),
    [orderer.id] NVARCHAR(100),
    [orderer.extension] NVARCHAR(MAX),
    [orderer.reference] NVARCHAR(4000),
    [orderer.type] VARCHAR(256),
    [orderer.identifier.id] NVARCHAR(100),
    [orderer.identifier.extension] NVARCHAR(MAX),
    [orderer.identifier.use] NVARCHAR(64),
    [orderer.identifier.type] NVARCHAR(MAX),
    [orderer.identifier.system] VARCHAR(256),
    [orderer.identifier.value] NVARCHAR(4000),
    [orderer.identifier.period] NVARCHAR(MAX),
    [orderer.identifier.assigner] NVARCHAR(MAX),
    [orderer.display] NVARCHAR(4000),
    [allergyIntolerance] VARCHAR(MAX),
    [foodPreferenceModifier] VARCHAR(MAX),
    [excludeFoodModifier] VARCHAR(MAX),
    [oralDiet.id] NVARCHAR(100),
    [oralDiet.extension] NVARCHAR(MAX),
    [oralDiet.modifierExtension] NVARCHAR(MAX),
    [oralDiet.type] VARCHAR(MAX),
    [oralDiet.schedule] VARCHAR(MAX),
    [oralDiet.nutrient] VARCHAR(MAX),
    [oralDiet.texture] VARCHAR(MAX),
    [oralDiet.fluidConsistencyType] VARCHAR(MAX),
    [oralDiet.instruction] NVARCHAR(4000),
    [supplement] VARCHAR(MAX),
    [enteralFormula.id] NVARCHAR(100),
    [enteralFormula.extension] NVARCHAR(MAX),
    [enteralFormula.modifierExtension] NVARCHAR(MAX),
    [enteralFormula.baseFormulaType.id] NVARCHAR(100),
    [enteralFormula.baseFormulaType.extension] NVARCHAR(MAX),
    [enteralFormula.baseFormulaType.coding] NVARCHAR(MAX),
    [enteralFormula.baseFormulaType.text] NVARCHAR(4000),
    [enteralFormula.baseFormulaProductName] NVARCHAR(500),
    [enteralFormula.additiveType.id] NVARCHAR(100),
    [enteralFormula.additiveType.extension] NVARCHAR(MAX),
    [enteralFormula.additiveType.coding] NVARCHAR(MAX),
    [enteralFormula.additiveType.text] NVARCHAR(4000),
    [enteralFormula.additiveProductName] NVARCHAR(500),
    [enteralFormula.caloricDensity.id] NVARCHAR(100),
    [enteralFormula.caloricDensity.extension] NVARCHAR(MAX),
    [enteralFormula.caloricDensity.value] float,
    [enteralFormula.caloricDensity.comparator] NVARCHAR(64),
    [enteralFormula.caloricDensity.unit] NVARCHAR(100),
    [enteralFormula.caloricDensity.system] VARCHAR(256),
    [enteralFormula.caloricDensity.code] NVARCHAR(4000),
    [enteralFormula.routeofAdministration.id] NVARCHAR(100),
    [enteralFormula.routeofAdministration.extension] NVARCHAR(MAX),
    [enteralFormula.routeofAdministration.coding] NVARCHAR(MAX),
    [enteralFormula.routeofAdministration.text] NVARCHAR(4000),
    [enteralFormula.administration] VARCHAR(MAX),
    [enteralFormula.maxVolumeToDeliver.id] NVARCHAR(100),
    [enteralFormula.maxVolumeToDeliver.extension] NVARCHAR(MAX),
    [enteralFormula.maxVolumeToDeliver.value] float,
    [enteralFormula.maxVolumeToDeliver.comparator] NVARCHAR(64),
    [enteralFormula.maxVolumeToDeliver.unit] NVARCHAR(100),
    [enteralFormula.maxVolumeToDeliver.system] VARCHAR(256),
    [enteralFormula.maxVolumeToDeliver.code] NVARCHAR(4000),
    [enteralFormula.administrationInstruction] NVARCHAR(4000),
    [note] VARCHAR(MAX),
) WITH (
    LOCATION='/NutritionOrder/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.NutritionOrderIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'NutritionOrder/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.NutritionOrderInstantiatesCanonical AS
SELECT
    [id],
    [instantiatesCanonical.JSON],
    [instantiatesCanonical]
FROM openrowset (
        BULK 'NutritionOrder/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [instantiatesCanonical.JSON]  VARCHAR(MAX) '$.instantiatesCanonical'
    ) AS rowset
    CROSS APPLY openjson (rowset.[instantiatesCanonical.JSON]) with (
        [instantiatesCanonical]        NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.NutritionOrderInstantiatesUri AS
SELECT
    [id],
    [instantiatesUri.JSON],
    [instantiatesUri]
FROM openrowset (
        BULK 'NutritionOrder/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [instantiatesUri.JSON]  VARCHAR(MAX) '$.instantiatesUri'
    ) AS rowset
    CROSS APPLY openjson (rowset.[instantiatesUri.JSON]) with (
        [instantiatesUri]              NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.NutritionOrderInstantiates AS
SELECT
    [id],
    [instantiates.JSON],
    [instantiates]
FROM openrowset (
        BULK 'NutritionOrder/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [instantiates.JSON]  VARCHAR(MAX) '$.instantiates'
    ) AS rowset
    CROSS APPLY openjson (rowset.[instantiates.JSON]) with (
        [instantiates]                 NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.NutritionOrderAllergyIntolerance AS
SELECT
    [id],
    [allergyIntolerance.JSON],
    [allergyIntolerance.id],
    [allergyIntolerance.extension],
    [allergyIntolerance.reference],
    [allergyIntolerance.type],
    [allergyIntolerance.identifier.id],
    [allergyIntolerance.identifier.extension],
    [allergyIntolerance.identifier.use],
    [allergyIntolerance.identifier.type],
    [allergyIntolerance.identifier.system],
    [allergyIntolerance.identifier.value],
    [allergyIntolerance.identifier.period],
    [allergyIntolerance.identifier.assigner],
    [allergyIntolerance.display]
FROM openrowset (
        BULK 'NutritionOrder/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [allergyIntolerance.JSON]  VARCHAR(MAX) '$.allergyIntolerance'
    ) AS rowset
    CROSS APPLY openjson (rowset.[allergyIntolerance.JSON]) with (
        [allergyIntolerance.id]        NVARCHAR(100)       '$.id',
        [allergyIntolerance.extension] NVARCHAR(MAX)       '$.extension',
        [allergyIntolerance.reference] NVARCHAR(4000)      '$.reference',
        [allergyIntolerance.type]      VARCHAR(256)        '$.type',
        [allergyIntolerance.identifier.id] NVARCHAR(100)       '$.identifier.id',
        [allergyIntolerance.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [allergyIntolerance.identifier.use] NVARCHAR(64)        '$.identifier.use',
        [allergyIntolerance.identifier.type] NVARCHAR(MAX)       '$.identifier.type',
        [allergyIntolerance.identifier.system] VARCHAR(256)        '$.identifier.system',
        [allergyIntolerance.identifier.value] NVARCHAR(4000)      '$.identifier.value',
        [allergyIntolerance.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [allergyIntolerance.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [allergyIntolerance.display]   NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.NutritionOrderFoodPreferenceModifier AS
SELECT
    [id],
    [foodPreferenceModifier.JSON],
    [foodPreferenceModifier.id],
    [foodPreferenceModifier.extension],
    [foodPreferenceModifier.coding],
    [foodPreferenceModifier.text]
FROM openrowset (
        BULK 'NutritionOrder/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [foodPreferenceModifier.JSON]  VARCHAR(MAX) '$.foodPreferenceModifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[foodPreferenceModifier.JSON]) with (
        [foodPreferenceModifier.id]    NVARCHAR(100)       '$.id',
        [foodPreferenceModifier.extension] NVARCHAR(MAX)       '$.extension',
        [foodPreferenceModifier.coding] NVARCHAR(MAX)       '$.coding' AS JSON,
        [foodPreferenceModifier.text]  NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.NutritionOrderExcludeFoodModifier AS
SELECT
    [id],
    [excludeFoodModifier.JSON],
    [excludeFoodModifier.id],
    [excludeFoodModifier.extension],
    [excludeFoodModifier.coding],
    [excludeFoodModifier.text]
FROM openrowset (
        BULK 'NutritionOrder/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [excludeFoodModifier.JSON]  VARCHAR(MAX) '$.excludeFoodModifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[excludeFoodModifier.JSON]) with (
        [excludeFoodModifier.id]       NVARCHAR(100)       '$.id',
        [excludeFoodModifier.extension] NVARCHAR(MAX)       '$.extension',
        [excludeFoodModifier.coding]   NVARCHAR(MAX)       '$.coding' AS JSON,
        [excludeFoodModifier.text]     NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.NutritionOrderSupplement AS
SELECT
    [id],
    [supplement.JSON],
    [supplement.id],
    [supplement.extension],
    [supplement.modifierExtension],
    [supplement.type.id],
    [supplement.type.extension],
    [supplement.type.coding],
    [supplement.type.text],
    [supplement.productName],
    [supplement.schedule],
    [supplement.quantity.id],
    [supplement.quantity.extension],
    [supplement.quantity.value],
    [supplement.quantity.comparator],
    [supplement.quantity.unit],
    [supplement.quantity.system],
    [supplement.quantity.code],
    [supplement.instruction]
FROM openrowset (
        BULK 'NutritionOrder/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [supplement.JSON]  VARCHAR(MAX) '$.supplement'
    ) AS rowset
    CROSS APPLY openjson (rowset.[supplement.JSON]) with (
        [supplement.id]                NVARCHAR(100)       '$.id',
        [supplement.extension]         NVARCHAR(MAX)       '$.extension',
        [supplement.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [supplement.type.id]           NVARCHAR(100)       '$.type.id',
        [supplement.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [supplement.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [supplement.type.text]         NVARCHAR(4000)      '$.type.text',
        [supplement.productName]       NVARCHAR(500)       '$.productName',
        [supplement.schedule]          NVARCHAR(MAX)       '$.schedule' AS JSON,
        [supplement.quantity.id]       NVARCHAR(100)       '$.quantity.id',
        [supplement.quantity.extension] NVARCHAR(MAX)       '$.quantity.extension',
        [supplement.quantity.value]    float               '$.quantity.value',
        [supplement.quantity.comparator] NVARCHAR(64)        '$.quantity.comparator',
        [supplement.quantity.unit]     NVARCHAR(100)       '$.quantity.unit',
        [supplement.quantity.system]   VARCHAR(256)        '$.quantity.system',
        [supplement.quantity.code]     NVARCHAR(4000)      '$.quantity.code',
        [supplement.instruction]       NVARCHAR(4000)      '$.instruction'
    ) j

GO

CREATE VIEW fhir.NutritionOrderNote AS
SELECT
    [id],
    [note.JSON],
    [note.id],
    [note.extension],
    [note.time],
    [note.text],
    [note.author.reference.id],
    [note.author.reference.extension],
    [note.author.reference.reference],
    [note.author.reference.type],
    [note.author.reference.identifier],
    [note.author.reference.display],
    [note.author.string]
FROM openrowset (
        BULK 'NutritionOrder/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [note.JSON]  VARCHAR(MAX) '$.note'
    ) AS rowset
    CROSS APPLY openjson (rowset.[note.JSON]) with (
        [note.id]                      NVARCHAR(100)       '$.id',
        [note.extension]               NVARCHAR(MAX)       '$.extension',
        [note.time]                    VARCHAR(64)         '$.time',
        [note.text]                    NVARCHAR(MAX)       '$.text',
        [note.author.reference.id]     NVARCHAR(100)       '$.author.reference.id',
        [note.author.reference.extension] NVARCHAR(MAX)       '$.author.reference.extension',
        [note.author.reference.reference] NVARCHAR(4000)      '$.author.reference.reference',
        [note.author.reference.type]   VARCHAR(256)        '$.author.reference.type',
        [note.author.reference.identifier] NVARCHAR(MAX)       '$.author.reference.identifier',
        [note.author.reference.display] NVARCHAR(4000)      '$.author.reference.display',
        [note.author.string]           NVARCHAR(4000)      '$.author.string'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[NutritionProduct] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [status] NVARCHAR(100),
    [category] VARCHAR(MAX),
    [code.id] NVARCHAR(100),
    [code.extension] NVARCHAR(MAX),
    [code.coding] VARCHAR(MAX),
    [code.text] NVARCHAR(4000),
    [manufacturer] VARCHAR(MAX),
    [nutrient] VARCHAR(MAX),
    [ingredient] VARCHAR(MAX),
    [knownAllergen] VARCHAR(MAX),
    [productCharacteristic] VARCHAR(MAX),
    [instance.id] NVARCHAR(100),
    [instance.extension] NVARCHAR(MAX),
    [instance.modifierExtension] NVARCHAR(MAX),
    [instance.quantity.id] NVARCHAR(100),
    [instance.quantity.extension] NVARCHAR(MAX),
    [instance.quantity.value] float,
    [instance.quantity.comparator] NVARCHAR(64),
    [instance.quantity.unit] NVARCHAR(100),
    [instance.quantity.system] VARCHAR(256),
    [instance.quantity.code] NVARCHAR(4000),
    [instance.identifier] VARCHAR(MAX),
    [instance.lotNumber] NVARCHAR(100),
    [instance.expiry] VARCHAR(64),
    [instance.useBy] VARCHAR(64),
    [instance.biologicalSource.id] NVARCHAR(100),
    [instance.biologicalSource.extension] NVARCHAR(MAX),
    [instance.biologicalSource.use] NVARCHAR(64),
    [instance.biologicalSource.type] NVARCHAR(MAX),
    [instance.biologicalSource.system] VARCHAR(256),
    [instance.biologicalSource.value] NVARCHAR(4000),
    [instance.biologicalSource.period] NVARCHAR(MAX),
    [instance.biologicalSource.assigner] NVARCHAR(MAX),
    [note] VARCHAR(MAX),
) WITH (
    LOCATION='/NutritionProduct/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.NutritionProductCategory AS
SELECT
    [id],
    [category.JSON],
    [category.id],
    [category.extension],
    [category.coding],
    [category.text]
FROM openrowset (
        BULK 'NutritionProduct/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [category.JSON]  VARCHAR(MAX) '$.category'
    ) AS rowset
    CROSS APPLY openjson (rowset.[category.JSON]) with (
        [category.id]                  NVARCHAR(100)       '$.id',
        [category.extension]           NVARCHAR(MAX)       '$.extension',
        [category.coding]              NVARCHAR(MAX)       '$.coding' AS JSON,
        [category.text]                NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.NutritionProductManufacturer AS
SELECT
    [id],
    [manufacturer.JSON],
    [manufacturer.id],
    [manufacturer.extension],
    [manufacturer.reference],
    [manufacturer.type],
    [manufacturer.identifier.id],
    [manufacturer.identifier.extension],
    [manufacturer.identifier.use],
    [manufacturer.identifier.type],
    [manufacturer.identifier.system],
    [manufacturer.identifier.value],
    [manufacturer.identifier.period],
    [manufacturer.identifier.assigner],
    [manufacturer.display]
FROM openrowset (
        BULK 'NutritionProduct/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [manufacturer.JSON]  VARCHAR(MAX) '$.manufacturer'
    ) AS rowset
    CROSS APPLY openjson (rowset.[manufacturer.JSON]) with (
        [manufacturer.id]              NVARCHAR(100)       '$.id',
        [manufacturer.extension]       NVARCHAR(MAX)       '$.extension',
        [manufacturer.reference]       NVARCHAR(4000)      '$.reference',
        [manufacturer.type]            VARCHAR(256)        '$.type',
        [manufacturer.identifier.id]   NVARCHAR(100)       '$.identifier.id',
        [manufacturer.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [manufacturer.identifier.use]  NVARCHAR(64)        '$.identifier.use',
        [manufacturer.identifier.type] NVARCHAR(MAX)       '$.identifier.type',
        [manufacturer.identifier.system] VARCHAR(256)        '$.identifier.system',
        [manufacturer.identifier.value] NVARCHAR(4000)      '$.identifier.value',
        [manufacturer.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [manufacturer.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [manufacturer.display]         NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.NutritionProductNutrient AS
SELECT
    [id],
    [nutrient.JSON],
    [nutrient.id],
    [nutrient.extension],
    [nutrient.modifierExtension],
    [nutrient.item.id],
    [nutrient.item.extension],
    [nutrient.item.concept],
    [nutrient.item.reference],
    [nutrient.amount]
FROM openrowset (
        BULK 'NutritionProduct/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [nutrient.JSON]  VARCHAR(MAX) '$.nutrient'
    ) AS rowset
    CROSS APPLY openjson (rowset.[nutrient.JSON]) with (
        [nutrient.id]                  NVARCHAR(100)       '$.id',
        [nutrient.extension]           NVARCHAR(MAX)       '$.extension',
        [nutrient.modifierExtension]   NVARCHAR(MAX)       '$.modifierExtension',
        [nutrient.item.id]             NVARCHAR(100)       '$.item.id',
        [nutrient.item.extension]      NVARCHAR(MAX)       '$.item.extension',
        [nutrient.item.concept]        NVARCHAR(MAX)       '$.item.concept',
        [nutrient.item.reference]      NVARCHAR(MAX)       '$.item.reference',
        [nutrient.amount]              NVARCHAR(MAX)       '$.amount' AS JSON
    ) j

GO

CREATE VIEW fhir.NutritionProductIngredient AS
SELECT
    [id],
    [ingredient.JSON],
    [ingredient.id],
    [ingredient.extension],
    [ingredient.modifierExtension],
    [ingredient.item.id],
    [ingredient.item.extension],
    [ingredient.item.concept],
    [ingredient.item.reference],
    [ingredient.amount]
FROM openrowset (
        BULK 'NutritionProduct/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [ingredient.JSON]  VARCHAR(MAX) '$.ingredient'
    ) AS rowset
    CROSS APPLY openjson (rowset.[ingredient.JSON]) with (
        [ingredient.id]                NVARCHAR(100)       '$.id',
        [ingredient.extension]         NVARCHAR(MAX)       '$.extension',
        [ingredient.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [ingredient.item.id]           NVARCHAR(100)       '$.item.id',
        [ingredient.item.extension]    NVARCHAR(MAX)       '$.item.extension',
        [ingredient.item.concept]      NVARCHAR(MAX)       '$.item.concept',
        [ingredient.item.reference]    NVARCHAR(MAX)       '$.item.reference',
        [ingredient.amount]            NVARCHAR(MAX)       '$.amount' AS JSON
    ) j

GO

CREATE VIEW fhir.NutritionProductKnownAllergen AS
SELECT
    [id],
    [knownAllergen.JSON],
    [knownAllergen.id],
    [knownAllergen.extension],
    [knownAllergen.concept.id],
    [knownAllergen.concept.extension],
    [knownAllergen.concept.coding],
    [knownAllergen.concept.text],
    [knownAllergen.reference.id],
    [knownAllergen.reference.extension],
    [knownAllergen.reference.reference],
    [knownAllergen.reference.type],
    [knownAllergen.reference.identifier],
    [knownAllergen.reference.display]
FROM openrowset (
        BULK 'NutritionProduct/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [knownAllergen.JSON]  VARCHAR(MAX) '$.knownAllergen'
    ) AS rowset
    CROSS APPLY openjson (rowset.[knownAllergen.JSON]) with (
        [knownAllergen.id]             NVARCHAR(100)       '$.id',
        [knownAllergen.extension]      NVARCHAR(MAX)       '$.extension',
        [knownAllergen.concept.id]     NVARCHAR(100)       '$.concept.id',
        [knownAllergen.concept.extension] NVARCHAR(MAX)       '$.concept.extension',
        [knownAllergen.concept.coding] NVARCHAR(MAX)       '$.concept.coding',
        [knownAllergen.concept.text]   NVARCHAR(4000)      '$.concept.text',
        [knownAllergen.reference.id]   NVARCHAR(100)       '$.reference.id',
        [knownAllergen.reference.extension] NVARCHAR(MAX)       '$.reference.extension',
        [knownAllergen.reference.reference] NVARCHAR(4000)      '$.reference.reference',
        [knownAllergen.reference.type] VARCHAR(256)        '$.reference.type',
        [knownAllergen.reference.identifier] NVARCHAR(MAX)       '$.reference.identifier',
        [knownAllergen.reference.display] NVARCHAR(4000)      '$.reference.display'
    ) j

GO

CREATE VIEW fhir.NutritionProductProductCharacteristic AS
SELECT
    [id],
    [productCharacteristic.JSON],
    [productCharacteristic.id],
    [productCharacteristic.extension],
    [productCharacteristic.modifierExtension],
    [productCharacteristic.type.id],
    [productCharacteristic.type.extension],
    [productCharacteristic.type.coding],
    [productCharacteristic.type.text],
    [productCharacteristic.valueQuantity.id],
    [productCharacteristic.valueQuantity.extension],
    [productCharacteristic.valueQuantity.value],
    [productCharacteristic.valueQuantity.comparator],
    [productCharacteristic.valueQuantity.unit],
    [productCharacteristic.valueQuantity.system],
    [productCharacteristic.valueQuantity.code],
    [productCharacteristic.value.codeableConcept.id],
    [productCharacteristic.value.codeableConcept.extension],
    [productCharacteristic.value.codeableConcept.coding],
    [productCharacteristic.value.codeableConcept.text],
    [productCharacteristic.value.string],
    [productCharacteristic.value.quantity.id],
    [productCharacteristic.value.quantity.extension],
    [productCharacteristic.value.quantity.value],
    [productCharacteristic.value.quantity.comparator],
    [productCharacteristic.value.quantity.unit],
    [productCharacteristic.value.quantity.system],
    [productCharacteristic.value.quantity.code],
    [productCharacteristic.value.base64Binary],
    [productCharacteristic.value.attachment.id],
    [productCharacteristic.value.attachment.extension],
    [productCharacteristic.value.attachment.contentType],
    [productCharacteristic.value.attachment.language],
    [productCharacteristic.value.attachment.data],
    [productCharacteristic.value.attachment.url],
    [productCharacteristic.value.attachment.size],
    [productCharacteristic.value.attachment.hash],
    [productCharacteristic.value.attachment.title],
    [productCharacteristic.value.attachment.creation],
    [productCharacteristic.value.attachment.height],
    [productCharacteristic.value.attachment.width],
    [productCharacteristic.value.attachment.frames],
    [productCharacteristic.value.attachment.duration],
    [productCharacteristic.value.attachment.pages],
    [productCharacteristic.value.boolean]
FROM openrowset (
        BULK 'NutritionProduct/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [productCharacteristic.JSON]  VARCHAR(MAX) '$.productCharacteristic'
    ) AS rowset
    CROSS APPLY openjson (rowset.[productCharacteristic.JSON]) with (
        [productCharacteristic.id]     NVARCHAR(100)       '$.id',
        [productCharacteristic.extension] NVARCHAR(MAX)       '$.extension',
        [productCharacteristic.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [productCharacteristic.type.id] NVARCHAR(100)       '$.type.id',
        [productCharacteristic.type.extension] NVARCHAR(MAX)       '$.type.extension',
        [productCharacteristic.type.coding] NVARCHAR(MAX)       '$.type.coding',
        [productCharacteristic.type.text] NVARCHAR(4000)      '$.type.text',
        [productCharacteristic.valueQuantity.id] NVARCHAR(100)       '$.valueQuantity.id',
        [productCharacteristic.valueQuantity.extension] NVARCHAR(MAX)       '$.valueQuantity.extension',
        [productCharacteristic.valueQuantity.value] float               '$.valueQuantity.value',
        [productCharacteristic.valueQuantity.comparator] NVARCHAR(64)        '$.valueQuantity.comparator',
        [productCharacteristic.valueQuantity.unit] NVARCHAR(100)       '$.valueQuantity.unit',
        [productCharacteristic.valueQuantity.system] VARCHAR(256)        '$.valueQuantity.system',
        [productCharacteristic.valueQuantity.code] NVARCHAR(4000)      '$.valueQuantity.code',
        [productCharacteristic.value.codeableConcept.id] NVARCHAR(100)       '$.value.codeableConcept.id',
        [productCharacteristic.value.codeableConcept.extension] NVARCHAR(MAX)       '$.value.codeableConcept.extension',
        [productCharacteristic.value.codeableConcept.coding] NVARCHAR(MAX)       '$.value.codeableConcept.coding',
        [productCharacteristic.value.codeableConcept.text] NVARCHAR(4000)      '$.value.codeableConcept.text',
        [productCharacteristic.value.string] NVARCHAR(4000)      '$.value.string',
        [productCharacteristic.value.quantity.id] NVARCHAR(100)       '$.value.quantity.id',
        [productCharacteristic.value.quantity.extension] NVARCHAR(MAX)       '$.value.quantity.extension',
        [productCharacteristic.value.quantity.value] float               '$.value.quantity.value',
        [productCharacteristic.value.quantity.comparator] NVARCHAR(64)        '$.value.quantity.comparator',
        [productCharacteristic.value.quantity.unit] NVARCHAR(100)       '$.value.quantity.unit',
        [productCharacteristic.value.quantity.system] VARCHAR(256)        '$.value.quantity.system',
        [productCharacteristic.value.quantity.code] NVARCHAR(4000)      '$.value.quantity.code',
        [productCharacteristic.value.base64Binary] NVARCHAR(MAX)       '$.value.base64Binary',
        [productCharacteristic.value.attachment.id] NVARCHAR(100)       '$.value.attachment.id',
        [productCharacteristic.value.attachment.extension] NVARCHAR(MAX)       '$.value.attachment.extension',
        [productCharacteristic.value.attachment.contentType] NVARCHAR(100)       '$.value.attachment.contentType',
        [productCharacteristic.value.attachment.language] NVARCHAR(100)       '$.value.attachment.language',
        [productCharacteristic.value.attachment.data] NVARCHAR(MAX)       '$.value.attachment.data',
        [productCharacteristic.value.attachment.url] VARCHAR(256)        '$.value.attachment.url',
        [productCharacteristic.value.attachment.size] NVARCHAR(MAX)       '$.value.attachment.size',
        [productCharacteristic.value.attachment.hash] NVARCHAR(MAX)       '$.value.attachment.hash',
        [productCharacteristic.value.attachment.title] NVARCHAR(4000)      '$.value.attachment.title',
        [productCharacteristic.value.attachment.creation] VARCHAR(64)         '$.value.attachment.creation',
        [productCharacteristic.value.attachment.height] bigint              '$.value.attachment.height',
        [productCharacteristic.value.attachment.width] bigint              '$.value.attachment.width',
        [productCharacteristic.value.attachment.frames] bigint              '$.value.attachment.frames',
        [productCharacteristic.value.attachment.duration] float               '$.value.attachment.duration',
        [productCharacteristic.value.attachment.pages] bigint              '$.value.attachment.pages',
        [productCharacteristic.value.boolean] bit                 '$.value.boolean'
    ) j

GO

CREATE VIEW fhir.NutritionProductNote AS
SELECT
    [id],
    [note.JSON],
    [note.id],
    [note.extension],
    [note.time],
    [note.text],
    [note.author.reference.id],
    [note.author.reference.extension],
    [note.author.reference.reference],
    [note.author.reference.type],
    [note.author.reference.identifier],
    [note.author.reference.display],
    [note.author.string]
FROM openrowset (
        BULK 'NutritionProduct/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [note.JSON]  VARCHAR(MAX) '$.note'
    ) AS rowset
    CROSS APPLY openjson (rowset.[note.JSON]) with (
        [note.id]                      NVARCHAR(100)       '$.id',
        [note.extension]               NVARCHAR(MAX)       '$.extension',
        [note.time]                    VARCHAR(64)         '$.time',
        [note.text]                    NVARCHAR(MAX)       '$.text',
        [note.author.reference.id]     NVARCHAR(100)       '$.author.reference.id',
        [note.author.reference.extension] NVARCHAR(MAX)       '$.author.reference.extension',
        [note.author.reference.reference] NVARCHAR(4000)      '$.author.reference.reference',
        [note.author.reference.type]   VARCHAR(256)        '$.author.reference.type',
        [note.author.reference.identifier] NVARCHAR(MAX)       '$.author.reference.identifier',
        [note.author.reference.display] NVARCHAR(4000)      '$.author.reference.display',
        [note.author.string]           NVARCHAR(4000)      '$.author.string'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[Observation] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [basedOn] VARCHAR(MAX),
    [partOf] VARCHAR(MAX),
    [status] NVARCHAR(100),
    [category] VARCHAR(MAX),
    [code.id] NVARCHAR(100),
    [code.extension] NVARCHAR(MAX),
    [code.coding] VARCHAR(MAX),
    [code.text] NVARCHAR(4000),
    [subject.id] NVARCHAR(100),
    [subject.extension] NVARCHAR(MAX),
    [subject.reference] NVARCHAR(4000),
    [subject.type] VARCHAR(256),
    [subject.identifier.id] NVARCHAR(100),
    [subject.identifier.extension] NVARCHAR(MAX),
    [subject.identifier.use] NVARCHAR(64),
    [subject.identifier.type] NVARCHAR(MAX),
    [subject.identifier.system] VARCHAR(256),
    [subject.identifier.value] NVARCHAR(4000),
    [subject.identifier.period] NVARCHAR(MAX),
    [subject.identifier.assigner] NVARCHAR(MAX),
    [subject.display] NVARCHAR(4000),
    [focus] VARCHAR(MAX),
    [encounter.id] NVARCHAR(100),
    [encounter.extension] NVARCHAR(MAX),
    [encounter.reference] NVARCHAR(4000),
    [encounter.type] VARCHAR(256),
    [encounter.identifier.id] NVARCHAR(100),
    [encounter.identifier.extension] NVARCHAR(MAX),
    [encounter.identifier.use] NVARCHAR(64),
    [encounter.identifier.type] NVARCHAR(MAX),
    [encounter.identifier.system] VARCHAR(256),
    [encounter.identifier.value] NVARCHAR(4000),
    [encounter.identifier.period] NVARCHAR(MAX),
    [encounter.identifier.assigner] NVARCHAR(MAX),
    [encounter.display] NVARCHAR(4000),
    [issued] VARCHAR(64),
    [performer] VARCHAR(MAX),
    [dataAbsentReason.id] NVARCHAR(100),
    [dataAbsentReason.extension] NVARCHAR(MAX),
    [dataAbsentReason.coding] VARCHAR(MAX),
    [dataAbsentReason.text] NVARCHAR(4000),
    [interpretation] VARCHAR(MAX),
    [note] VARCHAR(MAX),
    [bodySite.id] NVARCHAR(100),
    [bodySite.extension] NVARCHAR(MAX),
    [bodySite.coding] VARCHAR(MAX),
    [bodySite.text] NVARCHAR(4000),
    [method.id] NVARCHAR(100),
    [method.extension] NVARCHAR(MAX),
    [method.coding] VARCHAR(MAX),
    [method.text] NVARCHAR(4000),
    [specimen.id] NVARCHAR(100),
    [specimen.extension] NVARCHAR(MAX),
    [specimen.reference] NVARCHAR(4000),
    [specimen.type] VARCHAR(256),
    [specimen.identifier.id] NVARCHAR(100),
    [specimen.identifier.extension] NVARCHAR(MAX),
    [specimen.identifier.use] NVARCHAR(64),
    [specimen.identifier.type] NVARCHAR(MAX),
    [specimen.identifier.system] VARCHAR(256),
    [specimen.identifier.value] NVARCHAR(4000),
    [specimen.identifier.period] NVARCHAR(MAX),
    [specimen.identifier.assigner] NVARCHAR(MAX),
    [specimen.display] NVARCHAR(4000),
    [device.id] NVARCHAR(100),
    [device.extension] NVARCHAR(MAX),
    [device.reference] NVARCHAR(4000),
    [device.type] VARCHAR(256),
    [device.identifier.id] NVARCHAR(100),
    [device.identifier.extension] NVARCHAR(MAX),
    [device.identifier.use] NVARCHAR(64),
    [device.identifier.type] NVARCHAR(MAX),
    [device.identifier.system] VARCHAR(256),
    [device.identifier.value] NVARCHAR(4000),
    [device.identifier.period] NVARCHAR(MAX),
    [device.identifier.assigner] NVARCHAR(MAX),
    [device.display] NVARCHAR(4000),
    [referenceRange] VARCHAR(MAX),
    [hasMember] VARCHAR(MAX),
    [derivedFrom] VARCHAR(MAX),
    [component] VARCHAR(MAX),
    [instantiates.canonical] VARCHAR(256),
    [instantiates.reference.id] NVARCHAR(100),
    [instantiates.reference.extension] NVARCHAR(MAX),
    [instantiates.reference.reference] NVARCHAR(4000),
    [instantiates.reference.type] VARCHAR(256),
    [instantiates.reference.identifier.id] NVARCHAR(100),
    [instantiates.reference.identifier.extension] NVARCHAR(MAX),
    [instantiates.reference.identifier.use] NVARCHAR(64),
    [instantiates.reference.identifier.type] NVARCHAR(MAX),
    [instantiates.reference.identifier.system] VARCHAR(256),
    [instantiates.reference.identifier.value] NVARCHAR(4000),
    [instantiates.reference.identifier.period] NVARCHAR(MAX),
    [instantiates.reference.identifier.assigner] NVARCHAR(MAX),
    [instantiates.reference.display] NVARCHAR(4000),
    [effective.dateTime] VARCHAR(64),
    [effective.period.id] NVARCHAR(100),
    [effective.period.extension] NVARCHAR(MAX),
    [effective.period.start] VARCHAR(64),
    [effective.period.end] VARCHAR(64),
    [effective.timing.id] NVARCHAR(100),
    [effective.timing.extension] NVARCHAR(MAX),
    [effective.timing.modifierExtension] NVARCHAR(MAX),
    [effective.timing.event] VARCHAR(MAX),
    [effective.timing.repeat.id] NVARCHAR(100),
    [effective.timing.repeat.extension] NVARCHAR(MAX),
    [effective.timing.repeat.modifierExtension] NVARCHAR(MAX),
    [effective.timing.repeat.count] bigint,
    [effective.timing.repeat.countMax] bigint,
    [effective.timing.repeat.duration] float,
    [effective.timing.repeat.durationMax] float,
    [effective.timing.repeat.durationUnit] NVARCHAR(64),
    [effective.timing.repeat.frequency] bigint,
    [effective.timing.repeat.frequencyMax] bigint,
    [effective.timing.repeat.period] float,
    [effective.timing.repeat.periodMax] float,
    [effective.timing.repeat.periodUnit] NVARCHAR(64),
    [effective.timing.repeat.dayOfWeek] NVARCHAR(MAX),
    [effective.timing.repeat.timeOfDay] NVARCHAR(MAX),
    [effective.timing.repeat.when] NVARCHAR(MAX),
    [effective.timing.repeat.offset] bigint,
    [effective.timing.repeat.bounds.duration] NVARCHAR(MAX),
    [effective.timing.repeat.bounds.range] NVARCHAR(MAX),
    [effective.timing.repeat.bounds.period] NVARCHAR(MAX),
    [effective.timing.code.id] NVARCHAR(100),
    [effective.timing.code.extension] NVARCHAR(MAX),
    [effective.timing.code.coding] NVARCHAR(MAX),
    [effective.timing.code.text] NVARCHAR(4000),
    [effective.instant] VARCHAR(64),
    [value.quantity.id] NVARCHAR(100),
    [value.quantity.extension] NVARCHAR(MAX),
    [value.quantity.value] float,
    [value.quantity.comparator] NVARCHAR(64),
    [value.quantity.unit] NVARCHAR(100),
    [value.quantity.system] VARCHAR(256),
    [value.quantity.code] NVARCHAR(4000),
    [value.codeableConcept.id] NVARCHAR(100),
    [value.codeableConcept.extension] NVARCHAR(MAX),
    [value.codeableConcept.coding] VARCHAR(MAX),
    [value.codeableConcept.text] NVARCHAR(4000),
    [value.string] NVARCHAR(4000),
    [value.boolean] bit,
    [value.integer] bigint,
    [value.range.id] NVARCHAR(100),
    [value.range.extension] NVARCHAR(MAX),
    [value.range.low.id] NVARCHAR(100),
    [value.range.low.extension] NVARCHAR(MAX),
    [value.range.low.value] float,
    [value.range.low.comparator] NVARCHAR(64),
    [value.range.low.unit] NVARCHAR(100),
    [value.range.low.system] VARCHAR(256),
    [value.range.low.code] NVARCHAR(4000),
    [value.range.high.id] NVARCHAR(100),
    [value.range.high.extension] NVARCHAR(MAX),
    [value.range.high.value] float,
    [value.range.high.comparator] NVARCHAR(64),
    [value.range.high.unit] NVARCHAR(100),
    [value.range.high.system] VARCHAR(256),
    [value.range.high.code] NVARCHAR(4000),
    [value.ratio.id] NVARCHAR(100),
    [value.ratio.extension] NVARCHAR(MAX),
    [value.ratio.numerator.id] NVARCHAR(100),
    [value.ratio.numerator.extension] NVARCHAR(MAX),
    [value.ratio.numerator.value] float,
    [value.ratio.numerator.comparator] NVARCHAR(64),
    [value.ratio.numerator.unit] NVARCHAR(100),
    [value.ratio.numerator.system] VARCHAR(256),
    [value.ratio.numerator.code] NVARCHAR(4000),
    [value.ratio.denominator.id] NVARCHAR(100),
    [value.ratio.denominator.extension] NVARCHAR(MAX),
    [value.ratio.denominator.value] float,
    [value.ratio.denominator.comparator] NVARCHAR(64),
    [value.ratio.denominator.unit] NVARCHAR(100),
    [value.ratio.denominator.system] VARCHAR(256),
    [value.ratio.denominator.code] NVARCHAR(4000),
    [value.sampledData.id] NVARCHAR(100),
    [value.sampledData.extension] NVARCHAR(MAX),
    [value.sampledData.origin.id] NVARCHAR(100),
    [value.sampledData.origin.extension] NVARCHAR(MAX),
    [value.sampledData.origin.value] float,
    [value.sampledData.origin.comparator] NVARCHAR(64),
    [value.sampledData.origin.unit] NVARCHAR(100),
    [value.sampledData.origin.system] VARCHAR(256),
    [value.sampledData.origin.code] NVARCHAR(4000),
    [value.sampledData.period] float,
    [value.sampledData.factor] float,
    [value.sampledData.lowerLimit] float,
    [value.sampledData.upperLimit] float,
    [value.sampledData.dimensions] bigint,
    [value.sampledData.data] NVARCHAR(4000),
    [value.time] NVARCHAR(MAX),
    [value.dateTime] VARCHAR(64),
    [value.period.id] NVARCHAR(100),
    [value.period.extension] NVARCHAR(MAX),
    [value.period.start] VARCHAR(64),
    [value.period.end] VARCHAR(64),
    [value.attachment.id] NVARCHAR(100),
    [value.attachment.extension] NVARCHAR(MAX),
    [value.attachment.contentType] NVARCHAR(100),
    [value.attachment.language] NVARCHAR(100),
    [value.attachment.data] NVARCHAR(MAX),
    [value.attachment.url] VARCHAR(256),
    [value.attachment.size] NVARCHAR(MAX),
    [value.attachment.hash] NVARCHAR(MAX),
    [value.attachment.title] NVARCHAR(4000),
    [value.attachment.creation] VARCHAR(64),
    [value.attachment.height] bigint,
    [value.attachment.width] bigint,
    [value.attachment.frames] bigint,
    [value.attachment.duration] float,
    [value.attachment.pages] bigint,
) WITH (
    LOCATION='/Observation/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.ObservationIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'Observation/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.ObservationBasedOn AS
SELECT
    [id],
    [basedOn.JSON],
    [basedOn.id],
    [basedOn.extension],
    [basedOn.reference],
    [basedOn.type],
    [basedOn.identifier.id],
    [basedOn.identifier.extension],
    [basedOn.identifier.use],
    [basedOn.identifier.type],
    [basedOn.identifier.system],
    [basedOn.identifier.value],
    [basedOn.identifier.period],
    [basedOn.identifier.assigner],
    [basedOn.display]
FROM openrowset (
        BULK 'Observation/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [basedOn.JSON]  VARCHAR(MAX) '$.basedOn'
    ) AS rowset
    CROSS APPLY openjson (rowset.[basedOn.JSON]) with (
        [basedOn.id]                   NVARCHAR(100)       '$.id',
        [basedOn.extension]            NVARCHAR(MAX)       '$.extension',
        [basedOn.reference]            NVARCHAR(4000)      '$.reference',
        [basedOn.type]                 VARCHAR(256)        '$.type',
        [basedOn.identifier.id]        NVARCHAR(100)       '$.identifier.id',
        [basedOn.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [basedOn.identifier.use]       NVARCHAR(64)        '$.identifier.use',
        [basedOn.identifier.type]      NVARCHAR(MAX)       '$.identifier.type',
        [basedOn.identifier.system]    VARCHAR(256)        '$.identifier.system',
        [basedOn.identifier.value]     NVARCHAR(4000)      '$.identifier.value',
        [basedOn.identifier.period]    NVARCHAR(MAX)       '$.identifier.period',
        [basedOn.identifier.assigner]  NVARCHAR(MAX)       '$.identifier.assigner',
        [basedOn.display]              NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.ObservationPartOf AS
SELECT
    [id],
    [partOf.JSON],
    [partOf.id],
    [partOf.extension],
    [partOf.reference],
    [partOf.type],
    [partOf.identifier.id],
    [partOf.identifier.extension],
    [partOf.identifier.use],
    [partOf.identifier.type],
    [partOf.identifier.system],
    [partOf.identifier.value],
    [partOf.identifier.period],
    [partOf.identifier.assigner],
    [partOf.display]
FROM openrowset (
        BULK 'Observation/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [partOf.JSON]  VARCHAR(MAX) '$.partOf'
    ) AS rowset
    CROSS APPLY openjson (rowset.[partOf.JSON]) with (
        [partOf.id]                    NVARCHAR(100)       '$.id',
        [partOf.extension]             NVARCHAR(MAX)       '$.extension',
        [partOf.reference]             NVARCHAR(4000)      '$.reference',
        [partOf.type]                  VARCHAR(256)        '$.type',
        [partOf.identifier.id]         NVARCHAR(100)       '$.identifier.id',
        [partOf.identifier.extension]  NVARCHAR(MAX)       '$.identifier.extension',
        [partOf.identifier.use]        NVARCHAR(64)        '$.identifier.use',
        [partOf.identifier.type]       NVARCHAR(MAX)       '$.identifier.type',
        [partOf.identifier.system]     VARCHAR(256)        '$.identifier.system',
        [partOf.identifier.value]      NVARCHAR(4000)      '$.identifier.value',
        [partOf.identifier.period]     NVARCHAR(MAX)       '$.identifier.period',
        [partOf.identifier.assigner]   NVARCHAR(MAX)       '$.identifier.assigner',
        [partOf.display]               NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.ObservationCategory AS
SELECT
    [id],
    [category.JSON],
    [category.id],
    [category.extension],
    [category.coding],
    [category.text]
FROM openrowset (
        BULK 'Observation/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [category.JSON]  VARCHAR(MAX) '$.category'
    ) AS rowset
    CROSS APPLY openjson (rowset.[category.JSON]) with (
        [category.id]                  NVARCHAR(100)       '$.id',
        [category.extension]           NVARCHAR(MAX)       '$.extension',
        [category.coding]              NVARCHAR(MAX)       '$.coding' AS JSON,
        [category.text]                NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.ObservationFocus AS
SELECT
    [id],
    [focus.JSON],
    [focus.id],
    [focus.extension],
    [focus.reference],
    [focus.type],
    [focus.identifier.id],
    [focus.identifier.extension],
    [focus.identifier.use],
    [focus.identifier.type],
    [focus.identifier.system],
    [focus.identifier.value],
    [focus.identifier.period],
    [focus.identifier.assigner],
    [focus.display]
FROM openrowset (
        BULK 'Observation/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [focus.JSON]  VARCHAR(MAX) '$.focus'
    ) AS rowset
    CROSS APPLY openjson (rowset.[focus.JSON]) with (
        [focus.id]                     NVARCHAR(100)       '$.id',
        [focus.extension]              NVARCHAR(MAX)       '$.extension',
        [focus.reference]              NVARCHAR(4000)      '$.reference',
        [focus.type]                   VARCHAR(256)        '$.type',
        [focus.identifier.id]          NVARCHAR(100)       '$.identifier.id',
        [focus.identifier.extension]   NVARCHAR(MAX)       '$.identifier.extension',
        [focus.identifier.use]         NVARCHAR(64)        '$.identifier.use',
        [focus.identifier.type]        NVARCHAR(MAX)       '$.identifier.type',
        [focus.identifier.system]      VARCHAR(256)        '$.identifier.system',
        [focus.identifier.value]       NVARCHAR(4000)      '$.identifier.value',
        [focus.identifier.period]      NVARCHAR(MAX)       '$.identifier.period',
        [focus.identifier.assigner]    NVARCHAR(MAX)       '$.identifier.assigner',
        [focus.display]                NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.ObservationPerformer AS
SELECT
    [id],
    [performer.JSON],
    [performer.id],
    [performer.extension],
    [performer.reference],
    [performer.type],
    [performer.identifier.id],
    [performer.identifier.extension],
    [performer.identifier.use],
    [performer.identifier.type],
    [performer.identifier.system],
    [performer.identifier.value],
    [performer.identifier.period],
    [performer.identifier.assigner],
    [performer.display]
FROM openrowset (
        BULK 'Observation/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [performer.JSON]  VARCHAR(MAX) '$.performer'
    ) AS rowset
    CROSS APPLY openjson (rowset.[performer.JSON]) with (
        [performer.id]                 NVARCHAR(100)       '$.id',
        [performer.extension]          NVARCHAR(MAX)       '$.extension',
        [performer.reference]          NVARCHAR(4000)      '$.reference',
        [performer.type]               VARCHAR(256)        '$.type',
        [performer.identifier.id]      NVARCHAR(100)       '$.identifier.id',
        [performer.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [performer.identifier.use]     NVARCHAR(64)        '$.identifier.use',
        [performer.identifier.type]    NVARCHAR(MAX)       '$.identifier.type',
        [performer.identifier.system]  VARCHAR(256)        '$.identifier.system',
        [performer.identifier.value]   NVARCHAR(4000)      '$.identifier.value',
        [performer.identifier.period]  NVARCHAR(MAX)       '$.identifier.period',
        [performer.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [performer.display]            NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.ObservationInterpretation AS
SELECT
    [id],
    [interpretation.JSON],
    [interpretation.id],
    [interpretation.extension],
    [interpretation.coding],
    [interpretation.text]
FROM openrowset (
        BULK 'Observation/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [interpretation.JSON]  VARCHAR(MAX) '$.interpretation'
    ) AS rowset
    CROSS APPLY openjson (rowset.[interpretation.JSON]) with (
        [interpretation.id]            NVARCHAR(100)       '$.id',
        [interpretation.extension]     NVARCHAR(MAX)       '$.extension',
        [interpretation.coding]        NVARCHAR(MAX)       '$.coding' AS JSON,
        [interpretation.text]          NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.ObservationNote AS
SELECT
    [id],
    [note.JSON],
    [note.id],
    [note.extension],
    [note.time],
    [note.text],
    [note.author.reference.id],
    [note.author.reference.extension],
    [note.author.reference.reference],
    [note.author.reference.type],
    [note.author.reference.identifier],
    [note.author.reference.display],
    [note.author.string]
FROM openrowset (
        BULK 'Observation/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [note.JSON]  VARCHAR(MAX) '$.note'
    ) AS rowset
    CROSS APPLY openjson (rowset.[note.JSON]) with (
        [note.id]                      NVARCHAR(100)       '$.id',
        [note.extension]               NVARCHAR(MAX)       '$.extension',
        [note.time]                    VARCHAR(64)         '$.time',
        [note.text]                    NVARCHAR(MAX)       '$.text',
        [note.author.reference.id]     NVARCHAR(100)       '$.author.reference.id',
        [note.author.reference.extension] NVARCHAR(MAX)       '$.author.reference.extension',
        [note.author.reference.reference] NVARCHAR(4000)      '$.author.reference.reference',
        [note.author.reference.type]   VARCHAR(256)        '$.author.reference.type',
        [note.author.reference.identifier] NVARCHAR(MAX)       '$.author.reference.identifier',
        [note.author.reference.display] NVARCHAR(4000)      '$.author.reference.display',
        [note.author.string]           NVARCHAR(4000)      '$.author.string'
    ) j

GO

CREATE VIEW fhir.ObservationReferenceRange AS
SELECT
    [id],
    [referenceRange.JSON],
    [referenceRange.id],
    [referenceRange.extension],
    [referenceRange.modifierExtension],
    [referenceRange.low.id],
    [referenceRange.low.extension],
    [referenceRange.low.value],
    [referenceRange.low.comparator],
    [referenceRange.low.unit],
    [referenceRange.low.system],
    [referenceRange.low.code],
    [referenceRange.high.id],
    [referenceRange.high.extension],
    [referenceRange.high.value],
    [referenceRange.high.comparator],
    [referenceRange.high.unit],
    [referenceRange.high.system],
    [referenceRange.high.code],
    [referenceRange.type.id],
    [referenceRange.type.extension],
    [referenceRange.type.coding],
    [referenceRange.type.text],
    [referenceRange.appliesTo],
    [referenceRange.age.id],
    [referenceRange.age.extension],
    [referenceRange.age.low],
    [referenceRange.age.high],
    [referenceRange.text]
FROM openrowset (
        BULK 'Observation/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [referenceRange.JSON]  VARCHAR(MAX) '$.referenceRange'
    ) AS rowset
    CROSS APPLY openjson (rowset.[referenceRange.JSON]) with (
        [referenceRange.id]            NVARCHAR(100)       '$.id',
        [referenceRange.extension]     NVARCHAR(MAX)       '$.extension',
        [referenceRange.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [referenceRange.low.id]        NVARCHAR(100)       '$.low.id',
        [referenceRange.low.extension] NVARCHAR(MAX)       '$.low.extension',
        [referenceRange.low.value]     float               '$.low.value',
        [referenceRange.low.comparator] NVARCHAR(64)        '$.low.comparator',
        [referenceRange.low.unit]      NVARCHAR(100)       '$.low.unit',
        [referenceRange.low.system]    VARCHAR(256)        '$.low.system',
        [referenceRange.low.code]      NVARCHAR(4000)      '$.low.code',
        [referenceRange.high.id]       NVARCHAR(100)       '$.high.id',
        [referenceRange.high.extension] NVARCHAR(MAX)       '$.high.extension',
        [referenceRange.high.value]    float               '$.high.value',
        [referenceRange.high.comparator] NVARCHAR(64)        '$.high.comparator',
        [referenceRange.high.unit]     NVARCHAR(100)       '$.high.unit',
        [referenceRange.high.system]   VARCHAR(256)        '$.high.system',
        [referenceRange.high.code]     NVARCHAR(4000)      '$.high.code',
        [referenceRange.type.id]       NVARCHAR(100)       '$.type.id',
        [referenceRange.type.extension] NVARCHAR(MAX)       '$.type.extension',
        [referenceRange.type.coding]   NVARCHAR(MAX)       '$.type.coding',
        [referenceRange.type.text]     NVARCHAR(4000)      '$.type.text',
        [referenceRange.appliesTo]     NVARCHAR(MAX)       '$.appliesTo' AS JSON,
        [referenceRange.age.id]        NVARCHAR(100)       '$.age.id',
        [referenceRange.age.extension] NVARCHAR(MAX)       '$.age.extension',
        [referenceRange.age.low]       NVARCHAR(MAX)       '$.age.low',
        [referenceRange.age.high]      NVARCHAR(MAX)       '$.age.high',
        [referenceRange.text]          NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.ObservationHasMember AS
SELECT
    [id],
    [hasMember.JSON],
    [hasMember.id],
    [hasMember.extension],
    [hasMember.reference],
    [hasMember.type],
    [hasMember.identifier.id],
    [hasMember.identifier.extension],
    [hasMember.identifier.use],
    [hasMember.identifier.type],
    [hasMember.identifier.system],
    [hasMember.identifier.value],
    [hasMember.identifier.period],
    [hasMember.identifier.assigner],
    [hasMember.display]
FROM openrowset (
        BULK 'Observation/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [hasMember.JSON]  VARCHAR(MAX) '$.hasMember'
    ) AS rowset
    CROSS APPLY openjson (rowset.[hasMember.JSON]) with (
        [hasMember.id]                 NVARCHAR(100)       '$.id',
        [hasMember.extension]          NVARCHAR(MAX)       '$.extension',
        [hasMember.reference]          NVARCHAR(4000)      '$.reference',
        [hasMember.type]               VARCHAR(256)        '$.type',
        [hasMember.identifier.id]      NVARCHAR(100)       '$.identifier.id',
        [hasMember.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [hasMember.identifier.use]     NVARCHAR(64)        '$.identifier.use',
        [hasMember.identifier.type]    NVARCHAR(MAX)       '$.identifier.type',
        [hasMember.identifier.system]  VARCHAR(256)        '$.identifier.system',
        [hasMember.identifier.value]   NVARCHAR(4000)      '$.identifier.value',
        [hasMember.identifier.period]  NVARCHAR(MAX)       '$.identifier.period',
        [hasMember.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [hasMember.display]            NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.ObservationDerivedFrom AS
SELECT
    [id],
    [derivedFrom.JSON],
    [derivedFrom.id],
    [derivedFrom.extension],
    [derivedFrom.reference],
    [derivedFrom.type],
    [derivedFrom.identifier.id],
    [derivedFrom.identifier.extension],
    [derivedFrom.identifier.use],
    [derivedFrom.identifier.type],
    [derivedFrom.identifier.system],
    [derivedFrom.identifier.value],
    [derivedFrom.identifier.period],
    [derivedFrom.identifier.assigner],
    [derivedFrom.display]
FROM openrowset (
        BULK 'Observation/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [derivedFrom.JSON]  VARCHAR(MAX) '$.derivedFrom'
    ) AS rowset
    CROSS APPLY openjson (rowset.[derivedFrom.JSON]) with (
        [derivedFrom.id]               NVARCHAR(100)       '$.id',
        [derivedFrom.extension]        NVARCHAR(MAX)       '$.extension',
        [derivedFrom.reference]        NVARCHAR(4000)      '$.reference',
        [derivedFrom.type]             VARCHAR(256)        '$.type',
        [derivedFrom.identifier.id]    NVARCHAR(100)       '$.identifier.id',
        [derivedFrom.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [derivedFrom.identifier.use]   NVARCHAR(64)        '$.identifier.use',
        [derivedFrom.identifier.type]  NVARCHAR(MAX)       '$.identifier.type',
        [derivedFrom.identifier.system] VARCHAR(256)        '$.identifier.system',
        [derivedFrom.identifier.value] NVARCHAR(4000)      '$.identifier.value',
        [derivedFrom.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [derivedFrom.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [derivedFrom.display]          NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.ObservationComponent AS
SELECT
    [id],
    [component.JSON],
    [component.id],
    [component.extension],
    [component.modifierExtension],
    [component.code.id],
    [component.code.extension],
    [component.code.coding],
    [component.code.text],
    [component.dataAbsentReason.id],
    [component.dataAbsentReason.extension],
    [component.dataAbsentReason.coding],
    [component.dataAbsentReason.text],
    [component.interpretation],
    [component.referenceRange],
    [component.value.quantity.id],
    [component.value.quantity.extension],
    [component.value.quantity.value],
    [component.value.quantity.comparator],
    [component.value.quantity.unit],
    [component.value.quantity.system],
    [component.value.quantity.code],
    [component.value.codeableConcept.id],
    [component.value.codeableConcept.extension],
    [component.value.codeableConcept.coding],
    [component.value.codeableConcept.text],
    [component.value.string],
    [component.value.boolean],
    [component.value.integer],
    [component.value.range.id],
    [component.value.range.extension],
    [component.value.range.low],
    [component.value.range.high],
    [component.value.ratio.id],
    [component.value.ratio.extension],
    [component.value.ratio.numerator],
    [component.value.ratio.denominator],
    [component.value.sampledData.id],
    [component.value.sampledData.extension],
    [component.value.sampledData.origin],
    [component.value.sampledData.period],
    [component.value.sampledData.factor],
    [component.value.sampledData.lowerLimit],
    [component.value.sampledData.upperLimit],
    [component.value.sampledData.dimensions],
    [component.value.sampledData.data],
    [component.value.time],
    [component.value.dateTime],
    [component.value.period.id],
    [component.value.period.extension],
    [component.value.period.start],
    [component.value.period.end],
    [component.value.attachment.id],
    [component.value.attachment.extension],
    [component.value.attachment.contentType],
    [component.value.attachment.language],
    [component.value.attachment.data],
    [component.value.attachment.url],
    [component.value.attachment.size],
    [component.value.attachment.hash],
    [component.value.attachment.title],
    [component.value.attachment.creation],
    [component.value.attachment.height],
    [component.value.attachment.width],
    [component.value.attachment.frames],
    [component.value.attachment.duration],
    [component.value.attachment.pages]
FROM openrowset (
        BULK 'Observation/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [component.JSON]  VARCHAR(MAX) '$.component'
    ) AS rowset
    CROSS APPLY openjson (rowset.[component.JSON]) with (
        [component.id]                 NVARCHAR(100)       '$.id',
        [component.extension]          NVARCHAR(MAX)       '$.extension',
        [component.modifierExtension]  NVARCHAR(MAX)       '$.modifierExtension',
        [component.code.id]            NVARCHAR(100)       '$.code.id',
        [component.code.extension]     NVARCHAR(MAX)       '$.code.extension',
        [component.code.coding]        NVARCHAR(MAX)       '$.code.coding',
        [component.code.text]          NVARCHAR(4000)      '$.code.text',
        [component.dataAbsentReason.id] NVARCHAR(100)       '$.dataAbsentReason.id',
        [component.dataAbsentReason.extension] NVARCHAR(MAX)       '$.dataAbsentReason.extension',
        [component.dataAbsentReason.coding] NVARCHAR(MAX)       '$.dataAbsentReason.coding',
        [component.dataAbsentReason.text] NVARCHAR(4000)      '$.dataAbsentReason.text',
        [component.interpretation]     NVARCHAR(MAX)       '$.interpretation' AS JSON,
        [component.referenceRange]     NVARCHAR(MAX)       '$.referenceRange' AS JSON,
        [component.value.quantity.id]  NVARCHAR(100)       '$.value.quantity.id',
        [component.value.quantity.extension] NVARCHAR(MAX)       '$.value.quantity.extension',
        [component.value.quantity.value] float               '$.value.quantity.value',
        [component.value.quantity.comparator] NVARCHAR(64)        '$.value.quantity.comparator',
        [component.value.quantity.unit] NVARCHAR(100)       '$.value.quantity.unit',
        [component.value.quantity.system] VARCHAR(256)        '$.value.quantity.system',
        [component.value.quantity.code] NVARCHAR(4000)      '$.value.quantity.code',
        [component.value.codeableConcept.id] NVARCHAR(100)       '$.value.codeableConcept.id',
        [component.value.codeableConcept.extension] NVARCHAR(MAX)       '$.value.codeableConcept.extension',
        [component.value.codeableConcept.coding] NVARCHAR(MAX)       '$.value.codeableConcept.coding',
        [component.value.codeableConcept.text] NVARCHAR(4000)      '$.value.codeableConcept.text',
        [component.value.string]       NVARCHAR(4000)      '$.value.string',
        [component.value.boolean]      bit                 '$.value.boolean',
        [component.value.integer]      bigint              '$.value.integer',
        [component.value.range.id]     NVARCHAR(100)       '$.value.range.id',
        [component.value.range.extension] NVARCHAR(MAX)       '$.value.range.extension',
        [component.value.range.low]    NVARCHAR(MAX)       '$.value.range.low',
        [component.value.range.high]   NVARCHAR(MAX)       '$.value.range.high',
        [component.value.ratio.id]     NVARCHAR(100)       '$.value.ratio.id',
        [component.value.ratio.extension] NVARCHAR(MAX)       '$.value.ratio.extension',
        [component.value.ratio.numerator] NVARCHAR(MAX)       '$.value.ratio.numerator',
        [component.value.ratio.denominator] NVARCHAR(MAX)       '$.value.ratio.denominator',
        [component.value.sampledData.id] NVARCHAR(100)       '$.value.sampledData.id',
        [component.value.sampledData.extension] NVARCHAR(MAX)       '$.value.sampledData.extension',
        [component.value.sampledData.origin] NVARCHAR(MAX)       '$.value.sampledData.origin',
        [component.value.sampledData.period] float               '$.value.sampledData.period',
        [component.value.sampledData.factor] float               '$.value.sampledData.factor',
        [component.value.sampledData.lowerLimit] float               '$.value.sampledData.lowerLimit',
        [component.value.sampledData.upperLimit] float               '$.value.sampledData.upperLimit',
        [component.value.sampledData.dimensions] bigint              '$.value.sampledData.dimensions',
        [component.value.sampledData.data] NVARCHAR(4000)      '$.value.sampledData.data',
        [component.value.time]         NVARCHAR(MAX)       '$.value.time',
        [component.value.dateTime]     VARCHAR(64)         '$.value.dateTime',
        [component.value.period.id]    NVARCHAR(100)       '$.value.period.id',
        [component.value.period.extension] NVARCHAR(MAX)       '$.value.period.extension',
        [component.value.period.start] VARCHAR(64)         '$.value.period.start',
        [component.value.period.end]   VARCHAR(64)         '$.value.period.end',
        [component.value.attachment.id] NVARCHAR(100)       '$.value.attachment.id',
        [component.value.attachment.extension] NVARCHAR(MAX)       '$.value.attachment.extension',
        [component.value.attachment.contentType] NVARCHAR(100)       '$.value.attachment.contentType',
        [component.value.attachment.language] NVARCHAR(100)       '$.value.attachment.language',
        [component.value.attachment.data] NVARCHAR(MAX)       '$.value.attachment.data',
        [component.value.attachment.url] VARCHAR(256)        '$.value.attachment.url',
        [component.value.attachment.size] NVARCHAR(MAX)       '$.value.attachment.size',
        [component.value.attachment.hash] NVARCHAR(MAX)       '$.value.attachment.hash',
        [component.value.attachment.title] NVARCHAR(4000)      '$.value.attachment.title',
        [component.value.attachment.creation] VARCHAR(64)         '$.value.attachment.creation',
        [component.value.attachment.height] bigint              '$.value.attachment.height',
        [component.value.attachment.width] bigint              '$.value.attachment.width',
        [component.value.attachment.frames] bigint              '$.value.attachment.frames',
        [component.value.attachment.duration] float               '$.value.attachment.duration',
        [component.value.attachment.pages] bigint              '$.value.attachment.pages'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[ObservationDefinition] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [url] VARCHAR(256),
    [identifier.id] NVARCHAR(100),
    [identifier.extension] NVARCHAR(MAX),
    [identifier.use] NVARCHAR(64),
    [identifier.type.id] NVARCHAR(100),
    [identifier.type.extension] NVARCHAR(MAX),
    [identifier.type.coding] NVARCHAR(MAX),
    [identifier.type.text] NVARCHAR(4000),
    [identifier.system] VARCHAR(256),
    [identifier.value] NVARCHAR(4000),
    [identifier.period.id] NVARCHAR(100),
    [identifier.period.extension] NVARCHAR(MAX),
    [identifier.period.start] VARCHAR(64),
    [identifier.period.end] VARCHAR(64),
    [identifier.assigner.id] NVARCHAR(100),
    [identifier.assigner.extension] NVARCHAR(MAX),
    [identifier.assigner.reference] NVARCHAR(4000),
    [identifier.assigner.type] VARCHAR(256),
    [identifier.assigner.identifier] NVARCHAR(MAX),
    [identifier.assigner.display] NVARCHAR(4000),
    [version] NVARCHAR(100),
    [name] NVARCHAR(500),
    [title] NVARCHAR(4000),
    [status] NVARCHAR(100),
    [experimental] bit,
    [date] VARCHAR(64),
    [publisher.id] NVARCHAR(100),
    [publisher.extension] NVARCHAR(MAX),
    [publisher.reference] NVARCHAR(4000),
    [publisher.type] VARCHAR(256),
    [publisher.identifier.id] NVARCHAR(100),
    [publisher.identifier.extension] NVARCHAR(MAX),
    [publisher.identifier.use] NVARCHAR(64),
    [publisher.identifier.type] NVARCHAR(MAX),
    [publisher.identifier.system] VARCHAR(256),
    [publisher.identifier.value] NVARCHAR(4000),
    [publisher.identifier.period] NVARCHAR(MAX),
    [publisher.identifier.assigner] NVARCHAR(MAX),
    [publisher.display] NVARCHAR(4000),
    [contact] VARCHAR(MAX),
    [description] NVARCHAR(MAX),
    [useContext] VARCHAR(MAX),
    [jurisdiction] VARCHAR(MAX),
    [purpose] NVARCHAR(MAX),
    [copyright] NVARCHAR(MAX),
    [approvalDate] VARCHAR(64),
    [lastReviewDate] VARCHAR(64),
    [effectivePeriod.id] NVARCHAR(100),
    [effectivePeriod.extension] NVARCHAR(MAX),
    [effectivePeriod.start] VARCHAR(64),
    [effectivePeriod.end] VARCHAR(64),
    [derivedFromCanonical] VARCHAR(MAX),
    [derivedFromUri] VARCHAR(MAX),
    [subject] VARCHAR(MAX),
    [performerType.id] NVARCHAR(100),
    [performerType.extension] NVARCHAR(MAX),
    [performerType.coding] VARCHAR(MAX),
    [performerType.text] NVARCHAR(4000),
    [category] VARCHAR(MAX),
    [code.id] NVARCHAR(100),
    [code.extension] NVARCHAR(MAX),
    [code.coding] VARCHAR(MAX),
    [code.text] NVARCHAR(4000),
    [permittedDataType] VARCHAR(MAX),
    [multipleResultsAllowed] bit,
    [bodySite.id] NVARCHAR(100),
    [bodySite.extension] NVARCHAR(MAX),
    [bodySite.coding] VARCHAR(MAX),
    [bodySite.text] NVARCHAR(4000),
    [method.id] NVARCHAR(100),
    [method.extension] NVARCHAR(MAX),
    [method.coding] VARCHAR(MAX),
    [method.text] NVARCHAR(4000),
    [specimen] VARCHAR(MAX),
    [device] VARCHAR(MAX),
    [preferredReportName] NVARCHAR(500),
    [quantitativeDetails.id] NVARCHAR(100),
    [quantitativeDetails.extension] NVARCHAR(MAX),
    [quantitativeDetails.modifierExtension] NVARCHAR(MAX),
    [quantitativeDetails.unit.id] NVARCHAR(100),
    [quantitativeDetails.unit.extension] NVARCHAR(MAX),
    [quantitativeDetails.unit.coding] NVARCHAR(MAX),
    [quantitativeDetails.unit.text] NVARCHAR(4000),
    [quantitativeDetails.customaryUnit.id] NVARCHAR(100),
    [quantitativeDetails.customaryUnit.extension] NVARCHAR(MAX),
    [quantitativeDetails.customaryUnit.coding] NVARCHAR(MAX),
    [quantitativeDetails.customaryUnit.text] NVARCHAR(4000),
    [quantitativeDetails.conversionFactor] float,
    [quantitativeDetails.decimalPrecision] bigint,
    [qualifiedValue] VARCHAR(MAX),
    [hasMember] VARCHAR(MAX),
    [component] VARCHAR(MAX),
) WITH (
    LOCATION='/ObservationDefinition/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.ObservationDefinitionContact AS
SELECT
    [id],
    [contact.JSON],
    [contact.id],
    [contact.extension],
    [contact.name],
    [contact.telecom]
FROM openrowset (
        BULK 'ObservationDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [contact.JSON]  VARCHAR(MAX) '$.contact'
    ) AS rowset
    CROSS APPLY openjson (rowset.[contact.JSON]) with (
        [contact.id]                   NVARCHAR(100)       '$.id',
        [contact.extension]            NVARCHAR(MAX)       '$.extension',
        [contact.name]                 NVARCHAR(500)       '$.name',
        [contact.telecom]              NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.ObservationDefinitionUseContext AS
SELECT
    [id],
    [useContext.JSON],
    [useContext.id],
    [useContext.extension],
    [useContext.code.id],
    [useContext.code.extension],
    [useContext.code.system],
    [useContext.code.version],
    [useContext.code.code],
    [useContext.code.display],
    [useContext.code.userSelected],
    [useContext.value.codeableConcept.id],
    [useContext.value.codeableConcept.extension],
    [useContext.value.codeableConcept.coding],
    [useContext.value.codeableConcept.text],
    [useContext.value.quantity.id],
    [useContext.value.quantity.extension],
    [useContext.value.quantity.value],
    [useContext.value.quantity.comparator],
    [useContext.value.quantity.unit],
    [useContext.value.quantity.system],
    [useContext.value.quantity.code],
    [useContext.value.range.id],
    [useContext.value.range.extension],
    [useContext.value.range.low],
    [useContext.value.range.high],
    [useContext.value.reference.id],
    [useContext.value.reference.extension],
    [useContext.value.reference.reference],
    [useContext.value.reference.type],
    [useContext.value.reference.identifier],
    [useContext.value.reference.display]
FROM openrowset (
        BULK 'ObservationDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [useContext.JSON]  VARCHAR(MAX) '$.useContext'
    ) AS rowset
    CROSS APPLY openjson (rowset.[useContext.JSON]) with (
        [useContext.id]                NVARCHAR(100)       '$.id',
        [useContext.extension]         NVARCHAR(MAX)       '$.extension',
        [useContext.code.id]           NVARCHAR(100)       '$.code.id',
        [useContext.code.extension]    NVARCHAR(MAX)       '$.code.extension',
        [useContext.code.system]       VARCHAR(256)        '$.code.system',
        [useContext.code.version]      NVARCHAR(100)       '$.code.version',
        [useContext.code.code]         NVARCHAR(4000)      '$.code.code',
        [useContext.code.display]      NVARCHAR(4000)      '$.code.display',
        [useContext.code.userSelected] bit                 '$.code.userSelected',
        [useContext.value.codeableConcept.id] NVARCHAR(100)       '$.value.codeableConcept.id',
        [useContext.value.codeableConcept.extension] NVARCHAR(MAX)       '$.value.codeableConcept.extension',
        [useContext.value.codeableConcept.coding] NVARCHAR(MAX)       '$.value.codeableConcept.coding',
        [useContext.value.codeableConcept.text] NVARCHAR(4000)      '$.value.codeableConcept.text',
        [useContext.value.quantity.id] NVARCHAR(100)       '$.value.quantity.id',
        [useContext.value.quantity.extension] NVARCHAR(MAX)       '$.value.quantity.extension',
        [useContext.value.quantity.value] float               '$.value.quantity.value',
        [useContext.value.quantity.comparator] NVARCHAR(64)        '$.value.quantity.comparator',
        [useContext.value.quantity.unit] NVARCHAR(100)       '$.value.quantity.unit',
        [useContext.value.quantity.system] VARCHAR(256)        '$.value.quantity.system',
        [useContext.value.quantity.code] NVARCHAR(4000)      '$.value.quantity.code',
        [useContext.value.range.id]    NVARCHAR(100)       '$.value.range.id',
        [useContext.value.range.extension] NVARCHAR(MAX)       '$.value.range.extension',
        [useContext.value.range.low]   NVARCHAR(MAX)       '$.value.range.low',
        [useContext.value.range.high]  NVARCHAR(MAX)       '$.value.range.high',
        [useContext.value.reference.id] NVARCHAR(100)       '$.value.reference.id',
        [useContext.value.reference.extension] NVARCHAR(MAX)       '$.value.reference.extension',
        [useContext.value.reference.reference] NVARCHAR(4000)      '$.value.reference.reference',
        [useContext.value.reference.type] VARCHAR(256)        '$.value.reference.type',
        [useContext.value.reference.identifier] NVARCHAR(MAX)       '$.value.reference.identifier',
        [useContext.value.reference.display] NVARCHAR(4000)      '$.value.reference.display'
    ) j

GO

CREATE VIEW fhir.ObservationDefinitionJurisdiction AS
SELECT
    [id],
    [jurisdiction.JSON],
    [jurisdiction.id],
    [jurisdiction.extension],
    [jurisdiction.coding],
    [jurisdiction.text]
FROM openrowset (
        BULK 'ObservationDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [jurisdiction.JSON]  VARCHAR(MAX) '$.jurisdiction'
    ) AS rowset
    CROSS APPLY openjson (rowset.[jurisdiction.JSON]) with (
        [jurisdiction.id]              NVARCHAR(100)       '$.id',
        [jurisdiction.extension]       NVARCHAR(MAX)       '$.extension',
        [jurisdiction.coding]          NVARCHAR(MAX)       '$.coding' AS JSON,
        [jurisdiction.text]            NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.ObservationDefinitionDerivedFromCanonical AS
SELECT
    [id],
    [derivedFromCanonical.JSON],
    [derivedFromCanonical]
FROM openrowset (
        BULK 'ObservationDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [derivedFromCanonical.JSON]  VARCHAR(MAX) '$.derivedFromCanonical'
    ) AS rowset
    CROSS APPLY openjson (rowset.[derivedFromCanonical.JSON]) with (
        [derivedFromCanonical]         NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.ObservationDefinitionDerivedFromUri AS
SELECT
    [id],
    [derivedFromUri.JSON],
    [derivedFromUri]
FROM openrowset (
        BULK 'ObservationDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [derivedFromUri.JSON]  VARCHAR(MAX) '$.derivedFromUri'
    ) AS rowset
    CROSS APPLY openjson (rowset.[derivedFromUri.JSON]) with (
        [derivedFromUri]               NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.ObservationDefinitionSubject AS
SELECT
    [id],
    [subject.JSON],
    [subject.id],
    [subject.extension],
    [subject.coding],
    [subject.text]
FROM openrowset (
        BULK 'ObservationDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [subject.JSON]  VARCHAR(MAX) '$.subject'
    ) AS rowset
    CROSS APPLY openjson (rowset.[subject.JSON]) with (
        [subject.id]                   NVARCHAR(100)       '$.id',
        [subject.extension]            NVARCHAR(MAX)       '$.extension',
        [subject.coding]               NVARCHAR(MAX)       '$.coding' AS JSON,
        [subject.text]                 NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.ObservationDefinitionCategory AS
SELECT
    [id],
    [category.JSON],
    [category.id],
    [category.extension],
    [category.coding],
    [category.text]
FROM openrowset (
        BULK 'ObservationDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [category.JSON]  VARCHAR(MAX) '$.category'
    ) AS rowset
    CROSS APPLY openjson (rowset.[category.JSON]) with (
        [category.id]                  NVARCHAR(100)       '$.id',
        [category.extension]           NVARCHAR(MAX)       '$.extension',
        [category.coding]              NVARCHAR(MAX)       '$.coding' AS JSON,
        [category.text]                NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.ObservationDefinitionPermittedDataType AS
SELECT
    [id],
    [permittedDataType.JSON],
    [permittedDataType]
FROM openrowset (
        BULK 'ObservationDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [permittedDataType.JSON]  VARCHAR(MAX) '$.permittedDataType'
    ) AS rowset
    CROSS APPLY openjson (rowset.[permittedDataType.JSON]) with (
        [permittedDataType]            NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.ObservationDefinitionSpecimen AS
SELECT
    [id],
    [specimen.JSON],
    [specimen.id],
    [specimen.extension],
    [specimen.reference],
    [specimen.type],
    [specimen.identifier.id],
    [specimen.identifier.extension],
    [specimen.identifier.use],
    [specimen.identifier.type],
    [specimen.identifier.system],
    [specimen.identifier.value],
    [specimen.identifier.period],
    [specimen.identifier.assigner],
    [specimen.display]
FROM openrowset (
        BULK 'ObservationDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [specimen.JSON]  VARCHAR(MAX) '$.specimen'
    ) AS rowset
    CROSS APPLY openjson (rowset.[specimen.JSON]) with (
        [specimen.id]                  NVARCHAR(100)       '$.id',
        [specimen.extension]           NVARCHAR(MAX)       '$.extension',
        [specimen.reference]           NVARCHAR(4000)      '$.reference',
        [specimen.type]                VARCHAR(256)        '$.type',
        [specimen.identifier.id]       NVARCHAR(100)       '$.identifier.id',
        [specimen.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [specimen.identifier.use]      NVARCHAR(64)        '$.identifier.use',
        [specimen.identifier.type]     NVARCHAR(MAX)       '$.identifier.type',
        [specimen.identifier.system]   VARCHAR(256)        '$.identifier.system',
        [specimen.identifier.value]    NVARCHAR(4000)      '$.identifier.value',
        [specimen.identifier.period]   NVARCHAR(MAX)       '$.identifier.period',
        [specimen.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [specimen.display]             NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.ObservationDefinitionDevice AS
SELECT
    [id],
    [device.JSON],
    [device.id],
    [device.extension],
    [device.reference],
    [device.type],
    [device.identifier.id],
    [device.identifier.extension],
    [device.identifier.use],
    [device.identifier.type],
    [device.identifier.system],
    [device.identifier.value],
    [device.identifier.period],
    [device.identifier.assigner],
    [device.display]
FROM openrowset (
        BULK 'ObservationDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [device.JSON]  VARCHAR(MAX) '$.device'
    ) AS rowset
    CROSS APPLY openjson (rowset.[device.JSON]) with (
        [device.id]                    NVARCHAR(100)       '$.id',
        [device.extension]             NVARCHAR(MAX)       '$.extension',
        [device.reference]             NVARCHAR(4000)      '$.reference',
        [device.type]                  VARCHAR(256)        '$.type',
        [device.identifier.id]         NVARCHAR(100)       '$.identifier.id',
        [device.identifier.extension]  NVARCHAR(MAX)       '$.identifier.extension',
        [device.identifier.use]        NVARCHAR(64)        '$.identifier.use',
        [device.identifier.type]       NVARCHAR(MAX)       '$.identifier.type',
        [device.identifier.system]     VARCHAR(256)        '$.identifier.system',
        [device.identifier.value]      NVARCHAR(4000)      '$.identifier.value',
        [device.identifier.period]     NVARCHAR(MAX)       '$.identifier.period',
        [device.identifier.assigner]   NVARCHAR(MAX)       '$.identifier.assigner',
        [device.display]               NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.ObservationDefinitionQualifiedValue AS
SELECT
    [id],
    [qualifiedValue.JSON],
    [qualifiedValue.id],
    [qualifiedValue.extension],
    [qualifiedValue.modifierExtension],
    [qualifiedValue.context.id],
    [qualifiedValue.context.extension],
    [qualifiedValue.context.coding],
    [qualifiedValue.context.text],
    [qualifiedValue.appliesTo],
    [qualifiedValue.gender],
    [qualifiedValue.age.id],
    [qualifiedValue.age.extension],
    [qualifiedValue.age.low],
    [qualifiedValue.age.high],
    [qualifiedValue.gestationalAge.id],
    [qualifiedValue.gestationalAge.extension],
    [qualifiedValue.gestationalAge.low],
    [qualifiedValue.gestationalAge.high],
    [qualifiedValue.condition],
    [qualifiedValue.rangeCategory],
    [qualifiedValue.range.id],
    [qualifiedValue.range.extension],
    [qualifiedValue.range.low],
    [qualifiedValue.range.high],
    [qualifiedValue.validCodedValueSet],
    [qualifiedValue.normalCodedValueSet],
    [qualifiedValue.abnormalCodedValueSet],
    [qualifiedValue.criticalCodedValueSet]
FROM openrowset (
        BULK 'ObservationDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [qualifiedValue.JSON]  VARCHAR(MAX) '$.qualifiedValue'
    ) AS rowset
    CROSS APPLY openjson (rowset.[qualifiedValue.JSON]) with (
        [qualifiedValue.id]            NVARCHAR(100)       '$.id',
        [qualifiedValue.extension]     NVARCHAR(MAX)       '$.extension',
        [qualifiedValue.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [qualifiedValue.context.id]    NVARCHAR(100)       '$.context.id',
        [qualifiedValue.context.extension] NVARCHAR(MAX)       '$.context.extension',
        [qualifiedValue.context.coding] NVARCHAR(MAX)       '$.context.coding',
        [qualifiedValue.context.text]  NVARCHAR(4000)      '$.context.text',
        [qualifiedValue.appliesTo]     NVARCHAR(MAX)       '$.appliesTo' AS JSON,
        [qualifiedValue.gender]        NVARCHAR(4000)      '$.gender',
        [qualifiedValue.age.id]        NVARCHAR(100)       '$.age.id',
        [qualifiedValue.age.extension] NVARCHAR(MAX)       '$.age.extension',
        [qualifiedValue.age.low]       NVARCHAR(MAX)       '$.age.low',
        [qualifiedValue.age.high]      NVARCHAR(MAX)       '$.age.high',
        [qualifiedValue.gestationalAge.id] NVARCHAR(100)       '$.gestationalAge.id',
        [qualifiedValue.gestationalAge.extension] NVARCHAR(MAX)       '$.gestationalAge.extension',
        [qualifiedValue.gestationalAge.low] NVARCHAR(MAX)       '$.gestationalAge.low',
        [qualifiedValue.gestationalAge.high] NVARCHAR(MAX)       '$.gestationalAge.high',
        [qualifiedValue.condition]     NVARCHAR(500)       '$.condition',
        [qualifiedValue.rangeCategory] NVARCHAR(4000)      '$.rangeCategory',
        [qualifiedValue.range.id]      NVARCHAR(100)       '$.range.id',
        [qualifiedValue.range.extension] NVARCHAR(MAX)       '$.range.extension',
        [qualifiedValue.range.low]     NVARCHAR(MAX)       '$.range.low',
        [qualifiedValue.range.high]    NVARCHAR(MAX)       '$.range.high',
        [qualifiedValue.validCodedValueSet] VARCHAR(256)        '$.validCodedValueSet',
        [qualifiedValue.normalCodedValueSet] VARCHAR(256)        '$.normalCodedValueSet',
        [qualifiedValue.abnormalCodedValueSet] VARCHAR(256)        '$.abnormalCodedValueSet',
        [qualifiedValue.criticalCodedValueSet] VARCHAR(256)        '$.criticalCodedValueSet'
    ) j

GO

CREATE VIEW fhir.ObservationDefinitionHasMember AS
SELECT
    [id],
    [hasMember.JSON],
    [hasMember.id],
    [hasMember.extension],
    [hasMember.reference],
    [hasMember.type],
    [hasMember.identifier.id],
    [hasMember.identifier.extension],
    [hasMember.identifier.use],
    [hasMember.identifier.type],
    [hasMember.identifier.system],
    [hasMember.identifier.value],
    [hasMember.identifier.period],
    [hasMember.identifier.assigner],
    [hasMember.display]
FROM openrowset (
        BULK 'ObservationDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [hasMember.JSON]  VARCHAR(MAX) '$.hasMember'
    ) AS rowset
    CROSS APPLY openjson (rowset.[hasMember.JSON]) with (
        [hasMember.id]                 NVARCHAR(100)       '$.id',
        [hasMember.extension]          NVARCHAR(MAX)       '$.extension',
        [hasMember.reference]          NVARCHAR(4000)      '$.reference',
        [hasMember.type]               VARCHAR(256)        '$.type',
        [hasMember.identifier.id]      NVARCHAR(100)       '$.identifier.id',
        [hasMember.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [hasMember.identifier.use]     NVARCHAR(64)        '$.identifier.use',
        [hasMember.identifier.type]    NVARCHAR(MAX)       '$.identifier.type',
        [hasMember.identifier.system]  VARCHAR(256)        '$.identifier.system',
        [hasMember.identifier.value]   NVARCHAR(4000)      '$.identifier.value',
        [hasMember.identifier.period]  NVARCHAR(MAX)       '$.identifier.period',
        [hasMember.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [hasMember.display]            NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.ObservationDefinitionComponent AS
SELECT
    [id],
    [component.JSON],
    [component.id],
    [component.extension],
    [component.modifierExtension],
    [component.code.id],
    [component.code.extension],
    [component.code.coding],
    [component.code.text],
    [component.permittedDataType],
    [component.quantitativeDetails.id],
    [component.quantitativeDetails.extension],
    [component.quantitativeDetails.modifierExtension],
    [component.quantitativeDetails.unit],
    [component.quantitativeDetails.customaryUnit],
    [component.quantitativeDetails.conversionFactor],
    [component.quantitativeDetails.decimalPrecision],
    [component.qualifiedValue]
FROM openrowset (
        BULK 'ObservationDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [component.JSON]  VARCHAR(MAX) '$.component'
    ) AS rowset
    CROSS APPLY openjson (rowset.[component.JSON]) with (
        [component.id]                 NVARCHAR(100)       '$.id',
        [component.extension]          NVARCHAR(MAX)       '$.extension',
        [component.modifierExtension]  NVARCHAR(MAX)       '$.modifierExtension',
        [component.code.id]            NVARCHAR(100)       '$.code.id',
        [component.code.extension]     NVARCHAR(MAX)       '$.code.extension',
        [component.code.coding]        NVARCHAR(MAX)       '$.code.coding',
        [component.code.text]          NVARCHAR(4000)      '$.code.text',
        [component.permittedDataType]  NVARCHAR(MAX)       '$.permittedDataType' AS JSON,
        [component.quantitativeDetails.id] NVARCHAR(100)       '$.quantitativeDetails.id',
        [component.quantitativeDetails.extension] NVARCHAR(MAX)       '$.quantitativeDetails.extension',
        [component.quantitativeDetails.modifierExtension] NVARCHAR(MAX)       '$.quantitativeDetails.modifierExtension',
        [component.quantitativeDetails.unit] NVARCHAR(MAX)       '$.quantitativeDetails.unit',
        [component.quantitativeDetails.customaryUnit] NVARCHAR(MAX)       '$.quantitativeDetails.customaryUnit',
        [component.quantitativeDetails.conversionFactor] float               '$.quantitativeDetails.conversionFactor',
        [component.quantitativeDetails.decimalPrecision] bigint              '$.quantitativeDetails.decimalPrecision',
        [component.qualifiedValue]     NVARCHAR(MAX)       '$.qualifiedValue' AS JSON
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[OperationDefinition] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [url] VARCHAR(256),
    [identifier] VARCHAR(MAX),
    [version] NVARCHAR(100),
    [name] NVARCHAR(500),
    [title] NVARCHAR(4000),
    [status] NVARCHAR(100),
    [experimental] bit,
    [date] VARCHAR(64),
    [publisher] NVARCHAR(500),
    [contact] VARCHAR(MAX),
    [description] NVARCHAR(MAX),
    [useContext] VARCHAR(MAX),
    [jurisdiction] VARCHAR(MAX),
    [purpose] NVARCHAR(MAX),
    [copyright] NVARCHAR(MAX),
    [kind] NVARCHAR(100),
    [affectsState] bit,
    [code] NVARCHAR(4000),
    [comment] NVARCHAR(MAX),
    [base] VARCHAR(256),
    [resource] VARCHAR(MAX),
    [system] bit,
    [type] bit,
    [instance] bit,
    [inputProfile] VARCHAR(256),
    [outputProfile] VARCHAR(256),
    [parameter] VARCHAR(MAX),
    [overload] VARCHAR(MAX),
) WITH (
    LOCATION='/OperationDefinition/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.OperationDefinitionIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'OperationDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.OperationDefinitionContact AS
SELECT
    [id],
    [contact.JSON],
    [contact.id],
    [contact.extension],
    [contact.name],
    [contact.telecom]
FROM openrowset (
        BULK 'OperationDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [contact.JSON]  VARCHAR(MAX) '$.contact'
    ) AS rowset
    CROSS APPLY openjson (rowset.[contact.JSON]) with (
        [contact.id]                   NVARCHAR(100)       '$.id',
        [contact.extension]            NVARCHAR(MAX)       '$.extension',
        [contact.name]                 NVARCHAR(500)       '$.name',
        [contact.telecom]              NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.OperationDefinitionUseContext AS
SELECT
    [id],
    [useContext.JSON],
    [useContext.id],
    [useContext.extension],
    [useContext.code.id],
    [useContext.code.extension],
    [useContext.code.system],
    [useContext.code.version],
    [useContext.code.code],
    [useContext.code.display],
    [useContext.code.userSelected],
    [useContext.value.codeableConcept.id],
    [useContext.value.codeableConcept.extension],
    [useContext.value.codeableConcept.coding],
    [useContext.value.codeableConcept.text],
    [useContext.value.quantity.id],
    [useContext.value.quantity.extension],
    [useContext.value.quantity.value],
    [useContext.value.quantity.comparator],
    [useContext.value.quantity.unit],
    [useContext.value.quantity.system],
    [useContext.value.quantity.code],
    [useContext.value.range.id],
    [useContext.value.range.extension],
    [useContext.value.range.low],
    [useContext.value.range.high],
    [useContext.value.reference.id],
    [useContext.value.reference.extension],
    [useContext.value.reference.reference],
    [useContext.value.reference.type],
    [useContext.value.reference.identifier],
    [useContext.value.reference.display]
FROM openrowset (
        BULK 'OperationDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [useContext.JSON]  VARCHAR(MAX) '$.useContext'
    ) AS rowset
    CROSS APPLY openjson (rowset.[useContext.JSON]) with (
        [useContext.id]                NVARCHAR(100)       '$.id',
        [useContext.extension]         NVARCHAR(MAX)       '$.extension',
        [useContext.code.id]           NVARCHAR(100)       '$.code.id',
        [useContext.code.extension]    NVARCHAR(MAX)       '$.code.extension',
        [useContext.code.system]       VARCHAR(256)        '$.code.system',
        [useContext.code.version]      NVARCHAR(100)       '$.code.version',
        [useContext.code.code]         NVARCHAR(4000)      '$.code.code',
        [useContext.code.display]      NVARCHAR(4000)      '$.code.display',
        [useContext.code.userSelected] bit                 '$.code.userSelected',
        [useContext.value.codeableConcept.id] NVARCHAR(100)       '$.value.codeableConcept.id',
        [useContext.value.codeableConcept.extension] NVARCHAR(MAX)       '$.value.codeableConcept.extension',
        [useContext.value.codeableConcept.coding] NVARCHAR(MAX)       '$.value.codeableConcept.coding',
        [useContext.value.codeableConcept.text] NVARCHAR(4000)      '$.value.codeableConcept.text',
        [useContext.value.quantity.id] NVARCHAR(100)       '$.value.quantity.id',
        [useContext.value.quantity.extension] NVARCHAR(MAX)       '$.value.quantity.extension',
        [useContext.value.quantity.value] float               '$.value.quantity.value',
        [useContext.value.quantity.comparator] NVARCHAR(64)        '$.value.quantity.comparator',
        [useContext.value.quantity.unit] NVARCHAR(100)       '$.value.quantity.unit',
        [useContext.value.quantity.system] VARCHAR(256)        '$.value.quantity.system',
        [useContext.value.quantity.code] NVARCHAR(4000)      '$.value.quantity.code',
        [useContext.value.range.id]    NVARCHAR(100)       '$.value.range.id',
        [useContext.value.range.extension] NVARCHAR(MAX)       '$.value.range.extension',
        [useContext.value.range.low]   NVARCHAR(MAX)       '$.value.range.low',
        [useContext.value.range.high]  NVARCHAR(MAX)       '$.value.range.high',
        [useContext.value.reference.id] NVARCHAR(100)       '$.value.reference.id',
        [useContext.value.reference.extension] NVARCHAR(MAX)       '$.value.reference.extension',
        [useContext.value.reference.reference] NVARCHAR(4000)      '$.value.reference.reference',
        [useContext.value.reference.type] VARCHAR(256)        '$.value.reference.type',
        [useContext.value.reference.identifier] NVARCHAR(MAX)       '$.value.reference.identifier',
        [useContext.value.reference.display] NVARCHAR(4000)      '$.value.reference.display'
    ) j

GO

CREATE VIEW fhir.OperationDefinitionJurisdiction AS
SELECT
    [id],
    [jurisdiction.JSON],
    [jurisdiction.id],
    [jurisdiction.extension],
    [jurisdiction.coding],
    [jurisdiction.text]
FROM openrowset (
        BULK 'OperationDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [jurisdiction.JSON]  VARCHAR(MAX) '$.jurisdiction'
    ) AS rowset
    CROSS APPLY openjson (rowset.[jurisdiction.JSON]) with (
        [jurisdiction.id]              NVARCHAR(100)       '$.id',
        [jurisdiction.extension]       NVARCHAR(MAX)       '$.extension',
        [jurisdiction.coding]          NVARCHAR(MAX)       '$.coding' AS JSON,
        [jurisdiction.text]            NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.OperationDefinitionResource AS
SELECT
    [id],
    [resource.JSON],
    [resource]
FROM openrowset (
        BULK 'OperationDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [resource.JSON]  VARCHAR(MAX) '$.resource'
    ) AS rowset
    CROSS APPLY openjson (rowset.[resource.JSON]) with (
        [resource]                     NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.OperationDefinitionParameter AS
SELECT
    [id],
    [parameter.JSON],
    [parameter.id],
    [parameter.extension],
    [parameter.modifierExtension],
    [parameter.name],
    [parameter.use],
    [parameter.min],
    [parameter.max],
    [parameter.documentation],
    [parameter.type],
    [parameter.targetProfile],
    [parameter.searchType],
    [parameter.binding.id],
    [parameter.binding.extension],
    [parameter.binding.modifierExtension],
    [parameter.binding.strength],
    [parameter.binding.valueSet],
    [parameter.referencedFrom],
    [parameter.part]
FROM openrowset (
        BULK 'OperationDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [parameter.JSON]  VARCHAR(MAX) '$.parameter'
    ) AS rowset
    CROSS APPLY openjson (rowset.[parameter.JSON]) with (
        [parameter.id]                 NVARCHAR(100)       '$.id',
        [parameter.extension]          NVARCHAR(MAX)       '$.extension',
        [parameter.modifierExtension]  NVARCHAR(MAX)       '$.modifierExtension',
        [parameter.name]               NVARCHAR(500)       '$.name',
        [parameter.use]                NVARCHAR(100)       '$.use',
        [parameter.min]                bigint              '$.min',
        [parameter.max]                NVARCHAR(100)       '$.max',
        [parameter.documentation]      NVARCHAR(4000)      '$.documentation',
        [parameter.type]               NVARCHAR(100)       '$.type',
        [parameter.targetProfile]      NVARCHAR(MAX)       '$.targetProfile' AS JSON,
        [parameter.searchType]         NVARCHAR(4000)      '$.searchType',
        [parameter.binding.id]         NVARCHAR(100)       '$.binding.id',
        [parameter.binding.extension]  NVARCHAR(MAX)       '$.binding.extension',
        [parameter.binding.modifierExtension] NVARCHAR(MAX)       '$.binding.modifierExtension',
        [parameter.binding.strength]   NVARCHAR(4000)      '$.binding.strength',
        [parameter.binding.valueSet]   VARCHAR(256)        '$.binding.valueSet',
        [parameter.referencedFrom]     NVARCHAR(MAX)       '$.referencedFrom' AS JSON,
        [parameter.part]               NVARCHAR(MAX)       '$.part' AS JSON
    ) j

GO

CREATE VIEW fhir.OperationDefinitionOverload AS
SELECT
    [id],
    [overload.JSON],
    [overload.id],
    [overload.extension],
    [overload.modifierExtension],
    [overload.parameterName],
    [overload.comment]
FROM openrowset (
        BULK 'OperationDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [overload.JSON]  VARCHAR(MAX) '$.overload'
    ) AS rowset
    CROSS APPLY openjson (rowset.[overload.JSON]) with (
        [overload.id]                  NVARCHAR(100)       '$.id',
        [overload.extension]           NVARCHAR(MAX)       '$.extension',
        [overload.modifierExtension]   NVARCHAR(MAX)       '$.modifierExtension',
        [overload.parameterName]       NVARCHAR(MAX)       '$.parameterName' AS JSON,
        [overload.comment]             NVARCHAR(4000)      '$.comment'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[OperationOutcome] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [issue] VARCHAR(MAX),
) WITH (
    LOCATION='/OperationOutcome/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.OperationOutcomeIssue AS
SELECT
    [id],
    [issue.JSON],
    [issue.id],
    [issue.extension],
    [issue.modifierExtension],
    [issue.severity],
    [issue.code],
    [issue.details.id],
    [issue.details.extension],
    [issue.details.coding],
    [issue.details.text],
    [issue.diagnostics],
    [issue.location],
    [issue.expression]
FROM openrowset (
        BULK 'OperationOutcome/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [issue.JSON]  VARCHAR(MAX) '$.issue'
    ) AS rowset
    CROSS APPLY openjson (rowset.[issue.JSON]) with (
        [issue.id]                     NVARCHAR(100)       '$.id',
        [issue.extension]              NVARCHAR(MAX)       '$.extension',
        [issue.modifierExtension]      NVARCHAR(MAX)       '$.modifierExtension',
        [issue.severity]               NVARCHAR(4000)      '$.severity',
        [issue.code]                   NVARCHAR(4000)      '$.code',
        [issue.details.id]             NVARCHAR(100)       '$.details.id',
        [issue.details.extension]      NVARCHAR(MAX)       '$.details.extension',
        [issue.details.coding]         NVARCHAR(MAX)       '$.details.coding',
        [issue.details.text]           NVARCHAR(4000)      '$.details.text',
        [issue.diagnostics]            NVARCHAR(4000)      '$.diagnostics',
        [issue.location]               NVARCHAR(MAX)       '$.location' AS JSON,
        [issue.expression]             NVARCHAR(MAX)       '$.expression' AS JSON
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[Organization] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [active] bit,
    [type] VARCHAR(MAX),
    [name] NVARCHAR(500),
    [alias] VARCHAR(MAX),
    [telecom] VARCHAR(MAX),
    [address] VARCHAR(MAX),
    [partOf.id] NVARCHAR(100),
    [partOf.extension] NVARCHAR(MAX),
    [partOf.reference] NVARCHAR(4000),
    [partOf.type] VARCHAR(256),
    [partOf.identifier.id] NVARCHAR(100),
    [partOf.identifier.extension] NVARCHAR(MAX),
    [partOf.identifier.use] NVARCHAR(64),
    [partOf.identifier.type] NVARCHAR(MAX),
    [partOf.identifier.system] VARCHAR(256),
    [partOf.identifier.value] NVARCHAR(4000),
    [partOf.identifier.period] NVARCHAR(MAX),
    [partOf.identifier.assigner] NVARCHAR(MAX),
    [partOf.display] NVARCHAR(4000),
    [contact] VARCHAR(MAX),
    [endpoint] VARCHAR(MAX),
) WITH (
    LOCATION='/Organization/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.OrganizationIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'Organization/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.OrganizationType AS
SELECT
    [id],
    [type.JSON],
    [type.id],
    [type.extension],
    [type.coding],
    [type.text]
FROM openrowset (
        BULK 'Organization/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [type.JSON]  VARCHAR(MAX) '$.type'
    ) AS rowset
    CROSS APPLY openjson (rowset.[type.JSON]) with (
        [type.id]                      NVARCHAR(100)       '$.id',
        [type.extension]               NVARCHAR(MAX)       '$.extension',
        [type.coding]                  NVARCHAR(MAX)       '$.coding' AS JSON,
        [type.text]                    NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.OrganizationAlias AS
SELECT
    [id],
    [alias.JSON],
    [alias]
FROM openrowset (
        BULK 'Organization/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [alias.JSON]  VARCHAR(MAX) '$.alias'
    ) AS rowset
    CROSS APPLY openjson (rowset.[alias.JSON]) with (
        [alias]                        NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.OrganizationTelecom AS
SELECT
    [id],
    [telecom.JSON],
    [telecom.id],
    [telecom.extension],
    [telecom.system],
    [telecom.value],
    [telecom.use],
    [telecom.rank],
    [telecom.period.id],
    [telecom.period.extension],
    [telecom.period.start],
    [telecom.period.end]
FROM openrowset (
        BULK 'Organization/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [telecom.JSON]  VARCHAR(MAX) '$.telecom'
    ) AS rowset
    CROSS APPLY openjson (rowset.[telecom.JSON]) with (
        [telecom.id]                   NVARCHAR(100)       '$.id',
        [telecom.extension]            NVARCHAR(MAX)       '$.extension',
        [telecom.system]               NVARCHAR(64)        '$.system',
        [telecom.value]                NVARCHAR(4000)      '$.value',
        [telecom.use]                  NVARCHAR(64)        '$.use',
        [telecom.rank]                 bigint              '$.rank',
        [telecom.period.id]            NVARCHAR(100)       '$.period.id',
        [telecom.period.extension]     NVARCHAR(MAX)       '$.period.extension',
        [telecom.period.start]         VARCHAR(64)         '$.period.start',
        [telecom.period.end]           VARCHAR(64)         '$.period.end'
    ) j

GO

CREATE VIEW fhir.OrganizationAddress AS
SELECT
    [id],
    [address.JSON],
    [address.id],
    [address.extension],
    [address.use],
    [address.type],
    [address.text],
    [address.line],
    [address.city],
    [address.district],
    [address.state],
    [address.postalCode],
    [address.country],
    [address.period.id],
    [address.period.extension],
    [address.period.start],
    [address.period.end]
FROM openrowset (
        BULK 'Organization/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [address.JSON]  VARCHAR(MAX) '$.address'
    ) AS rowset
    CROSS APPLY openjson (rowset.[address.JSON]) with (
        [address.id]                   NVARCHAR(100)       '$.id',
        [address.extension]            NVARCHAR(MAX)       '$.extension',
        [address.use]                  NVARCHAR(64)        '$.use',
        [address.type]                 NVARCHAR(64)        '$.type',
        [address.text]                 NVARCHAR(4000)      '$.text',
        [address.line]                 NVARCHAR(MAX)       '$.line' AS JSON,
        [address.city]                 NVARCHAR(500)       '$.city',
        [address.district]             NVARCHAR(500)       '$.district',
        [address.state]                NVARCHAR(500)       '$.state',
        [address.postalCode]           NVARCHAR(100)       '$.postalCode',
        [address.country]              NVARCHAR(500)       '$.country',
        [address.period.id]            NVARCHAR(100)       '$.period.id',
        [address.period.extension]     NVARCHAR(MAX)       '$.period.extension',
        [address.period.start]         VARCHAR(64)         '$.period.start',
        [address.period.end]           VARCHAR(64)         '$.period.end'
    ) j

GO

CREATE VIEW fhir.OrganizationContact AS
SELECT
    [id],
    [contact.JSON],
    [contact.id],
    [contact.extension],
    [contact.modifierExtension],
    [contact.purpose.id],
    [contact.purpose.extension],
    [contact.purpose.coding],
    [contact.purpose.text],
    [contact.name.id],
    [contact.name.extension],
    [contact.name.use],
    [contact.name.text],
    [contact.name.family],
    [contact.name.given],
    [contact.name.prefix],
    [contact.name.suffix],
    [contact.name.period],
    [contact.telecom],
    [contact.address.id],
    [contact.address.extension],
    [contact.address.use],
    [contact.address.type],
    [contact.address.text],
    [contact.address.line],
    [contact.address.city],
    [contact.address.district],
    [contact.address.state],
    [contact.address.postalCode],
    [contact.address.country],
    [contact.address.period]
FROM openrowset (
        BULK 'Organization/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [contact.JSON]  VARCHAR(MAX) '$.contact'
    ) AS rowset
    CROSS APPLY openjson (rowset.[contact.JSON]) with (
        [contact.id]                   NVARCHAR(100)       '$.id',
        [contact.extension]            NVARCHAR(MAX)       '$.extension',
        [contact.modifierExtension]    NVARCHAR(MAX)       '$.modifierExtension',
        [contact.purpose.id]           NVARCHAR(100)       '$.purpose.id',
        [contact.purpose.extension]    NVARCHAR(MAX)       '$.purpose.extension',
        [contact.purpose.coding]       NVARCHAR(MAX)       '$.purpose.coding',
        [contact.purpose.text]         NVARCHAR(4000)      '$.purpose.text',
        [contact.name.id]              NVARCHAR(100)       '$.name.id',
        [contact.name.extension]       NVARCHAR(MAX)       '$.name.extension',
        [contact.name.use]             NVARCHAR(64)        '$.name.use',
        [contact.name.text]            NVARCHAR(4000)      '$.name.text',
        [contact.name.family]          NVARCHAR(500)       '$.name.family',
        [contact.name.given]           NVARCHAR(MAX)       '$.name.given',
        [contact.name.prefix]          NVARCHAR(MAX)       '$.name.prefix',
        [contact.name.suffix]          NVARCHAR(MAX)       '$.name.suffix',
        [contact.name.period]          NVARCHAR(MAX)       '$.name.period',
        [contact.telecom]              NVARCHAR(MAX)       '$.telecom' AS JSON,
        [contact.address.id]           NVARCHAR(100)       '$.address.id',
        [contact.address.extension]    NVARCHAR(MAX)       '$.address.extension',
        [contact.address.use]          NVARCHAR(64)        '$.address.use',
        [contact.address.type]         NVARCHAR(64)        '$.address.type',
        [contact.address.text]         NVARCHAR(4000)      '$.address.text',
        [contact.address.line]         NVARCHAR(MAX)       '$.address.line',
        [contact.address.city]         NVARCHAR(500)       '$.address.city',
        [contact.address.district]     NVARCHAR(500)       '$.address.district',
        [contact.address.state]        NVARCHAR(500)       '$.address.state',
        [contact.address.postalCode]   NVARCHAR(100)       '$.address.postalCode',
        [contact.address.country]      NVARCHAR(500)       '$.address.country',
        [contact.address.period]       NVARCHAR(MAX)       '$.address.period'
    ) j

GO

CREATE VIEW fhir.OrganizationEndpoint AS
SELECT
    [id],
    [endpoint.JSON],
    [endpoint.id],
    [endpoint.extension],
    [endpoint.reference],
    [endpoint.type],
    [endpoint.identifier.id],
    [endpoint.identifier.extension],
    [endpoint.identifier.use],
    [endpoint.identifier.type],
    [endpoint.identifier.system],
    [endpoint.identifier.value],
    [endpoint.identifier.period],
    [endpoint.identifier.assigner],
    [endpoint.display]
FROM openrowset (
        BULK 'Organization/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [endpoint.JSON]  VARCHAR(MAX) '$.endpoint'
    ) AS rowset
    CROSS APPLY openjson (rowset.[endpoint.JSON]) with (
        [endpoint.id]                  NVARCHAR(100)       '$.id',
        [endpoint.extension]           NVARCHAR(MAX)       '$.extension',
        [endpoint.reference]           NVARCHAR(4000)      '$.reference',
        [endpoint.type]                VARCHAR(256)        '$.type',
        [endpoint.identifier.id]       NVARCHAR(100)       '$.identifier.id',
        [endpoint.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [endpoint.identifier.use]      NVARCHAR(64)        '$.identifier.use',
        [endpoint.identifier.type]     NVARCHAR(MAX)       '$.identifier.type',
        [endpoint.identifier.system]   VARCHAR(256)        '$.identifier.system',
        [endpoint.identifier.value]    NVARCHAR(4000)      '$.identifier.value',
        [endpoint.identifier.period]   NVARCHAR(MAX)       '$.identifier.period',
        [endpoint.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [endpoint.display]             NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[OrganizationAffiliation] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [active] bit,
    [period.id] NVARCHAR(100),
    [period.extension] NVARCHAR(MAX),
    [period.start] VARCHAR(64),
    [period.end] VARCHAR(64),
    [organization.id] NVARCHAR(100),
    [organization.extension] NVARCHAR(MAX),
    [organization.reference] NVARCHAR(4000),
    [organization.type] VARCHAR(256),
    [organization.identifier.id] NVARCHAR(100),
    [organization.identifier.extension] NVARCHAR(MAX),
    [organization.identifier.use] NVARCHAR(64),
    [organization.identifier.type] NVARCHAR(MAX),
    [organization.identifier.system] VARCHAR(256),
    [organization.identifier.value] NVARCHAR(4000),
    [organization.identifier.period] NVARCHAR(MAX),
    [organization.identifier.assigner] NVARCHAR(MAX),
    [organization.display] NVARCHAR(4000),
    [participatingOrganization.id] NVARCHAR(100),
    [participatingOrganization.extension] NVARCHAR(MAX),
    [participatingOrganization.reference] NVARCHAR(4000),
    [participatingOrganization.type] VARCHAR(256),
    [participatingOrganization.identifier.id] NVARCHAR(100),
    [participatingOrganization.identifier.extension] NVARCHAR(MAX),
    [participatingOrganization.identifier.use] NVARCHAR(64),
    [participatingOrganization.identifier.type] NVARCHAR(MAX),
    [participatingOrganization.identifier.system] VARCHAR(256),
    [participatingOrganization.identifier.value] NVARCHAR(4000),
    [participatingOrganization.identifier.period] NVARCHAR(MAX),
    [participatingOrganization.identifier.assigner] NVARCHAR(MAX),
    [participatingOrganization.display] NVARCHAR(4000),
    [network] VARCHAR(MAX),
    [code] VARCHAR(MAX),
    [specialty] VARCHAR(MAX),
    [location] VARCHAR(MAX),
    [healthcareService] VARCHAR(MAX),
    [telecom] VARCHAR(MAX),
    [endpoint] VARCHAR(MAX),
) WITH (
    LOCATION='/OrganizationAffiliation/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.OrganizationAffiliationIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'OrganizationAffiliation/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.OrganizationAffiliationNetwork AS
SELECT
    [id],
    [network.JSON],
    [network.id],
    [network.extension],
    [network.reference],
    [network.type],
    [network.identifier.id],
    [network.identifier.extension],
    [network.identifier.use],
    [network.identifier.type],
    [network.identifier.system],
    [network.identifier.value],
    [network.identifier.period],
    [network.identifier.assigner],
    [network.display]
FROM openrowset (
        BULK 'OrganizationAffiliation/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [network.JSON]  VARCHAR(MAX) '$.network'
    ) AS rowset
    CROSS APPLY openjson (rowset.[network.JSON]) with (
        [network.id]                   NVARCHAR(100)       '$.id',
        [network.extension]            NVARCHAR(MAX)       '$.extension',
        [network.reference]            NVARCHAR(4000)      '$.reference',
        [network.type]                 VARCHAR(256)        '$.type',
        [network.identifier.id]        NVARCHAR(100)       '$.identifier.id',
        [network.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [network.identifier.use]       NVARCHAR(64)        '$.identifier.use',
        [network.identifier.type]      NVARCHAR(MAX)       '$.identifier.type',
        [network.identifier.system]    VARCHAR(256)        '$.identifier.system',
        [network.identifier.value]     NVARCHAR(4000)      '$.identifier.value',
        [network.identifier.period]    NVARCHAR(MAX)       '$.identifier.period',
        [network.identifier.assigner]  NVARCHAR(MAX)       '$.identifier.assigner',
        [network.display]              NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.OrganizationAffiliationCode AS
SELECT
    [id],
    [code.JSON],
    [code.id],
    [code.extension],
    [code.coding],
    [code.text]
FROM openrowset (
        BULK 'OrganizationAffiliation/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [code.JSON]  VARCHAR(MAX) '$.code'
    ) AS rowset
    CROSS APPLY openjson (rowset.[code.JSON]) with (
        [code.id]                      NVARCHAR(100)       '$.id',
        [code.extension]               NVARCHAR(MAX)       '$.extension',
        [code.coding]                  NVARCHAR(MAX)       '$.coding' AS JSON,
        [code.text]                    NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.OrganizationAffiliationSpecialty AS
SELECT
    [id],
    [specialty.JSON],
    [specialty.id],
    [specialty.extension],
    [specialty.coding],
    [specialty.text]
FROM openrowset (
        BULK 'OrganizationAffiliation/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [specialty.JSON]  VARCHAR(MAX) '$.specialty'
    ) AS rowset
    CROSS APPLY openjson (rowset.[specialty.JSON]) with (
        [specialty.id]                 NVARCHAR(100)       '$.id',
        [specialty.extension]          NVARCHAR(MAX)       '$.extension',
        [specialty.coding]             NVARCHAR(MAX)       '$.coding' AS JSON,
        [specialty.text]               NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.OrganizationAffiliationLocation AS
SELECT
    [id],
    [location.JSON],
    [location.id],
    [location.extension],
    [location.reference],
    [location.type],
    [location.identifier.id],
    [location.identifier.extension],
    [location.identifier.use],
    [location.identifier.type],
    [location.identifier.system],
    [location.identifier.value],
    [location.identifier.period],
    [location.identifier.assigner],
    [location.display]
FROM openrowset (
        BULK 'OrganizationAffiliation/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [location.JSON]  VARCHAR(MAX) '$.location'
    ) AS rowset
    CROSS APPLY openjson (rowset.[location.JSON]) with (
        [location.id]                  NVARCHAR(100)       '$.id',
        [location.extension]           NVARCHAR(MAX)       '$.extension',
        [location.reference]           NVARCHAR(4000)      '$.reference',
        [location.type]                VARCHAR(256)        '$.type',
        [location.identifier.id]       NVARCHAR(100)       '$.identifier.id',
        [location.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [location.identifier.use]      NVARCHAR(64)        '$.identifier.use',
        [location.identifier.type]     NVARCHAR(MAX)       '$.identifier.type',
        [location.identifier.system]   VARCHAR(256)        '$.identifier.system',
        [location.identifier.value]    NVARCHAR(4000)      '$.identifier.value',
        [location.identifier.period]   NVARCHAR(MAX)       '$.identifier.period',
        [location.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [location.display]             NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.OrganizationAffiliationHealthcareService AS
SELECT
    [id],
    [healthcareService.JSON],
    [healthcareService.id],
    [healthcareService.extension],
    [healthcareService.reference],
    [healthcareService.type],
    [healthcareService.identifier.id],
    [healthcareService.identifier.extension],
    [healthcareService.identifier.use],
    [healthcareService.identifier.type],
    [healthcareService.identifier.system],
    [healthcareService.identifier.value],
    [healthcareService.identifier.period],
    [healthcareService.identifier.assigner],
    [healthcareService.display]
FROM openrowset (
        BULK 'OrganizationAffiliation/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [healthcareService.JSON]  VARCHAR(MAX) '$.healthcareService'
    ) AS rowset
    CROSS APPLY openjson (rowset.[healthcareService.JSON]) with (
        [healthcareService.id]         NVARCHAR(100)       '$.id',
        [healthcareService.extension]  NVARCHAR(MAX)       '$.extension',
        [healthcareService.reference]  NVARCHAR(4000)      '$.reference',
        [healthcareService.type]       VARCHAR(256)        '$.type',
        [healthcareService.identifier.id] NVARCHAR(100)       '$.identifier.id',
        [healthcareService.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [healthcareService.identifier.use] NVARCHAR(64)        '$.identifier.use',
        [healthcareService.identifier.type] NVARCHAR(MAX)       '$.identifier.type',
        [healthcareService.identifier.system] VARCHAR(256)        '$.identifier.system',
        [healthcareService.identifier.value] NVARCHAR(4000)      '$.identifier.value',
        [healthcareService.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [healthcareService.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [healthcareService.display]    NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.OrganizationAffiliationTelecom AS
SELECT
    [id],
    [telecom.JSON],
    [telecom.id],
    [telecom.extension],
    [telecom.system],
    [telecom.value],
    [telecom.use],
    [telecom.rank],
    [telecom.period.id],
    [telecom.period.extension],
    [telecom.period.start],
    [telecom.period.end]
FROM openrowset (
        BULK 'OrganizationAffiliation/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [telecom.JSON]  VARCHAR(MAX) '$.telecom'
    ) AS rowset
    CROSS APPLY openjson (rowset.[telecom.JSON]) with (
        [telecom.id]                   NVARCHAR(100)       '$.id',
        [telecom.extension]            NVARCHAR(MAX)       '$.extension',
        [telecom.system]               NVARCHAR(64)        '$.system',
        [telecom.value]                NVARCHAR(4000)      '$.value',
        [telecom.use]                  NVARCHAR(64)        '$.use',
        [telecom.rank]                 bigint              '$.rank',
        [telecom.period.id]            NVARCHAR(100)       '$.period.id',
        [telecom.period.extension]     NVARCHAR(MAX)       '$.period.extension',
        [telecom.period.start]         VARCHAR(64)         '$.period.start',
        [telecom.period.end]           VARCHAR(64)         '$.period.end'
    ) j

GO

CREATE VIEW fhir.OrganizationAffiliationEndpoint AS
SELECT
    [id],
    [endpoint.JSON],
    [endpoint.id],
    [endpoint.extension],
    [endpoint.reference],
    [endpoint.type],
    [endpoint.identifier.id],
    [endpoint.identifier.extension],
    [endpoint.identifier.use],
    [endpoint.identifier.type],
    [endpoint.identifier.system],
    [endpoint.identifier.value],
    [endpoint.identifier.period],
    [endpoint.identifier.assigner],
    [endpoint.display]
FROM openrowset (
        BULK 'OrganizationAffiliation/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [endpoint.JSON]  VARCHAR(MAX) '$.endpoint'
    ) AS rowset
    CROSS APPLY openjson (rowset.[endpoint.JSON]) with (
        [endpoint.id]                  NVARCHAR(100)       '$.id',
        [endpoint.extension]           NVARCHAR(MAX)       '$.extension',
        [endpoint.reference]           NVARCHAR(4000)      '$.reference',
        [endpoint.type]                VARCHAR(256)        '$.type',
        [endpoint.identifier.id]       NVARCHAR(100)       '$.identifier.id',
        [endpoint.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [endpoint.identifier.use]      NVARCHAR(64)        '$.identifier.use',
        [endpoint.identifier.type]     NVARCHAR(MAX)       '$.identifier.type',
        [endpoint.identifier.system]   VARCHAR(256)        '$.identifier.system',
        [endpoint.identifier.value]    NVARCHAR(4000)      '$.identifier.value',
        [endpoint.identifier.period]   NVARCHAR(MAX)       '$.identifier.period',
        [endpoint.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [endpoint.display]             NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[PackagedProductDefinition] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [name] NVARCHAR(500),
    [type.id] NVARCHAR(100),
    [type.extension] NVARCHAR(MAX),
    [type.coding] VARCHAR(MAX),
    [type.text] NVARCHAR(4000),
    [packageFor] VARCHAR(MAX),
    [status.id] NVARCHAR(100),
    [status.extension] NVARCHAR(MAX),
    [status.coding] VARCHAR(MAX),
    [status.text] NVARCHAR(4000),
    [statusDate] VARCHAR(64),
    [containedItemQuantity] VARCHAR(MAX),
    [description] NVARCHAR(MAX),
    [legalStatusOfSupply] VARCHAR(MAX),
    [marketingStatus] VARCHAR(MAX),
    [characteristic] VARCHAR(MAX),
    [copackagedIndicator] bit,
    [manufacturer] VARCHAR(MAX),
    [attachedDocument] VARCHAR(MAX),
    [package.id] NVARCHAR(100),
    [package.extension] NVARCHAR(MAX),
    [package.modifierExtension] NVARCHAR(MAX),
    [package.identifier] VARCHAR(MAX),
    [package.type.id] NVARCHAR(100),
    [package.type.extension] NVARCHAR(MAX),
    [package.type.coding] NVARCHAR(MAX),
    [package.type.text] NVARCHAR(4000),
    [package.quantity] bigint,
    [package.material] VARCHAR(MAX),
    [package.alternateMaterial] VARCHAR(MAX),
    [package.shelfLifeStorage] VARCHAR(MAX),
    [package.manufacturer] VARCHAR(MAX),
    [package.property] VARCHAR(MAX),
    [package.containedItem] VARCHAR(MAX),
    [package.package] VARCHAR(MAX),
) WITH (
    LOCATION='/PackagedProductDefinition/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.PackagedProductDefinitionIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'PackagedProductDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.PackagedProductDefinitionPackageFor AS
SELECT
    [id],
    [packageFor.JSON],
    [packageFor.id],
    [packageFor.extension],
    [packageFor.reference],
    [packageFor.type],
    [packageFor.identifier.id],
    [packageFor.identifier.extension],
    [packageFor.identifier.use],
    [packageFor.identifier.type],
    [packageFor.identifier.system],
    [packageFor.identifier.value],
    [packageFor.identifier.period],
    [packageFor.identifier.assigner],
    [packageFor.display]
FROM openrowset (
        BULK 'PackagedProductDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [packageFor.JSON]  VARCHAR(MAX) '$.packageFor'
    ) AS rowset
    CROSS APPLY openjson (rowset.[packageFor.JSON]) with (
        [packageFor.id]                NVARCHAR(100)       '$.id',
        [packageFor.extension]         NVARCHAR(MAX)       '$.extension',
        [packageFor.reference]         NVARCHAR(4000)      '$.reference',
        [packageFor.type]              VARCHAR(256)        '$.type',
        [packageFor.identifier.id]     NVARCHAR(100)       '$.identifier.id',
        [packageFor.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [packageFor.identifier.use]    NVARCHAR(64)        '$.identifier.use',
        [packageFor.identifier.type]   NVARCHAR(MAX)       '$.identifier.type',
        [packageFor.identifier.system] VARCHAR(256)        '$.identifier.system',
        [packageFor.identifier.value]  NVARCHAR(4000)      '$.identifier.value',
        [packageFor.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [packageFor.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [packageFor.display]           NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.PackagedProductDefinitionContainedItemQuantity AS
SELECT
    [id],
    [containedItemQuantity.JSON],
    [containedItemQuantity.id],
    [containedItemQuantity.extension],
    [containedItemQuantity.value],
    [containedItemQuantity.comparator],
    [containedItemQuantity.unit],
    [containedItemQuantity.system],
    [containedItemQuantity.code]
FROM openrowset (
        BULK 'PackagedProductDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [containedItemQuantity.JSON]  VARCHAR(MAX) '$.containedItemQuantity'
    ) AS rowset
    CROSS APPLY openjson (rowset.[containedItemQuantity.JSON]) with (
        [containedItemQuantity.id]     NVARCHAR(100)       '$.id',
        [containedItemQuantity.extension] NVARCHAR(MAX)       '$.extension',
        [containedItemQuantity.value]  float               '$.value',
        [containedItemQuantity.comparator] NVARCHAR(64)        '$.comparator',
        [containedItemQuantity.unit]   NVARCHAR(100)       '$.unit',
        [containedItemQuantity.system] VARCHAR(256)        '$.system',
        [containedItemQuantity.code]   NVARCHAR(4000)      '$.code'
    ) j

GO

CREATE VIEW fhir.PackagedProductDefinitionLegalStatusOfSupply AS
SELECT
    [id],
    [legalStatusOfSupply.JSON],
    [legalStatusOfSupply.id],
    [legalStatusOfSupply.extension],
    [legalStatusOfSupply.modifierExtension],
    [legalStatusOfSupply.code.id],
    [legalStatusOfSupply.code.extension],
    [legalStatusOfSupply.code.coding],
    [legalStatusOfSupply.code.text],
    [legalStatusOfSupply.jurisdiction.id],
    [legalStatusOfSupply.jurisdiction.extension],
    [legalStatusOfSupply.jurisdiction.coding],
    [legalStatusOfSupply.jurisdiction.text]
FROM openrowset (
        BULK 'PackagedProductDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [legalStatusOfSupply.JSON]  VARCHAR(MAX) '$.legalStatusOfSupply'
    ) AS rowset
    CROSS APPLY openjson (rowset.[legalStatusOfSupply.JSON]) with (
        [legalStatusOfSupply.id]       NVARCHAR(100)       '$.id',
        [legalStatusOfSupply.extension] NVARCHAR(MAX)       '$.extension',
        [legalStatusOfSupply.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [legalStatusOfSupply.code.id]  NVARCHAR(100)       '$.code.id',
        [legalStatusOfSupply.code.extension] NVARCHAR(MAX)       '$.code.extension',
        [legalStatusOfSupply.code.coding] NVARCHAR(MAX)       '$.code.coding',
        [legalStatusOfSupply.code.text] NVARCHAR(4000)      '$.code.text',
        [legalStatusOfSupply.jurisdiction.id] NVARCHAR(100)       '$.jurisdiction.id',
        [legalStatusOfSupply.jurisdiction.extension] NVARCHAR(MAX)       '$.jurisdiction.extension',
        [legalStatusOfSupply.jurisdiction.coding] NVARCHAR(MAX)       '$.jurisdiction.coding',
        [legalStatusOfSupply.jurisdiction.text] NVARCHAR(4000)      '$.jurisdiction.text'
    ) j

GO

CREATE VIEW fhir.PackagedProductDefinitionMarketingStatus AS
SELECT
    [id],
    [marketingStatus.JSON],
    [marketingStatus.id],
    [marketingStatus.extension],
    [marketingStatus.modifierExtension],
    [marketingStatus.country.id],
    [marketingStatus.country.extension],
    [marketingStatus.country.coding],
    [marketingStatus.country.text],
    [marketingStatus.jurisdiction.id],
    [marketingStatus.jurisdiction.extension],
    [marketingStatus.jurisdiction.coding],
    [marketingStatus.jurisdiction.text],
    [marketingStatus.status.id],
    [marketingStatus.status.extension],
    [marketingStatus.status.coding],
    [marketingStatus.status.text],
    [marketingStatus.dateRange.id],
    [marketingStatus.dateRange.extension],
    [marketingStatus.dateRange.start],
    [marketingStatus.dateRange.end],
    [marketingStatus.restoreDate]
FROM openrowset (
        BULK 'PackagedProductDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [marketingStatus.JSON]  VARCHAR(MAX) '$.marketingStatus'
    ) AS rowset
    CROSS APPLY openjson (rowset.[marketingStatus.JSON]) with (
        [marketingStatus.id]           NVARCHAR(100)       '$.id',
        [marketingStatus.extension]    NVARCHAR(MAX)       '$.extension',
        [marketingStatus.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [marketingStatus.country.id]   NVARCHAR(100)       '$.country.id',
        [marketingStatus.country.extension] NVARCHAR(MAX)       '$.country.extension',
        [marketingStatus.country.coding] NVARCHAR(MAX)       '$.country.coding',
        [marketingStatus.country.text] NVARCHAR(4000)      '$.country.text',
        [marketingStatus.jurisdiction.id] NVARCHAR(100)       '$.jurisdiction.id',
        [marketingStatus.jurisdiction.extension] NVARCHAR(MAX)       '$.jurisdiction.extension',
        [marketingStatus.jurisdiction.coding] NVARCHAR(MAX)       '$.jurisdiction.coding',
        [marketingStatus.jurisdiction.text] NVARCHAR(4000)      '$.jurisdiction.text',
        [marketingStatus.status.id]    NVARCHAR(100)       '$.status.id',
        [marketingStatus.status.extension] NVARCHAR(MAX)       '$.status.extension',
        [marketingStatus.status.coding] NVARCHAR(MAX)       '$.status.coding',
        [marketingStatus.status.text]  NVARCHAR(4000)      '$.status.text',
        [marketingStatus.dateRange.id] NVARCHAR(100)       '$.dateRange.id',
        [marketingStatus.dateRange.extension] NVARCHAR(MAX)       '$.dateRange.extension',
        [marketingStatus.dateRange.start] VARCHAR(64)         '$.dateRange.start',
        [marketingStatus.dateRange.end] VARCHAR(64)         '$.dateRange.end',
        [marketingStatus.restoreDate]  VARCHAR(64)         '$.restoreDate'
    ) j

GO

CREATE VIEW fhir.PackagedProductDefinitionCharacteristic AS
SELECT
    [id],
    [characteristic.JSON],
    [characteristic.id],
    [characteristic.extension],
    [characteristic.coding],
    [characteristic.text]
FROM openrowset (
        BULK 'PackagedProductDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [characteristic.JSON]  VARCHAR(MAX) '$.characteristic'
    ) AS rowset
    CROSS APPLY openjson (rowset.[characteristic.JSON]) with (
        [characteristic.id]            NVARCHAR(100)       '$.id',
        [characteristic.extension]     NVARCHAR(MAX)       '$.extension',
        [characteristic.coding]        NVARCHAR(MAX)       '$.coding' AS JSON,
        [characteristic.text]          NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.PackagedProductDefinitionManufacturer AS
SELECT
    [id],
    [manufacturer.JSON],
    [manufacturer.id],
    [manufacturer.extension],
    [manufacturer.reference],
    [manufacturer.type],
    [manufacturer.identifier.id],
    [manufacturer.identifier.extension],
    [manufacturer.identifier.use],
    [manufacturer.identifier.type],
    [manufacturer.identifier.system],
    [manufacturer.identifier.value],
    [manufacturer.identifier.period],
    [manufacturer.identifier.assigner],
    [manufacturer.display]
FROM openrowset (
        BULK 'PackagedProductDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [manufacturer.JSON]  VARCHAR(MAX) '$.manufacturer'
    ) AS rowset
    CROSS APPLY openjson (rowset.[manufacturer.JSON]) with (
        [manufacturer.id]              NVARCHAR(100)       '$.id',
        [manufacturer.extension]       NVARCHAR(MAX)       '$.extension',
        [manufacturer.reference]       NVARCHAR(4000)      '$.reference',
        [manufacturer.type]            VARCHAR(256)        '$.type',
        [manufacturer.identifier.id]   NVARCHAR(100)       '$.identifier.id',
        [manufacturer.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [manufacturer.identifier.use]  NVARCHAR(64)        '$.identifier.use',
        [manufacturer.identifier.type] NVARCHAR(MAX)       '$.identifier.type',
        [manufacturer.identifier.system] VARCHAR(256)        '$.identifier.system',
        [manufacturer.identifier.value] NVARCHAR(4000)      '$.identifier.value',
        [manufacturer.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [manufacturer.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [manufacturer.display]         NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.PackagedProductDefinitionAttachedDocument AS
SELECT
    [id],
    [attachedDocument.JSON],
    [attachedDocument.id],
    [attachedDocument.extension],
    [attachedDocument.reference],
    [attachedDocument.type],
    [attachedDocument.identifier.id],
    [attachedDocument.identifier.extension],
    [attachedDocument.identifier.use],
    [attachedDocument.identifier.type],
    [attachedDocument.identifier.system],
    [attachedDocument.identifier.value],
    [attachedDocument.identifier.period],
    [attachedDocument.identifier.assigner],
    [attachedDocument.display]
FROM openrowset (
        BULK 'PackagedProductDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [attachedDocument.JSON]  VARCHAR(MAX) '$.attachedDocument'
    ) AS rowset
    CROSS APPLY openjson (rowset.[attachedDocument.JSON]) with (
        [attachedDocument.id]          NVARCHAR(100)       '$.id',
        [attachedDocument.extension]   NVARCHAR(MAX)       '$.extension',
        [attachedDocument.reference]   NVARCHAR(4000)      '$.reference',
        [attachedDocument.type]        VARCHAR(256)        '$.type',
        [attachedDocument.identifier.id] NVARCHAR(100)       '$.identifier.id',
        [attachedDocument.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [attachedDocument.identifier.use] NVARCHAR(64)        '$.identifier.use',
        [attachedDocument.identifier.type] NVARCHAR(MAX)       '$.identifier.type',
        [attachedDocument.identifier.system] VARCHAR(256)        '$.identifier.system',
        [attachedDocument.identifier.value] NVARCHAR(4000)      '$.identifier.value',
        [attachedDocument.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [attachedDocument.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [attachedDocument.display]     NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[Parameters] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [parameter] VARCHAR(MAX),
) WITH (
    LOCATION='/Parameters/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.ParametersParameter AS
SELECT
    [id],
    [parameter.JSON],
    [parameter.id],
    [parameter.extension],
    [parameter.modifierExtension],
    [parameter.name],
    [parameter.valueBase64Binary],
    [parameter.valueBoolean],
    [parameter.valueCanonical],
    [parameter.valueCode],
    [parameter.valueDate],
    [parameter.valueDateTime],
    [parameter.valueDecimal],
    [parameter.valueId],
    [parameter.valueInstant],
    [parameter.valueInteger],
    [parameter.valueInteger64],
    [parameter.valueMarkdown],
    [parameter.valueOid],
    [parameter.valuePositiveInt],
    [parameter.valueString],
    [parameter.valueTime],
    [parameter.valueUnsignedInt],
    [parameter.valueUri],
    [parameter.valueUrl],
    [parameter.valueUuid],
    [parameter.valueAddress.id],
    [parameter.valueAddress.extension],
    [parameter.valueAddress.use],
    [parameter.valueAddress.type],
    [parameter.valueAddress.text],
    [parameter.valueAddress.line],
    [parameter.valueAddress.city],
    [parameter.valueAddress.district],
    [parameter.valueAddress.state],
    [parameter.valueAddress.postalCode],
    [parameter.valueAddress.country],
    [parameter.valueAddress.period],
    [parameter.valueAge.id],
    [parameter.valueAge.extension],
    [parameter.valueAge.value],
    [parameter.valueAge.comparator],
    [parameter.valueAge.unit],
    [parameter.valueAge.system],
    [parameter.valueAge.code],
    [parameter.valueAnnotation.id],
    [parameter.valueAnnotation.extension],
    [parameter.valueAnnotation.time],
    [parameter.valueAnnotation.text],
    [parameter.valueAnnotation.author.reference],
    [parameter.valueAnnotation.author.string],
    [parameter.valueAttachment.id],
    [parameter.valueAttachment.extension],
    [parameter.valueAttachment.contentType],
    [parameter.valueAttachment.language],
    [parameter.valueAttachment.data],
    [parameter.valueAttachment.url],
    [parameter.valueAttachment.size],
    [parameter.valueAttachment.hash],
    [parameter.valueAttachment.title],
    [parameter.valueAttachment.creation],
    [parameter.valueAttachment.height],
    [parameter.valueAttachment.width],
    [parameter.valueAttachment.frames],
    [parameter.valueAttachment.duration],
    [parameter.valueAttachment.pages],
    [parameter.valueCodeableConcept.id],
    [parameter.valueCodeableConcept.extension],
    [parameter.valueCodeableConcept.coding],
    [parameter.valueCodeableConcept.text],
    [parameter.valueCodeableReference.id],
    [parameter.valueCodeableReference.extension],
    [parameter.valueCodeableReference.concept],
    [parameter.valueCodeableReference.reference],
    [parameter.valueCoding.id],
    [parameter.valueCoding.extension],
    [parameter.valueCoding.system],
    [parameter.valueCoding.version],
    [parameter.valueCoding.code],
    [parameter.valueCoding.display],
    [parameter.valueCoding.userSelected],
    [parameter.valueContactPoint.id],
    [parameter.valueContactPoint.extension],
    [parameter.valueContactPoint.system],
    [parameter.valueContactPoint.value],
    [parameter.valueContactPoint.use],
    [parameter.valueContactPoint.rank],
    [parameter.valueContactPoint.period],
    [parameter.valueCount.id],
    [parameter.valueCount.extension],
    [parameter.valueCount.value],
    [parameter.valueCount.comparator],
    [parameter.valueCount.unit],
    [parameter.valueCount.system],
    [parameter.valueCount.code],
    [parameter.valueDistance.id],
    [parameter.valueDistance.extension],
    [parameter.valueDistance.value],
    [parameter.valueDistance.comparator],
    [parameter.valueDistance.unit],
    [parameter.valueDistance.system],
    [parameter.valueDistance.code],
    [parameter.valueDuration.id],
    [parameter.valueDuration.extension],
    [parameter.valueDuration.value],
    [parameter.valueDuration.comparator],
    [parameter.valueDuration.unit],
    [parameter.valueDuration.system],
    [parameter.valueDuration.code],
    [parameter.valueHumanName.id],
    [parameter.valueHumanName.extension],
    [parameter.valueHumanName.use],
    [parameter.valueHumanName.text],
    [parameter.valueHumanName.family],
    [parameter.valueHumanName.given],
    [parameter.valueHumanName.prefix],
    [parameter.valueHumanName.suffix],
    [parameter.valueHumanName.period],
    [parameter.valueIdentifier.id],
    [parameter.valueIdentifier.extension],
    [parameter.valueIdentifier.use],
    [parameter.valueIdentifier.type],
    [parameter.valueIdentifier.system],
    [parameter.valueIdentifier.value],
    [parameter.valueIdentifier.period],
    [parameter.valueIdentifier.assigner],
    [parameter.valueMoney.id],
    [parameter.valueMoney.extension],
    [parameter.valueMoney.value],
    [parameter.valueMoney.currency],
    [parameter.valuePeriod.id],
    [parameter.valuePeriod.extension],
    [parameter.valuePeriod.start],
    [parameter.valuePeriod.end],
    [parameter.valueQuantity.id],
    [parameter.valueQuantity.extension],
    [parameter.valueQuantity.value],
    [parameter.valueQuantity.comparator],
    [parameter.valueQuantity.unit],
    [parameter.valueQuantity.system],
    [parameter.valueQuantity.code],
    [parameter.valueRange.id],
    [parameter.valueRange.extension],
    [parameter.valueRange.low],
    [parameter.valueRange.high],
    [parameter.valueRatio.id],
    [parameter.valueRatio.extension],
    [parameter.valueRatio.numerator],
    [parameter.valueRatio.denominator],
    [parameter.valueRatioRange.id],
    [parameter.valueRatioRange.extension],
    [parameter.valueRatioRange.lowNumerator],
    [parameter.valueRatioRange.highNumerator],
    [parameter.valueRatioRange.denominator],
    [parameter.valueReference.id],
    [parameter.valueReference.extension],
    [parameter.valueReference.reference],
    [parameter.valueReference.type],
    [parameter.valueReference.identifier],
    [parameter.valueReference.display],
    [parameter.valueSampledData.id],
    [parameter.valueSampledData.extension],
    [parameter.valueSampledData.origin],
    [parameter.valueSampledData.period],
    [parameter.valueSampledData.factor],
    [parameter.valueSampledData.lowerLimit],
    [parameter.valueSampledData.upperLimit],
    [parameter.valueSampledData.dimensions],
    [parameter.valueSampledData.data],
    [parameter.valueSignature.id],
    [parameter.valueSignature.extension],
    [parameter.valueSignature.type],
    [parameter.valueSignature.when],
    [parameter.valueSignature.who],
    [parameter.valueSignature.onBehalfOf],
    [parameter.valueSignature.targetFormat],
    [parameter.valueSignature.sigFormat],
    [parameter.valueSignature.data],
    [parameter.valueTiming.id],
    [parameter.valueTiming.extension],
    [parameter.valueTiming.modifierExtension],
    [parameter.valueTiming.event],
    [parameter.valueTiming.repeat],
    [parameter.valueTiming.code],
    [parameter.valueContactDetail.id],
    [parameter.valueContactDetail.extension],
    [parameter.valueContactDetail.name],
    [parameter.valueContactDetail.telecom],
    [parameter.valueContributor.id],
    [parameter.valueContributor.extension],
    [parameter.valueContributor.type],
    [parameter.valueContributor.name],
    [parameter.valueContributor.contact],
    [parameter.valueDataRequirement.id],
    [parameter.valueDataRequirement.extension],
    [parameter.valueDataRequirement.type],
    [parameter.valueDataRequirement.profile],
    [parameter.valueDataRequirement.mustSupport],
    [parameter.valueDataRequirement.codeFilter],
    [parameter.valueDataRequirement.dateFilter],
    [parameter.valueDataRequirement.limit],
    [parameter.valueDataRequirement.sort],
    [parameter.valueDataRequirement.subject.codeableConcept],
    [parameter.valueDataRequirement.subject.reference],
    [parameter.valueExpression.id],
    [parameter.valueExpression.extension],
    [parameter.valueExpression.description],
    [parameter.valueExpression.name],
    [parameter.valueExpression.language],
    [parameter.valueExpression.expression],
    [parameter.valueExpression.reference],
    [parameter.valueParameterDefinition.id],
    [parameter.valueParameterDefinition.extension],
    [parameter.valueParameterDefinition.name],
    [parameter.valueParameterDefinition.use],
    [parameter.valueParameterDefinition.min],
    [parameter.valueParameterDefinition.max],
    [parameter.valueParameterDefinition.documentation],
    [parameter.valueParameterDefinition.type],
    [parameter.valueParameterDefinition.profile],
    [parameter.valueRelatedArtifact.id],
    [parameter.valueRelatedArtifact.extension],
    [parameter.valueRelatedArtifact.type],
    [parameter.valueRelatedArtifact.classifier],
    [parameter.valueRelatedArtifact.label],
    [parameter.valueRelatedArtifact.display],
    [parameter.valueRelatedArtifact.citation],
    [parameter.valueRelatedArtifact.document],
    [parameter.valueRelatedArtifact.resource],
    [parameter.valueRelatedArtifact.resourceReference],
    [parameter.valueTriggerDefinition.id],
    [parameter.valueTriggerDefinition.extension],
    [parameter.valueTriggerDefinition.type],
    [parameter.valueTriggerDefinition.name],
    [parameter.valueTriggerDefinition.data],
    [parameter.valueTriggerDefinition.condition],
    [parameter.valueTriggerDefinition.timing.timing],
    [parameter.valueTriggerDefinition.timing.reference],
    [parameter.valueTriggerDefinition.timing.date],
    [parameter.valueTriggerDefinition.timing.dateTime],
    [parameter.valueUsageContext.id],
    [parameter.valueUsageContext.extension],
    [parameter.valueUsageContext.code],
    [parameter.valueUsageContext.value.codeableConcept],
    [parameter.valueUsageContext.value.quantity],
    [parameter.valueUsageContext.value.range],
    [parameter.valueUsageContext.value.reference],
    [parameter.valueDosage.id],
    [parameter.valueDosage.extension],
    [parameter.valueDosage.modifierExtension],
    [parameter.valueDosage.sequence],
    [parameter.valueDosage.text],
    [parameter.valueDosage.additionalInstruction],
    [parameter.valueDosage.patientInstruction],
    [parameter.valueDosage.timing],
    [parameter.valueDosage.site],
    [parameter.valueDosage.route],
    [parameter.valueDosage.method],
    [parameter.valueDosage.doseAndRate],
    [parameter.valueDosage.maxDosePerPeriod],
    [parameter.valueDosage.maxDosePerAdministration],
    [parameter.valueDosage.maxDosePerLifetime],
    [parameter.valueDosage.asNeeded.boolean],
    [parameter.valueDosage.asNeeded.codeableConcept],
    [parameter.valueMeta.id],
    [parameter.valueMeta.extension],
    [parameter.valueMeta.versionId],
    [parameter.valueMeta.lastUpdated],
    [parameter.valueMeta.source],
    [parameter.valueMeta.profile],
    [parameter.valueMeta.security],
    [parameter.valueMeta.tag],
    [parameter.part]
FROM openrowset (
        BULK 'Parameters/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [parameter.JSON]  VARCHAR(MAX) '$.parameter'
    ) AS rowset
    CROSS APPLY openjson (rowset.[parameter.JSON]) with (
        [parameter.id]                 NVARCHAR(100)       '$.id',
        [parameter.extension]          NVARCHAR(MAX)       '$.extension',
        [parameter.modifierExtension]  NVARCHAR(MAX)       '$.modifierExtension',
        [parameter.name]               NVARCHAR(500)       '$.name',
        [parameter.valueBase64Binary]  NVARCHAR(4000)      '$.valueBase64Binary',
        [parameter.valueBoolean]       bit                 '$.valueBoolean',
        [parameter.valueCanonical]     NVARCHAR(4000)      '$.valueCanonical',
        [parameter.valueCode]          NVARCHAR(4000)      '$.valueCode',
        [parameter.valueDate]          NVARCHAR(4000)      '$.valueDate',
        [parameter.valueDateTime]      NVARCHAR(4000)      '$.valueDateTime',
        [parameter.valueDecimal]       NVARCHAR(MAX)       '$.valueDecimal',
        [parameter.valueId]            NVARCHAR(4000)      '$.valueId',
        [parameter.valueInstant]       NVARCHAR(4000)      '$.valueInstant',
        [parameter.valueInteger]       NVARCHAR(MAX)       '$.valueInteger',
        [parameter.valueInteger64]     NVARCHAR(4000)      '$.valueInteger64',
        [parameter.valueMarkdown]      NVARCHAR(4000)      '$.valueMarkdown',
        [parameter.valueOid]           NVARCHAR(4000)      '$.valueOid',
        [parameter.valuePositiveInt]   NVARCHAR(MAX)       '$.valuePositiveInt',
        [parameter.valueString]        NVARCHAR(4000)      '$.valueString',
        [parameter.valueTime]          NVARCHAR(4000)      '$.valueTime',
        [parameter.valueUnsignedInt]   NVARCHAR(MAX)       '$.valueUnsignedInt',
        [parameter.valueUri]           NVARCHAR(4000)      '$.valueUri',
        [parameter.valueUrl]           NVARCHAR(4000)      '$.valueUrl',
        [parameter.valueUuid]          NVARCHAR(4000)      '$.valueUuid',
        [parameter.valueAddress.id]    NVARCHAR(100)       '$.valueAddress.id',
        [parameter.valueAddress.extension] NVARCHAR(MAX)       '$.valueAddress.extension',
        [parameter.valueAddress.use]   NVARCHAR(64)        '$.valueAddress.use',
        [parameter.valueAddress.type]  NVARCHAR(64)        '$.valueAddress.type',
        [parameter.valueAddress.text]  NVARCHAR(4000)      '$.valueAddress.text',
        [parameter.valueAddress.line]  NVARCHAR(MAX)       '$.valueAddress.line',
        [parameter.valueAddress.city]  NVARCHAR(500)       '$.valueAddress.city',
        [parameter.valueAddress.district] NVARCHAR(500)       '$.valueAddress.district',
        [parameter.valueAddress.state] NVARCHAR(500)       '$.valueAddress.state',
        [parameter.valueAddress.postalCode] NVARCHAR(100)       '$.valueAddress.postalCode',
        [parameter.valueAddress.country] NVARCHAR(500)       '$.valueAddress.country',
        [parameter.valueAddress.period] NVARCHAR(MAX)       '$.valueAddress.period',
        [parameter.valueAge.id]        NVARCHAR(100)       '$.valueAge.id',
        [parameter.valueAge.extension] NVARCHAR(MAX)       '$.valueAge.extension',
        [parameter.valueAge.value]     float               '$.valueAge.value',
        [parameter.valueAge.comparator] NVARCHAR(64)        '$.valueAge.comparator',
        [parameter.valueAge.unit]      NVARCHAR(100)       '$.valueAge.unit',
        [parameter.valueAge.system]    VARCHAR(256)        '$.valueAge.system',
        [parameter.valueAge.code]      NVARCHAR(4000)      '$.valueAge.code',
        [parameter.valueAnnotation.id] NVARCHAR(100)       '$.valueAnnotation.id',
        [parameter.valueAnnotation.extension] NVARCHAR(MAX)       '$.valueAnnotation.extension',
        [parameter.valueAnnotation.time] VARCHAR(64)         '$.valueAnnotation.time',
        [parameter.valueAnnotation.text] NVARCHAR(MAX)       '$.valueAnnotation.text',
        [parameter.valueAnnotation.author.reference] NVARCHAR(MAX)       '$.valueAnnotation.author.reference',
        [parameter.valueAnnotation.author.string] NVARCHAR(4000)      '$.valueAnnotation.author.string',
        [parameter.valueAttachment.id] NVARCHAR(100)       '$.valueAttachment.id',
        [parameter.valueAttachment.extension] NVARCHAR(MAX)       '$.valueAttachment.extension',
        [parameter.valueAttachment.contentType] NVARCHAR(100)       '$.valueAttachment.contentType',
        [parameter.valueAttachment.language] NVARCHAR(100)       '$.valueAttachment.language',
        [parameter.valueAttachment.data] NVARCHAR(MAX)       '$.valueAttachment.data',
        [parameter.valueAttachment.url] VARCHAR(256)        '$.valueAttachment.url',
        [parameter.valueAttachment.size] NVARCHAR(MAX)       '$.valueAttachment.size',
        [parameter.valueAttachment.hash] NVARCHAR(MAX)       '$.valueAttachment.hash',
        [parameter.valueAttachment.title] NVARCHAR(4000)      '$.valueAttachment.title',
        [parameter.valueAttachment.creation] VARCHAR(64)         '$.valueAttachment.creation',
        [parameter.valueAttachment.height] bigint              '$.valueAttachment.height',
        [parameter.valueAttachment.width] bigint              '$.valueAttachment.width',
        [parameter.valueAttachment.frames] bigint              '$.valueAttachment.frames',
        [parameter.valueAttachment.duration] float               '$.valueAttachment.duration',
        [parameter.valueAttachment.pages] bigint              '$.valueAttachment.pages',
        [parameter.valueCodeableConcept.id] NVARCHAR(100)       '$.valueCodeableConcept.id',
        [parameter.valueCodeableConcept.extension] NVARCHAR(MAX)       '$.valueCodeableConcept.extension',
        [parameter.valueCodeableConcept.coding] NVARCHAR(MAX)       '$.valueCodeableConcept.coding',
        [parameter.valueCodeableConcept.text] NVARCHAR(4000)      '$.valueCodeableConcept.text',
        [parameter.valueCodeableReference.id] NVARCHAR(100)       '$.valueCodeableReference.id',
        [parameter.valueCodeableReference.extension] NVARCHAR(MAX)       '$.valueCodeableReference.extension',
        [parameter.valueCodeableReference.concept] NVARCHAR(MAX)       '$.valueCodeableReference.concept',
        [parameter.valueCodeableReference.reference] NVARCHAR(MAX)       '$.valueCodeableReference.reference',
        [parameter.valueCoding.id]     NVARCHAR(100)       '$.valueCoding.id',
        [parameter.valueCoding.extension] NVARCHAR(MAX)       '$.valueCoding.extension',
        [parameter.valueCoding.system] VARCHAR(256)        '$.valueCoding.system',
        [parameter.valueCoding.version] NVARCHAR(100)       '$.valueCoding.version',
        [parameter.valueCoding.code]   NVARCHAR(4000)      '$.valueCoding.code',
        [parameter.valueCoding.display] NVARCHAR(4000)      '$.valueCoding.display',
        [parameter.valueCoding.userSelected] bit                 '$.valueCoding.userSelected',
        [parameter.valueContactPoint.id] NVARCHAR(100)       '$.valueContactPoint.id',
        [parameter.valueContactPoint.extension] NVARCHAR(MAX)       '$.valueContactPoint.extension',
        [parameter.valueContactPoint.system] NVARCHAR(64)        '$.valueContactPoint.system',
        [parameter.valueContactPoint.value] NVARCHAR(4000)      '$.valueContactPoint.value',
        [parameter.valueContactPoint.use] NVARCHAR(64)        '$.valueContactPoint.use',
        [parameter.valueContactPoint.rank] bigint              '$.valueContactPoint.rank',
        [parameter.valueContactPoint.period] NVARCHAR(MAX)       '$.valueContactPoint.period',
        [parameter.valueCount.id]      NVARCHAR(100)       '$.valueCount.id',
        [parameter.valueCount.extension] NVARCHAR(MAX)       '$.valueCount.extension',
        [parameter.valueCount.value]   float               '$.valueCount.value',
        [parameter.valueCount.comparator] NVARCHAR(64)        '$.valueCount.comparator',
        [parameter.valueCount.unit]    NVARCHAR(100)       '$.valueCount.unit',
        [parameter.valueCount.system]  VARCHAR(256)        '$.valueCount.system',
        [parameter.valueCount.code]    NVARCHAR(4000)      '$.valueCount.code',
        [parameter.valueDistance.id]   NVARCHAR(100)       '$.valueDistance.id',
        [parameter.valueDistance.extension] NVARCHAR(MAX)       '$.valueDistance.extension',
        [parameter.valueDistance.value] float               '$.valueDistance.value',
        [parameter.valueDistance.comparator] NVARCHAR(64)        '$.valueDistance.comparator',
        [parameter.valueDistance.unit] NVARCHAR(100)       '$.valueDistance.unit',
        [parameter.valueDistance.system] VARCHAR(256)        '$.valueDistance.system',
        [parameter.valueDistance.code] NVARCHAR(4000)      '$.valueDistance.code',
        [parameter.valueDuration.id]   NVARCHAR(100)       '$.valueDuration.id',
        [parameter.valueDuration.extension] NVARCHAR(MAX)       '$.valueDuration.extension',
        [parameter.valueDuration.value] float               '$.valueDuration.value',
        [parameter.valueDuration.comparator] NVARCHAR(64)        '$.valueDuration.comparator',
        [parameter.valueDuration.unit] NVARCHAR(100)       '$.valueDuration.unit',
        [parameter.valueDuration.system] VARCHAR(256)        '$.valueDuration.system',
        [parameter.valueDuration.code] NVARCHAR(4000)      '$.valueDuration.code',
        [parameter.valueHumanName.id]  NVARCHAR(100)       '$.valueHumanName.id',
        [parameter.valueHumanName.extension] NVARCHAR(MAX)       '$.valueHumanName.extension',
        [parameter.valueHumanName.use] NVARCHAR(64)        '$.valueHumanName.use',
        [parameter.valueHumanName.text] NVARCHAR(4000)      '$.valueHumanName.text',
        [parameter.valueHumanName.family] NVARCHAR(500)       '$.valueHumanName.family',
        [parameter.valueHumanName.given] NVARCHAR(MAX)       '$.valueHumanName.given',
        [parameter.valueHumanName.prefix] NVARCHAR(MAX)       '$.valueHumanName.prefix',
        [parameter.valueHumanName.suffix] NVARCHAR(MAX)       '$.valueHumanName.suffix',
        [parameter.valueHumanName.period] NVARCHAR(MAX)       '$.valueHumanName.period',
        [parameter.valueIdentifier.id] NVARCHAR(100)       '$.valueIdentifier.id',
        [parameter.valueIdentifier.extension] NVARCHAR(MAX)       '$.valueIdentifier.extension',
        [parameter.valueIdentifier.use] NVARCHAR(64)        '$.valueIdentifier.use',
        [parameter.valueIdentifier.type] NVARCHAR(MAX)       '$.valueIdentifier.type',
        [parameter.valueIdentifier.system] VARCHAR(256)        '$.valueIdentifier.system',
        [parameter.valueIdentifier.value] NVARCHAR(4000)      '$.valueIdentifier.value',
        [parameter.valueIdentifier.period] NVARCHAR(MAX)       '$.valueIdentifier.period',
        [parameter.valueIdentifier.assigner] NVARCHAR(MAX)       '$.valueIdentifier.assigner',
        [parameter.valueMoney.id]      NVARCHAR(100)       '$.valueMoney.id',
        [parameter.valueMoney.extension] NVARCHAR(MAX)       '$.valueMoney.extension',
        [parameter.valueMoney.value]   float               '$.valueMoney.value',
        [parameter.valueMoney.currency] NVARCHAR(100)       '$.valueMoney.currency',
        [parameter.valuePeriod.id]     NVARCHAR(100)       '$.valuePeriod.id',
        [parameter.valuePeriod.extension] NVARCHAR(MAX)       '$.valuePeriod.extension',
        [parameter.valuePeriod.start]  VARCHAR(64)         '$.valuePeriod.start',
        [parameter.valuePeriod.end]    VARCHAR(64)         '$.valuePeriod.end',
        [parameter.valueQuantity.id]   NVARCHAR(100)       '$.valueQuantity.id',
        [parameter.valueQuantity.extension] NVARCHAR(MAX)       '$.valueQuantity.extension',
        [parameter.valueQuantity.value] float               '$.valueQuantity.value',
        [parameter.valueQuantity.comparator] NVARCHAR(64)        '$.valueQuantity.comparator',
        [parameter.valueQuantity.unit] NVARCHAR(100)       '$.valueQuantity.unit',
        [parameter.valueQuantity.system] VARCHAR(256)        '$.valueQuantity.system',
        [parameter.valueQuantity.code] NVARCHAR(4000)      '$.valueQuantity.code',
        [parameter.valueRange.id]      NVARCHAR(100)       '$.valueRange.id',
        [parameter.valueRange.extension] NVARCHAR(MAX)       '$.valueRange.extension',
        [parameter.valueRange.low]     NVARCHAR(MAX)       '$.valueRange.low',
        [parameter.valueRange.high]    NVARCHAR(MAX)       '$.valueRange.high',
        [parameter.valueRatio.id]      NVARCHAR(100)       '$.valueRatio.id',
        [parameter.valueRatio.extension] NVARCHAR(MAX)       '$.valueRatio.extension',
        [parameter.valueRatio.numerator] NVARCHAR(MAX)       '$.valueRatio.numerator',
        [parameter.valueRatio.denominator] NVARCHAR(MAX)       '$.valueRatio.denominator',
        [parameter.valueRatioRange.id] NVARCHAR(100)       '$.valueRatioRange.id',
        [parameter.valueRatioRange.extension] NVARCHAR(MAX)       '$.valueRatioRange.extension',
        [parameter.valueRatioRange.lowNumerator] NVARCHAR(MAX)       '$.valueRatioRange.lowNumerator',
        [parameter.valueRatioRange.highNumerator] NVARCHAR(MAX)       '$.valueRatioRange.highNumerator',
        [parameter.valueRatioRange.denominator] NVARCHAR(MAX)       '$.valueRatioRange.denominator',
        [parameter.valueReference.id]  NVARCHAR(100)       '$.valueReference.id',
        [parameter.valueReference.extension] NVARCHAR(MAX)       '$.valueReference.extension',
        [parameter.valueReference.reference] NVARCHAR(4000)      '$.valueReference.reference',
        [parameter.valueReference.type] VARCHAR(256)        '$.valueReference.type',
        [parameter.valueReference.identifier] NVARCHAR(MAX)       '$.valueReference.identifier',
        [parameter.valueReference.display] NVARCHAR(4000)      '$.valueReference.display',
        [parameter.valueSampledData.id] NVARCHAR(100)       '$.valueSampledData.id',
        [parameter.valueSampledData.extension] NVARCHAR(MAX)       '$.valueSampledData.extension',
        [parameter.valueSampledData.origin] NVARCHAR(MAX)       '$.valueSampledData.origin',
        [parameter.valueSampledData.period] float               '$.valueSampledData.period',
        [parameter.valueSampledData.factor] float               '$.valueSampledData.factor',
        [parameter.valueSampledData.lowerLimit] float               '$.valueSampledData.lowerLimit',
        [parameter.valueSampledData.upperLimit] float               '$.valueSampledData.upperLimit',
        [parameter.valueSampledData.dimensions] bigint              '$.valueSampledData.dimensions',
        [parameter.valueSampledData.data] NVARCHAR(4000)      '$.valueSampledData.data',
        [parameter.valueSignature.id]  NVARCHAR(100)       '$.valueSignature.id',
        [parameter.valueSignature.extension] NVARCHAR(MAX)       '$.valueSignature.extension',
        [parameter.valueSignature.type] NVARCHAR(MAX)       '$.valueSignature.type',
        [parameter.valueSignature.when] VARCHAR(64)         '$.valueSignature.when',
        [parameter.valueSignature.who] NVARCHAR(MAX)       '$.valueSignature.who',
        [parameter.valueSignature.onBehalfOf] NVARCHAR(MAX)       '$.valueSignature.onBehalfOf',
        [parameter.valueSignature.targetFormat] NVARCHAR(100)       '$.valueSignature.targetFormat',
        [parameter.valueSignature.sigFormat] NVARCHAR(100)       '$.valueSignature.sigFormat',
        [parameter.valueSignature.data] NVARCHAR(MAX)       '$.valueSignature.data',
        [parameter.valueTiming.id]     NVARCHAR(100)       '$.valueTiming.id',
        [parameter.valueTiming.extension] NVARCHAR(MAX)       '$.valueTiming.extension',
        [parameter.valueTiming.modifierExtension] NVARCHAR(MAX)       '$.valueTiming.modifierExtension',
        [parameter.valueTiming.event]  NVARCHAR(MAX)       '$.valueTiming.event',
        [parameter.valueTiming.repeat] NVARCHAR(MAX)       '$.valueTiming.repeat',
        [parameter.valueTiming.code]   NVARCHAR(MAX)       '$.valueTiming.code',
        [parameter.valueContactDetail.id] NVARCHAR(100)       '$.valueContactDetail.id',
        [parameter.valueContactDetail.extension] NVARCHAR(MAX)       '$.valueContactDetail.extension',
        [parameter.valueContactDetail.name] NVARCHAR(500)       '$.valueContactDetail.name',
        [parameter.valueContactDetail.telecom] NVARCHAR(MAX)       '$.valueContactDetail.telecom',
        [parameter.valueContributor.id] NVARCHAR(100)       '$.valueContributor.id',
        [parameter.valueContributor.extension] NVARCHAR(MAX)       '$.valueContributor.extension',
        [parameter.valueContributor.type] NVARCHAR(64)        '$.valueContributor.type',
        [parameter.valueContributor.name] NVARCHAR(500)       '$.valueContributor.name',
        [parameter.valueContributor.contact] NVARCHAR(MAX)       '$.valueContributor.contact',
        [parameter.valueDataRequirement.id] NVARCHAR(100)       '$.valueDataRequirement.id',
        [parameter.valueDataRequirement.extension] NVARCHAR(MAX)       '$.valueDataRequirement.extension',
        [parameter.valueDataRequirement.type] NVARCHAR(100)       '$.valueDataRequirement.type',
        [parameter.valueDataRequirement.profile] NVARCHAR(MAX)       '$.valueDataRequirement.profile',
        [parameter.valueDataRequirement.mustSupport] NVARCHAR(MAX)       '$.valueDataRequirement.mustSupport',
        [parameter.valueDataRequirement.codeFilter] NVARCHAR(MAX)       '$.valueDataRequirement.codeFilter',
        [parameter.valueDataRequirement.dateFilter] NVARCHAR(MAX)       '$.valueDataRequirement.dateFilter',
        [parameter.valueDataRequirement.limit] bigint              '$.valueDataRequirement.limit',
        [parameter.valueDataRequirement.sort] NVARCHAR(MAX)       '$.valueDataRequirement.sort',
        [parameter.valueDataRequirement.subject.codeableConcept] NVARCHAR(MAX)       '$.valueDataRequirement.subject.codeableConcept',
        [parameter.valueDataRequirement.subject.reference] NVARCHAR(MAX)       '$.valueDataRequirement.subject.reference',
        [parameter.valueExpression.id] NVARCHAR(100)       '$.valueExpression.id',
        [parameter.valueExpression.extension] NVARCHAR(MAX)       '$.valueExpression.extension',
        [parameter.valueExpression.description] NVARCHAR(4000)      '$.valueExpression.description',
        [parameter.valueExpression.name] VARCHAR(64)         '$.valueExpression.name',
        [parameter.valueExpression.language] NVARCHAR(100)       '$.valueExpression.language',
        [parameter.valueExpression.expression] NVARCHAR(4000)      '$.valueExpression.expression',
        [parameter.valueExpression.reference] VARCHAR(256)        '$.valueExpression.reference',
        [parameter.valueParameterDefinition.id] NVARCHAR(100)       '$.valueParameterDefinition.id',
        [parameter.valueParameterDefinition.extension] NVARCHAR(MAX)       '$.valueParameterDefinition.extension',
        [parameter.valueParameterDefinition.name] NVARCHAR(500)       '$.valueParameterDefinition.name',
        [parameter.valueParameterDefinition.use] NVARCHAR(100)       '$.valueParameterDefinition.use',
        [parameter.valueParameterDefinition.min] bigint              '$.valueParameterDefinition.min',
        [parameter.valueParameterDefinition.max] NVARCHAR(100)       '$.valueParameterDefinition.max',
        [parameter.valueParameterDefinition.documentation] NVARCHAR(4000)      '$.valueParameterDefinition.documentation',
        [parameter.valueParameterDefinition.type] NVARCHAR(100)       '$.valueParameterDefinition.type',
        [parameter.valueParameterDefinition.profile] VARCHAR(256)        '$.valueParameterDefinition.profile',
        [parameter.valueRelatedArtifact.id] NVARCHAR(100)       '$.valueRelatedArtifact.id',
        [parameter.valueRelatedArtifact.extension] NVARCHAR(MAX)       '$.valueRelatedArtifact.extension',
        [parameter.valueRelatedArtifact.type] NVARCHAR(64)        '$.valueRelatedArtifact.type',
        [parameter.valueRelatedArtifact.classifier] NVARCHAR(MAX)       '$.valueRelatedArtifact.classifier',
        [parameter.valueRelatedArtifact.label] NVARCHAR(100)       '$.valueRelatedArtifact.label',
        [parameter.valueRelatedArtifact.display] NVARCHAR(4000)      '$.valueRelatedArtifact.display',
        [parameter.valueRelatedArtifact.citation] NVARCHAR(MAX)       '$.valueRelatedArtifact.citation',
        [parameter.valueRelatedArtifact.document] NVARCHAR(MAX)       '$.valueRelatedArtifact.document',
        [parameter.valueRelatedArtifact.resource] VARCHAR(256)        '$.valueRelatedArtifact.resource',
        [parameter.valueRelatedArtifact.resourceReference] NVARCHAR(MAX)       '$.valueRelatedArtifact.resourceReference',
        [parameter.valueTriggerDefinition.id] NVARCHAR(100)       '$.valueTriggerDefinition.id',
        [parameter.valueTriggerDefinition.extension] NVARCHAR(MAX)       '$.valueTriggerDefinition.extension',
        [parameter.valueTriggerDefinition.type] NVARCHAR(64)        '$.valueTriggerDefinition.type',
        [parameter.valueTriggerDefinition.name] NVARCHAR(500)       '$.valueTriggerDefinition.name',
        [parameter.valueTriggerDefinition.data] NVARCHAR(MAX)       '$.valueTriggerDefinition.data',
        [parameter.valueTriggerDefinition.condition] NVARCHAR(MAX)       '$.valueTriggerDefinition.condition',
        [parameter.valueTriggerDefinition.timing.timing] NVARCHAR(MAX)       '$.valueTriggerDefinition.timing.timing',
        [parameter.valueTriggerDefinition.timing.reference] NVARCHAR(MAX)       '$.valueTriggerDefinition.timing.reference',
        [parameter.valueTriggerDefinition.timing.date] VARCHAR(64)         '$.valueTriggerDefinition.timing.date',
        [parameter.valueTriggerDefinition.timing.dateTime] VARCHAR(64)         '$.valueTriggerDefinition.timing.dateTime',
        [parameter.valueUsageContext.id] NVARCHAR(100)       '$.valueUsageContext.id',
        [parameter.valueUsageContext.extension] NVARCHAR(MAX)       '$.valueUsageContext.extension',
        [parameter.valueUsageContext.code] NVARCHAR(MAX)       '$.valueUsageContext.code',
        [parameter.valueUsageContext.value.codeableConcept] NVARCHAR(MAX)       '$.valueUsageContext.value.codeableConcept',
        [parameter.valueUsageContext.value.quantity] NVARCHAR(MAX)       '$.valueUsageContext.value.quantity',
        [parameter.valueUsageContext.value.range] NVARCHAR(MAX)       '$.valueUsageContext.value.range',
        [parameter.valueUsageContext.value.reference] NVARCHAR(MAX)       '$.valueUsageContext.value.reference',
        [parameter.valueDosage.id]     NVARCHAR(100)       '$.valueDosage.id',
        [parameter.valueDosage.extension] NVARCHAR(MAX)       '$.valueDosage.extension',
        [parameter.valueDosage.modifierExtension] NVARCHAR(MAX)       '$.valueDosage.modifierExtension',
        [parameter.valueDosage.sequence] bigint              '$.valueDosage.sequence',
        [parameter.valueDosage.text]   NVARCHAR(4000)      '$.valueDosage.text',
        [parameter.valueDosage.additionalInstruction] NVARCHAR(MAX)       '$.valueDosage.additionalInstruction',
        [parameter.valueDosage.patientInstruction] NVARCHAR(4000)      '$.valueDosage.patientInstruction',
        [parameter.valueDosage.timing] NVARCHAR(MAX)       '$.valueDosage.timing',
        [parameter.valueDosage.site]   NVARCHAR(MAX)       '$.valueDosage.site',
        [parameter.valueDosage.route]  NVARCHAR(MAX)       '$.valueDosage.route',
        [parameter.valueDosage.method] NVARCHAR(MAX)       '$.valueDosage.method',
        [parameter.valueDosage.doseAndRate] NVARCHAR(MAX)       '$.valueDosage.doseAndRate',
        [parameter.valueDosage.maxDosePerPeriod] NVARCHAR(MAX)       '$.valueDosage.maxDosePerPeriod',
        [parameter.valueDosage.maxDosePerAdministration] NVARCHAR(MAX)       '$.valueDosage.maxDosePerAdministration',
        [parameter.valueDosage.maxDosePerLifetime] NVARCHAR(MAX)       '$.valueDosage.maxDosePerLifetime',
        [parameter.valueDosage.asNeeded.boolean] bit                 '$.valueDosage.asNeeded.boolean',
        [parameter.valueDosage.asNeeded.codeableConcept] NVARCHAR(MAX)       '$.valueDosage.asNeeded.codeableConcept',
        [parameter.valueMeta.id]       NVARCHAR(100)       '$.valueMeta.id',
        [parameter.valueMeta.extension] NVARCHAR(MAX)       '$.valueMeta.extension',
        [parameter.valueMeta.versionId] VARCHAR(64)         '$.valueMeta.versionId',
        [parameter.valueMeta.lastUpdated] VARCHAR(64)         '$.valueMeta.lastUpdated',
        [parameter.valueMeta.source]   VARCHAR(256)        '$.valueMeta.source',
        [parameter.valueMeta.profile]  NVARCHAR(MAX)       '$.valueMeta.profile',
        [parameter.valueMeta.security] NVARCHAR(MAX)       '$.valueMeta.security',
        [parameter.valueMeta.tag]      NVARCHAR(MAX)       '$.valueMeta.tag',
        [parameter.part]               NVARCHAR(MAX)       '$.part' AS JSON
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[Patient] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [active] bit,
    [name] VARCHAR(MAX),
    [telecom] VARCHAR(MAX),
    [gender] NVARCHAR(4000),
    [birthDate] VARCHAR(64),
    [address] VARCHAR(MAX),
    [maritalStatus.id] NVARCHAR(100),
    [maritalStatus.extension] NVARCHAR(MAX),
    [maritalStatus.coding] VARCHAR(MAX),
    [maritalStatus.text] NVARCHAR(4000),
    [photo] VARCHAR(MAX),
    [contact] VARCHAR(MAX),
    [communication] VARCHAR(MAX),
    [generalPractitioner] VARCHAR(MAX),
    [managingOrganization.id] NVARCHAR(100),
    [managingOrganization.extension] NVARCHAR(MAX),
    [managingOrganization.reference] NVARCHAR(4000),
    [managingOrganization.type] VARCHAR(256),
    [managingOrganization.identifier.id] NVARCHAR(100),
    [managingOrganization.identifier.extension] NVARCHAR(MAX),
    [managingOrganization.identifier.use] NVARCHAR(64),
    [managingOrganization.identifier.type] NVARCHAR(MAX),
    [managingOrganization.identifier.system] VARCHAR(256),
    [managingOrganization.identifier.value] NVARCHAR(4000),
    [managingOrganization.identifier.period] NVARCHAR(MAX),
    [managingOrganization.identifier.assigner] NVARCHAR(MAX),
    [managingOrganization.display] NVARCHAR(4000),
    [link] VARCHAR(MAX),
    [deceased.boolean] bit,
    [deceased.dateTime] VARCHAR(64),
    [multipleBirth.boolean] bit,
    [multipleBirth.integer] bigint,
) WITH (
    LOCATION='/Patient/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.PatientIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'Patient/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.PatientName AS
SELECT
    [id],
    [name.JSON],
    [name.id],
    [name.extension],
    [name.use],
    [name.text],
    [name.family],
    [name.given],
    [name.prefix],
    [name.suffix],
    [name.period.id],
    [name.period.extension],
    [name.period.start],
    [name.period.end]
FROM openrowset (
        BULK 'Patient/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [name.JSON]  VARCHAR(MAX) '$.name'
    ) AS rowset
    CROSS APPLY openjson (rowset.[name.JSON]) with (
        [name.id]                      NVARCHAR(100)       '$.id',
        [name.extension]               NVARCHAR(MAX)       '$.extension',
        [name.use]                     NVARCHAR(64)        '$.use',
        [name.text]                    NVARCHAR(4000)      '$.text',
        [name.family]                  NVARCHAR(500)       '$.family',
        [name.given]                   NVARCHAR(MAX)       '$.given' AS JSON,
        [name.prefix]                  NVARCHAR(MAX)       '$.prefix' AS JSON,
        [name.suffix]                  NVARCHAR(MAX)       '$.suffix' AS JSON,
        [name.period.id]               NVARCHAR(100)       '$.period.id',
        [name.period.extension]        NVARCHAR(MAX)       '$.period.extension',
        [name.period.start]            VARCHAR(64)         '$.period.start',
        [name.period.end]              VARCHAR(64)         '$.period.end'
    ) j

GO

CREATE VIEW fhir.PatientTelecom AS
SELECT
    [id],
    [telecom.JSON],
    [telecom.id],
    [telecom.extension],
    [telecom.system],
    [telecom.value],
    [telecom.use],
    [telecom.rank],
    [telecom.period.id],
    [telecom.period.extension],
    [telecom.period.start],
    [telecom.period.end]
FROM openrowset (
        BULK 'Patient/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [telecom.JSON]  VARCHAR(MAX) '$.telecom'
    ) AS rowset
    CROSS APPLY openjson (rowset.[telecom.JSON]) with (
        [telecom.id]                   NVARCHAR(100)       '$.id',
        [telecom.extension]            NVARCHAR(MAX)       '$.extension',
        [telecom.system]               NVARCHAR(64)        '$.system',
        [telecom.value]                NVARCHAR(4000)      '$.value',
        [telecom.use]                  NVARCHAR(64)        '$.use',
        [telecom.rank]                 bigint              '$.rank',
        [telecom.period.id]            NVARCHAR(100)       '$.period.id',
        [telecom.period.extension]     NVARCHAR(MAX)       '$.period.extension',
        [telecom.period.start]         VARCHAR(64)         '$.period.start',
        [telecom.period.end]           VARCHAR(64)         '$.period.end'
    ) j

GO

CREATE VIEW fhir.PatientAddress AS
SELECT
    [id],
    [address.JSON],
    [address.id],
    [address.extension],
    [address.use],
    [address.type],
    [address.text],
    [address.line],
    [address.city],
    [address.district],
    [address.state],
    [address.postalCode],
    [address.country],
    [address.period.id],
    [address.period.extension],
    [address.period.start],
    [address.period.end]
FROM openrowset (
        BULK 'Patient/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [address.JSON]  VARCHAR(MAX) '$.address'
    ) AS rowset
    CROSS APPLY openjson (rowset.[address.JSON]) with (
        [address.id]                   NVARCHAR(100)       '$.id',
        [address.extension]            NVARCHAR(MAX)       '$.extension',
        [address.use]                  NVARCHAR(64)        '$.use',
        [address.type]                 NVARCHAR(64)        '$.type',
        [address.text]                 NVARCHAR(4000)      '$.text',
        [address.line]                 NVARCHAR(MAX)       '$.line' AS JSON,
        [address.city]                 NVARCHAR(500)       '$.city',
        [address.district]             NVARCHAR(500)       '$.district',
        [address.state]                NVARCHAR(500)       '$.state',
        [address.postalCode]           NVARCHAR(100)       '$.postalCode',
        [address.country]              NVARCHAR(500)       '$.country',
        [address.period.id]            NVARCHAR(100)       '$.period.id',
        [address.period.extension]     NVARCHAR(MAX)       '$.period.extension',
        [address.period.start]         VARCHAR(64)         '$.period.start',
        [address.period.end]           VARCHAR(64)         '$.period.end'
    ) j

GO

CREATE VIEW fhir.PatientPhoto AS
SELECT
    [id],
    [photo.JSON],
    [photo.id],
    [photo.extension],
    [photo.contentType],
    [photo.language],
    [photo.data],
    [photo.url],
    [photo.size],
    [photo.hash],
    [photo.title],
    [photo.creation],
    [photo.height],
    [photo.width],
    [photo.frames],
    [photo.duration],
    [photo.pages]
FROM openrowset (
        BULK 'Patient/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [photo.JSON]  VARCHAR(MAX) '$.photo'
    ) AS rowset
    CROSS APPLY openjson (rowset.[photo.JSON]) with (
        [photo.id]                     NVARCHAR(100)       '$.id',
        [photo.extension]              NVARCHAR(MAX)       '$.extension',
        [photo.contentType]            NVARCHAR(100)       '$.contentType',
        [photo.language]               NVARCHAR(100)       '$.language',
        [photo.data]                   NVARCHAR(MAX)       '$.data',
        [photo.url]                    VARCHAR(256)        '$.url',
        [photo.size]                   NVARCHAR(MAX)       '$.size',
        [photo.hash]                   NVARCHAR(MAX)       '$.hash',
        [photo.title]                  NVARCHAR(4000)      '$.title',
        [photo.creation]               VARCHAR(64)         '$.creation',
        [photo.height]                 bigint              '$.height',
        [photo.width]                  bigint              '$.width',
        [photo.frames]                 bigint              '$.frames',
        [photo.duration]               float               '$.duration',
        [photo.pages]                  bigint              '$.pages'
    ) j

GO

CREATE VIEW fhir.PatientContact AS
SELECT
    [id],
    [contact.JSON],
    [contact.id],
    [contact.extension],
    [contact.modifierExtension],
    [contact.relationship],
    [contact.name.id],
    [contact.name.extension],
    [contact.name.use],
    [contact.name.text],
    [contact.name.family],
    [contact.name.given],
    [contact.name.prefix],
    [contact.name.suffix],
    [contact.name.period],
    [contact.telecom],
    [contact.address.id],
    [contact.address.extension],
    [contact.address.use],
    [contact.address.type],
    [contact.address.text],
    [contact.address.line],
    [contact.address.city],
    [contact.address.district],
    [contact.address.state],
    [contact.address.postalCode],
    [contact.address.country],
    [contact.address.period],
    [contact.gender],
    [contact.organization.id],
    [contact.organization.extension],
    [contact.organization.reference],
    [contact.organization.type],
    [contact.organization.identifier],
    [contact.organization.display],
    [contact.period.id],
    [contact.period.extension],
    [contact.period.start],
    [contact.period.end]
FROM openrowset (
        BULK 'Patient/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [contact.JSON]  VARCHAR(MAX) '$.contact'
    ) AS rowset
    CROSS APPLY openjson (rowset.[contact.JSON]) with (
        [contact.id]                   NVARCHAR(100)       '$.id',
        [contact.extension]            NVARCHAR(MAX)       '$.extension',
        [contact.modifierExtension]    NVARCHAR(MAX)       '$.modifierExtension',
        [contact.relationship]         NVARCHAR(MAX)       '$.relationship' AS JSON,
        [contact.name.id]              NVARCHAR(100)       '$.name.id',
        [contact.name.extension]       NVARCHAR(MAX)       '$.name.extension',
        [contact.name.use]             NVARCHAR(64)        '$.name.use',
        [contact.name.text]            NVARCHAR(4000)      '$.name.text',
        [contact.name.family]          NVARCHAR(500)       '$.name.family',
        [contact.name.given]           NVARCHAR(MAX)       '$.name.given',
        [contact.name.prefix]          NVARCHAR(MAX)       '$.name.prefix',
        [contact.name.suffix]          NVARCHAR(MAX)       '$.name.suffix',
        [contact.name.period]          NVARCHAR(MAX)       '$.name.period',
        [contact.telecom]              NVARCHAR(MAX)       '$.telecom' AS JSON,
        [contact.address.id]           NVARCHAR(100)       '$.address.id',
        [contact.address.extension]    NVARCHAR(MAX)       '$.address.extension',
        [contact.address.use]          NVARCHAR(64)        '$.address.use',
        [contact.address.type]         NVARCHAR(64)        '$.address.type',
        [contact.address.text]         NVARCHAR(4000)      '$.address.text',
        [contact.address.line]         NVARCHAR(MAX)       '$.address.line',
        [contact.address.city]         NVARCHAR(500)       '$.address.city',
        [contact.address.district]     NVARCHAR(500)       '$.address.district',
        [contact.address.state]        NVARCHAR(500)       '$.address.state',
        [contact.address.postalCode]   NVARCHAR(100)       '$.address.postalCode',
        [contact.address.country]      NVARCHAR(500)       '$.address.country',
        [contact.address.period]       NVARCHAR(MAX)       '$.address.period',
        [contact.gender]               NVARCHAR(4000)      '$.gender',
        [contact.organization.id]      NVARCHAR(100)       '$.organization.id',
        [contact.organization.extension] NVARCHAR(MAX)       '$.organization.extension',
        [contact.organization.reference] NVARCHAR(4000)      '$.organization.reference',
        [contact.organization.type]    VARCHAR(256)        '$.organization.type',
        [contact.organization.identifier] NVARCHAR(MAX)       '$.organization.identifier',
        [contact.organization.display] NVARCHAR(4000)      '$.organization.display',
        [contact.period.id]            NVARCHAR(100)       '$.period.id',
        [contact.period.extension]     NVARCHAR(MAX)       '$.period.extension',
        [contact.period.start]         VARCHAR(64)         '$.period.start',
        [contact.period.end]           VARCHAR(64)         '$.period.end'
    ) j

GO

CREATE VIEW fhir.PatientCommunication AS
SELECT
    [id],
    [communication.JSON],
    [communication.id],
    [communication.extension],
    [communication.modifierExtension],
    [communication.language.id],
    [communication.language.extension],
    [communication.language.coding],
    [communication.language.text],
    [communication.preferred]
FROM openrowset (
        BULK 'Patient/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [communication.JSON]  VARCHAR(MAX) '$.communication'
    ) AS rowset
    CROSS APPLY openjson (rowset.[communication.JSON]) with (
        [communication.id]             NVARCHAR(100)       '$.id',
        [communication.extension]      NVARCHAR(MAX)       '$.extension',
        [communication.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [communication.language.id]    NVARCHAR(100)       '$.language.id',
        [communication.language.extension] NVARCHAR(MAX)       '$.language.extension',
        [communication.language.coding] NVARCHAR(MAX)       '$.language.coding',
        [communication.language.text]  NVARCHAR(4000)      '$.language.text',
        [communication.preferred]      bit                 '$.preferred'
    ) j

GO

CREATE VIEW fhir.PatientGeneralPractitioner AS
SELECT
    [id],
    [generalPractitioner.JSON],
    [generalPractitioner.id],
    [generalPractitioner.extension],
    [generalPractitioner.reference],
    [generalPractitioner.type],
    [generalPractitioner.identifier.id],
    [generalPractitioner.identifier.extension],
    [generalPractitioner.identifier.use],
    [generalPractitioner.identifier.type],
    [generalPractitioner.identifier.system],
    [generalPractitioner.identifier.value],
    [generalPractitioner.identifier.period],
    [generalPractitioner.identifier.assigner],
    [generalPractitioner.display]
FROM openrowset (
        BULK 'Patient/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [generalPractitioner.JSON]  VARCHAR(MAX) '$.generalPractitioner'
    ) AS rowset
    CROSS APPLY openjson (rowset.[generalPractitioner.JSON]) with (
        [generalPractitioner.id]       NVARCHAR(100)       '$.id',
        [generalPractitioner.extension] NVARCHAR(MAX)       '$.extension',
        [generalPractitioner.reference] NVARCHAR(4000)      '$.reference',
        [generalPractitioner.type]     VARCHAR(256)        '$.type',
        [generalPractitioner.identifier.id] NVARCHAR(100)       '$.identifier.id',
        [generalPractitioner.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [generalPractitioner.identifier.use] NVARCHAR(64)        '$.identifier.use',
        [generalPractitioner.identifier.type] NVARCHAR(MAX)       '$.identifier.type',
        [generalPractitioner.identifier.system] VARCHAR(256)        '$.identifier.system',
        [generalPractitioner.identifier.value] NVARCHAR(4000)      '$.identifier.value',
        [generalPractitioner.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [generalPractitioner.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [generalPractitioner.display]  NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.PatientLink AS
SELECT
    [id],
    [link.JSON],
    [link.id],
    [link.extension],
    [link.modifierExtension],
    [link.other.id],
    [link.other.extension],
    [link.other.reference],
    [link.other.type],
    [link.other.identifier],
    [link.other.display],
    [link.type]
FROM openrowset (
        BULK 'Patient/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [link.JSON]  VARCHAR(MAX) '$.link'
    ) AS rowset
    CROSS APPLY openjson (rowset.[link.JSON]) with (
        [link.id]                      NVARCHAR(100)       '$.id',
        [link.extension]               NVARCHAR(MAX)       '$.extension',
        [link.modifierExtension]       NVARCHAR(MAX)       '$.modifierExtension',
        [link.other.id]                NVARCHAR(100)       '$.other.id',
        [link.other.extension]         NVARCHAR(MAX)       '$.other.extension',
        [link.other.reference]         NVARCHAR(4000)      '$.other.reference',
        [link.other.type]              VARCHAR(256)        '$.other.type',
        [link.other.identifier]        NVARCHAR(MAX)       '$.other.identifier',
        [link.other.display]           NVARCHAR(4000)      '$.other.display',
        [link.type]                    NVARCHAR(100)       '$.type'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[PaymentNotice] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [status] NVARCHAR(100),
    [request.id] NVARCHAR(100),
    [request.extension] NVARCHAR(MAX),
    [request.reference] NVARCHAR(4000),
    [request.type] VARCHAR(256),
    [request.identifier.id] NVARCHAR(100),
    [request.identifier.extension] NVARCHAR(MAX),
    [request.identifier.use] NVARCHAR(64),
    [request.identifier.type] NVARCHAR(MAX),
    [request.identifier.system] VARCHAR(256),
    [request.identifier.value] NVARCHAR(4000),
    [request.identifier.period] NVARCHAR(MAX),
    [request.identifier.assigner] NVARCHAR(MAX),
    [request.display] NVARCHAR(4000),
    [response.id] NVARCHAR(100),
    [response.extension] NVARCHAR(MAX),
    [response.reference] NVARCHAR(4000),
    [response.type] VARCHAR(256),
    [response.identifier.id] NVARCHAR(100),
    [response.identifier.extension] NVARCHAR(MAX),
    [response.identifier.use] NVARCHAR(64),
    [response.identifier.type] NVARCHAR(MAX),
    [response.identifier.system] VARCHAR(256),
    [response.identifier.value] NVARCHAR(4000),
    [response.identifier.period] NVARCHAR(MAX),
    [response.identifier.assigner] NVARCHAR(MAX),
    [response.display] NVARCHAR(4000),
    [created] VARCHAR(64),
    [provider.id] NVARCHAR(100),
    [provider.extension] NVARCHAR(MAX),
    [provider.reference] NVARCHAR(4000),
    [provider.type] VARCHAR(256),
    [provider.identifier.id] NVARCHAR(100),
    [provider.identifier.extension] NVARCHAR(MAX),
    [provider.identifier.use] NVARCHAR(64),
    [provider.identifier.type] NVARCHAR(MAX),
    [provider.identifier.system] VARCHAR(256),
    [provider.identifier.value] NVARCHAR(4000),
    [provider.identifier.period] NVARCHAR(MAX),
    [provider.identifier.assigner] NVARCHAR(MAX),
    [provider.display] NVARCHAR(4000),
    [payment.id] NVARCHAR(100),
    [payment.extension] NVARCHAR(MAX),
    [payment.reference] NVARCHAR(4000),
    [payment.type] VARCHAR(256),
    [payment.identifier.id] NVARCHAR(100),
    [payment.identifier.extension] NVARCHAR(MAX),
    [payment.identifier.use] NVARCHAR(64),
    [payment.identifier.type] NVARCHAR(MAX),
    [payment.identifier.system] VARCHAR(256),
    [payment.identifier.value] NVARCHAR(4000),
    [payment.identifier.period] NVARCHAR(MAX),
    [payment.identifier.assigner] NVARCHAR(MAX),
    [payment.display] NVARCHAR(4000),
    [paymentDate] VARCHAR(64),
    [payee.id] NVARCHAR(100),
    [payee.extension] NVARCHAR(MAX),
    [payee.reference] NVARCHAR(4000),
    [payee.type] VARCHAR(256),
    [payee.identifier.id] NVARCHAR(100),
    [payee.identifier.extension] NVARCHAR(MAX),
    [payee.identifier.use] NVARCHAR(64),
    [payee.identifier.type] NVARCHAR(MAX),
    [payee.identifier.system] VARCHAR(256),
    [payee.identifier.value] NVARCHAR(4000),
    [payee.identifier.period] NVARCHAR(MAX),
    [payee.identifier.assigner] NVARCHAR(MAX),
    [payee.display] NVARCHAR(4000),
    [recipient.id] NVARCHAR(100),
    [recipient.extension] NVARCHAR(MAX),
    [recipient.reference] NVARCHAR(4000),
    [recipient.type] VARCHAR(256),
    [recipient.identifier.id] NVARCHAR(100),
    [recipient.identifier.extension] NVARCHAR(MAX),
    [recipient.identifier.use] NVARCHAR(64),
    [recipient.identifier.type] NVARCHAR(MAX),
    [recipient.identifier.system] VARCHAR(256),
    [recipient.identifier.value] NVARCHAR(4000),
    [recipient.identifier.period] NVARCHAR(MAX),
    [recipient.identifier.assigner] NVARCHAR(MAX),
    [recipient.display] NVARCHAR(4000),
    [amount.id] NVARCHAR(100),
    [amount.extension] NVARCHAR(MAX),
    [amount.value] float,
    [amount.currency] NVARCHAR(100),
    [paymentStatus.id] NVARCHAR(100),
    [paymentStatus.extension] NVARCHAR(MAX),
    [paymentStatus.coding] VARCHAR(MAX),
    [paymentStatus.text] NVARCHAR(4000),
) WITH (
    LOCATION='/PaymentNotice/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.PaymentNoticeIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'PaymentNotice/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[PaymentReconciliation] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [status] NVARCHAR(100),
    [period.id] NVARCHAR(100),
    [period.extension] NVARCHAR(MAX),
    [period.start] VARCHAR(64),
    [period.end] VARCHAR(64),
    [created] VARCHAR(64),
    [paymentIssuer.id] NVARCHAR(100),
    [paymentIssuer.extension] NVARCHAR(MAX),
    [paymentIssuer.reference] NVARCHAR(4000),
    [paymentIssuer.type] VARCHAR(256),
    [paymentIssuer.identifier.id] NVARCHAR(100),
    [paymentIssuer.identifier.extension] NVARCHAR(MAX),
    [paymentIssuer.identifier.use] NVARCHAR(64),
    [paymentIssuer.identifier.type] NVARCHAR(MAX),
    [paymentIssuer.identifier.system] VARCHAR(256),
    [paymentIssuer.identifier.value] NVARCHAR(4000),
    [paymentIssuer.identifier.period] NVARCHAR(MAX),
    [paymentIssuer.identifier.assigner] NVARCHAR(MAX),
    [paymentIssuer.display] NVARCHAR(4000),
    [request.id] NVARCHAR(100),
    [request.extension] NVARCHAR(MAX),
    [request.reference] NVARCHAR(4000),
    [request.type] VARCHAR(256),
    [request.identifier.id] NVARCHAR(100),
    [request.identifier.extension] NVARCHAR(MAX),
    [request.identifier.use] NVARCHAR(64),
    [request.identifier.type] NVARCHAR(MAX),
    [request.identifier.system] VARCHAR(256),
    [request.identifier.value] NVARCHAR(4000),
    [request.identifier.period] NVARCHAR(MAX),
    [request.identifier.assigner] NVARCHAR(MAX),
    [request.display] NVARCHAR(4000),
    [requestor.id] NVARCHAR(100),
    [requestor.extension] NVARCHAR(MAX),
    [requestor.reference] NVARCHAR(4000),
    [requestor.type] VARCHAR(256),
    [requestor.identifier.id] NVARCHAR(100),
    [requestor.identifier.extension] NVARCHAR(MAX),
    [requestor.identifier.use] NVARCHAR(64),
    [requestor.identifier.type] NVARCHAR(MAX),
    [requestor.identifier.system] VARCHAR(256),
    [requestor.identifier.value] NVARCHAR(4000),
    [requestor.identifier.period] NVARCHAR(MAX),
    [requestor.identifier.assigner] NVARCHAR(MAX),
    [requestor.display] NVARCHAR(4000),
    [outcome] NVARCHAR(100),
    [disposition] NVARCHAR(4000),
    [paymentDate] VARCHAR(64),
    [paymentAmount.id] NVARCHAR(100),
    [paymentAmount.extension] NVARCHAR(MAX),
    [paymentAmount.value] float,
    [paymentAmount.currency] NVARCHAR(100),
    [paymentIdentifier.id] NVARCHAR(100),
    [paymentIdentifier.extension] NVARCHAR(MAX),
    [paymentIdentifier.use] NVARCHAR(64),
    [paymentIdentifier.type.id] NVARCHAR(100),
    [paymentIdentifier.type.extension] NVARCHAR(MAX),
    [paymentIdentifier.type.coding] NVARCHAR(MAX),
    [paymentIdentifier.type.text] NVARCHAR(4000),
    [paymentIdentifier.system] VARCHAR(256),
    [paymentIdentifier.value] NVARCHAR(4000),
    [paymentIdentifier.period.id] NVARCHAR(100),
    [paymentIdentifier.period.extension] NVARCHAR(MAX),
    [paymentIdentifier.period.start] VARCHAR(64),
    [paymentIdentifier.period.end] VARCHAR(64),
    [paymentIdentifier.assigner.id] NVARCHAR(100),
    [paymentIdentifier.assigner.extension] NVARCHAR(MAX),
    [paymentIdentifier.assigner.reference] NVARCHAR(4000),
    [paymentIdentifier.assigner.type] VARCHAR(256),
    [paymentIdentifier.assigner.identifier] NVARCHAR(MAX),
    [paymentIdentifier.assigner.display] NVARCHAR(4000),
    [detail] VARCHAR(MAX),
    [formCode.id] NVARCHAR(100),
    [formCode.extension] NVARCHAR(MAX),
    [formCode.coding] VARCHAR(MAX),
    [formCode.text] NVARCHAR(4000),
    [processNote] VARCHAR(MAX),
) WITH (
    LOCATION='/PaymentReconciliation/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.PaymentReconciliationIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'PaymentReconciliation/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.PaymentReconciliationDetail AS
SELECT
    [id],
    [detail.JSON],
    [detail.id],
    [detail.extension],
    [detail.modifierExtension],
    [detail.identifier.id],
    [detail.identifier.extension],
    [detail.identifier.use],
    [detail.identifier.type],
    [detail.identifier.system],
    [detail.identifier.value],
    [detail.identifier.period],
    [detail.identifier.assigner],
    [detail.predecessor.id],
    [detail.predecessor.extension],
    [detail.predecessor.use],
    [detail.predecessor.type],
    [detail.predecessor.system],
    [detail.predecessor.value],
    [detail.predecessor.period],
    [detail.predecessor.assigner],
    [detail.type.id],
    [detail.type.extension],
    [detail.type.coding],
    [detail.type.text],
    [detail.request.id],
    [detail.request.extension],
    [detail.request.reference],
    [detail.request.type],
    [detail.request.identifier],
    [detail.request.display],
    [detail.submitter.id],
    [detail.submitter.extension],
    [detail.submitter.reference],
    [detail.submitter.type],
    [detail.submitter.identifier],
    [detail.submitter.display],
    [detail.response.id],
    [detail.response.extension],
    [detail.response.reference],
    [detail.response.type],
    [detail.response.identifier],
    [detail.response.display],
    [detail.date],
    [detail.responsible.id],
    [detail.responsible.extension],
    [detail.responsible.reference],
    [detail.responsible.type],
    [detail.responsible.identifier],
    [detail.responsible.display],
    [detail.payee.id],
    [detail.payee.extension],
    [detail.payee.reference],
    [detail.payee.type],
    [detail.payee.identifier],
    [detail.payee.display],
    [detail.amount.id],
    [detail.amount.extension],
    [detail.amount.value],
    [detail.amount.currency]
FROM openrowset (
        BULK 'PaymentReconciliation/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [detail.JSON]  VARCHAR(MAX) '$.detail'
    ) AS rowset
    CROSS APPLY openjson (rowset.[detail.JSON]) with (
        [detail.id]                    NVARCHAR(100)       '$.id',
        [detail.extension]             NVARCHAR(MAX)       '$.extension',
        [detail.modifierExtension]     NVARCHAR(MAX)       '$.modifierExtension',
        [detail.identifier.id]         NVARCHAR(100)       '$.identifier.id',
        [detail.identifier.extension]  NVARCHAR(MAX)       '$.identifier.extension',
        [detail.identifier.use]        NVARCHAR(64)        '$.identifier.use',
        [detail.identifier.type]       NVARCHAR(MAX)       '$.identifier.type',
        [detail.identifier.system]     VARCHAR(256)        '$.identifier.system',
        [detail.identifier.value]      NVARCHAR(4000)      '$.identifier.value',
        [detail.identifier.period]     NVARCHAR(MAX)       '$.identifier.period',
        [detail.identifier.assigner]   NVARCHAR(MAX)       '$.identifier.assigner',
        [detail.predecessor.id]        NVARCHAR(100)       '$.predecessor.id',
        [detail.predecessor.extension] NVARCHAR(MAX)       '$.predecessor.extension',
        [detail.predecessor.use]       NVARCHAR(64)        '$.predecessor.use',
        [detail.predecessor.type]      NVARCHAR(MAX)       '$.predecessor.type',
        [detail.predecessor.system]    VARCHAR(256)        '$.predecessor.system',
        [detail.predecessor.value]     NVARCHAR(4000)      '$.predecessor.value',
        [detail.predecessor.period]    NVARCHAR(MAX)       '$.predecessor.period',
        [detail.predecessor.assigner]  NVARCHAR(MAX)       '$.predecessor.assigner',
        [detail.type.id]               NVARCHAR(100)       '$.type.id',
        [detail.type.extension]        NVARCHAR(MAX)       '$.type.extension',
        [detail.type.coding]           NVARCHAR(MAX)       '$.type.coding',
        [detail.type.text]             NVARCHAR(4000)      '$.type.text',
        [detail.request.id]            NVARCHAR(100)       '$.request.id',
        [detail.request.extension]     NVARCHAR(MAX)       '$.request.extension',
        [detail.request.reference]     NVARCHAR(4000)      '$.request.reference',
        [detail.request.type]          VARCHAR(256)        '$.request.type',
        [detail.request.identifier]    NVARCHAR(MAX)       '$.request.identifier',
        [detail.request.display]       NVARCHAR(4000)      '$.request.display',
        [detail.submitter.id]          NVARCHAR(100)       '$.submitter.id',
        [detail.submitter.extension]   NVARCHAR(MAX)       '$.submitter.extension',
        [detail.submitter.reference]   NVARCHAR(4000)      '$.submitter.reference',
        [detail.submitter.type]        VARCHAR(256)        '$.submitter.type',
        [detail.submitter.identifier]  NVARCHAR(MAX)       '$.submitter.identifier',
        [detail.submitter.display]     NVARCHAR(4000)      '$.submitter.display',
        [detail.response.id]           NVARCHAR(100)       '$.response.id',
        [detail.response.extension]    NVARCHAR(MAX)       '$.response.extension',
        [detail.response.reference]    NVARCHAR(4000)      '$.response.reference',
        [detail.response.type]         VARCHAR(256)        '$.response.type',
        [detail.response.identifier]   NVARCHAR(MAX)       '$.response.identifier',
        [detail.response.display]      NVARCHAR(4000)      '$.response.display',
        [detail.date]                  VARCHAR(64)         '$.date',
        [detail.responsible.id]        NVARCHAR(100)       '$.responsible.id',
        [detail.responsible.extension] NVARCHAR(MAX)       '$.responsible.extension',
        [detail.responsible.reference] NVARCHAR(4000)      '$.responsible.reference',
        [detail.responsible.type]      VARCHAR(256)        '$.responsible.type',
        [detail.responsible.identifier] NVARCHAR(MAX)       '$.responsible.identifier',
        [detail.responsible.display]   NVARCHAR(4000)      '$.responsible.display',
        [detail.payee.id]              NVARCHAR(100)       '$.payee.id',
        [detail.payee.extension]       NVARCHAR(MAX)       '$.payee.extension',
        [detail.payee.reference]       NVARCHAR(4000)      '$.payee.reference',
        [detail.payee.type]            VARCHAR(256)        '$.payee.type',
        [detail.payee.identifier]      NVARCHAR(MAX)       '$.payee.identifier',
        [detail.payee.display]         NVARCHAR(4000)      '$.payee.display',
        [detail.amount.id]             NVARCHAR(100)       '$.amount.id',
        [detail.amount.extension]      NVARCHAR(MAX)       '$.amount.extension',
        [detail.amount.value]          float               '$.amount.value',
        [detail.amount.currency]       NVARCHAR(100)       '$.amount.currency'
    ) j

GO

CREATE VIEW fhir.PaymentReconciliationProcessNote AS
SELECT
    [id],
    [processNote.JSON],
    [processNote.id],
    [processNote.extension],
    [processNote.modifierExtension],
    [processNote.type],
    [processNote.text]
FROM openrowset (
        BULK 'PaymentReconciliation/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [processNote.JSON]  VARCHAR(MAX) '$.processNote'
    ) AS rowset
    CROSS APPLY openjson (rowset.[processNote.JSON]) with (
        [processNote.id]               NVARCHAR(100)       '$.id',
        [processNote.extension]        NVARCHAR(MAX)       '$.extension',
        [processNote.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [processNote.type]             NVARCHAR(100)       '$.type',
        [processNote.text]             NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[Permission] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [status] NVARCHAR(100),
    [intent.id] NVARCHAR(100),
    [intent.extension] NVARCHAR(MAX),
    [intent.coding] VARCHAR(MAX),
    [intent.text] NVARCHAR(4000),
    [asserter.id] NVARCHAR(100),
    [asserter.extension] NVARCHAR(MAX),
    [asserter.reference] NVARCHAR(4000),
    [asserter.type] VARCHAR(256),
    [asserter.identifier.id] NVARCHAR(100),
    [asserter.identifier.extension] NVARCHAR(MAX),
    [asserter.identifier.use] NVARCHAR(64),
    [asserter.identifier.type] NVARCHAR(MAX),
    [asserter.identifier.system] VARCHAR(256),
    [asserter.identifier.value] NVARCHAR(4000),
    [asserter.identifier.period] NVARCHAR(MAX),
    [asserter.identifier.assigner] NVARCHAR(MAX),
    [asserter.display] NVARCHAR(4000),
    [assertionDate] VARCHAR(MAX),
    [validity.id] NVARCHAR(100),
    [validity.extension] NVARCHAR(MAX),
    [validity.start] VARCHAR(64),
    [validity.end] VARCHAR(64),
    [purpose] VARCHAR(MAX),
    [dataScope] VARCHAR(MAX),
    [processingActivity] VARCHAR(MAX),
    [justification.id] NVARCHAR(100),
    [justification.extension] NVARCHAR(MAX),
    [justification.modifierExtension] NVARCHAR(MAX),
    [justification.evidence] VARCHAR(MAX),
    [justification.grounds] VARCHAR(MAX),
    [usageLimitations] VARCHAR(MAX),
) WITH (
    LOCATION='/Permission/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.PermissionAssertionDate AS
SELECT
    [id],
    [assertionDate.JSON],
    [assertionDate]
FROM openrowset (
        BULK 'Permission/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [assertionDate.JSON]  VARCHAR(MAX) '$.assertionDate'
    ) AS rowset
    CROSS APPLY openjson (rowset.[assertionDate.JSON]) with (
        [assertionDate]                NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.PermissionPurpose AS
SELECT
    [id],
    [purpose.JSON],
    [purpose.id],
    [purpose.extension],
    [purpose.coding],
    [purpose.text]
FROM openrowset (
        BULK 'Permission/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [purpose.JSON]  VARCHAR(MAX) '$.purpose'
    ) AS rowset
    CROSS APPLY openjson (rowset.[purpose.JSON]) with (
        [purpose.id]                   NVARCHAR(100)       '$.id',
        [purpose.extension]            NVARCHAR(MAX)       '$.extension',
        [purpose.coding]               NVARCHAR(MAX)       '$.coding' AS JSON,
        [purpose.text]                 NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.PermissionDataScope AS
SELECT
    [id],
    [dataScope.JSON],
    [dataScope.id],
    [dataScope.extension],
    [dataScope.description],
    [dataScope.name],
    [dataScope.language],
    [dataScope.expression],
    [dataScope.reference]
FROM openrowset (
        BULK 'Permission/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [dataScope.JSON]  VARCHAR(MAX) '$.dataScope'
    ) AS rowset
    CROSS APPLY openjson (rowset.[dataScope.JSON]) with (
        [dataScope.id]                 NVARCHAR(100)       '$.id',
        [dataScope.extension]          NVARCHAR(MAX)       '$.extension',
        [dataScope.description]        NVARCHAR(4000)      '$.description',
        [dataScope.name]               VARCHAR(64)         '$.name',
        [dataScope.language]           NVARCHAR(100)       '$.language',
        [dataScope.expression]         NVARCHAR(4000)      '$.expression',
        [dataScope.reference]          VARCHAR(256)        '$.reference'
    ) j

GO

CREATE VIEW fhir.PermissionProcessingActivity AS
SELECT
    [id],
    [processingActivity.JSON],
    [processingActivity.id],
    [processingActivity.extension],
    [processingActivity.modifierExtension],
    [processingActivity.partyReference],
    [processingActivity.partyCodeableConcept],
    [processingActivity.purpose]
FROM openrowset (
        BULK 'Permission/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [processingActivity.JSON]  VARCHAR(MAX) '$.processingActivity'
    ) AS rowset
    CROSS APPLY openjson (rowset.[processingActivity.JSON]) with (
        [processingActivity.id]        NVARCHAR(100)       '$.id',
        [processingActivity.extension] NVARCHAR(MAX)       '$.extension',
        [processingActivity.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [processingActivity.partyReference] NVARCHAR(MAX)       '$.partyReference' AS JSON,
        [processingActivity.partyCodeableConcept] NVARCHAR(MAX)       '$.partyCodeableConcept' AS JSON,
        [processingActivity.purpose]   NVARCHAR(MAX)       '$.purpose' AS JSON
    ) j

GO

CREATE VIEW fhir.PermissionUsageLimitations AS
SELECT
    [id],
    [usageLimitations.JSON],
    [usageLimitations.id],
    [usageLimitations.extension],
    [usageLimitations.coding],
    [usageLimitations.text]
FROM openrowset (
        BULK 'Permission/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [usageLimitations.JSON]  VARCHAR(MAX) '$.usageLimitations'
    ) AS rowset
    CROSS APPLY openjson (rowset.[usageLimitations.JSON]) with (
        [usageLimitations.id]          NVARCHAR(100)       '$.id',
        [usageLimitations.extension]   NVARCHAR(MAX)       '$.extension',
        [usageLimitations.coding]      NVARCHAR(MAX)       '$.coding' AS JSON,
        [usageLimitations.text]        NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[Person] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [active] bit,
    [name] VARCHAR(MAX),
    [telecom] VARCHAR(MAX),
    [gender] NVARCHAR(4000),
    [birthDate] VARCHAR(64),
    [address] VARCHAR(MAX),
    [maritalStatus.id] NVARCHAR(100),
    [maritalStatus.extension] NVARCHAR(MAX),
    [maritalStatus.coding] VARCHAR(MAX),
    [maritalStatus.text] NVARCHAR(4000),
    [photo] VARCHAR(MAX),
    [managingOrganization.id] NVARCHAR(100),
    [managingOrganization.extension] NVARCHAR(MAX),
    [managingOrganization.reference] NVARCHAR(4000),
    [managingOrganization.type] VARCHAR(256),
    [managingOrganization.identifier.id] NVARCHAR(100),
    [managingOrganization.identifier.extension] NVARCHAR(MAX),
    [managingOrganization.identifier.use] NVARCHAR(64),
    [managingOrganization.identifier.type] NVARCHAR(MAX),
    [managingOrganization.identifier.system] VARCHAR(256),
    [managingOrganization.identifier.value] NVARCHAR(4000),
    [managingOrganization.identifier.period] NVARCHAR(MAX),
    [managingOrganization.identifier.assigner] NVARCHAR(MAX),
    [managingOrganization.display] NVARCHAR(4000),
    [communication] VARCHAR(MAX),
    [link] VARCHAR(MAX),
    [deceased.boolean] bit,
    [deceased.dateTime] VARCHAR(64),
) WITH (
    LOCATION='/Person/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.PersonIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'Person/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.PersonName AS
SELECT
    [id],
    [name.JSON],
    [name.id],
    [name.extension],
    [name.use],
    [name.text],
    [name.family],
    [name.given],
    [name.prefix],
    [name.suffix],
    [name.period.id],
    [name.period.extension],
    [name.period.start],
    [name.period.end]
FROM openrowset (
        BULK 'Person/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [name.JSON]  VARCHAR(MAX) '$.name'
    ) AS rowset
    CROSS APPLY openjson (rowset.[name.JSON]) with (
        [name.id]                      NVARCHAR(100)       '$.id',
        [name.extension]               NVARCHAR(MAX)       '$.extension',
        [name.use]                     NVARCHAR(64)        '$.use',
        [name.text]                    NVARCHAR(4000)      '$.text',
        [name.family]                  NVARCHAR(500)       '$.family',
        [name.given]                   NVARCHAR(MAX)       '$.given' AS JSON,
        [name.prefix]                  NVARCHAR(MAX)       '$.prefix' AS JSON,
        [name.suffix]                  NVARCHAR(MAX)       '$.suffix' AS JSON,
        [name.period.id]               NVARCHAR(100)       '$.period.id',
        [name.period.extension]        NVARCHAR(MAX)       '$.period.extension',
        [name.period.start]            VARCHAR(64)         '$.period.start',
        [name.period.end]              VARCHAR(64)         '$.period.end'
    ) j

GO

CREATE VIEW fhir.PersonTelecom AS
SELECT
    [id],
    [telecom.JSON],
    [telecom.id],
    [telecom.extension],
    [telecom.system],
    [telecom.value],
    [telecom.use],
    [telecom.rank],
    [telecom.period.id],
    [telecom.period.extension],
    [telecom.period.start],
    [telecom.period.end]
FROM openrowset (
        BULK 'Person/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [telecom.JSON]  VARCHAR(MAX) '$.telecom'
    ) AS rowset
    CROSS APPLY openjson (rowset.[telecom.JSON]) with (
        [telecom.id]                   NVARCHAR(100)       '$.id',
        [telecom.extension]            NVARCHAR(MAX)       '$.extension',
        [telecom.system]               NVARCHAR(64)        '$.system',
        [telecom.value]                NVARCHAR(4000)      '$.value',
        [telecom.use]                  NVARCHAR(64)        '$.use',
        [telecom.rank]                 bigint              '$.rank',
        [telecom.period.id]            NVARCHAR(100)       '$.period.id',
        [telecom.period.extension]     NVARCHAR(MAX)       '$.period.extension',
        [telecom.period.start]         VARCHAR(64)         '$.period.start',
        [telecom.period.end]           VARCHAR(64)         '$.period.end'
    ) j

GO

CREATE VIEW fhir.PersonAddress AS
SELECT
    [id],
    [address.JSON],
    [address.id],
    [address.extension],
    [address.use],
    [address.type],
    [address.text],
    [address.line],
    [address.city],
    [address.district],
    [address.state],
    [address.postalCode],
    [address.country],
    [address.period.id],
    [address.period.extension],
    [address.period.start],
    [address.period.end]
FROM openrowset (
        BULK 'Person/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [address.JSON]  VARCHAR(MAX) '$.address'
    ) AS rowset
    CROSS APPLY openjson (rowset.[address.JSON]) with (
        [address.id]                   NVARCHAR(100)       '$.id',
        [address.extension]            NVARCHAR(MAX)       '$.extension',
        [address.use]                  NVARCHAR(64)        '$.use',
        [address.type]                 NVARCHAR(64)        '$.type',
        [address.text]                 NVARCHAR(4000)      '$.text',
        [address.line]                 NVARCHAR(MAX)       '$.line' AS JSON,
        [address.city]                 NVARCHAR(500)       '$.city',
        [address.district]             NVARCHAR(500)       '$.district',
        [address.state]                NVARCHAR(500)       '$.state',
        [address.postalCode]           NVARCHAR(100)       '$.postalCode',
        [address.country]              NVARCHAR(500)       '$.country',
        [address.period.id]            NVARCHAR(100)       '$.period.id',
        [address.period.extension]     NVARCHAR(MAX)       '$.period.extension',
        [address.period.start]         VARCHAR(64)         '$.period.start',
        [address.period.end]           VARCHAR(64)         '$.period.end'
    ) j

GO

CREATE VIEW fhir.PersonPhoto AS
SELECT
    [id],
    [photo.JSON],
    [photo.id],
    [photo.extension],
    [photo.contentType],
    [photo.language],
    [photo.data],
    [photo.url],
    [photo.size],
    [photo.hash],
    [photo.title],
    [photo.creation],
    [photo.height],
    [photo.width],
    [photo.frames],
    [photo.duration],
    [photo.pages]
FROM openrowset (
        BULK 'Person/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [photo.JSON]  VARCHAR(MAX) '$.photo'
    ) AS rowset
    CROSS APPLY openjson (rowset.[photo.JSON]) with (
        [photo.id]                     NVARCHAR(100)       '$.id',
        [photo.extension]              NVARCHAR(MAX)       '$.extension',
        [photo.contentType]            NVARCHAR(100)       '$.contentType',
        [photo.language]               NVARCHAR(100)       '$.language',
        [photo.data]                   NVARCHAR(MAX)       '$.data',
        [photo.url]                    VARCHAR(256)        '$.url',
        [photo.size]                   NVARCHAR(MAX)       '$.size',
        [photo.hash]                   NVARCHAR(MAX)       '$.hash',
        [photo.title]                  NVARCHAR(4000)      '$.title',
        [photo.creation]               VARCHAR(64)         '$.creation',
        [photo.height]                 bigint              '$.height',
        [photo.width]                  bigint              '$.width',
        [photo.frames]                 bigint              '$.frames',
        [photo.duration]               float               '$.duration',
        [photo.pages]                  bigint              '$.pages'
    ) j

GO

CREATE VIEW fhir.PersonCommunication AS
SELECT
    [id],
    [communication.JSON],
    [communication.id],
    [communication.extension],
    [communication.modifierExtension],
    [communication.language.id],
    [communication.language.extension],
    [communication.language.coding],
    [communication.language.text],
    [communication.preferred]
FROM openrowset (
        BULK 'Person/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [communication.JSON]  VARCHAR(MAX) '$.communication'
    ) AS rowset
    CROSS APPLY openjson (rowset.[communication.JSON]) with (
        [communication.id]             NVARCHAR(100)       '$.id',
        [communication.extension]      NVARCHAR(MAX)       '$.extension',
        [communication.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [communication.language.id]    NVARCHAR(100)       '$.language.id',
        [communication.language.extension] NVARCHAR(MAX)       '$.language.extension',
        [communication.language.coding] NVARCHAR(MAX)       '$.language.coding',
        [communication.language.text]  NVARCHAR(4000)      '$.language.text',
        [communication.preferred]      bit                 '$.preferred'
    ) j

GO

CREATE VIEW fhir.PersonLink AS
SELECT
    [id],
    [link.JSON],
    [link.id],
    [link.extension],
    [link.modifierExtension],
    [link.target.id],
    [link.target.extension],
    [link.target.reference],
    [link.target.type],
    [link.target.identifier],
    [link.target.display],
    [link.assurance]
FROM openrowset (
        BULK 'Person/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [link.JSON]  VARCHAR(MAX) '$.link'
    ) AS rowset
    CROSS APPLY openjson (rowset.[link.JSON]) with (
        [link.id]                      NVARCHAR(100)       '$.id',
        [link.extension]               NVARCHAR(MAX)       '$.extension',
        [link.modifierExtension]       NVARCHAR(MAX)       '$.modifierExtension',
        [link.target.id]               NVARCHAR(100)       '$.target.id',
        [link.target.extension]        NVARCHAR(MAX)       '$.target.extension',
        [link.target.reference]        NVARCHAR(4000)      '$.target.reference',
        [link.target.type]             VARCHAR(256)        '$.target.type',
        [link.target.identifier]       NVARCHAR(MAX)       '$.target.identifier',
        [link.target.display]          NVARCHAR(4000)      '$.target.display',
        [link.assurance]               NVARCHAR(4000)      '$.assurance'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[PlanDefinition] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [url] VARCHAR(256),
    [identifier] VARCHAR(MAX),
    [version] NVARCHAR(100),
    [name] NVARCHAR(500),
    [title] NVARCHAR(4000),
    [status] NVARCHAR(100),
    [experimental] bit,
    [date] VARCHAR(64),
    [publisher] NVARCHAR(500),
    [contact] VARCHAR(MAX),
    [description] NVARCHAR(MAX),
    [useContext] VARCHAR(MAX),
    [jurisdiction] VARCHAR(MAX),
    [purpose] NVARCHAR(MAX),
    [copyright] NVARCHAR(MAX),
    [approvalDate] VARCHAR(64),
    [lastReviewDate] VARCHAR(64),
    [effectivePeriod.id] NVARCHAR(100),
    [effectivePeriod.extension] NVARCHAR(MAX),
    [effectivePeriod.start] VARCHAR(64),
    [effectivePeriod.end] VARCHAR(64),
    [topic] VARCHAR(MAX),
    [author] VARCHAR(MAX),
    [editor] VARCHAR(MAX),
    [reviewer] VARCHAR(MAX),
    [endorser] VARCHAR(MAX),
    [relatedArtifact] VARCHAR(MAX),
    [subtitle] NVARCHAR(4000),
    [type.id] NVARCHAR(100),
    [type.extension] NVARCHAR(MAX),
    [type.coding] VARCHAR(MAX),
    [type.text] NVARCHAR(4000),
    [usage] NVARCHAR(4000),
    [library] VARCHAR(MAX),
    [goal] VARCHAR(MAX),
    [actor] VARCHAR(MAX),
    [action] VARCHAR(MAX),
    [subject.codeableConcept.id] NVARCHAR(100),
    [subject.codeableConcept.extension] NVARCHAR(MAX),
    [subject.codeableConcept.coding] VARCHAR(MAX),
    [subject.codeableConcept.text] NVARCHAR(4000),
    [subject.reference.id] NVARCHAR(100),
    [subject.reference.extension] NVARCHAR(MAX),
    [subject.reference.reference] NVARCHAR(4000),
    [subject.reference.type] VARCHAR(256),
    [subject.reference.identifier.id] NVARCHAR(100),
    [subject.reference.identifier.extension] NVARCHAR(MAX),
    [subject.reference.identifier.use] NVARCHAR(64),
    [subject.reference.identifier.type] NVARCHAR(MAX),
    [subject.reference.identifier.system] VARCHAR(256),
    [subject.reference.identifier.value] NVARCHAR(4000),
    [subject.reference.identifier.period] NVARCHAR(MAX),
    [subject.reference.identifier.assigner] NVARCHAR(MAX),
    [subject.reference.display] NVARCHAR(4000),
    [subject.canonical] VARCHAR(256),
) WITH (
    LOCATION='/PlanDefinition/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.PlanDefinitionIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'PlanDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.PlanDefinitionContact AS
SELECT
    [id],
    [contact.JSON],
    [contact.id],
    [contact.extension],
    [contact.name],
    [contact.telecom]
FROM openrowset (
        BULK 'PlanDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [contact.JSON]  VARCHAR(MAX) '$.contact'
    ) AS rowset
    CROSS APPLY openjson (rowset.[contact.JSON]) with (
        [contact.id]                   NVARCHAR(100)       '$.id',
        [contact.extension]            NVARCHAR(MAX)       '$.extension',
        [contact.name]                 NVARCHAR(500)       '$.name',
        [contact.telecom]              NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.PlanDefinitionUseContext AS
SELECT
    [id],
    [useContext.JSON],
    [useContext.id],
    [useContext.extension],
    [useContext.code.id],
    [useContext.code.extension],
    [useContext.code.system],
    [useContext.code.version],
    [useContext.code.code],
    [useContext.code.display],
    [useContext.code.userSelected],
    [useContext.value.codeableConcept.id],
    [useContext.value.codeableConcept.extension],
    [useContext.value.codeableConcept.coding],
    [useContext.value.codeableConcept.text],
    [useContext.value.quantity.id],
    [useContext.value.quantity.extension],
    [useContext.value.quantity.value],
    [useContext.value.quantity.comparator],
    [useContext.value.quantity.unit],
    [useContext.value.quantity.system],
    [useContext.value.quantity.code],
    [useContext.value.range.id],
    [useContext.value.range.extension],
    [useContext.value.range.low],
    [useContext.value.range.high],
    [useContext.value.reference.id],
    [useContext.value.reference.extension],
    [useContext.value.reference.reference],
    [useContext.value.reference.type],
    [useContext.value.reference.identifier],
    [useContext.value.reference.display]
FROM openrowset (
        BULK 'PlanDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [useContext.JSON]  VARCHAR(MAX) '$.useContext'
    ) AS rowset
    CROSS APPLY openjson (rowset.[useContext.JSON]) with (
        [useContext.id]                NVARCHAR(100)       '$.id',
        [useContext.extension]         NVARCHAR(MAX)       '$.extension',
        [useContext.code.id]           NVARCHAR(100)       '$.code.id',
        [useContext.code.extension]    NVARCHAR(MAX)       '$.code.extension',
        [useContext.code.system]       VARCHAR(256)        '$.code.system',
        [useContext.code.version]      NVARCHAR(100)       '$.code.version',
        [useContext.code.code]         NVARCHAR(4000)      '$.code.code',
        [useContext.code.display]      NVARCHAR(4000)      '$.code.display',
        [useContext.code.userSelected] bit                 '$.code.userSelected',
        [useContext.value.codeableConcept.id] NVARCHAR(100)       '$.value.codeableConcept.id',
        [useContext.value.codeableConcept.extension] NVARCHAR(MAX)       '$.value.codeableConcept.extension',
        [useContext.value.codeableConcept.coding] NVARCHAR(MAX)       '$.value.codeableConcept.coding',
        [useContext.value.codeableConcept.text] NVARCHAR(4000)      '$.value.codeableConcept.text',
        [useContext.value.quantity.id] NVARCHAR(100)       '$.value.quantity.id',
        [useContext.value.quantity.extension] NVARCHAR(MAX)       '$.value.quantity.extension',
        [useContext.value.quantity.value] float               '$.value.quantity.value',
        [useContext.value.quantity.comparator] NVARCHAR(64)        '$.value.quantity.comparator',
        [useContext.value.quantity.unit] NVARCHAR(100)       '$.value.quantity.unit',
        [useContext.value.quantity.system] VARCHAR(256)        '$.value.quantity.system',
        [useContext.value.quantity.code] NVARCHAR(4000)      '$.value.quantity.code',
        [useContext.value.range.id]    NVARCHAR(100)       '$.value.range.id',
        [useContext.value.range.extension] NVARCHAR(MAX)       '$.value.range.extension',
        [useContext.value.range.low]   NVARCHAR(MAX)       '$.value.range.low',
        [useContext.value.range.high]  NVARCHAR(MAX)       '$.value.range.high',
        [useContext.value.reference.id] NVARCHAR(100)       '$.value.reference.id',
        [useContext.value.reference.extension] NVARCHAR(MAX)       '$.value.reference.extension',
        [useContext.value.reference.reference] NVARCHAR(4000)      '$.value.reference.reference',
        [useContext.value.reference.type] VARCHAR(256)        '$.value.reference.type',
        [useContext.value.reference.identifier] NVARCHAR(MAX)       '$.value.reference.identifier',
        [useContext.value.reference.display] NVARCHAR(4000)      '$.value.reference.display'
    ) j

GO

CREATE VIEW fhir.PlanDefinitionJurisdiction AS
SELECT
    [id],
    [jurisdiction.JSON],
    [jurisdiction.id],
    [jurisdiction.extension],
    [jurisdiction.coding],
    [jurisdiction.text]
FROM openrowset (
        BULK 'PlanDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [jurisdiction.JSON]  VARCHAR(MAX) '$.jurisdiction'
    ) AS rowset
    CROSS APPLY openjson (rowset.[jurisdiction.JSON]) with (
        [jurisdiction.id]              NVARCHAR(100)       '$.id',
        [jurisdiction.extension]       NVARCHAR(MAX)       '$.extension',
        [jurisdiction.coding]          NVARCHAR(MAX)       '$.coding' AS JSON,
        [jurisdiction.text]            NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.PlanDefinitionTopic AS
SELECT
    [id],
    [topic.JSON],
    [topic.id],
    [topic.extension],
    [topic.coding],
    [topic.text]
FROM openrowset (
        BULK 'PlanDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [topic.JSON]  VARCHAR(MAX) '$.topic'
    ) AS rowset
    CROSS APPLY openjson (rowset.[topic.JSON]) with (
        [topic.id]                     NVARCHAR(100)       '$.id',
        [topic.extension]              NVARCHAR(MAX)       '$.extension',
        [topic.coding]                 NVARCHAR(MAX)       '$.coding' AS JSON,
        [topic.text]                   NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.PlanDefinitionAuthor AS
SELECT
    [id],
    [author.JSON],
    [author.id],
    [author.extension],
    [author.name],
    [author.telecom]
FROM openrowset (
        BULK 'PlanDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [author.JSON]  VARCHAR(MAX) '$.author'
    ) AS rowset
    CROSS APPLY openjson (rowset.[author.JSON]) with (
        [author.id]                    NVARCHAR(100)       '$.id',
        [author.extension]             NVARCHAR(MAX)       '$.extension',
        [author.name]                  NVARCHAR(500)       '$.name',
        [author.telecom]               NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.PlanDefinitionEditor AS
SELECT
    [id],
    [editor.JSON],
    [editor.id],
    [editor.extension],
    [editor.name],
    [editor.telecom]
FROM openrowset (
        BULK 'PlanDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [editor.JSON]  VARCHAR(MAX) '$.editor'
    ) AS rowset
    CROSS APPLY openjson (rowset.[editor.JSON]) with (
        [editor.id]                    NVARCHAR(100)       '$.id',
        [editor.extension]             NVARCHAR(MAX)       '$.extension',
        [editor.name]                  NVARCHAR(500)       '$.name',
        [editor.telecom]               NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.PlanDefinitionReviewer AS
SELECT
    [id],
    [reviewer.JSON],
    [reviewer.id],
    [reviewer.extension],
    [reviewer.name],
    [reviewer.telecom]
FROM openrowset (
        BULK 'PlanDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [reviewer.JSON]  VARCHAR(MAX) '$.reviewer'
    ) AS rowset
    CROSS APPLY openjson (rowset.[reviewer.JSON]) with (
        [reviewer.id]                  NVARCHAR(100)       '$.id',
        [reviewer.extension]           NVARCHAR(MAX)       '$.extension',
        [reviewer.name]                NVARCHAR(500)       '$.name',
        [reviewer.telecom]             NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.PlanDefinitionEndorser AS
SELECT
    [id],
    [endorser.JSON],
    [endorser.id],
    [endorser.extension],
    [endorser.name],
    [endorser.telecom]
FROM openrowset (
        BULK 'PlanDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [endorser.JSON]  VARCHAR(MAX) '$.endorser'
    ) AS rowset
    CROSS APPLY openjson (rowset.[endorser.JSON]) with (
        [endorser.id]                  NVARCHAR(100)       '$.id',
        [endorser.extension]           NVARCHAR(MAX)       '$.extension',
        [endorser.name]                NVARCHAR(500)       '$.name',
        [endorser.telecom]             NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.PlanDefinitionRelatedArtifact AS
SELECT
    [id],
    [relatedArtifact.JSON],
    [relatedArtifact.id],
    [relatedArtifact.extension],
    [relatedArtifact.type],
    [relatedArtifact.classifier],
    [relatedArtifact.label],
    [relatedArtifact.display],
    [relatedArtifact.citation],
    [relatedArtifact.document.id],
    [relatedArtifact.document.extension],
    [relatedArtifact.document.contentType],
    [relatedArtifact.document.language],
    [relatedArtifact.document.data],
    [relatedArtifact.document.url],
    [relatedArtifact.document.size],
    [relatedArtifact.document.hash],
    [relatedArtifact.document.title],
    [relatedArtifact.document.creation],
    [relatedArtifact.document.height],
    [relatedArtifact.document.width],
    [relatedArtifact.document.frames],
    [relatedArtifact.document.duration],
    [relatedArtifact.document.pages],
    [relatedArtifact.resource],
    [relatedArtifact.resourceReference.id],
    [relatedArtifact.resourceReference.extension],
    [relatedArtifact.resourceReference.reference],
    [relatedArtifact.resourceReference.type],
    [relatedArtifact.resourceReference.identifier],
    [relatedArtifact.resourceReference.display]
FROM openrowset (
        BULK 'PlanDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [relatedArtifact.JSON]  VARCHAR(MAX) '$.relatedArtifact'
    ) AS rowset
    CROSS APPLY openjson (rowset.[relatedArtifact.JSON]) with (
        [relatedArtifact.id]           NVARCHAR(100)       '$.id',
        [relatedArtifact.extension]    NVARCHAR(MAX)       '$.extension',
        [relatedArtifact.type]         NVARCHAR(64)        '$.type',
        [relatedArtifact.classifier]   NVARCHAR(MAX)       '$.classifier' AS JSON,
        [relatedArtifact.label]        NVARCHAR(100)       '$.label',
        [relatedArtifact.display]      NVARCHAR(4000)      '$.display',
        [relatedArtifact.citation]     NVARCHAR(MAX)       '$.citation',
        [relatedArtifact.document.id]  NVARCHAR(100)       '$.document.id',
        [relatedArtifact.document.extension] NVARCHAR(MAX)       '$.document.extension',
        [relatedArtifact.document.contentType] NVARCHAR(100)       '$.document.contentType',
        [relatedArtifact.document.language] NVARCHAR(100)       '$.document.language',
        [relatedArtifact.document.data] NVARCHAR(MAX)       '$.document.data',
        [relatedArtifact.document.url] VARCHAR(256)        '$.document.url',
        [relatedArtifact.document.size] NVARCHAR(MAX)       '$.document.size',
        [relatedArtifact.document.hash] NVARCHAR(MAX)       '$.document.hash',
        [relatedArtifact.document.title] NVARCHAR(4000)      '$.document.title',
        [relatedArtifact.document.creation] VARCHAR(64)         '$.document.creation',
        [relatedArtifact.document.height] bigint              '$.document.height',
        [relatedArtifact.document.width] bigint              '$.document.width',
        [relatedArtifact.document.frames] bigint              '$.document.frames',
        [relatedArtifact.document.duration] float               '$.document.duration',
        [relatedArtifact.document.pages] bigint              '$.document.pages',
        [relatedArtifact.resource]     VARCHAR(256)        '$.resource',
        [relatedArtifact.resourceReference.id] NVARCHAR(100)       '$.resourceReference.id',
        [relatedArtifact.resourceReference.extension] NVARCHAR(MAX)       '$.resourceReference.extension',
        [relatedArtifact.resourceReference.reference] NVARCHAR(4000)      '$.resourceReference.reference',
        [relatedArtifact.resourceReference.type] VARCHAR(256)        '$.resourceReference.type',
        [relatedArtifact.resourceReference.identifier] NVARCHAR(MAX)       '$.resourceReference.identifier',
        [relatedArtifact.resourceReference.display] NVARCHAR(4000)      '$.resourceReference.display'
    ) j

GO

CREATE VIEW fhir.PlanDefinitionLibrary AS
SELECT
    [id],
    [library.JSON],
    [library]
FROM openrowset (
        BULK 'PlanDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [library.JSON]  VARCHAR(MAX) '$.library'
    ) AS rowset
    CROSS APPLY openjson (rowset.[library.JSON]) with (
        [library]                      NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.PlanDefinitionGoal AS
SELECT
    [id],
    [goal.JSON],
    [goal.id],
    [goal.extension],
    [goal.modifierExtension],
    [goal.category.id],
    [goal.category.extension],
    [goal.category.coding],
    [goal.category.text],
    [goal.description.id],
    [goal.description.extension],
    [goal.description.coding],
    [goal.description.text],
    [goal.priority.id],
    [goal.priority.extension],
    [goal.priority.coding],
    [goal.priority.text],
    [goal.start.id],
    [goal.start.extension],
    [goal.start.coding],
    [goal.start.text],
    [goal.addresses],
    [goal.documentation],
    [goal.target]
FROM openrowset (
        BULK 'PlanDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [goal.JSON]  VARCHAR(MAX) '$.goal'
    ) AS rowset
    CROSS APPLY openjson (rowset.[goal.JSON]) with (
        [goal.id]                      NVARCHAR(100)       '$.id',
        [goal.extension]               NVARCHAR(MAX)       '$.extension',
        [goal.modifierExtension]       NVARCHAR(MAX)       '$.modifierExtension',
        [goal.category.id]             NVARCHAR(100)       '$.category.id',
        [goal.category.extension]      NVARCHAR(MAX)       '$.category.extension',
        [goal.category.coding]         NVARCHAR(MAX)       '$.category.coding',
        [goal.category.text]           NVARCHAR(4000)      '$.category.text',
        [goal.description.id]          NVARCHAR(100)       '$.description.id',
        [goal.description.extension]   NVARCHAR(MAX)       '$.description.extension',
        [goal.description.coding]      NVARCHAR(MAX)       '$.description.coding',
        [goal.description.text]        NVARCHAR(4000)      '$.description.text',
        [goal.priority.id]             NVARCHAR(100)       '$.priority.id',
        [goal.priority.extension]      NVARCHAR(MAX)       '$.priority.extension',
        [goal.priority.coding]         NVARCHAR(MAX)       '$.priority.coding',
        [goal.priority.text]           NVARCHAR(4000)      '$.priority.text',
        [goal.start.id]                NVARCHAR(100)       '$.start.id',
        [goal.start.extension]         NVARCHAR(MAX)       '$.start.extension',
        [goal.start.coding]            NVARCHAR(MAX)       '$.start.coding',
        [goal.start.text]              NVARCHAR(4000)      '$.start.text',
        [goal.addresses]               NVARCHAR(MAX)       '$.addresses' AS JSON,
        [goal.documentation]           NVARCHAR(MAX)       '$.documentation' AS JSON,
        [goal.target]                  NVARCHAR(MAX)       '$.target' AS JSON
    ) j

GO

CREATE VIEW fhir.PlanDefinitionActor AS
SELECT
    [id],
    [actor.JSON],
    [actor.id],
    [actor.extension],
    [actor.modifierExtension],
    [actor.title],
    [actor.description],
    [actor.option]
FROM openrowset (
        BULK 'PlanDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [actor.JSON]  VARCHAR(MAX) '$.actor'
    ) AS rowset
    CROSS APPLY openjson (rowset.[actor.JSON]) with (
        [actor.id]                     NVARCHAR(100)       '$.id',
        [actor.extension]              NVARCHAR(MAX)       '$.extension',
        [actor.modifierExtension]      NVARCHAR(MAX)       '$.modifierExtension',
        [actor.title]                  NVARCHAR(4000)      '$.title',
        [actor.description]            NVARCHAR(MAX)       '$.description',
        [actor.option]                 NVARCHAR(MAX)       '$.option' AS JSON
    ) j

GO

CREATE VIEW fhir.PlanDefinitionAction AS
SELECT
    [id],
    [action.JSON],
    [action.id],
    [action.extension],
    [action.modifierExtension],
    [action.linkId],
    [action.prefix],
    [action.title],
    [action.description],
    [action.textEquivalent],
    [action.priority],
    [action.code.id],
    [action.code.extension],
    [action.code.coding],
    [action.code.text],
    [action.reason],
    [action.documentation],
    [action.goalId],
    [action.trigger],
    [action.condition],
    [action.input],
    [action.output],
    [action.relatedAction],
    [action.location.id],
    [action.location.extension],
    [action.location.concept],
    [action.location.reference],
    [action.participant],
    [action.type.id],
    [action.type.extension],
    [action.type.coding],
    [action.type.text],
    [action.groupingBehavior],
    [action.selectionBehavior],
    [action.requiredBehavior],
    [action.precheckBehavior],
    [action.cardinalityBehavior],
    [action.transform],
    [action.dynamicValue],
    [action.action],
    [action.subject.codeableConcept.id],
    [action.subject.codeableConcept.extension],
    [action.subject.codeableConcept.coding],
    [action.subject.codeableConcept.text],
    [action.subject.reference.id],
    [action.subject.reference.extension],
    [action.subject.reference.reference],
    [action.subject.reference.type],
    [action.subject.reference.identifier],
    [action.subject.reference.display],
    [action.subject.canonical],
    [action.timing.age.id],
    [action.timing.age.extension],
    [action.timing.age.value],
    [action.timing.age.comparator],
    [action.timing.age.unit],
    [action.timing.age.system],
    [action.timing.age.code],
    [action.timing.duration.id],
    [action.timing.duration.extension],
    [action.timing.duration.value],
    [action.timing.duration.comparator],
    [action.timing.duration.unit],
    [action.timing.duration.system],
    [action.timing.duration.code],
    [action.timing.range.id],
    [action.timing.range.extension],
    [action.timing.range.low],
    [action.timing.range.high],
    [action.timing.timing.id],
    [action.timing.timing.extension],
    [action.timing.timing.modifierExtension],
    [action.timing.timing.event],
    [action.timing.timing.repeat],
    [action.timing.timing.code],
    [action.definition.canonical],
    [action.definition.uri]
FROM openrowset (
        BULK 'PlanDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [action.JSON]  VARCHAR(MAX) '$.action'
    ) AS rowset
    CROSS APPLY openjson (rowset.[action.JSON]) with (
        [action.id]                    NVARCHAR(100)       '$.id',
        [action.extension]             NVARCHAR(MAX)       '$.extension',
        [action.modifierExtension]     NVARCHAR(MAX)       '$.modifierExtension',
        [action.linkId]                NVARCHAR(100)       '$.linkId',
        [action.prefix]                NVARCHAR(500)       '$.prefix',
        [action.title]                 NVARCHAR(4000)      '$.title',
        [action.description]           NVARCHAR(4000)      '$.description',
        [action.textEquivalent]        NVARCHAR(4000)      '$.textEquivalent',
        [action.priority]              NVARCHAR(100)       '$.priority',
        [action.code.id]               NVARCHAR(100)       '$.code.id',
        [action.code.extension]        NVARCHAR(MAX)       '$.code.extension',
        [action.code.coding]           NVARCHAR(MAX)       '$.code.coding',
        [action.code.text]             NVARCHAR(4000)      '$.code.text',
        [action.reason]                NVARCHAR(MAX)       '$.reason' AS JSON,
        [action.documentation]         NVARCHAR(MAX)       '$.documentation' AS JSON,
        [action.goalId]                NVARCHAR(MAX)       '$.goalId' AS JSON,
        [action.trigger]               NVARCHAR(MAX)       '$.trigger' AS JSON,
        [action.condition]             NVARCHAR(MAX)       '$.condition' AS JSON,
        [action.input]                 NVARCHAR(MAX)       '$.input' AS JSON,
        [action.output]                NVARCHAR(MAX)       '$.output' AS JSON,
        [action.relatedAction]         NVARCHAR(MAX)       '$.relatedAction' AS JSON,
        [action.location.id]           NVARCHAR(100)       '$.location.id',
        [action.location.extension]    NVARCHAR(MAX)       '$.location.extension',
        [action.location.concept]      NVARCHAR(MAX)       '$.location.concept',
        [action.location.reference]    NVARCHAR(MAX)       '$.location.reference',
        [action.participant]           NVARCHAR(MAX)       '$.participant' AS JSON,
        [action.type.id]               NVARCHAR(100)       '$.type.id',
        [action.type.extension]        NVARCHAR(MAX)       '$.type.extension',
        [action.type.coding]           NVARCHAR(MAX)       '$.type.coding',
        [action.type.text]             NVARCHAR(4000)      '$.type.text',
        [action.groupingBehavior]      NVARCHAR(100)       '$.groupingBehavior',
        [action.selectionBehavior]     NVARCHAR(100)       '$.selectionBehavior',
        [action.requiredBehavior]      NVARCHAR(100)       '$.requiredBehavior',
        [action.precheckBehavior]      NVARCHAR(100)       '$.precheckBehavior',
        [action.cardinalityBehavior]   NVARCHAR(100)       '$.cardinalityBehavior',
        [action.transform]             VARCHAR(256)        '$.transform',
        [action.dynamicValue]          NVARCHAR(MAX)       '$.dynamicValue' AS JSON,
        [action.action]                NVARCHAR(MAX)       '$.action' AS JSON,
        [action.subject.codeableConcept.id] NVARCHAR(100)       '$.subject.codeableConcept.id',
        [action.subject.codeableConcept.extension] NVARCHAR(MAX)       '$.subject.codeableConcept.extension',
        [action.subject.codeableConcept.coding] NVARCHAR(MAX)       '$.subject.codeableConcept.coding',
        [action.subject.codeableConcept.text] NVARCHAR(4000)      '$.subject.codeableConcept.text',
        [action.subject.reference.id]  NVARCHAR(100)       '$.subject.reference.id',
        [action.subject.reference.extension] NVARCHAR(MAX)       '$.subject.reference.extension',
        [action.subject.reference.reference] NVARCHAR(4000)      '$.subject.reference.reference',
        [action.subject.reference.type] VARCHAR(256)        '$.subject.reference.type',
        [action.subject.reference.identifier] NVARCHAR(MAX)       '$.subject.reference.identifier',
        [action.subject.reference.display] NVARCHAR(4000)      '$.subject.reference.display',
        [action.subject.canonical]     VARCHAR(256)        '$.subject.canonical',
        [action.timing.age.id]         NVARCHAR(100)       '$.timing.age.id',
        [action.timing.age.extension]  NVARCHAR(MAX)       '$.timing.age.extension',
        [action.timing.age.value]      float               '$.timing.age.value',
        [action.timing.age.comparator] NVARCHAR(64)        '$.timing.age.comparator',
        [action.timing.age.unit]       NVARCHAR(100)       '$.timing.age.unit',
        [action.timing.age.system]     VARCHAR(256)        '$.timing.age.system',
        [action.timing.age.code]       NVARCHAR(4000)      '$.timing.age.code',
        [action.timing.duration.id]    NVARCHAR(100)       '$.timing.duration.id',
        [action.timing.duration.extension] NVARCHAR(MAX)       '$.timing.duration.extension',
        [action.timing.duration.value] float               '$.timing.duration.value',
        [action.timing.duration.comparator] NVARCHAR(64)        '$.timing.duration.comparator',
        [action.timing.duration.unit]  NVARCHAR(100)       '$.timing.duration.unit',
        [action.timing.duration.system] VARCHAR(256)        '$.timing.duration.system',
        [action.timing.duration.code]  NVARCHAR(4000)      '$.timing.duration.code',
        [action.timing.range.id]       NVARCHAR(100)       '$.timing.range.id',
        [action.timing.range.extension] NVARCHAR(MAX)       '$.timing.range.extension',
        [action.timing.range.low]      NVARCHAR(MAX)       '$.timing.range.low',
        [action.timing.range.high]     NVARCHAR(MAX)       '$.timing.range.high',
        [action.timing.timing.id]      NVARCHAR(100)       '$.timing.timing.id',
        [action.timing.timing.extension] NVARCHAR(MAX)       '$.timing.timing.extension',
        [action.timing.timing.modifierExtension] NVARCHAR(MAX)       '$.timing.timing.modifierExtension',
        [action.timing.timing.event]   NVARCHAR(MAX)       '$.timing.timing.event',
        [action.timing.timing.repeat]  NVARCHAR(MAX)       '$.timing.timing.repeat',
        [action.timing.timing.code]    NVARCHAR(MAX)       '$.timing.timing.code',
        [action.definition.canonical]  VARCHAR(256)        '$.definition.canonical',
        [action.definition.uri]        VARCHAR(256)        '$.definition.uri'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[Practitioner] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [active] bit,
    [name] VARCHAR(MAX),
    [telecom] VARCHAR(MAX),
    [address] VARCHAR(MAX),
    [gender] NVARCHAR(4000),
    [birthDate] VARCHAR(64),
    [photo] VARCHAR(MAX),
    [qualification] VARCHAR(MAX),
    [communication] VARCHAR(MAX),
    [deceased.boolean] bit,
    [deceased.dateTime] VARCHAR(64),
) WITH (
    LOCATION='/Practitioner/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.PractitionerIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'Practitioner/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.PractitionerName AS
SELECT
    [id],
    [name.JSON],
    [name.id],
    [name.extension],
    [name.use],
    [name.text],
    [name.family],
    [name.given],
    [name.prefix],
    [name.suffix],
    [name.period.id],
    [name.period.extension],
    [name.period.start],
    [name.period.end]
FROM openrowset (
        BULK 'Practitioner/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [name.JSON]  VARCHAR(MAX) '$.name'
    ) AS rowset
    CROSS APPLY openjson (rowset.[name.JSON]) with (
        [name.id]                      NVARCHAR(100)       '$.id',
        [name.extension]               NVARCHAR(MAX)       '$.extension',
        [name.use]                     NVARCHAR(64)        '$.use',
        [name.text]                    NVARCHAR(4000)      '$.text',
        [name.family]                  NVARCHAR(500)       '$.family',
        [name.given]                   NVARCHAR(MAX)       '$.given' AS JSON,
        [name.prefix]                  NVARCHAR(MAX)       '$.prefix' AS JSON,
        [name.suffix]                  NVARCHAR(MAX)       '$.suffix' AS JSON,
        [name.period.id]               NVARCHAR(100)       '$.period.id',
        [name.period.extension]        NVARCHAR(MAX)       '$.period.extension',
        [name.period.start]            VARCHAR(64)         '$.period.start',
        [name.period.end]              VARCHAR(64)         '$.period.end'
    ) j

GO

CREATE VIEW fhir.PractitionerTelecom AS
SELECT
    [id],
    [telecom.JSON],
    [telecom.id],
    [telecom.extension],
    [telecom.system],
    [telecom.value],
    [telecom.use],
    [telecom.rank],
    [telecom.period.id],
    [telecom.period.extension],
    [telecom.period.start],
    [telecom.period.end]
FROM openrowset (
        BULK 'Practitioner/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [telecom.JSON]  VARCHAR(MAX) '$.telecom'
    ) AS rowset
    CROSS APPLY openjson (rowset.[telecom.JSON]) with (
        [telecom.id]                   NVARCHAR(100)       '$.id',
        [telecom.extension]            NVARCHAR(MAX)       '$.extension',
        [telecom.system]               NVARCHAR(64)        '$.system',
        [telecom.value]                NVARCHAR(4000)      '$.value',
        [telecom.use]                  NVARCHAR(64)        '$.use',
        [telecom.rank]                 bigint              '$.rank',
        [telecom.period.id]            NVARCHAR(100)       '$.period.id',
        [telecom.period.extension]     NVARCHAR(MAX)       '$.period.extension',
        [telecom.period.start]         VARCHAR(64)         '$.period.start',
        [telecom.period.end]           VARCHAR(64)         '$.period.end'
    ) j

GO

CREATE VIEW fhir.PractitionerAddress AS
SELECT
    [id],
    [address.JSON],
    [address.id],
    [address.extension],
    [address.use],
    [address.type],
    [address.text],
    [address.line],
    [address.city],
    [address.district],
    [address.state],
    [address.postalCode],
    [address.country],
    [address.period.id],
    [address.period.extension],
    [address.period.start],
    [address.period.end]
FROM openrowset (
        BULK 'Practitioner/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [address.JSON]  VARCHAR(MAX) '$.address'
    ) AS rowset
    CROSS APPLY openjson (rowset.[address.JSON]) with (
        [address.id]                   NVARCHAR(100)       '$.id',
        [address.extension]            NVARCHAR(MAX)       '$.extension',
        [address.use]                  NVARCHAR(64)        '$.use',
        [address.type]                 NVARCHAR(64)        '$.type',
        [address.text]                 NVARCHAR(4000)      '$.text',
        [address.line]                 NVARCHAR(MAX)       '$.line' AS JSON,
        [address.city]                 NVARCHAR(500)       '$.city',
        [address.district]             NVARCHAR(500)       '$.district',
        [address.state]                NVARCHAR(500)       '$.state',
        [address.postalCode]           NVARCHAR(100)       '$.postalCode',
        [address.country]              NVARCHAR(500)       '$.country',
        [address.period.id]            NVARCHAR(100)       '$.period.id',
        [address.period.extension]     NVARCHAR(MAX)       '$.period.extension',
        [address.period.start]         VARCHAR(64)         '$.period.start',
        [address.period.end]           VARCHAR(64)         '$.period.end'
    ) j

GO

CREATE VIEW fhir.PractitionerPhoto AS
SELECT
    [id],
    [photo.JSON],
    [photo.id],
    [photo.extension],
    [photo.contentType],
    [photo.language],
    [photo.data],
    [photo.url],
    [photo.size],
    [photo.hash],
    [photo.title],
    [photo.creation],
    [photo.height],
    [photo.width],
    [photo.frames],
    [photo.duration],
    [photo.pages]
FROM openrowset (
        BULK 'Practitioner/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [photo.JSON]  VARCHAR(MAX) '$.photo'
    ) AS rowset
    CROSS APPLY openjson (rowset.[photo.JSON]) with (
        [photo.id]                     NVARCHAR(100)       '$.id',
        [photo.extension]              NVARCHAR(MAX)       '$.extension',
        [photo.contentType]            NVARCHAR(100)       '$.contentType',
        [photo.language]               NVARCHAR(100)       '$.language',
        [photo.data]                   NVARCHAR(MAX)       '$.data',
        [photo.url]                    VARCHAR(256)        '$.url',
        [photo.size]                   NVARCHAR(MAX)       '$.size',
        [photo.hash]                   NVARCHAR(MAX)       '$.hash',
        [photo.title]                  NVARCHAR(4000)      '$.title',
        [photo.creation]               VARCHAR(64)         '$.creation',
        [photo.height]                 bigint              '$.height',
        [photo.width]                  bigint              '$.width',
        [photo.frames]                 bigint              '$.frames',
        [photo.duration]               float               '$.duration',
        [photo.pages]                  bigint              '$.pages'
    ) j

GO

CREATE VIEW fhir.PractitionerQualification AS
SELECT
    [id],
    [qualification.JSON],
    [qualification.id],
    [qualification.extension],
    [qualification.modifierExtension],
    [qualification.identifier],
    [qualification.code.id],
    [qualification.code.extension],
    [qualification.code.coding],
    [qualification.code.text],
    [qualification.period.id],
    [qualification.period.extension],
    [qualification.period.start],
    [qualification.period.end],
    [qualification.issuer.id],
    [qualification.issuer.extension],
    [qualification.issuer.reference],
    [qualification.issuer.type],
    [qualification.issuer.identifier],
    [qualification.issuer.display]
FROM openrowset (
        BULK 'Practitioner/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [qualification.JSON]  VARCHAR(MAX) '$.qualification'
    ) AS rowset
    CROSS APPLY openjson (rowset.[qualification.JSON]) with (
        [qualification.id]             NVARCHAR(100)       '$.id',
        [qualification.extension]      NVARCHAR(MAX)       '$.extension',
        [qualification.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [qualification.identifier]     NVARCHAR(MAX)       '$.identifier' AS JSON,
        [qualification.code.id]        NVARCHAR(100)       '$.code.id',
        [qualification.code.extension] NVARCHAR(MAX)       '$.code.extension',
        [qualification.code.coding]    NVARCHAR(MAX)       '$.code.coding',
        [qualification.code.text]      NVARCHAR(4000)      '$.code.text',
        [qualification.period.id]      NVARCHAR(100)       '$.period.id',
        [qualification.period.extension] NVARCHAR(MAX)       '$.period.extension',
        [qualification.period.start]   VARCHAR(64)         '$.period.start',
        [qualification.period.end]     VARCHAR(64)         '$.period.end',
        [qualification.issuer.id]      NVARCHAR(100)       '$.issuer.id',
        [qualification.issuer.extension] NVARCHAR(MAX)       '$.issuer.extension',
        [qualification.issuer.reference] NVARCHAR(4000)      '$.issuer.reference',
        [qualification.issuer.type]    VARCHAR(256)        '$.issuer.type',
        [qualification.issuer.identifier] NVARCHAR(MAX)       '$.issuer.identifier',
        [qualification.issuer.display] NVARCHAR(4000)      '$.issuer.display'
    ) j

GO

CREATE VIEW fhir.PractitionerCommunication AS
SELECT
    [id],
    [communication.JSON],
    [communication.id],
    [communication.extension],
    [communication.coding],
    [communication.text]
FROM openrowset (
        BULK 'Practitioner/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [communication.JSON]  VARCHAR(MAX) '$.communication'
    ) AS rowset
    CROSS APPLY openjson (rowset.[communication.JSON]) with (
        [communication.id]             NVARCHAR(100)       '$.id',
        [communication.extension]      NVARCHAR(MAX)       '$.extension',
        [communication.coding]         NVARCHAR(MAX)       '$.coding' AS JSON,
        [communication.text]           NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[PractitionerRole] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [active] bit,
    [period.id] NVARCHAR(100),
    [period.extension] NVARCHAR(MAX),
    [period.start] VARCHAR(64),
    [period.end] VARCHAR(64),
    [practitioner.id] NVARCHAR(100),
    [practitioner.extension] NVARCHAR(MAX),
    [practitioner.reference] NVARCHAR(4000),
    [practitioner.type] VARCHAR(256),
    [practitioner.identifier.id] NVARCHAR(100),
    [practitioner.identifier.extension] NVARCHAR(MAX),
    [practitioner.identifier.use] NVARCHAR(64),
    [practitioner.identifier.type] NVARCHAR(MAX),
    [practitioner.identifier.system] VARCHAR(256),
    [practitioner.identifier.value] NVARCHAR(4000),
    [practitioner.identifier.period] NVARCHAR(MAX),
    [practitioner.identifier.assigner] NVARCHAR(MAX),
    [practitioner.display] NVARCHAR(4000),
    [organization.id] NVARCHAR(100),
    [organization.extension] NVARCHAR(MAX),
    [organization.reference] NVARCHAR(4000),
    [organization.type] VARCHAR(256),
    [organization.identifier.id] NVARCHAR(100),
    [organization.identifier.extension] NVARCHAR(MAX),
    [organization.identifier.use] NVARCHAR(64),
    [organization.identifier.type] NVARCHAR(MAX),
    [organization.identifier.system] VARCHAR(256),
    [organization.identifier.value] NVARCHAR(4000),
    [organization.identifier.period] NVARCHAR(MAX),
    [organization.identifier.assigner] NVARCHAR(MAX),
    [organization.display] NVARCHAR(4000),
    [code] VARCHAR(MAX),
    [specialty] VARCHAR(MAX),
    [location] VARCHAR(MAX),
    [healthcareService] VARCHAR(MAX),
    [telecom] VARCHAR(MAX),
    [availableTime] VARCHAR(MAX),
    [notAvailable] VARCHAR(MAX),
    [availabilityExceptions] NVARCHAR(4000),
    [endpoint] VARCHAR(MAX),
) WITH (
    LOCATION='/PractitionerRole/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.PractitionerRoleIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'PractitionerRole/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.PractitionerRoleCode AS
SELECT
    [id],
    [code.JSON],
    [code.id],
    [code.extension],
    [code.coding],
    [code.text]
FROM openrowset (
        BULK 'PractitionerRole/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [code.JSON]  VARCHAR(MAX) '$.code'
    ) AS rowset
    CROSS APPLY openjson (rowset.[code.JSON]) with (
        [code.id]                      NVARCHAR(100)       '$.id',
        [code.extension]               NVARCHAR(MAX)       '$.extension',
        [code.coding]                  NVARCHAR(MAX)       '$.coding' AS JSON,
        [code.text]                    NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.PractitionerRoleSpecialty AS
SELECT
    [id],
    [specialty.JSON],
    [specialty.id],
    [specialty.extension],
    [specialty.coding],
    [specialty.text]
FROM openrowset (
        BULK 'PractitionerRole/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [specialty.JSON]  VARCHAR(MAX) '$.specialty'
    ) AS rowset
    CROSS APPLY openjson (rowset.[specialty.JSON]) with (
        [specialty.id]                 NVARCHAR(100)       '$.id',
        [specialty.extension]          NVARCHAR(MAX)       '$.extension',
        [specialty.coding]             NVARCHAR(MAX)       '$.coding' AS JSON,
        [specialty.text]               NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.PractitionerRoleLocation AS
SELECT
    [id],
    [location.JSON],
    [location.id],
    [location.extension],
    [location.reference],
    [location.type],
    [location.identifier.id],
    [location.identifier.extension],
    [location.identifier.use],
    [location.identifier.type],
    [location.identifier.system],
    [location.identifier.value],
    [location.identifier.period],
    [location.identifier.assigner],
    [location.display]
FROM openrowset (
        BULK 'PractitionerRole/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [location.JSON]  VARCHAR(MAX) '$.location'
    ) AS rowset
    CROSS APPLY openjson (rowset.[location.JSON]) with (
        [location.id]                  NVARCHAR(100)       '$.id',
        [location.extension]           NVARCHAR(MAX)       '$.extension',
        [location.reference]           NVARCHAR(4000)      '$.reference',
        [location.type]                VARCHAR(256)        '$.type',
        [location.identifier.id]       NVARCHAR(100)       '$.identifier.id',
        [location.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [location.identifier.use]      NVARCHAR(64)        '$.identifier.use',
        [location.identifier.type]     NVARCHAR(MAX)       '$.identifier.type',
        [location.identifier.system]   VARCHAR(256)        '$.identifier.system',
        [location.identifier.value]    NVARCHAR(4000)      '$.identifier.value',
        [location.identifier.period]   NVARCHAR(MAX)       '$.identifier.period',
        [location.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [location.display]             NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.PractitionerRoleHealthcareService AS
SELECT
    [id],
    [healthcareService.JSON],
    [healthcareService.id],
    [healthcareService.extension],
    [healthcareService.reference],
    [healthcareService.type],
    [healthcareService.identifier.id],
    [healthcareService.identifier.extension],
    [healthcareService.identifier.use],
    [healthcareService.identifier.type],
    [healthcareService.identifier.system],
    [healthcareService.identifier.value],
    [healthcareService.identifier.period],
    [healthcareService.identifier.assigner],
    [healthcareService.display]
FROM openrowset (
        BULK 'PractitionerRole/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [healthcareService.JSON]  VARCHAR(MAX) '$.healthcareService'
    ) AS rowset
    CROSS APPLY openjson (rowset.[healthcareService.JSON]) with (
        [healthcareService.id]         NVARCHAR(100)       '$.id',
        [healthcareService.extension]  NVARCHAR(MAX)       '$.extension',
        [healthcareService.reference]  NVARCHAR(4000)      '$.reference',
        [healthcareService.type]       VARCHAR(256)        '$.type',
        [healthcareService.identifier.id] NVARCHAR(100)       '$.identifier.id',
        [healthcareService.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [healthcareService.identifier.use] NVARCHAR(64)        '$.identifier.use',
        [healthcareService.identifier.type] NVARCHAR(MAX)       '$.identifier.type',
        [healthcareService.identifier.system] VARCHAR(256)        '$.identifier.system',
        [healthcareService.identifier.value] NVARCHAR(4000)      '$.identifier.value',
        [healthcareService.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [healthcareService.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [healthcareService.display]    NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.PractitionerRoleTelecom AS
SELECT
    [id],
    [telecom.JSON],
    [telecom.id],
    [telecom.extension],
    [telecom.system],
    [telecom.value],
    [telecom.use],
    [telecom.rank],
    [telecom.period.id],
    [telecom.period.extension],
    [telecom.period.start],
    [telecom.period.end]
FROM openrowset (
        BULK 'PractitionerRole/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [telecom.JSON]  VARCHAR(MAX) '$.telecom'
    ) AS rowset
    CROSS APPLY openjson (rowset.[telecom.JSON]) with (
        [telecom.id]                   NVARCHAR(100)       '$.id',
        [telecom.extension]            NVARCHAR(MAX)       '$.extension',
        [telecom.system]               NVARCHAR(64)        '$.system',
        [telecom.value]                NVARCHAR(4000)      '$.value',
        [telecom.use]                  NVARCHAR(64)        '$.use',
        [telecom.rank]                 bigint              '$.rank',
        [telecom.period.id]            NVARCHAR(100)       '$.period.id',
        [telecom.period.extension]     NVARCHAR(MAX)       '$.period.extension',
        [telecom.period.start]         VARCHAR(64)         '$.period.start',
        [telecom.period.end]           VARCHAR(64)         '$.period.end'
    ) j

GO

CREATE VIEW fhir.PractitionerRoleAvailableTime AS
SELECT
    [id],
    [availableTime.JSON],
    [availableTime.id],
    [availableTime.extension],
    [availableTime.modifierExtension],
    [availableTime.daysOfWeek],
    [availableTime.allDay],
    [availableTime.availableStartTime],
    [availableTime.availableEndTime]
FROM openrowset (
        BULK 'PractitionerRole/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [availableTime.JSON]  VARCHAR(MAX) '$.availableTime'
    ) AS rowset
    CROSS APPLY openjson (rowset.[availableTime.JSON]) with (
        [availableTime.id]             NVARCHAR(100)       '$.id',
        [availableTime.extension]      NVARCHAR(MAX)       '$.extension',
        [availableTime.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [availableTime.daysOfWeek]     NVARCHAR(MAX)       '$.daysOfWeek' AS JSON,
        [availableTime.allDay]         bit                 '$.allDay',
        [availableTime.availableStartTime] NVARCHAR(MAX)       '$.availableStartTime',
        [availableTime.availableEndTime] NVARCHAR(MAX)       '$.availableEndTime'
    ) j

GO

CREATE VIEW fhir.PractitionerRoleNotAvailable AS
SELECT
    [id],
    [notAvailable.JSON],
    [notAvailable.id],
    [notAvailable.extension],
    [notAvailable.modifierExtension],
    [notAvailable.description],
    [notAvailable.during.id],
    [notAvailable.during.extension],
    [notAvailable.during.start],
    [notAvailable.during.end]
FROM openrowset (
        BULK 'PractitionerRole/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [notAvailable.JSON]  VARCHAR(MAX) '$.notAvailable'
    ) AS rowset
    CROSS APPLY openjson (rowset.[notAvailable.JSON]) with (
        [notAvailable.id]              NVARCHAR(100)       '$.id',
        [notAvailable.extension]       NVARCHAR(MAX)       '$.extension',
        [notAvailable.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [notAvailable.description]     NVARCHAR(4000)      '$.description',
        [notAvailable.during.id]       NVARCHAR(100)       '$.during.id',
        [notAvailable.during.extension] NVARCHAR(MAX)       '$.during.extension',
        [notAvailable.during.start]    VARCHAR(64)         '$.during.start',
        [notAvailable.during.end]      VARCHAR(64)         '$.during.end'
    ) j

GO

CREATE VIEW fhir.PractitionerRoleEndpoint AS
SELECT
    [id],
    [endpoint.JSON],
    [endpoint.id],
    [endpoint.extension],
    [endpoint.reference],
    [endpoint.type],
    [endpoint.identifier.id],
    [endpoint.identifier.extension],
    [endpoint.identifier.use],
    [endpoint.identifier.type],
    [endpoint.identifier.system],
    [endpoint.identifier.value],
    [endpoint.identifier.period],
    [endpoint.identifier.assigner],
    [endpoint.display]
FROM openrowset (
        BULK 'PractitionerRole/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [endpoint.JSON]  VARCHAR(MAX) '$.endpoint'
    ) AS rowset
    CROSS APPLY openjson (rowset.[endpoint.JSON]) with (
        [endpoint.id]                  NVARCHAR(100)       '$.id',
        [endpoint.extension]           NVARCHAR(MAX)       '$.extension',
        [endpoint.reference]           NVARCHAR(4000)      '$.reference',
        [endpoint.type]                VARCHAR(256)        '$.type',
        [endpoint.identifier.id]       NVARCHAR(100)       '$.identifier.id',
        [endpoint.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [endpoint.identifier.use]      NVARCHAR(64)        '$.identifier.use',
        [endpoint.identifier.type]     NVARCHAR(MAX)       '$.identifier.type',
        [endpoint.identifier.system]   VARCHAR(256)        '$.identifier.system',
        [endpoint.identifier.value]    NVARCHAR(4000)      '$.identifier.value',
        [endpoint.identifier.period]   NVARCHAR(MAX)       '$.identifier.period',
        [endpoint.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [endpoint.display]             NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[Procedure] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [instantiatesCanonical] VARCHAR(MAX),
    [instantiatesUri] VARCHAR(MAX),
    [basedOn] VARCHAR(MAX),
    [partOf] VARCHAR(MAX),
    [status] NVARCHAR(100),
    [statusReason.id] NVARCHAR(100),
    [statusReason.extension] NVARCHAR(MAX),
    [statusReason.coding] VARCHAR(MAX),
    [statusReason.text] NVARCHAR(4000),
    [category] VARCHAR(MAX),
    [code.id] NVARCHAR(100),
    [code.extension] NVARCHAR(MAX),
    [code.coding] VARCHAR(MAX),
    [code.text] NVARCHAR(4000),
    [subject.id] NVARCHAR(100),
    [subject.extension] NVARCHAR(MAX),
    [subject.reference] NVARCHAR(4000),
    [subject.type] VARCHAR(256),
    [subject.identifier.id] NVARCHAR(100),
    [subject.identifier.extension] NVARCHAR(MAX),
    [subject.identifier.use] NVARCHAR(64),
    [subject.identifier.type] NVARCHAR(MAX),
    [subject.identifier.system] VARCHAR(256),
    [subject.identifier.value] NVARCHAR(4000),
    [subject.identifier.period] NVARCHAR(MAX),
    [subject.identifier.assigner] NVARCHAR(MAX),
    [subject.display] NVARCHAR(4000),
    [encounter.id] NVARCHAR(100),
    [encounter.extension] NVARCHAR(MAX),
    [encounter.reference] NVARCHAR(4000),
    [encounter.type] VARCHAR(256),
    [encounter.identifier.id] NVARCHAR(100),
    [encounter.identifier.extension] NVARCHAR(MAX),
    [encounter.identifier.use] NVARCHAR(64),
    [encounter.identifier.type] NVARCHAR(MAX),
    [encounter.identifier.system] VARCHAR(256),
    [encounter.identifier.value] NVARCHAR(4000),
    [encounter.identifier.period] NVARCHAR(MAX),
    [encounter.identifier.assigner] NVARCHAR(MAX),
    [encounter.display] NVARCHAR(4000),
    [recorded] VARCHAR(64),
    [recorder.id] NVARCHAR(100),
    [recorder.extension] NVARCHAR(MAX),
    [recorder.reference] NVARCHAR(4000),
    [recorder.type] VARCHAR(256),
    [recorder.identifier.id] NVARCHAR(100),
    [recorder.identifier.extension] NVARCHAR(MAX),
    [recorder.identifier.use] NVARCHAR(64),
    [recorder.identifier.type] NVARCHAR(MAX),
    [recorder.identifier.system] VARCHAR(256),
    [recorder.identifier.value] NVARCHAR(4000),
    [recorder.identifier.period] NVARCHAR(MAX),
    [recorder.identifier.assigner] NVARCHAR(MAX),
    [recorder.display] NVARCHAR(4000),
    [performer] VARCHAR(MAX),
    [location.id] NVARCHAR(100),
    [location.extension] NVARCHAR(MAX),
    [location.reference] NVARCHAR(4000),
    [location.type] VARCHAR(256),
    [location.identifier.id] NVARCHAR(100),
    [location.identifier.extension] NVARCHAR(MAX),
    [location.identifier.use] NVARCHAR(64),
    [location.identifier.type] NVARCHAR(MAX),
    [location.identifier.system] VARCHAR(256),
    [location.identifier.value] NVARCHAR(4000),
    [location.identifier.period] NVARCHAR(MAX),
    [location.identifier.assigner] NVARCHAR(MAX),
    [location.display] NVARCHAR(4000),
    [reason] VARCHAR(MAX),
    [bodySite] VARCHAR(MAX),
    [outcome.id] NVARCHAR(100),
    [outcome.extension] NVARCHAR(MAX),
    [outcome.coding] VARCHAR(MAX),
    [outcome.text] NVARCHAR(4000),
    [report] VARCHAR(MAX),
    [complication] VARCHAR(MAX),
    [complicationDetail] VARCHAR(MAX),
    [followUp] VARCHAR(MAX),
    [note] VARCHAR(MAX),
    [focalDevice] VARCHAR(MAX),
    [used] VARCHAR(MAX),
    [supportingInfo] VARCHAR(MAX),
    [occurrence.dateTime] VARCHAR(64),
    [occurrence.period.id] NVARCHAR(100),
    [occurrence.period.extension] NVARCHAR(MAX),
    [occurrence.period.start] VARCHAR(64),
    [occurrence.period.end] VARCHAR(64),
    [occurrence.string] NVARCHAR(4000),
    [occurrence.age.id] NVARCHAR(100),
    [occurrence.age.extension] NVARCHAR(MAX),
    [occurrence.age.value] float,
    [occurrence.age.comparator] NVARCHAR(64),
    [occurrence.age.unit] NVARCHAR(100),
    [occurrence.age.system] VARCHAR(256),
    [occurrence.age.code] NVARCHAR(4000),
    [occurrence.range.id] NVARCHAR(100),
    [occurrence.range.extension] NVARCHAR(MAX),
    [occurrence.range.low.id] NVARCHAR(100),
    [occurrence.range.low.extension] NVARCHAR(MAX),
    [occurrence.range.low.value] float,
    [occurrence.range.low.comparator] NVARCHAR(64),
    [occurrence.range.low.unit] NVARCHAR(100),
    [occurrence.range.low.system] VARCHAR(256),
    [occurrence.range.low.code] NVARCHAR(4000),
    [occurrence.range.high.id] NVARCHAR(100),
    [occurrence.range.high.extension] NVARCHAR(MAX),
    [occurrence.range.high.value] float,
    [occurrence.range.high.comparator] NVARCHAR(64),
    [occurrence.range.high.unit] NVARCHAR(100),
    [occurrence.range.high.system] VARCHAR(256),
    [occurrence.range.high.code] NVARCHAR(4000),
    [occurrence.timing.id] NVARCHAR(100),
    [occurrence.timing.extension] NVARCHAR(MAX),
    [occurrence.timing.modifierExtension] NVARCHAR(MAX),
    [occurrence.timing.event] VARCHAR(MAX),
    [occurrence.timing.repeat.id] NVARCHAR(100),
    [occurrence.timing.repeat.extension] NVARCHAR(MAX),
    [occurrence.timing.repeat.modifierExtension] NVARCHAR(MAX),
    [occurrence.timing.repeat.count] bigint,
    [occurrence.timing.repeat.countMax] bigint,
    [occurrence.timing.repeat.duration] float,
    [occurrence.timing.repeat.durationMax] float,
    [occurrence.timing.repeat.durationUnit] NVARCHAR(64),
    [occurrence.timing.repeat.frequency] bigint,
    [occurrence.timing.repeat.frequencyMax] bigint,
    [occurrence.timing.repeat.period] float,
    [occurrence.timing.repeat.periodMax] float,
    [occurrence.timing.repeat.periodUnit] NVARCHAR(64),
    [occurrence.timing.repeat.dayOfWeek] NVARCHAR(MAX),
    [occurrence.timing.repeat.timeOfDay] NVARCHAR(MAX),
    [occurrence.timing.repeat.when] NVARCHAR(MAX),
    [occurrence.timing.repeat.offset] bigint,
    [occurrence.timing.repeat.bounds.duration] NVARCHAR(MAX),
    [occurrence.timing.repeat.bounds.range] NVARCHAR(MAX),
    [occurrence.timing.repeat.bounds.period] NVARCHAR(MAX),
    [occurrence.timing.code.id] NVARCHAR(100),
    [occurrence.timing.code.extension] NVARCHAR(MAX),
    [occurrence.timing.code.coding] NVARCHAR(MAX),
    [occurrence.timing.code.text] NVARCHAR(4000),
    [reported.boolean] bit,
    [reported.reference.id] NVARCHAR(100),
    [reported.reference.extension] NVARCHAR(MAX),
    [reported.reference.reference] NVARCHAR(4000),
    [reported.reference.type] VARCHAR(256),
    [reported.reference.identifier.id] NVARCHAR(100),
    [reported.reference.identifier.extension] NVARCHAR(MAX),
    [reported.reference.identifier.use] NVARCHAR(64),
    [reported.reference.identifier.type] NVARCHAR(MAX),
    [reported.reference.identifier.system] VARCHAR(256),
    [reported.reference.identifier.value] NVARCHAR(4000),
    [reported.reference.identifier.period] NVARCHAR(MAX),
    [reported.reference.identifier.assigner] NVARCHAR(MAX),
    [reported.reference.display] NVARCHAR(4000),
) WITH (
    LOCATION='/Procedure/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.ProcedureIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'Procedure/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.ProcedureInstantiatesCanonical AS
SELECT
    [id],
    [instantiatesCanonical.JSON],
    [instantiatesCanonical]
FROM openrowset (
        BULK 'Procedure/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [instantiatesCanonical.JSON]  VARCHAR(MAX) '$.instantiatesCanonical'
    ) AS rowset
    CROSS APPLY openjson (rowset.[instantiatesCanonical.JSON]) with (
        [instantiatesCanonical]        NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.ProcedureInstantiatesUri AS
SELECT
    [id],
    [instantiatesUri.JSON],
    [instantiatesUri]
FROM openrowset (
        BULK 'Procedure/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [instantiatesUri.JSON]  VARCHAR(MAX) '$.instantiatesUri'
    ) AS rowset
    CROSS APPLY openjson (rowset.[instantiatesUri.JSON]) with (
        [instantiatesUri]              NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.ProcedureBasedOn AS
SELECT
    [id],
    [basedOn.JSON],
    [basedOn.id],
    [basedOn.extension],
    [basedOn.reference],
    [basedOn.type],
    [basedOn.identifier.id],
    [basedOn.identifier.extension],
    [basedOn.identifier.use],
    [basedOn.identifier.type],
    [basedOn.identifier.system],
    [basedOn.identifier.value],
    [basedOn.identifier.period],
    [basedOn.identifier.assigner],
    [basedOn.display]
FROM openrowset (
        BULK 'Procedure/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [basedOn.JSON]  VARCHAR(MAX) '$.basedOn'
    ) AS rowset
    CROSS APPLY openjson (rowset.[basedOn.JSON]) with (
        [basedOn.id]                   NVARCHAR(100)       '$.id',
        [basedOn.extension]            NVARCHAR(MAX)       '$.extension',
        [basedOn.reference]            NVARCHAR(4000)      '$.reference',
        [basedOn.type]                 VARCHAR(256)        '$.type',
        [basedOn.identifier.id]        NVARCHAR(100)       '$.identifier.id',
        [basedOn.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [basedOn.identifier.use]       NVARCHAR(64)        '$.identifier.use',
        [basedOn.identifier.type]      NVARCHAR(MAX)       '$.identifier.type',
        [basedOn.identifier.system]    VARCHAR(256)        '$.identifier.system',
        [basedOn.identifier.value]     NVARCHAR(4000)      '$.identifier.value',
        [basedOn.identifier.period]    NVARCHAR(MAX)       '$.identifier.period',
        [basedOn.identifier.assigner]  NVARCHAR(MAX)       '$.identifier.assigner',
        [basedOn.display]              NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.ProcedurePartOf AS
SELECT
    [id],
    [partOf.JSON],
    [partOf.id],
    [partOf.extension],
    [partOf.reference],
    [partOf.type],
    [partOf.identifier.id],
    [partOf.identifier.extension],
    [partOf.identifier.use],
    [partOf.identifier.type],
    [partOf.identifier.system],
    [partOf.identifier.value],
    [partOf.identifier.period],
    [partOf.identifier.assigner],
    [partOf.display]
FROM openrowset (
        BULK 'Procedure/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [partOf.JSON]  VARCHAR(MAX) '$.partOf'
    ) AS rowset
    CROSS APPLY openjson (rowset.[partOf.JSON]) with (
        [partOf.id]                    NVARCHAR(100)       '$.id',
        [partOf.extension]             NVARCHAR(MAX)       '$.extension',
        [partOf.reference]             NVARCHAR(4000)      '$.reference',
        [partOf.type]                  VARCHAR(256)        '$.type',
        [partOf.identifier.id]         NVARCHAR(100)       '$.identifier.id',
        [partOf.identifier.extension]  NVARCHAR(MAX)       '$.identifier.extension',
        [partOf.identifier.use]        NVARCHAR(64)        '$.identifier.use',
        [partOf.identifier.type]       NVARCHAR(MAX)       '$.identifier.type',
        [partOf.identifier.system]     VARCHAR(256)        '$.identifier.system',
        [partOf.identifier.value]      NVARCHAR(4000)      '$.identifier.value',
        [partOf.identifier.period]     NVARCHAR(MAX)       '$.identifier.period',
        [partOf.identifier.assigner]   NVARCHAR(MAX)       '$.identifier.assigner',
        [partOf.display]               NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.ProcedureCategory AS
SELECT
    [id],
    [category.JSON],
    [category.id],
    [category.extension],
    [category.coding],
    [category.text]
FROM openrowset (
        BULK 'Procedure/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [category.JSON]  VARCHAR(MAX) '$.category'
    ) AS rowset
    CROSS APPLY openjson (rowset.[category.JSON]) with (
        [category.id]                  NVARCHAR(100)       '$.id',
        [category.extension]           NVARCHAR(MAX)       '$.extension',
        [category.coding]              NVARCHAR(MAX)       '$.coding' AS JSON,
        [category.text]                NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.ProcedurePerformer AS
SELECT
    [id],
    [performer.JSON],
    [performer.id],
    [performer.extension],
    [performer.modifierExtension],
    [performer.function.id],
    [performer.function.extension],
    [performer.function.coding],
    [performer.function.text],
    [performer.actor.id],
    [performer.actor.extension],
    [performer.actor.reference],
    [performer.actor.type],
    [performer.actor.identifier],
    [performer.actor.display],
    [performer.onBehalfOf.id],
    [performer.onBehalfOf.extension],
    [performer.onBehalfOf.reference],
    [performer.onBehalfOf.type],
    [performer.onBehalfOf.identifier],
    [performer.onBehalfOf.display]
FROM openrowset (
        BULK 'Procedure/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [performer.JSON]  VARCHAR(MAX) '$.performer'
    ) AS rowset
    CROSS APPLY openjson (rowset.[performer.JSON]) with (
        [performer.id]                 NVARCHAR(100)       '$.id',
        [performer.extension]          NVARCHAR(MAX)       '$.extension',
        [performer.modifierExtension]  NVARCHAR(MAX)       '$.modifierExtension',
        [performer.function.id]        NVARCHAR(100)       '$.function.id',
        [performer.function.extension] NVARCHAR(MAX)       '$.function.extension',
        [performer.function.coding]    NVARCHAR(MAX)       '$.function.coding',
        [performer.function.text]      NVARCHAR(4000)      '$.function.text',
        [performer.actor.id]           NVARCHAR(100)       '$.actor.id',
        [performer.actor.extension]    NVARCHAR(MAX)       '$.actor.extension',
        [performer.actor.reference]    NVARCHAR(4000)      '$.actor.reference',
        [performer.actor.type]         VARCHAR(256)        '$.actor.type',
        [performer.actor.identifier]   NVARCHAR(MAX)       '$.actor.identifier',
        [performer.actor.display]      NVARCHAR(4000)      '$.actor.display',
        [performer.onBehalfOf.id]      NVARCHAR(100)       '$.onBehalfOf.id',
        [performer.onBehalfOf.extension] NVARCHAR(MAX)       '$.onBehalfOf.extension',
        [performer.onBehalfOf.reference] NVARCHAR(4000)      '$.onBehalfOf.reference',
        [performer.onBehalfOf.type]    VARCHAR(256)        '$.onBehalfOf.type',
        [performer.onBehalfOf.identifier] NVARCHAR(MAX)       '$.onBehalfOf.identifier',
        [performer.onBehalfOf.display] NVARCHAR(4000)      '$.onBehalfOf.display'
    ) j

GO

CREATE VIEW fhir.ProcedureReason AS
SELECT
    [id],
    [reason.JSON],
    [reason.id],
    [reason.extension],
    [reason.concept.id],
    [reason.concept.extension],
    [reason.concept.coding],
    [reason.concept.text],
    [reason.reference.id],
    [reason.reference.extension],
    [reason.reference.reference],
    [reason.reference.type],
    [reason.reference.identifier],
    [reason.reference.display]
FROM openrowset (
        BULK 'Procedure/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [reason.JSON]  VARCHAR(MAX) '$.reason'
    ) AS rowset
    CROSS APPLY openjson (rowset.[reason.JSON]) with (
        [reason.id]                    NVARCHAR(100)       '$.id',
        [reason.extension]             NVARCHAR(MAX)       '$.extension',
        [reason.concept.id]            NVARCHAR(100)       '$.concept.id',
        [reason.concept.extension]     NVARCHAR(MAX)       '$.concept.extension',
        [reason.concept.coding]        NVARCHAR(MAX)       '$.concept.coding',
        [reason.concept.text]          NVARCHAR(4000)      '$.concept.text',
        [reason.reference.id]          NVARCHAR(100)       '$.reference.id',
        [reason.reference.extension]   NVARCHAR(MAX)       '$.reference.extension',
        [reason.reference.reference]   NVARCHAR(4000)      '$.reference.reference',
        [reason.reference.type]        VARCHAR(256)        '$.reference.type',
        [reason.reference.identifier]  NVARCHAR(MAX)       '$.reference.identifier',
        [reason.reference.display]     NVARCHAR(4000)      '$.reference.display'
    ) j

GO

CREATE VIEW fhir.ProcedureBodySite AS
SELECT
    [id],
    [bodySite.JSON],
    [bodySite.id],
    [bodySite.extension],
    [bodySite.coding],
    [bodySite.text]
FROM openrowset (
        BULK 'Procedure/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [bodySite.JSON]  VARCHAR(MAX) '$.bodySite'
    ) AS rowset
    CROSS APPLY openjson (rowset.[bodySite.JSON]) with (
        [bodySite.id]                  NVARCHAR(100)       '$.id',
        [bodySite.extension]           NVARCHAR(MAX)       '$.extension',
        [bodySite.coding]              NVARCHAR(MAX)       '$.coding' AS JSON,
        [bodySite.text]                NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.ProcedureReport AS
SELECT
    [id],
    [report.JSON],
    [report.id],
    [report.extension],
    [report.reference],
    [report.type],
    [report.identifier.id],
    [report.identifier.extension],
    [report.identifier.use],
    [report.identifier.type],
    [report.identifier.system],
    [report.identifier.value],
    [report.identifier.period],
    [report.identifier.assigner],
    [report.display]
FROM openrowset (
        BULK 'Procedure/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [report.JSON]  VARCHAR(MAX) '$.report'
    ) AS rowset
    CROSS APPLY openjson (rowset.[report.JSON]) with (
        [report.id]                    NVARCHAR(100)       '$.id',
        [report.extension]             NVARCHAR(MAX)       '$.extension',
        [report.reference]             NVARCHAR(4000)      '$.reference',
        [report.type]                  VARCHAR(256)        '$.type',
        [report.identifier.id]         NVARCHAR(100)       '$.identifier.id',
        [report.identifier.extension]  NVARCHAR(MAX)       '$.identifier.extension',
        [report.identifier.use]        NVARCHAR(64)        '$.identifier.use',
        [report.identifier.type]       NVARCHAR(MAX)       '$.identifier.type',
        [report.identifier.system]     VARCHAR(256)        '$.identifier.system',
        [report.identifier.value]      NVARCHAR(4000)      '$.identifier.value',
        [report.identifier.period]     NVARCHAR(MAX)       '$.identifier.period',
        [report.identifier.assigner]   NVARCHAR(MAX)       '$.identifier.assigner',
        [report.display]               NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.ProcedureComplication AS
SELECT
    [id],
    [complication.JSON],
    [complication.id],
    [complication.extension],
    [complication.coding],
    [complication.text]
FROM openrowset (
        BULK 'Procedure/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [complication.JSON]  VARCHAR(MAX) '$.complication'
    ) AS rowset
    CROSS APPLY openjson (rowset.[complication.JSON]) with (
        [complication.id]              NVARCHAR(100)       '$.id',
        [complication.extension]       NVARCHAR(MAX)       '$.extension',
        [complication.coding]          NVARCHAR(MAX)       '$.coding' AS JSON,
        [complication.text]            NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.ProcedureComplicationDetail AS
SELECT
    [id],
    [complicationDetail.JSON],
    [complicationDetail.id],
    [complicationDetail.extension],
    [complicationDetail.reference],
    [complicationDetail.type],
    [complicationDetail.identifier.id],
    [complicationDetail.identifier.extension],
    [complicationDetail.identifier.use],
    [complicationDetail.identifier.type],
    [complicationDetail.identifier.system],
    [complicationDetail.identifier.value],
    [complicationDetail.identifier.period],
    [complicationDetail.identifier.assigner],
    [complicationDetail.display]
FROM openrowset (
        BULK 'Procedure/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [complicationDetail.JSON]  VARCHAR(MAX) '$.complicationDetail'
    ) AS rowset
    CROSS APPLY openjson (rowset.[complicationDetail.JSON]) with (
        [complicationDetail.id]        NVARCHAR(100)       '$.id',
        [complicationDetail.extension] NVARCHAR(MAX)       '$.extension',
        [complicationDetail.reference] NVARCHAR(4000)      '$.reference',
        [complicationDetail.type]      VARCHAR(256)        '$.type',
        [complicationDetail.identifier.id] NVARCHAR(100)       '$.identifier.id',
        [complicationDetail.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [complicationDetail.identifier.use] NVARCHAR(64)        '$.identifier.use',
        [complicationDetail.identifier.type] NVARCHAR(MAX)       '$.identifier.type',
        [complicationDetail.identifier.system] VARCHAR(256)        '$.identifier.system',
        [complicationDetail.identifier.value] NVARCHAR(4000)      '$.identifier.value',
        [complicationDetail.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [complicationDetail.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [complicationDetail.display]   NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.ProcedureFollowUp AS
SELECT
    [id],
    [followUp.JSON],
    [followUp.id],
    [followUp.extension],
    [followUp.coding],
    [followUp.text]
FROM openrowset (
        BULK 'Procedure/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [followUp.JSON]  VARCHAR(MAX) '$.followUp'
    ) AS rowset
    CROSS APPLY openjson (rowset.[followUp.JSON]) with (
        [followUp.id]                  NVARCHAR(100)       '$.id',
        [followUp.extension]           NVARCHAR(MAX)       '$.extension',
        [followUp.coding]              NVARCHAR(MAX)       '$.coding' AS JSON,
        [followUp.text]                NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.ProcedureNote AS
SELECT
    [id],
    [note.JSON],
    [note.id],
    [note.extension],
    [note.time],
    [note.text],
    [note.author.reference.id],
    [note.author.reference.extension],
    [note.author.reference.reference],
    [note.author.reference.type],
    [note.author.reference.identifier],
    [note.author.reference.display],
    [note.author.string]
FROM openrowset (
        BULK 'Procedure/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [note.JSON]  VARCHAR(MAX) '$.note'
    ) AS rowset
    CROSS APPLY openjson (rowset.[note.JSON]) with (
        [note.id]                      NVARCHAR(100)       '$.id',
        [note.extension]               NVARCHAR(MAX)       '$.extension',
        [note.time]                    VARCHAR(64)         '$.time',
        [note.text]                    NVARCHAR(MAX)       '$.text',
        [note.author.reference.id]     NVARCHAR(100)       '$.author.reference.id',
        [note.author.reference.extension] NVARCHAR(MAX)       '$.author.reference.extension',
        [note.author.reference.reference] NVARCHAR(4000)      '$.author.reference.reference',
        [note.author.reference.type]   VARCHAR(256)        '$.author.reference.type',
        [note.author.reference.identifier] NVARCHAR(MAX)       '$.author.reference.identifier',
        [note.author.reference.display] NVARCHAR(4000)      '$.author.reference.display',
        [note.author.string]           NVARCHAR(4000)      '$.author.string'
    ) j

GO

CREATE VIEW fhir.ProcedureFocalDevice AS
SELECT
    [id],
    [focalDevice.JSON],
    [focalDevice.id],
    [focalDevice.extension],
    [focalDevice.modifierExtension],
    [focalDevice.action.id],
    [focalDevice.action.extension],
    [focalDevice.action.coding],
    [focalDevice.action.text],
    [focalDevice.manipulated.id],
    [focalDevice.manipulated.extension],
    [focalDevice.manipulated.reference],
    [focalDevice.manipulated.type],
    [focalDevice.manipulated.identifier],
    [focalDevice.manipulated.display]
FROM openrowset (
        BULK 'Procedure/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [focalDevice.JSON]  VARCHAR(MAX) '$.focalDevice'
    ) AS rowset
    CROSS APPLY openjson (rowset.[focalDevice.JSON]) with (
        [focalDevice.id]               NVARCHAR(100)       '$.id',
        [focalDevice.extension]        NVARCHAR(MAX)       '$.extension',
        [focalDevice.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [focalDevice.action.id]        NVARCHAR(100)       '$.action.id',
        [focalDevice.action.extension] NVARCHAR(MAX)       '$.action.extension',
        [focalDevice.action.coding]    NVARCHAR(MAX)       '$.action.coding',
        [focalDevice.action.text]      NVARCHAR(4000)      '$.action.text',
        [focalDevice.manipulated.id]   NVARCHAR(100)       '$.manipulated.id',
        [focalDevice.manipulated.extension] NVARCHAR(MAX)       '$.manipulated.extension',
        [focalDevice.manipulated.reference] NVARCHAR(4000)      '$.manipulated.reference',
        [focalDevice.manipulated.type] VARCHAR(256)        '$.manipulated.type',
        [focalDevice.manipulated.identifier] NVARCHAR(MAX)       '$.manipulated.identifier',
        [focalDevice.manipulated.display] NVARCHAR(4000)      '$.manipulated.display'
    ) j

GO

CREATE VIEW fhir.ProcedureUsed AS
SELECT
    [id],
    [used.JSON],
    [used.id],
    [used.extension],
    [used.concept.id],
    [used.concept.extension],
    [used.concept.coding],
    [used.concept.text],
    [used.reference.id],
    [used.reference.extension],
    [used.reference.reference],
    [used.reference.type],
    [used.reference.identifier],
    [used.reference.display]
FROM openrowset (
        BULK 'Procedure/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [used.JSON]  VARCHAR(MAX) '$.used'
    ) AS rowset
    CROSS APPLY openjson (rowset.[used.JSON]) with (
        [used.id]                      NVARCHAR(100)       '$.id',
        [used.extension]               NVARCHAR(MAX)       '$.extension',
        [used.concept.id]              NVARCHAR(100)       '$.concept.id',
        [used.concept.extension]       NVARCHAR(MAX)       '$.concept.extension',
        [used.concept.coding]          NVARCHAR(MAX)       '$.concept.coding',
        [used.concept.text]            NVARCHAR(4000)      '$.concept.text',
        [used.reference.id]            NVARCHAR(100)       '$.reference.id',
        [used.reference.extension]     NVARCHAR(MAX)       '$.reference.extension',
        [used.reference.reference]     NVARCHAR(4000)      '$.reference.reference',
        [used.reference.type]          VARCHAR(256)        '$.reference.type',
        [used.reference.identifier]    NVARCHAR(MAX)       '$.reference.identifier',
        [used.reference.display]       NVARCHAR(4000)      '$.reference.display'
    ) j

GO

CREATE VIEW fhir.ProcedureSupportingInfo AS
SELECT
    [id],
    [supportingInfo.JSON],
    [supportingInfo.id],
    [supportingInfo.extension],
    [supportingInfo.reference],
    [supportingInfo.type],
    [supportingInfo.identifier.id],
    [supportingInfo.identifier.extension],
    [supportingInfo.identifier.use],
    [supportingInfo.identifier.type],
    [supportingInfo.identifier.system],
    [supportingInfo.identifier.value],
    [supportingInfo.identifier.period],
    [supportingInfo.identifier.assigner],
    [supportingInfo.display]
FROM openrowset (
        BULK 'Procedure/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [supportingInfo.JSON]  VARCHAR(MAX) '$.supportingInfo'
    ) AS rowset
    CROSS APPLY openjson (rowset.[supportingInfo.JSON]) with (
        [supportingInfo.id]            NVARCHAR(100)       '$.id',
        [supportingInfo.extension]     NVARCHAR(MAX)       '$.extension',
        [supportingInfo.reference]     NVARCHAR(4000)      '$.reference',
        [supportingInfo.type]          VARCHAR(256)        '$.type',
        [supportingInfo.identifier.id] NVARCHAR(100)       '$.identifier.id',
        [supportingInfo.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [supportingInfo.identifier.use] NVARCHAR(64)        '$.identifier.use',
        [supportingInfo.identifier.type] NVARCHAR(MAX)       '$.identifier.type',
        [supportingInfo.identifier.system] VARCHAR(256)        '$.identifier.system',
        [supportingInfo.identifier.value] NVARCHAR(4000)      '$.identifier.value',
        [supportingInfo.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [supportingInfo.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [supportingInfo.display]       NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[Provenance] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [target] VARCHAR(MAX),
    [recorded] VARCHAR(64),
    [policy] VARCHAR(MAX),
    [location.id] NVARCHAR(100),
    [location.extension] NVARCHAR(MAX),
    [location.reference] NVARCHAR(4000),
    [location.type] VARCHAR(256),
    [location.identifier.id] NVARCHAR(100),
    [location.identifier.extension] NVARCHAR(MAX),
    [location.identifier.use] NVARCHAR(64),
    [location.identifier.type] NVARCHAR(MAX),
    [location.identifier.system] VARCHAR(256),
    [location.identifier.value] NVARCHAR(4000),
    [location.identifier.period] NVARCHAR(MAX),
    [location.identifier.assigner] NVARCHAR(MAX),
    [location.display] NVARCHAR(4000),
    [authorization] VARCHAR(MAX),
    [activity.id] NVARCHAR(100),
    [activity.extension] NVARCHAR(MAX),
    [activity.coding] VARCHAR(MAX),
    [activity.text] NVARCHAR(4000),
    [basedOn] VARCHAR(MAX),
    [encounter.id] NVARCHAR(100),
    [encounter.extension] NVARCHAR(MAX),
    [encounter.reference] NVARCHAR(4000),
    [encounter.type] VARCHAR(256),
    [encounter.identifier.id] NVARCHAR(100),
    [encounter.identifier.extension] NVARCHAR(MAX),
    [encounter.identifier.use] NVARCHAR(64),
    [encounter.identifier.type] NVARCHAR(MAX),
    [encounter.identifier.system] VARCHAR(256),
    [encounter.identifier.value] NVARCHAR(4000),
    [encounter.identifier.period] NVARCHAR(MAX),
    [encounter.identifier.assigner] NVARCHAR(MAX),
    [encounter.display] NVARCHAR(4000),
    [agent] VARCHAR(MAX),
    [entity] VARCHAR(MAX),
    [signature] VARCHAR(MAX),
    [occurred.period.id] NVARCHAR(100),
    [occurred.period.extension] NVARCHAR(MAX),
    [occurred.period.start] VARCHAR(64),
    [occurred.period.end] VARCHAR(64),
    [occurred.dateTime] VARCHAR(64),
) WITH (
    LOCATION='/Provenance/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.ProvenanceTarget AS
SELECT
    [id],
    [target.JSON],
    [target.id],
    [target.extension],
    [target.reference],
    [target.type],
    [target.identifier.id],
    [target.identifier.extension],
    [target.identifier.use],
    [target.identifier.type],
    [target.identifier.system],
    [target.identifier.value],
    [target.identifier.period],
    [target.identifier.assigner],
    [target.display]
FROM openrowset (
        BULK 'Provenance/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [target.JSON]  VARCHAR(MAX) '$.target'
    ) AS rowset
    CROSS APPLY openjson (rowset.[target.JSON]) with (
        [target.id]                    NVARCHAR(100)       '$.id',
        [target.extension]             NVARCHAR(MAX)       '$.extension',
        [target.reference]             NVARCHAR(4000)      '$.reference',
        [target.type]                  VARCHAR(256)        '$.type',
        [target.identifier.id]         NVARCHAR(100)       '$.identifier.id',
        [target.identifier.extension]  NVARCHAR(MAX)       '$.identifier.extension',
        [target.identifier.use]        NVARCHAR(64)        '$.identifier.use',
        [target.identifier.type]       NVARCHAR(MAX)       '$.identifier.type',
        [target.identifier.system]     VARCHAR(256)        '$.identifier.system',
        [target.identifier.value]      NVARCHAR(4000)      '$.identifier.value',
        [target.identifier.period]     NVARCHAR(MAX)       '$.identifier.period',
        [target.identifier.assigner]   NVARCHAR(MAX)       '$.identifier.assigner',
        [target.display]               NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.ProvenancePolicy AS
SELECT
    [id],
    [policy.JSON],
    [policy]
FROM openrowset (
        BULK 'Provenance/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [policy.JSON]  VARCHAR(MAX) '$.policy'
    ) AS rowset
    CROSS APPLY openjson (rowset.[policy.JSON]) with (
        [policy]                       NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.ProvenanceAuthorization AS
SELECT
    [id],
    [authorization.JSON],
    [authorization.id],
    [authorization.extension],
    [authorization.concept.id],
    [authorization.concept.extension],
    [authorization.concept.coding],
    [authorization.concept.text],
    [authorization.reference.id],
    [authorization.reference.extension],
    [authorization.reference.reference],
    [authorization.reference.type],
    [authorization.reference.identifier],
    [authorization.reference.display]
FROM openrowset (
        BULK 'Provenance/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [authorization.JSON]  VARCHAR(MAX) '$.authorization'
    ) AS rowset
    CROSS APPLY openjson (rowset.[authorization.JSON]) with (
        [authorization.id]             NVARCHAR(100)       '$.id',
        [authorization.extension]      NVARCHAR(MAX)       '$.extension',
        [authorization.concept.id]     NVARCHAR(100)       '$.concept.id',
        [authorization.concept.extension] NVARCHAR(MAX)       '$.concept.extension',
        [authorization.concept.coding] NVARCHAR(MAX)       '$.concept.coding',
        [authorization.concept.text]   NVARCHAR(4000)      '$.concept.text',
        [authorization.reference.id]   NVARCHAR(100)       '$.reference.id',
        [authorization.reference.extension] NVARCHAR(MAX)       '$.reference.extension',
        [authorization.reference.reference] NVARCHAR(4000)      '$.reference.reference',
        [authorization.reference.type] VARCHAR(256)        '$.reference.type',
        [authorization.reference.identifier] NVARCHAR(MAX)       '$.reference.identifier',
        [authorization.reference.display] NVARCHAR(4000)      '$.reference.display'
    ) j

GO

CREATE VIEW fhir.ProvenanceBasedOn AS
SELECT
    [id],
    [basedOn.JSON],
    [basedOn.id],
    [basedOn.extension],
    [basedOn.reference],
    [basedOn.type],
    [basedOn.identifier.id],
    [basedOn.identifier.extension],
    [basedOn.identifier.use],
    [basedOn.identifier.type],
    [basedOn.identifier.system],
    [basedOn.identifier.value],
    [basedOn.identifier.period],
    [basedOn.identifier.assigner],
    [basedOn.display]
FROM openrowset (
        BULK 'Provenance/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [basedOn.JSON]  VARCHAR(MAX) '$.basedOn'
    ) AS rowset
    CROSS APPLY openjson (rowset.[basedOn.JSON]) with (
        [basedOn.id]                   NVARCHAR(100)       '$.id',
        [basedOn.extension]            NVARCHAR(MAX)       '$.extension',
        [basedOn.reference]            NVARCHAR(4000)      '$.reference',
        [basedOn.type]                 VARCHAR(256)        '$.type',
        [basedOn.identifier.id]        NVARCHAR(100)       '$.identifier.id',
        [basedOn.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [basedOn.identifier.use]       NVARCHAR(64)        '$.identifier.use',
        [basedOn.identifier.type]      NVARCHAR(MAX)       '$.identifier.type',
        [basedOn.identifier.system]    VARCHAR(256)        '$.identifier.system',
        [basedOn.identifier.value]     NVARCHAR(4000)      '$.identifier.value',
        [basedOn.identifier.period]    NVARCHAR(MAX)       '$.identifier.period',
        [basedOn.identifier.assigner]  NVARCHAR(MAX)       '$.identifier.assigner',
        [basedOn.display]              NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.ProvenanceAgent AS
SELECT
    [id],
    [agent.JSON],
    [agent.id],
    [agent.extension],
    [agent.modifierExtension],
    [agent.type.id],
    [agent.type.extension],
    [agent.type.coding],
    [agent.type.text],
    [agent.role],
    [agent.who.id],
    [agent.who.extension],
    [agent.who.reference],
    [agent.who.type],
    [agent.who.identifier],
    [agent.who.display],
    [agent.onBehalfOf.id],
    [agent.onBehalfOf.extension],
    [agent.onBehalfOf.reference],
    [agent.onBehalfOf.type],
    [agent.onBehalfOf.identifier],
    [agent.onBehalfOf.display]
FROM openrowset (
        BULK 'Provenance/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [agent.JSON]  VARCHAR(MAX) '$.agent'
    ) AS rowset
    CROSS APPLY openjson (rowset.[agent.JSON]) with (
        [agent.id]                     NVARCHAR(100)       '$.id',
        [agent.extension]              NVARCHAR(MAX)       '$.extension',
        [agent.modifierExtension]      NVARCHAR(MAX)       '$.modifierExtension',
        [agent.type.id]                NVARCHAR(100)       '$.type.id',
        [agent.type.extension]         NVARCHAR(MAX)       '$.type.extension',
        [agent.type.coding]            NVARCHAR(MAX)       '$.type.coding',
        [agent.type.text]              NVARCHAR(4000)      '$.type.text',
        [agent.role]                   NVARCHAR(MAX)       '$.role' AS JSON,
        [agent.who.id]                 NVARCHAR(100)       '$.who.id',
        [agent.who.extension]          NVARCHAR(MAX)       '$.who.extension',
        [agent.who.reference]          NVARCHAR(4000)      '$.who.reference',
        [agent.who.type]               VARCHAR(256)        '$.who.type',
        [agent.who.identifier]         NVARCHAR(MAX)       '$.who.identifier',
        [agent.who.display]            NVARCHAR(4000)      '$.who.display',
        [agent.onBehalfOf.id]          NVARCHAR(100)       '$.onBehalfOf.id',
        [agent.onBehalfOf.extension]   NVARCHAR(MAX)       '$.onBehalfOf.extension',
        [agent.onBehalfOf.reference]   NVARCHAR(4000)      '$.onBehalfOf.reference',
        [agent.onBehalfOf.type]        VARCHAR(256)        '$.onBehalfOf.type',
        [agent.onBehalfOf.identifier]  NVARCHAR(MAX)       '$.onBehalfOf.identifier',
        [agent.onBehalfOf.display]     NVARCHAR(4000)      '$.onBehalfOf.display'
    ) j

GO

CREATE VIEW fhir.ProvenanceEntity AS
SELECT
    [id],
    [entity.JSON],
    [entity.id],
    [entity.extension],
    [entity.modifierExtension],
    [entity.role],
    [entity.what.id],
    [entity.what.extension],
    [entity.what.reference],
    [entity.what.type],
    [entity.what.identifier],
    [entity.what.display],
    [entity.agent]
FROM openrowset (
        BULK 'Provenance/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [entity.JSON]  VARCHAR(MAX) '$.entity'
    ) AS rowset
    CROSS APPLY openjson (rowset.[entity.JSON]) with (
        [entity.id]                    NVARCHAR(100)       '$.id',
        [entity.extension]             NVARCHAR(MAX)       '$.extension',
        [entity.modifierExtension]     NVARCHAR(MAX)       '$.modifierExtension',
        [entity.role]                  NVARCHAR(4000)      '$.role',
        [entity.what.id]               NVARCHAR(100)       '$.what.id',
        [entity.what.extension]        NVARCHAR(MAX)       '$.what.extension',
        [entity.what.reference]        NVARCHAR(4000)      '$.what.reference',
        [entity.what.type]             VARCHAR(256)        '$.what.type',
        [entity.what.identifier]       NVARCHAR(MAX)       '$.what.identifier',
        [entity.what.display]          NVARCHAR(4000)      '$.what.display',
        [entity.agent]                 NVARCHAR(MAX)       '$.agent' AS JSON
    ) j

GO

CREATE VIEW fhir.ProvenanceSignature AS
SELECT
    [id],
    [signature.JSON],
    [signature.id],
    [signature.extension],
    [signature.type],
    [signature.when],
    [signature.who.id],
    [signature.who.extension],
    [signature.who.reference],
    [signature.who.type],
    [signature.who.identifier],
    [signature.who.display],
    [signature.onBehalfOf.id],
    [signature.onBehalfOf.extension],
    [signature.onBehalfOf.reference],
    [signature.onBehalfOf.type],
    [signature.onBehalfOf.identifier],
    [signature.onBehalfOf.display],
    [signature.targetFormat],
    [signature.sigFormat],
    [signature.data]
FROM openrowset (
        BULK 'Provenance/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [signature.JSON]  VARCHAR(MAX) '$.signature'
    ) AS rowset
    CROSS APPLY openjson (rowset.[signature.JSON]) with (
        [signature.id]                 NVARCHAR(100)       '$.id',
        [signature.extension]          NVARCHAR(MAX)       '$.extension',
        [signature.type]               NVARCHAR(MAX)       '$.type' AS JSON,
        [signature.when]               VARCHAR(64)         '$.when',
        [signature.who.id]             NVARCHAR(100)       '$.who.id',
        [signature.who.extension]      NVARCHAR(MAX)       '$.who.extension',
        [signature.who.reference]      NVARCHAR(4000)      '$.who.reference',
        [signature.who.type]           VARCHAR(256)        '$.who.type',
        [signature.who.identifier]     NVARCHAR(MAX)       '$.who.identifier',
        [signature.who.display]        NVARCHAR(4000)      '$.who.display',
        [signature.onBehalfOf.id]      NVARCHAR(100)       '$.onBehalfOf.id',
        [signature.onBehalfOf.extension] NVARCHAR(MAX)       '$.onBehalfOf.extension',
        [signature.onBehalfOf.reference] NVARCHAR(4000)      '$.onBehalfOf.reference',
        [signature.onBehalfOf.type]    VARCHAR(256)        '$.onBehalfOf.type',
        [signature.onBehalfOf.identifier] NVARCHAR(MAX)       '$.onBehalfOf.identifier',
        [signature.onBehalfOf.display] NVARCHAR(4000)      '$.onBehalfOf.display',
        [signature.targetFormat]       NVARCHAR(100)       '$.targetFormat',
        [signature.sigFormat]          NVARCHAR(100)       '$.sigFormat',
        [signature.data]               NVARCHAR(MAX)       '$.data'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[Questionnaire] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [url] VARCHAR(256),
    [identifier] VARCHAR(MAX),
    [version] NVARCHAR(100),
    [name] NVARCHAR(500),
    [title] NVARCHAR(4000),
    [status] NVARCHAR(100),
    [experimental] bit,
    [date] VARCHAR(64),
    [publisher] NVARCHAR(500),
    [contact] VARCHAR(MAX),
    [description] NVARCHAR(MAX),
    [useContext] VARCHAR(MAX),
    [jurisdiction] VARCHAR(MAX),
    [purpose] NVARCHAR(MAX),
    [copyright] NVARCHAR(MAX),
    [approvalDate] VARCHAR(64),
    [lastReviewDate] VARCHAR(64),
    [effectivePeriod.id] NVARCHAR(100),
    [effectivePeriod.extension] NVARCHAR(MAX),
    [effectivePeriod.start] VARCHAR(64),
    [effectivePeriod.end] VARCHAR(64),
    [topic] VARCHAR(MAX),
    [author] VARCHAR(MAX),
    [editor] VARCHAR(MAX),
    [reviewer] VARCHAR(MAX),
    [endorser] VARCHAR(MAX),
    [relatedArtifact] VARCHAR(MAX),
    [derivedFrom] VARCHAR(MAX),
    [subjectType] VARCHAR(MAX),
    [code] VARCHAR(MAX),
    [item] VARCHAR(MAX),
) WITH (
    LOCATION='/Questionnaire/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.QuestionnaireIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'Questionnaire/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.QuestionnaireContact AS
SELECT
    [id],
    [contact.JSON],
    [contact.id],
    [contact.extension],
    [contact.name],
    [contact.telecom]
FROM openrowset (
        BULK 'Questionnaire/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [contact.JSON]  VARCHAR(MAX) '$.contact'
    ) AS rowset
    CROSS APPLY openjson (rowset.[contact.JSON]) with (
        [contact.id]                   NVARCHAR(100)       '$.id',
        [contact.extension]            NVARCHAR(MAX)       '$.extension',
        [contact.name]                 NVARCHAR(500)       '$.name',
        [contact.telecom]              NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.QuestionnaireUseContext AS
SELECT
    [id],
    [useContext.JSON],
    [useContext.id],
    [useContext.extension],
    [useContext.code.id],
    [useContext.code.extension],
    [useContext.code.system],
    [useContext.code.version],
    [useContext.code.code],
    [useContext.code.display],
    [useContext.code.userSelected],
    [useContext.value.codeableConcept.id],
    [useContext.value.codeableConcept.extension],
    [useContext.value.codeableConcept.coding],
    [useContext.value.codeableConcept.text],
    [useContext.value.quantity.id],
    [useContext.value.quantity.extension],
    [useContext.value.quantity.value],
    [useContext.value.quantity.comparator],
    [useContext.value.quantity.unit],
    [useContext.value.quantity.system],
    [useContext.value.quantity.code],
    [useContext.value.range.id],
    [useContext.value.range.extension],
    [useContext.value.range.low],
    [useContext.value.range.high],
    [useContext.value.reference.id],
    [useContext.value.reference.extension],
    [useContext.value.reference.reference],
    [useContext.value.reference.type],
    [useContext.value.reference.identifier],
    [useContext.value.reference.display]
FROM openrowset (
        BULK 'Questionnaire/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [useContext.JSON]  VARCHAR(MAX) '$.useContext'
    ) AS rowset
    CROSS APPLY openjson (rowset.[useContext.JSON]) with (
        [useContext.id]                NVARCHAR(100)       '$.id',
        [useContext.extension]         NVARCHAR(MAX)       '$.extension',
        [useContext.code.id]           NVARCHAR(100)       '$.code.id',
        [useContext.code.extension]    NVARCHAR(MAX)       '$.code.extension',
        [useContext.code.system]       VARCHAR(256)        '$.code.system',
        [useContext.code.version]      NVARCHAR(100)       '$.code.version',
        [useContext.code.code]         NVARCHAR(4000)      '$.code.code',
        [useContext.code.display]      NVARCHAR(4000)      '$.code.display',
        [useContext.code.userSelected] bit                 '$.code.userSelected',
        [useContext.value.codeableConcept.id] NVARCHAR(100)       '$.value.codeableConcept.id',
        [useContext.value.codeableConcept.extension] NVARCHAR(MAX)       '$.value.codeableConcept.extension',
        [useContext.value.codeableConcept.coding] NVARCHAR(MAX)       '$.value.codeableConcept.coding',
        [useContext.value.codeableConcept.text] NVARCHAR(4000)      '$.value.codeableConcept.text',
        [useContext.value.quantity.id] NVARCHAR(100)       '$.value.quantity.id',
        [useContext.value.quantity.extension] NVARCHAR(MAX)       '$.value.quantity.extension',
        [useContext.value.quantity.value] float               '$.value.quantity.value',
        [useContext.value.quantity.comparator] NVARCHAR(64)        '$.value.quantity.comparator',
        [useContext.value.quantity.unit] NVARCHAR(100)       '$.value.quantity.unit',
        [useContext.value.quantity.system] VARCHAR(256)        '$.value.quantity.system',
        [useContext.value.quantity.code] NVARCHAR(4000)      '$.value.quantity.code',
        [useContext.value.range.id]    NVARCHAR(100)       '$.value.range.id',
        [useContext.value.range.extension] NVARCHAR(MAX)       '$.value.range.extension',
        [useContext.value.range.low]   NVARCHAR(MAX)       '$.value.range.low',
        [useContext.value.range.high]  NVARCHAR(MAX)       '$.value.range.high',
        [useContext.value.reference.id] NVARCHAR(100)       '$.value.reference.id',
        [useContext.value.reference.extension] NVARCHAR(MAX)       '$.value.reference.extension',
        [useContext.value.reference.reference] NVARCHAR(4000)      '$.value.reference.reference',
        [useContext.value.reference.type] VARCHAR(256)        '$.value.reference.type',
        [useContext.value.reference.identifier] NVARCHAR(MAX)       '$.value.reference.identifier',
        [useContext.value.reference.display] NVARCHAR(4000)      '$.value.reference.display'
    ) j

GO

CREATE VIEW fhir.QuestionnaireJurisdiction AS
SELECT
    [id],
    [jurisdiction.JSON],
    [jurisdiction.id],
    [jurisdiction.extension],
    [jurisdiction.coding],
    [jurisdiction.text]
FROM openrowset (
        BULK 'Questionnaire/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [jurisdiction.JSON]  VARCHAR(MAX) '$.jurisdiction'
    ) AS rowset
    CROSS APPLY openjson (rowset.[jurisdiction.JSON]) with (
        [jurisdiction.id]              NVARCHAR(100)       '$.id',
        [jurisdiction.extension]       NVARCHAR(MAX)       '$.extension',
        [jurisdiction.coding]          NVARCHAR(MAX)       '$.coding' AS JSON,
        [jurisdiction.text]            NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.QuestionnaireTopic AS
SELECT
    [id],
    [topic.JSON],
    [topic.id],
    [topic.extension],
    [topic.coding],
    [topic.text]
FROM openrowset (
        BULK 'Questionnaire/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [topic.JSON]  VARCHAR(MAX) '$.topic'
    ) AS rowset
    CROSS APPLY openjson (rowset.[topic.JSON]) with (
        [topic.id]                     NVARCHAR(100)       '$.id',
        [topic.extension]              NVARCHAR(MAX)       '$.extension',
        [topic.coding]                 NVARCHAR(MAX)       '$.coding' AS JSON,
        [topic.text]                   NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.QuestionnaireAuthor AS
SELECT
    [id],
    [author.JSON],
    [author.id],
    [author.extension],
    [author.name],
    [author.telecom]
FROM openrowset (
        BULK 'Questionnaire/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [author.JSON]  VARCHAR(MAX) '$.author'
    ) AS rowset
    CROSS APPLY openjson (rowset.[author.JSON]) with (
        [author.id]                    NVARCHAR(100)       '$.id',
        [author.extension]             NVARCHAR(MAX)       '$.extension',
        [author.name]                  NVARCHAR(500)       '$.name',
        [author.telecom]               NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.QuestionnaireEditor AS
SELECT
    [id],
    [editor.JSON],
    [editor.id],
    [editor.extension],
    [editor.name],
    [editor.telecom]
FROM openrowset (
        BULK 'Questionnaire/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [editor.JSON]  VARCHAR(MAX) '$.editor'
    ) AS rowset
    CROSS APPLY openjson (rowset.[editor.JSON]) with (
        [editor.id]                    NVARCHAR(100)       '$.id',
        [editor.extension]             NVARCHAR(MAX)       '$.extension',
        [editor.name]                  NVARCHAR(500)       '$.name',
        [editor.telecom]               NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.QuestionnaireReviewer AS
SELECT
    [id],
    [reviewer.JSON],
    [reviewer.id],
    [reviewer.extension],
    [reviewer.name],
    [reviewer.telecom]
FROM openrowset (
        BULK 'Questionnaire/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [reviewer.JSON]  VARCHAR(MAX) '$.reviewer'
    ) AS rowset
    CROSS APPLY openjson (rowset.[reviewer.JSON]) with (
        [reviewer.id]                  NVARCHAR(100)       '$.id',
        [reviewer.extension]           NVARCHAR(MAX)       '$.extension',
        [reviewer.name]                NVARCHAR(500)       '$.name',
        [reviewer.telecom]             NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.QuestionnaireEndorser AS
SELECT
    [id],
    [endorser.JSON],
    [endorser.id],
    [endorser.extension],
    [endorser.name],
    [endorser.telecom]
FROM openrowset (
        BULK 'Questionnaire/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [endorser.JSON]  VARCHAR(MAX) '$.endorser'
    ) AS rowset
    CROSS APPLY openjson (rowset.[endorser.JSON]) with (
        [endorser.id]                  NVARCHAR(100)       '$.id',
        [endorser.extension]           NVARCHAR(MAX)       '$.extension',
        [endorser.name]                NVARCHAR(500)       '$.name',
        [endorser.telecom]             NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.QuestionnaireRelatedArtifact AS
SELECT
    [id],
    [relatedArtifact.JSON],
    [relatedArtifact.id],
    [relatedArtifact.extension],
    [relatedArtifact.type],
    [relatedArtifact.classifier],
    [relatedArtifact.label],
    [relatedArtifact.display],
    [relatedArtifact.citation],
    [relatedArtifact.document.id],
    [relatedArtifact.document.extension],
    [relatedArtifact.document.contentType],
    [relatedArtifact.document.language],
    [relatedArtifact.document.data],
    [relatedArtifact.document.url],
    [relatedArtifact.document.size],
    [relatedArtifact.document.hash],
    [relatedArtifact.document.title],
    [relatedArtifact.document.creation],
    [relatedArtifact.document.height],
    [relatedArtifact.document.width],
    [relatedArtifact.document.frames],
    [relatedArtifact.document.duration],
    [relatedArtifact.document.pages],
    [relatedArtifact.resource],
    [relatedArtifact.resourceReference.id],
    [relatedArtifact.resourceReference.extension],
    [relatedArtifact.resourceReference.reference],
    [relatedArtifact.resourceReference.type],
    [relatedArtifact.resourceReference.identifier],
    [relatedArtifact.resourceReference.display]
FROM openrowset (
        BULK 'Questionnaire/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [relatedArtifact.JSON]  VARCHAR(MAX) '$.relatedArtifact'
    ) AS rowset
    CROSS APPLY openjson (rowset.[relatedArtifact.JSON]) with (
        [relatedArtifact.id]           NVARCHAR(100)       '$.id',
        [relatedArtifact.extension]    NVARCHAR(MAX)       '$.extension',
        [relatedArtifact.type]         NVARCHAR(64)        '$.type',
        [relatedArtifact.classifier]   NVARCHAR(MAX)       '$.classifier' AS JSON,
        [relatedArtifact.label]        NVARCHAR(100)       '$.label',
        [relatedArtifact.display]      NVARCHAR(4000)      '$.display',
        [relatedArtifact.citation]     NVARCHAR(MAX)       '$.citation',
        [relatedArtifact.document.id]  NVARCHAR(100)       '$.document.id',
        [relatedArtifact.document.extension] NVARCHAR(MAX)       '$.document.extension',
        [relatedArtifact.document.contentType] NVARCHAR(100)       '$.document.contentType',
        [relatedArtifact.document.language] NVARCHAR(100)       '$.document.language',
        [relatedArtifact.document.data] NVARCHAR(MAX)       '$.document.data',
        [relatedArtifact.document.url] VARCHAR(256)        '$.document.url',
        [relatedArtifact.document.size] NVARCHAR(MAX)       '$.document.size',
        [relatedArtifact.document.hash] NVARCHAR(MAX)       '$.document.hash',
        [relatedArtifact.document.title] NVARCHAR(4000)      '$.document.title',
        [relatedArtifact.document.creation] VARCHAR(64)         '$.document.creation',
        [relatedArtifact.document.height] bigint              '$.document.height',
        [relatedArtifact.document.width] bigint              '$.document.width',
        [relatedArtifact.document.frames] bigint              '$.document.frames',
        [relatedArtifact.document.duration] float               '$.document.duration',
        [relatedArtifact.document.pages] bigint              '$.document.pages',
        [relatedArtifact.resource]     VARCHAR(256)        '$.resource',
        [relatedArtifact.resourceReference.id] NVARCHAR(100)       '$.resourceReference.id',
        [relatedArtifact.resourceReference.extension] NVARCHAR(MAX)       '$.resourceReference.extension',
        [relatedArtifact.resourceReference.reference] NVARCHAR(4000)      '$.resourceReference.reference',
        [relatedArtifact.resourceReference.type] VARCHAR(256)        '$.resourceReference.type',
        [relatedArtifact.resourceReference.identifier] NVARCHAR(MAX)       '$.resourceReference.identifier',
        [relatedArtifact.resourceReference.display] NVARCHAR(4000)      '$.resourceReference.display'
    ) j

GO

CREATE VIEW fhir.QuestionnaireDerivedFrom AS
SELECT
    [id],
    [derivedFrom.JSON],
    [derivedFrom]
FROM openrowset (
        BULK 'Questionnaire/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [derivedFrom.JSON]  VARCHAR(MAX) '$.derivedFrom'
    ) AS rowset
    CROSS APPLY openjson (rowset.[derivedFrom.JSON]) with (
        [derivedFrom]                  NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.QuestionnaireSubjectType AS
SELECT
    [id],
    [subjectType.JSON],
    [subjectType]
FROM openrowset (
        BULK 'Questionnaire/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [subjectType.JSON]  VARCHAR(MAX) '$.subjectType'
    ) AS rowset
    CROSS APPLY openjson (rowset.[subjectType.JSON]) with (
        [subjectType]                  NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.QuestionnaireCode AS
SELECT
    [id],
    [code.JSON],
    [code.id],
    [code.extension],
    [code.system],
    [code.version],
    [code.code],
    [code.display],
    [code.userSelected]
FROM openrowset (
        BULK 'Questionnaire/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [code.JSON]  VARCHAR(MAX) '$.code'
    ) AS rowset
    CROSS APPLY openjson (rowset.[code.JSON]) with (
        [code.id]                      NVARCHAR(100)       '$.id',
        [code.extension]               NVARCHAR(MAX)       '$.extension',
        [code.system]                  VARCHAR(256)        '$.system',
        [code.version]                 NVARCHAR(100)       '$.version',
        [code.code]                    NVARCHAR(4000)      '$.code',
        [code.display]                 NVARCHAR(4000)      '$.display',
        [code.userSelected]            bit                 '$.userSelected'
    ) j

GO

CREATE VIEW fhir.QuestionnaireItem AS
SELECT
    [id],
    [item.JSON],
    [item.id],
    [item.extension],
    [item.modifierExtension],
    [item.linkId],
    [item.definition],
    [item.code],
    [item.prefix],
    [item.text],
    [item.type],
    [item.enableWhen],
    [item.enableBehavior],
    [item.disabledDisplay],
    [item.required],
    [item.repeats],
    [item.readOnly],
    [item.maxLength],
    [item.answerConstraint],
    [item.answerValueSet],
    [item.answerOption],
    [item.initial],
    [item.item]
FROM openrowset (
        BULK 'Questionnaire/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [item.JSON]  VARCHAR(MAX) '$.item'
    ) AS rowset
    CROSS APPLY openjson (rowset.[item.JSON]) with (
        [item.id]                      NVARCHAR(100)       '$.id',
        [item.extension]               NVARCHAR(MAX)       '$.extension',
        [item.modifierExtension]       NVARCHAR(MAX)       '$.modifierExtension',
        [item.linkId]                  NVARCHAR(100)       '$.linkId',
        [item.definition]              VARCHAR(256)        '$.definition',
        [item.code]                    NVARCHAR(MAX)       '$.code' AS JSON,
        [item.prefix]                  NVARCHAR(500)       '$.prefix',
        [item.text]                    NVARCHAR(MAX)       '$.text',
        [item.type]                    NVARCHAR(100)       '$.type',
        [item.enableWhen]              NVARCHAR(MAX)       '$.enableWhen' AS JSON,
        [item.enableBehavior]          NVARCHAR(4000)      '$.enableBehavior',
        [item.disabledDisplay]         NVARCHAR(4000)      '$.disabledDisplay',
        [item.required]                bit                 '$.required',
        [item.repeats]                 bit                 '$.repeats',
        [item.readOnly]                bit                 '$.readOnly',
        [item.maxLength]               bigint              '$.maxLength',
        [item.answerConstraint]        NVARCHAR(4000)      '$.answerConstraint',
        [item.answerValueSet]          VARCHAR(256)        '$.answerValueSet',
        [item.answerOption]            NVARCHAR(MAX)       '$.answerOption' AS JSON,
        [item.initial]                 NVARCHAR(MAX)       '$.initial' AS JSON,
        [item.item]                    NVARCHAR(MAX)       '$.item' AS JSON
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[QuestionnaireResponse] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [basedOn] VARCHAR(MAX),
    [partOf] VARCHAR(MAX),
    [questionnaire] VARCHAR(256),
    [status] NVARCHAR(100),
    [subject.id] NVARCHAR(100),
    [subject.extension] NVARCHAR(MAX),
    [subject.reference] NVARCHAR(4000),
    [subject.type] VARCHAR(256),
    [subject.identifier.id] NVARCHAR(100),
    [subject.identifier.extension] NVARCHAR(MAX),
    [subject.identifier.use] NVARCHAR(64),
    [subject.identifier.type] NVARCHAR(MAX),
    [subject.identifier.system] VARCHAR(256),
    [subject.identifier.value] NVARCHAR(4000),
    [subject.identifier.period] NVARCHAR(MAX),
    [subject.identifier.assigner] NVARCHAR(MAX),
    [subject.display] NVARCHAR(4000),
    [encounter.id] NVARCHAR(100),
    [encounter.extension] NVARCHAR(MAX),
    [encounter.reference] NVARCHAR(4000),
    [encounter.type] VARCHAR(256),
    [encounter.identifier.id] NVARCHAR(100),
    [encounter.identifier.extension] NVARCHAR(MAX),
    [encounter.identifier.use] NVARCHAR(64),
    [encounter.identifier.type] NVARCHAR(MAX),
    [encounter.identifier.system] VARCHAR(256),
    [encounter.identifier.value] NVARCHAR(4000),
    [encounter.identifier.period] NVARCHAR(MAX),
    [encounter.identifier.assigner] NVARCHAR(MAX),
    [encounter.display] NVARCHAR(4000),
    [authored] VARCHAR(64),
    [author.id] NVARCHAR(100),
    [author.extension] NVARCHAR(MAX),
    [author.reference] NVARCHAR(4000),
    [author.type] VARCHAR(256),
    [author.identifier.id] NVARCHAR(100),
    [author.identifier.extension] NVARCHAR(MAX),
    [author.identifier.use] NVARCHAR(64),
    [author.identifier.type] NVARCHAR(MAX),
    [author.identifier.system] VARCHAR(256),
    [author.identifier.value] NVARCHAR(4000),
    [author.identifier.period] NVARCHAR(MAX),
    [author.identifier.assigner] NVARCHAR(MAX),
    [author.display] NVARCHAR(4000),
    [source.id] NVARCHAR(100),
    [source.extension] NVARCHAR(MAX),
    [source.reference] NVARCHAR(4000),
    [source.type] VARCHAR(256),
    [source.identifier.id] NVARCHAR(100),
    [source.identifier.extension] NVARCHAR(MAX),
    [source.identifier.use] NVARCHAR(64),
    [source.identifier.type] NVARCHAR(MAX),
    [source.identifier.system] VARCHAR(256),
    [source.identifier.value] NVARCHAR(4000),
    [source.identifier.period] NVARCHAR(MAX),
    [source.identifier.assigner] NVARCHAR(MAX),
    [source.display] NVARCHAR(4000),
    [item] VARCHAR(MAX),
) WITH (
    LOCATION='/QuestionnaireResponse/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.QuestionnaireResponseIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'QuestionnaireResponse/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.QuestionnaireResponseBasedOn AS
SELECT
    [id],
    [basedOn.JSON],
    [basedOn.id],
    [basedOn.extension],
    [basedOn.reference],
    [basedOn.type],
    [basedOn.identifier.id],
    [basedOn.identifier.extension],
    [basedOn.identifier.use],
    [basedOn.identifier.type],
    [basedOn.identifier.system],
    [basedOn.identifier.value],
    [basedOn.identifier.period],
    [basedOn.identifier.assigner],
    [basedOn.display]
FROM openrowset (
        BULK 'QuestionnaireResponse/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [basedOn.JSON]  VARCHAR(MAX) '$.basedOn'
    ) AS rowset
    CROSS APPLY openjson (rowset.[basedOn.JSON]) with (
        [basedOn.id]                   NVARCHAR(100)       '$.id',
        [basedOn.extension]            NVARCHAR(MAX)       '$.extension',
        [basedOn.reference]            NVARCHAR(4000)      '$.reference',
        [basedOn.type]                 VARCHAR(256)        '$.type',
        [basedOn.identifier.id]        NVARCHAR(100)       '$.identifier.id',
        [basedOn.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [basedOn.identifier.use]       NVARCHAR(64)        '$.identifier.use',
        [basedOn.identifier.type]      NVARCHAR(MAX)       '$.identifier.type',
        [basedOn.identifier.system]    VARCHAR(256)        '$.identifier.system',
        [basedOn.identifier.value]     NVARCHAR(4000)      '$.identifier.value',
        [basedOn.identifier.period]    NVARCHAR(MAX)       '$.identifier.period',
        [basedOn.identifier.assigner]  NVARCHAR(MAX)       '$.identifier.assigner',
        [basedOn.display]              NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.QuestionnaireResponsePartOf AS
SELECT
    [id],
    [partOf.JSON],
    [partOf.id],
    [partOf.extension],
    [partOf.reference],
    [partOf.type],
    [partOf.identifier.id],
    [partOf.identifier.extension],
    [partOf.identifier.use],
    [partOf.identifier.type],
    [partOf.identifier.system],
    [partOf.identifier.value],
    [partOf.identifier.period],
    [partOf.identifier.assigner],
    [partOf.display]
FROM openrowset (
        BULK 'QuestionnaireResponse/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [partOf.JSON]  VARCHAR(MAX) '$.partOf'
    ) AS rowset
    CROSS APPLY openjson (rowset.[partOf.JSON]) with (
        [partOf.id]                    NVARCHAR(100)       '$.id',
        [partOf.extension]             NVARCHAR(MAX)       '$.extension',
        [partOf.reference]             NVARCHAR(4000)      '$.reference',
        [partOf.type]                  VARCHAR(256)        '$.type',
        [partOf.identifier.id]         NVARCHAR(100)       '$.identifier.id',
        [partOf.identifier.extension]  NVARCHAR(MAX)       '$.identifier.extension',
        [partOf.identifier.use]        NVARCHAR(64)        '$.identifier.use',
        [partOf.identifier.type]       NVARCHAR(MAX)       '$.identifier.type',
        [partOf.identifier.system]     VARCHAR(256)        '$.identifier.system',
        [partOf.identifier.value]      NVARCHAR(4000)      '$.identifier.value',
        [partOf.identifier.period]     NVARCHAR(MAX)       '$.identifier.period',
        [partOf.identifier.assigner]   NVARCHAR(MAX)       '$.identifier.assigner',
        [partOf.display]               NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.QuestionnaireResponseItem AS
SELECT
    [id],
    [item.JSON],
    [item.id],
    [item.extension],
    [item.modifierExtension],
    [item.linkId],
    [item.definition],
    [item.text],
    [item.answer],
    [item.item]
FROM openrowset (
        BULK 'QuestionnaireResponse/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [item.JSON]  VARCHAR(MAX) '$.item'
    ) AS rowset
    CROSS APPLY openjson (rowset.[item.JSON]) with (
        [item.id]                      NVARCHAR(100)       '$.id',
        [item.extension]               NVARCHAR(MAX)       '$.extension',
        [item.modifierExtension]       NVARCHAR(MAX)       '$.modifierExtension',
        [item.linkId]                  NVARCHAR(100)       '$.linkId',
        [item.definition]              VARCHAR(256)        '$.definition',
        [item.text]                    NVARCHAR(4000)      '$.text',
        [item.answer]                  NVARCHAR(MAX)       '$.answer' AS JSON,
        [item.item]                    NVARCHAR(MAX)       '$.item' AS JSON
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[RegulatedAuthorization] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [subject] VARCHAR(MAX),
    [type.id] NVARCHAR(100),
    [type.extension] NVARCHAR(MAX),
    [type.coding] VARCHAR(MAX),
    [type.text] NVARCHAR(4000),
    [description] NVARCHAR(MAX),
    [region] VARCHAR(MAX),
    [status.id] NVARCHAR(100),
    [status.extension] NVARCHAR(MAX),
    [status.coding] VARCHAR(MAX),
    [status.text] NVARCHAR(4000),
    [statusDate] VARCHAR(64),
    [validityPeriod.id] NVARCHAR(100),
    [validityPeriod.extension] NVARCHAR(MAX),
    [validityPeriod.start] VARCHAR(64),
    [validityPeriod.end] VARCHAR(64),
    [indication.id] NVARCHAR(100),
    [indication.extension] NVARCHAR(MAX),
    [indication.concept.id] NVARCHAR(100),
    [indication.concept.extension] NVARCHAR(MAX),
    [indication.concept.coding] NVARCHAR(MAX),
    [indication.concept.text] NVARCHAR(4000),
    [indication.reference.id] NVARCHAR(100),
    [indication.reference.extension] NVARCHAR(MAX),
    [indication.reference.reference] NVARCHAR(4000),
    [indication.reference.type] VARCHAR(256),
    [indication.reference.identifier] NVARCHAR(MAX),
    [indication.reference.display] NVARCHAR(4000),
    [intendedUse.id] NVARCHAR(100),
    [intendedUse.extension] NVARCHAR(MAX),
    [intendedUse.coding] VARCHAR(MAX),
    [intendedUse.text] NVARCHAR(4000),
    [basis] VARCHAR(MAX),
    [holder.id] NVARCHAR(100),
    [holder.extension] NVARCHAR(MAX),
    [holder.reference] NVARCHAR(4000),
    [holder.type] VARCHAR(256),
    [holder.identifier.id] NVARCHAR(100),
    [holder.identifier.extension] NVARCHAR(MAX),
    [holder.identifier.use] NVARCHAR(64),
    [holder.identifier.type] NVARCHAR(MAX),
    [holder.identifier.system] VARCHAR(256),
    [holder.identifier.value] NVARCHAR(4000),
    [holder.identifier.period] NVARCHAR(MAX),
    [holder.identifier.assigner] NVARCHAR(MAX),
    [holder.display] NVARCHAR(4000),
    [regulator.id] NVARCHAR(100),
    [regulator.extension] NVARCHAR(MAX),
    [regulator.reference] NVARCHAR(4000),
    [regulator.type] VARCHAR(256),
    [regulator.identifier.id] NVARCHAR(100),
    [regulator.identifier.extension] NVARCHAR(MAX),
    [regulator.identifier.use] NVARCHAR(64),
    [regulator.identifier.type] NVARCHAR(MAX),
    [regulator.identifier.system] VARCHAR(256),
    [regulator.identifier.value] NVARCHAR(4000),
    [regulator.identifier.period] NVARCHAR(MAX),
    [regulator.identifier.assigner] NVARCHAR(MAX),
    [regulator.display] NVARCHAR(4000),
    [attachedDocument] VARCHAR(MAX),
    [case.id] NVARCHAR(100),
    [case.extension] NVARCHAR(MAX),
    [case.modifierExtension] NVARCHAR(MAX),
    [case.identifier.id] NVARCHAR(100),
    [case.identifier.extension] NVARCHAR(MAX),
    [case.identifier.use] NVARCHAR(64),
    [case.identifier.type] NVARCHAR(MAX),
    [case.identifier.system] VARCHAR(256),
    [case.identifier.value] NVARCHAR(4000),
    [case.identifier.period] NVARCHAR(MAX),
    [case.identifier.assigner] NVARCHAR(MAX),
    [case.type.id] NVARCHAR(100),
    [case.type.extension] NVARCHAR(MAX),
    [case.type.coding] NVARCHAR(MAX),
    [case.type.text] NVARCHAR(4000),
    [case.status.id] NVARCHAR(100),
    [case.status.extension] NVARCHAR(MAX),
    [case.status.coding] NVARCHAR(MAX),
    [case.status.text] NVARCHAR(4000),
    [case.application] VARCHAR(MAX),
    [case.date.period.id] NVARCHAR(100),
    [case.date.period.extension] NVARCHAR(MAX),
    [case.date.period.start] VARCHAR(64),
    [case.date.period.end] VARCHAR(64),
    [case.date.dateTime] VARCHAR(64),
) WITH (
    LOCATION='/RegulatedAuthorization/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.RegulatedAuthorizationIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'RegulatedAuthorization/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.RegulatedAuthorizationSubject AS
SELECT
    [id],
    [subject.JSON],
    [subject.id],
    [subject.extension],
    [subject.reference],
    [subject.type],
    [subject.identifier.id],
    [subject.identifier.extension],
    [subject.identifier.use],
    [subject.identifier.type],
    [subject.identifier.system],
    [subject.identifier.value],
    [subject.identifier.period],
    [subject.identifier.assigner],
    [subject.display]
FROM openrowset (
        BULK 'RegulatedAuthorization/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [subject.JSON]  VARCHAR(MAX) '$.subject'
    ) AS rowset
    CROSS APPLY openjson (rowset.[subject.JSON]) with (
        [subject.id]                   NVARCHAR(100)       '$.id',
        [subject.extension]            NVARCHAR(MAX)       '$.extension',
        [subject.reference]            NVARCHAR(4000)      '$.reference',
        [subject.type]                 VARCHAR(256)        '$.type',
        [subject.identifier.id]        NVARCHAR(100)       '$.identifier.id',
        [subject.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [subject.identifier.use]       NVARCHAR(64)        '$.identifier.use',
        [subject.identifier.type]      NVARCHAR(MAX)       '$.identifier.type',
        [subject.identifier.system]    VARCHAR(256)        '$.identifier.system',
        [subject.identifier.value]     NVARCHAR(4000)      '$.identifier.value',
        [subject.identifier.period]    NVARCHAR(MAX)       '$.identifier.period',
        [subject.identifier.assigner]  NVARCHAR(MAX)       '$.identifier.assigner',
        [subject.display]              NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.RegulatedAuthorizationRegion AS
SELECT
    [id],
    [region.JSON],
    [region.id],
    [region.extension],
    [region.coding],
    [region.text]
FROM openrowset (
        BULK 'RegulatedAuthorization/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [region.JSON]  VARCHAR(MAX) '$.region'
    ) AS rowset
    CROSS APPLY openjson (rowset.[region.JSON]) with (
        [region.id]                    NVARCHAR(100)       '$.id',
        [region.extension]             NVARCHAR(MAX)       '$.extension',
        [region.coding]                NVARCHAR(MAX)       '$.coding' AS JSON,
        [region.text]                  NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.RegulatedAuthorizationBasis AS
SELECT
    [id],
    [basis.JSON],
    [basis.id],
    [basis.extension],
    [basis.coding],
    [basis.text]
FROM openrowset (
        BULK 'RegulatedAuthorization/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [basis.JSON]  VARCHAR(MAX) '$.basis'
    ) AS rowset
    CROSS APPLY openjson (rowset.[basis.JSON]) with (
        [basis.id]                     NVARCHAR(100)       '$.id',
        [basis.extension]              NVARCHAR(MAX)       '$.extension',
        [basis.coding]                 NVARCHAR(MAX)       '$.coding' AS JSON,
        [basis.text]                   NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.RegulatedAuthorizationAttachedDocument AS
SELECT
    [id],
    [attachedDocument.JSON],
    [attachedDocument.id],
    [attachedDocument.extension],
    [attachedDocument.reference],
    [attachedDocument.type],
    [attachedDocument.identifier.id],
    [attachedDocument.identifier.extension],
    [attachedDocument.identifier.use],
    [attachedDocument.identifier.type],
    [attachedDocument.identifier.system],
    [attachedDocument.identifier.value],
    [attachedDocument.identifier.period],
    [attachedDocument.identifier.assigner],
    [attachedDocument.display]
FROM openrowset (
        BULK 'RegulatedAuthorization/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [attachedDocument.JSON]  VARCHAR(MAX) '$.attachedDocument'
    ) AS rowset
    CROSS APPLY openjson (rowset.[attachedDocument.JSON]) with (
        [attachedDocument.id]          NVARCHAR(100)       '$.id',
        [attachedDocument.extension]   NVARCHAR(MAX)       '$.extension',
        [attachedDocument.reference]   NVARCHAR(4000)      '$.reference',
        [attachedDocument.type]        VARCHAR(256)        '$.type',
        [attachedDocument.identifier.id] NVARCHAR(100)       '$.identifier.id',
        [attachedDocument.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [attachedDocument.identifier.use] NVARCHAR(64)        '$.identifier.use',
        [attachedDocument.identifier.type] NVARCHAR(MAX)       '$.identifier.type',
        [attachedDocument.identifier.system] VARCHAR(256)        '$.identifier.system',
        [attachedDocument.identifier.value] NVARCHAR(4000)      '$.identifier.value',
        [attachedDocument.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [attachedDocument.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [attachedDocument.display]     NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[RelatedPerson] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [active] bit,
    [patient.id] NVARCHAR(100),
    [patient.extension] NVARCHAR(MAX),
    [patient.reference] NVARCHAR(4000),
    [patient.type] VARCHAR(256),
    [patient.identifier.id] NVARCHAR(100),
    [patient.identifier.extension] NVARCHAR(MAX),
    [patient.identifier.use] NVARCHAR(64),
    [patient.identifier.type] NVARCHAR(MAX),
    [patient.identifier.system] VARCHAR(256),
    [patient.identifier.value] NVARCHAR(4000),
    [patient.identifier.period] NVARCHAR(MAX),
    [patient.identifier.assigner] NVARCHAR(MAX),
    [patient.display] NVARCHAR(4000),
    [relationship] VARCHAR(MAX),
    [name] VARCHAR(MAX),
    [telecom] VARCHAR(MAX),
    [gender] NVARCHAR(4000),
    [birthDate] VARCHAR(64),
    [address] VARCHAR(MAX),
    [photo] VARCHAR(MAX),
    [period.id] NVARCHAR(100),
    [period.extension] NVARCHAR(MAX),
    [period.start] VARCHAR(64),
    [period.end] VARCHAR(64),
    [communication] VARCHAR(MAX),
) WITH (
    LOCATION='/RelatedPerson/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.RelatedPersonIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'RelatedPerson/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.RelatedPersonRelationship AS
SELECT
    [id],
    [relationship.JSON],
    [relationship.id],
    [relationship.extension],
    [relationship.coding],
    [relationship.text]
FROM openrowset (
        BULK 'RelatedPerson/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [relationship.JSON]  VARCHAR(MAX) '$.relationship'
    ) AS rowset
    CROSS APPLY openjson (rowset.[relationship.JSON]) with (
        [relationship.id]              NVARCHAR(100)       '$.id',
        [relationship.extension]       NVARCHAR(MAX)       '$.extension',
        [relationship.coding]          NVARCHAR(MAX)       '$.coding' AS JSON,
        [relationship.text]            NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.RelatedPersonName AS
SELECT
    [id],
    [name.JSON],
    [name.id],
    [name.extension],
    [name.use],
    [name.text],
    [name.family],
    [name.given],
    [name.prefix],
    [name.suffix],
    [name.period.id],
    [name.period.extension],
    [name.period.start],
    [name.period.end]
FROM openrowset (
        BULK 'RelatedPerson/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [name.JSON]  VARCHAR(MAX) '$.name'
    ) AS rowset
    CROSS APPLY openjson (rowset.[name.JSON]) with (
        [name.id]                      NVARCHAR(100)       '$.id',
        [name.extension]               NVARCHAR(MAX)       '$.extension',
        [name.use]                     NVARCHAR(64)        '$.use',
        [name.text]                    NVARCHAR(4000)      '$.text',
        [name.family]                  NVARCHAR(500)       '$.family',
        [name.given]                   NVARCHAR(MAX)       '$.given' AS JSON,
        [name.prefix]                  NVARCHAR(MAX)       '$.prefix' AS JSON,
        [name.suffix]                  NVARCHAR(MAX)       '$.suffix' AS JSON,
        [name.period.id]               NVARCHAR(100)       '$.period.id',
        [name.period.extension]        NVARCHAR(MAX)       '$.period.extension',
        [name.period.start]            VARCHAR(64)         '$.period.start',
        [name.period.end]              VARCHAR(64)         '$.period.end'
    ) j

GO

CREATE VIEW fhir.RelatedPersonTelecom AS
SELECT
    [id],
    [telecom.JSON],
    [telecom.id],
    [telecom.extension],
    [telecom.system],
    [telecom.value],
    [telecom.use],
    [telecom.rank],
    [telecom.period.id],
    [telecom.period.extension],
    [telecom.period.start],
    [telecom.period.end]
FROM openrowset (
        BULK 'RelatedPerson/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [telecom.JSON]  VARCHAR(MAX) '$.telecom'
    ) AS rowset
    CROSS APPLY openjson (rowset.[telecom.JSON]) with (
        [telecom.id]                   NVARCHAR(100)       '$.id',
        [telecom.extension]            NVARCHAR(MAX)       '$.extension',
        [telecom.system]               NVARCHAR(64)        '$.system',
        [telecom.value]                NVARCHAR(4000)      '$.value',
        [telecom.use]                  NVARCHAR(64)        '$.use',
        [telecom.rank]                 bigint              '$.rank',
        [telecom.period.id]            NVARCHAR(100)       '$.period.id',
        [telecom.period.extension]     NVARCHAR(MAX)       '$.period.extension',
        [telecom.period.start]         VARCHAR(64)         '$.period.start',
        [telecom.period.end]           VARCHAR(64)         '$.period.end'
    ) j

GO

CREATE VIEW fhir.RelatedPersonAddress AS
SELECT
    [id],
    [address.JSON],
    [address.id],
    [address.extension],
    [address.use],
    [address.type],
    [address.text],
    [address.line],
    [address.city],
    [address.district],
    [address.state],
    [address.postalCode],
    [address.country],
    [address.period.id],
    [address.period.extension],
    [address.period.start],
    [address.period.end]
FROM openrowset (
        BULK 'RelatedPerson/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [address.JSON]  VARCHAR(MAX) '$.address'
    ) AS rowset
    CROSS APPLY openjson (rowset.[address.JSON]) with (
        [address.id]                   NVARCHAR(100)       '$.id',
        [address.extension]            NVARCHAR(MAX)       '$.extension',
        [address.use]                  NVARCHAR(64)        '$.use',
        [address.type]                 NVARCHAR(64)        '$.type',
        [address.text]                 NVARCHAR(4000)      '$.text',
        [address.line]                 NVARCHAR(MAX)       '$.line' AS JSON,
        [address.city]                 NVARCHAR(500)       '$.city',
        [address.district]             NVARCHAR(500)       '$.district',
        [address.state]                NVARCHAR(500)       '$.state',
        [address.postalCode]           NVARCHAR(100)       '$.postalCode',
        [address.country]              NVARCHAR(500)       '$.country',
        [address.period.id]            NVARCHAR(100)       '$.period.id',
        [address.period.extension]     NVARCHAR(MAX)       '$.period.extension',
        [address.period.start]         VARCHAR(64)         '$.period.start',
        [address.period.end]           VARCHAR(64)         '$.period.end'
    ) j

GO

CREATE VIEW fhir.RelatedPersonPhoto AS
SELECT
    [id],
    [photo.JSON],
    [photo.id],
    [photo.extension],
    [photo.contentType],
    [photo.language],
    [photo.data],
    [photo.url],
    [photo.size],
    [photo.hash],
    [photo.title],
    [photo.creation],
    [photo.height],
    [photo.width],
    [photo.frames],
    [photo.duration],
    [photo.pages]
FROM openrowset (
        BULK 'RelatedPerson/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [photo.JSON]  VARCHAR(MAX) '$.photo'
    ) AS rowset
    CROSS APPLY openjson (rowset.[photo.JSON]) with (
        [photo.id]                     NVARCHAR(100)       '$.id',
        [photo.extension]              NVARCHAR(MAX)       '$.extension',
        [photo.contentType]            NVARCHAR(100)       '$.contentType',
        [photo.language]               NVARCHAR(100)       '$.language',
        [photo.data]                   NVARCHAR(MAX)       '$.data',
        [photo.url]                    VARCHAR(256)        '$.url',
        [photo.size]                   NVARCHAR(MAX)       '$.size',
        [photo.hash]                   NVARCHAR(MAX)       '$.hash',
        [photo.title]                  NVARCHAR(4000)      '$.title',
        [photo.creation]               VARCHAR(64)         '$.creation',
        [photo.height]                 bigint              '$.height',
        [photo.width]                  bigint              '$.width',
        [photo.frames]                 bigint              '$.frames',
        [photo.duration]               float               '$.duration',
        [photo.pages]                  bigint              '$.pages'
    ) j

GO

CREATE VIEW fhir.RelatedPersonCommunication AS
SELECT
    [id],
    [communication.JSON],
    [communication.id],
    [communication.extension],
    [communication.modifierExtension],
    [communication.language.id],
    [communication.language.extension],
    [communication.language.coding],
    [communication.language.text],
    [communication.preferred]
FROM openrowset (
        BULK 'RelatedPerson/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [communication.JSON]  VARCHAR(MAX) '$.communication'
    ) AS rowset
    CROSS APPLY openjson (rowset.[communication.JSON]) with (
        [communication.id]             NVARCHAR(100)       '$.id',
        [communication.extension]      NVARCHAR(MAX)       '$.extension',
        [communication.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [communication.language.id]    NVARCHAR(100)       '$.language.id',
        [communication.language.extension] NVARCHAR(MAX)       '$.language.extension',
        [communication.language.coding] NVARCHAR(MAX)       '$.language.coding',
        [communication.language.text]  NVARCHAR(4000)      '$.language.text',
        [communication.preferred]      bit                 '$.preferred'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[RequestGroup] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [instantiatesCanonical] VARCHAR(MAX),
    [instantiatesUri] VARCHAR(MAX),
    [basedOn] VARCHAR(MAX),
    [replaces] VARCHAR(MAX),
    [groupIdentifier.id] NVARCHAR(100),
    [groupIdentifier.extension] NVARCHAR(MAX),
    [groupIdentifier.use] NVARCHAR(64),
    [groupIdentifier.type.id] NVARCHAR(100),
    [groupIdentifier.type.extension] NVARCHAR(MAX),
    [groupIdentifier.type.coding] NVARCHAR(MAX),
    [groupIdentifier.type.text] NVARCHAR(4000),
    [groupIdentifier.system] VARCHAR(256),
    [groupIdentifier.value] NVARCHAR(4000),
    [groupIdentifier.period.id] NVARCHAR(100),
    [groupIdentifier.period.extension] NVARCHAR(MAX),
    [groupIdentifier.period.start] VARCHAR(64),
    [groupIdentifier.period.end] VARCHAR(64),
    [groupIdentifier.assigner.id] NVARCHAR(100),
    [groupIdentifier.assigner.extension] NVARCHAR(MAX),
    [groupIdentifier.assigner.reference] NVARCHAR(4000),
    [groupIdentifier.assigner.type] VARCHAR(256),
    [groupIdentifier.assigner.identifier] NVARCHAR(MAX),
    [groupIdentifier.assigner.display] NVARCHAR(4000),
    [status] NVARCHAR(100),
    [intent] NVARCHAR(100),
    [priority] NVARCHAR(100),
    [code.id] NVARCHAR(100),
    [code.extension] NVARCHAR(MAX),
    [code.coding] VARCHAR(MAX),
    [code.text] NVARCHAR(4000),
    [subject.id] NVARCHAR(100),
    [subject.extension] NVARCHAR(MAX),
    [subject.reference] NVARCHAR(4000),
    [subject.type] VARCHAR(256),
    [subject.identifier.id] NVARCHAR(100),
    [subject.identifier.extension] NVARCHAR(MAX),
    [subject.identifier.use] NVARCHAR(64),
    [subject.identifier.type] NVARCHAR(MAX),
    [subject.identifier.system] VARCHAR(256),
    [subject.identifier.value] NVARCHAR(4000),
    [subject.identifier.period] NVARCHAR(MAX),
    [subject.identifier.assigner] NVARCHAR(MAX),
    [subject.display] NVARCHAR(4000),
    [encounter.id] NVARCHAR(100),
    [encounter.extension] NVARCHAR(MAX),
    [encounter.reference] NVARCHAR(4000),
    [encounter.type] VARCHAR(256),
    [encounter.identifier.id] NVARCHAR(100),
    [encounter.identifier.extension] NVARCHAR(MAX),
    [encounter.identifier.use] NVARCHAR(64),
    [encounter.identifier.type] NVARCHAR(MAX),
    [encounter.identifier.system] VARCHAR(256),
    [encounter.identifier.value] NVARCHAR(4000),
    [encounter.identifier.period] NVARCHAR(MAX),
    [encounter.identifier.assigner] NVARCHAR(MAX),
    [encounter.display] NVARCHAR(4000),
    [authoredOn] VARCHAR(64),
    [author.id] NVARCHAR(100),
    [author.extension] NVARCHAR(MAX),
    [author.reference] NVARCHAR(4000),
    [author.type] VARCHAR(256),
    [author.identifier.id] NVARCHAR(100),
    [author.identifier.extension] NVARCHAR(MAX),
    [author.identifier.use] NVARCHAR(64),
    [author.identifier.type] NVARCHAR(MAX),
    [author.identifier.system] VARCHAR(256),
    [author.identifier.value] NVARCHAR(4000),
    [author.identifier.period] NVARCHAR(MAX),
    [author.identifier.assigner] NVARCHAR(MAX),
    [author.display] NVARCHAR(4000),
    [reason] VARCHAR(MAX),
    [goal] VARCHAR(MAX),
    [note] VARCHAR(MAX),
    [action] VARCHAR(MAX),
) WITH (
    LOCATION='/RequestGroup/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.RequestGroupIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'RequestGroup/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.RequestGroupInstantiatesCanonical AS
SELECT
    [id],
    [instantiatesCanonical.JSON],
    [instantiatesCanonical]
FROM openrowset (
        BULK 'RequestGroup/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [instantiatesCanonical.JSON]  VARCHAR(MAX) '$.instantiatesCanonical'
    ) AS rowset
    CROSS APPLY openjson (rowset.[instantiatesCanonical.JSON]) with (
        [instantiatesCanonical]        NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.RequestGroupInstantiatesUri AS
SELECT
    [id],
    [instantiatesUri.JSON],
    [instantiatesUri]
FROM openrowset (
        BULK 'RequestGroup/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [instantiatesUri.JSON]  VARCHAR(MAX) '$.instantiatesUri'
    ) AS rowset
    CROSS APPLY openjson (rowset.[instantiatesUri.JSON]) with (
        [instantiatesUri]              NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.RequestGroupBasedOn AS
SELECT
    [id],
    [basedOn.JSON],
    [basedOn.id],
    [basedOn.extension],
    [basedOn.reference],
    [basedOn.type],
    [basedOn.identifier.id],
    [basedOn.identifier.extension],
    [basedOn.identifier.use],
    [basedOn.identifier.type],
    [basedOn.identifier.system],
    [basedOn.identifier.value],
    [basedOn.identifier.period],
    [basedOn.identifier.assigner],
    [basedOn.display]
FROM openrowset (
        BULK 'RequestGroup/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [basedOn.JSON]  VARCHAR(MAX) '$.basedOn'
    ) AS rowset
    CROSS APPLY openjson (rowset.[basedOn.JSON]) with (
        [basedOn.id]                   NVARCHAR(100)       '$.id',
        [basedOn.extension]            NVARCHAR(MAX)       '$.extension',
        [basedOn.reference]            NVARCHAR(4000)      '$.reference',
        [basedOn.type]                 VARCHAR(256)        '$.type',
        [basedOn.identifier.id]        NVARCHAR(100)       '$.identifier.id',
        [basedOn.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [basedOn.identifier.use]       NVARCHAR(64)        '$.identifier.use',
        [basedOn.identifier.type]      NVARCHAR(MAX)       '$.identifier.type',
        [basedOn.identifier.system]    VARCHAR(256)        '$.identifier.system',
        [basedOn.identifier.value]     NVARCHAR(4000)      '$.identifier.value',
        [basedOn.identifier.period]    NVARCHAR(MAX)       '$.identifier.period',
        [basedOn.identifier.assigner]  NVARCHAR(MAX)       '$.identifier.assigner',
        [basedOn.display]              NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.RequestGroupReplaces AS
SELECT
    [id],
    [replaces.JSON],
    [replaces.id],
    [replaces.extension],
    [replaces.reference],
    [replaces.type],
    [replaces.identifier.id],
    [replaces.identifier.extension],
    [replaces.identifier.use],
    [replaces.identifier.type],
    [replaces.identifier.system],
    [replaces.identifier.value],
    [replaces.identifier.period],
    [replaces.identifier.assigner],
    [replaces.display]
FROM openrowset (
        BULK 'RequestGroup/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [replaces.JSON]  VARCHAR(MAX) '$.replaces'
    ) AS rowset
    CROSS APPLY openjson (rowset.[replaces.JSON]) with (
        [replaces.id]                  NVARCHAR(100)       '$.id',
        [replaces.extension]           NVARCHAR(MAX)       '$.extension',
        [replaces.reference]           NVARCHAR(4000)      '$.reference',
        [replaces.type]                VARCHAR(256)        '$.type',
        [replaces.identifier.id]       NVARCHAR(100)       '$.identifier.id',
        [replaces.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [replaces.identifier.use]      NVARCHAR(64)        '$.identifier.use',
        [replaces.identifier.type]     NVARCHAR(MAX)       '$.identifier.type',
        [replaces.identifier.system]   VARCHAR(256)        '$.identifier.system',
        [replaces.identifier.value]    NVARCHAR(4000)      '$.identifier.value',
        [replaces.identifier.period]   NVARCHAR(MAX)       '$.identifier.period',
        [replaces.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [replaces.display]             NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.RequestGroupReason AS
SELECT
    [id],
    [reason.JSON],
    [reason.id],
    [reason.extension],
    [reason.concept.id],
    [reason.concept.extension],
    [reason.concept.coding],
    [reason.concept.text],
    [reason.reference.id],
    [reason.reference.extension],
    [reason.reference.reference],
    [reason.reference.type],
    [reason.reference.identifier],
    [reason.reference.display]
FROM openrowset (
        BULK 'RequestGroup/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [reason.JSON]  VARCHAR(MAX) '$.reason'
    ) AS rowset
    CROSS APPLY openjson (rowset.[reason.JSON]) with (
        [reason.id]                    NVARCHAR(100)       '$.id',
        [reason.extension]             NVARCHAR(MAX)       '$.extension',
        [reason.concept.id]            NVARCHAR(100)       '$.concept.id',
        [reason.concept.extension]     NVARCHAR(MAX)       '$.concept.extension',
        [reason.concept.coding]        NVARCHAR(MAX)       '$.concept.coding',
        [reason.concept.text]          NVARCHAR(4000)      '$.concept.text',
        [reason.reference.id]          NVARCHAR(100)       '$.reference.id',
        [reason.reference.extension]   NVARCHAR(MAX)       '$.reference.extension',
        [reason.reference.reference]   NVARCHAR(4000)      '$.reference.reference',
        [reason.reference.type]        VARCHAR(256)        '$.reference.type',
        [reason.reference.identifier]  NVARCHAR(MAX)       '$.reference.identifier',
        [reason.reference.display]     NVARCHAR(4000)      '$.reference.display'
    ) j

GO

CREATE VIEW fhir.RequestGroupGoal AS
SELECT
    [id],
    [goal.JSON],
    [goal.id],
    [goal.extension],
    [goal.reference],
    [goal.type],
    [goal.identifier.id],
    [goal.identifier.extension],
    [goal.identifier.use],
    [goal.identifier.type],
    [goal.identifier.system],
    [goal.identifier.value],
    [goal.identifier.period],
    [goal.identifier.assigner],
    [goal.display]
FROM openrowset (
        BULK 'RequestGroup/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [goal.JSON]  VARCHAR(MAX) '$.goal'
    ) AS rowset
    CROSS APPLY openjson (rowset.[goal.JSON]) with (
        [goal.id]                      NVARCHAR(100)       '$.id',
        [goal.extension]               NVARCHAR(MAX)       '$.extension',
        [goal.reference]               NVARCHAR(4000)      '$.reference',
        [goal.type]                    VARCHAR(256)        '$.type',
        [goal.identifier.id]           NVARCHAR(100)       '$.identifier.id',
        [goal.identifier.extension]    NVARCHAR(MAX)       '$.identifier.extension',
        [goal.identifier.use]          NVARCHAR(64)        '$.identifier.use',
        [goal.identifier.type]         NVARCHAR(MAX)       '$.identifier.type',
        [goal.identifier.system]       VARCHAR(256)        '$.identifier.system',
        [goal.identifier.value]        NVARCHAR(4000)      '$.identifier.value',
        [goal.identifier.period]       NVARCHAR(MAX)       '$.identifier.period',
        [goal.identifier.assigner]     NVARCHAR(MAX)       '$.identifier.assigner',
        [goal.display]                 NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.RequestGroupNote AS
SELECT
    [id],
    [note.JSON],
    [note.id],
    [note.extension],
    [note.time],
    [note.text],
    [note.author.reference.id],
    [note.author.reference.extension],
    [note.author.reference.reference],
    [note.author.reference.type],
    [note.author.reference.identifier],
    [note.author.reference.display],
    [note.author.string]
FROM openrowset (
        BULK 'RequestGroup/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [note.JSON]  VARCHAR(MAX) '$.note'
    ) AS rowset
    CROSS APPLY openjson (rowset.[note.JSON]) with (
        [note.id]                      NVARCHAR(100)       '$.id',
        [note.extension]               NVARCHAR(MAX)       '$.extension',
        [note.time]                    VARCHAR(64)         '$.time',
        [note.text]                    NVARCHAR(MAX)       '$.text',
        [note.author.reference.id]     NVARCHAR(100)       '$.author.reference.id',
        [note.author.reference.extension] NVARCHAR(MAX)       '$.author.reference.extension',
        [note.author.reference.reference] NVARCHAR(4000)      '$.author.reference.reference',
        [note.author.reference.type]   VARCHAR(256)        '$.author.reference.type',
        [note.author.reference.identifier] NVARCHAR(MAX)       '$.author.reference.identifier',
        [note.author.reference.display] NVARCHAR(4000)      '$.author.reference.display',
        [note.author.string]           NVARCHAR(4000)      '$.author.string'
    ) j

GO

CREATE VIEW fhir.RequestGroupAction AS
SELECT
    [id],
    [action.JSON],
    [action.id],
    [action.extension],
    [action.modifierExtension],
    [action.linkId],
    [action.prefix],
    [action.title],
    [action.description],
    [action.textEquivalent],
    [action.priority],
    [action.code],
    [action.documentation],
    [action.goal],
    [action.condition],
    [action.relatedAction],
    [action.location.id],
    [action.location.extension],
    [action.location.concept],
    [action.location.reference],
    [action.participant],
    [action.type.id],
    [action.type.extension],
    [action.type.coding],
    [action.type.text],
    [action.groupingBehavior],
    [action.selectionBehavior],
    [action.requiredBehavior],
    [action.precheckBehavior],
    [action.cardinalityBehavior],
    [action.resource.id],
    [action.resource.extension],
    [action.resource.reference],
    [action.resource.type],
    [action.resource.identifier],
    [action.resource.display],
    [action.action],
    [action.timing.dateTime],
    [action.timing.age.id],
    [action.timing.age.extension],
    [action.timing.age.value],
    [action.timing.age.comparator],
    [action.timing.age.unit],
    [action.timing.age.system],
    [action.timing.age.code],
    [action.timing.period.id],
    [action.timing.period.extension],
    [action.timing.period.start],
    [action.timing.period.end],
    [action.timing.duration.id],
    [action.timing.duration.extension],
    [action.timing.duration.value],
    [action.timing.duration.comparator],
    [action.timing.duration.unit],
    [action.timing.duration.system],
    [action.timing.duration.code],
    [action.timing.range.id],
    [action.timing.range.extension],
    [action.timing.range.low],
    [action.timing.range.high],
    [action.timing.timing.id],
    [action.timing.timing.extension],
    [action.timing.timing.modifierExtension],
    [action.timing.timing.event],
    [action.timing.timing.repeat],
    [action.timing.timing.code]
FROM openrowset (
        BULK 'RequestGroup/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [action.JSON]  VARCHAR(MAX) '$.action'
    ) AS rowset
    CROSS APPLY openjson (rowset.[action.JSON]) with (
        [action.id]                    NVARCHAR(100)       '$.id',
        [action.extension]             NVARCHAR(MAX)       '$.extension',
        [action.modifierExtension]     NVARCHAR(MAX)       '$.modifierExtension',
        [action.linkId]                NVARCHAR(100)       '$.linkId',
        [action.prefix]                NVARCHAR(500)       '$.prefix',
        [action.title]                 NVARCHAR(4000)      '$.title',
        [action.description]           NVARCHAR(4000)      '$.description',
        [action.textEquivalent]        NVARCHAR(4000)      '$.textEquivalent',
        [action.priority]              NVARCHAR(100)       '$.priority',
        [action.code]                  NVARCHAR(MAX)       '$.code' AS JSON,
        [action.documentation]         NVARCHAR(MAX)       '$.documentation' AS JSON,
        [action.goal]                  NVARCHAR(MAX)       '$.goal' AS JSON,
        [action.condition]             NVARCHAR(MAX)       '$.condition' AS JSON,
        [action.relatedAction]         NVARCHAR(MAX)       '$.relatedAction' AS JSON,
        [action.location.id]           NVARCHAR(100)       '$.location.id',
        [action.location.extension]    NVARCHAR(MAX)       '$.location.extension',
        [action.location.concept]      NVARCHAR(MAX)       '$.location.concept',
        [action.location.reference]    NVARCHAR(MAX)       '$.location.reference',
        [action.participant]           NVARCHAR(MAX)       '$.participant' AS JSON,
        [action.type.id]               NVARCHAR(100)       '$.type.id',
        [action.type.extension]        NVARCHAR(MAX)       '$.type.extension',
        [action.type.coding]           NVARCHAR(MAX)       '$.type.coding',
        [action.type.text]             NVARCHAR(4000)      '$.type.text',
        [action.groupingBehavior]      NVARCHAR(100)       '$.groupingBehavior',
        [action.selectionBehavior]     NVARCHAR(100)       '$.selectionBehavior',
        [action.requiredBehavior]      NVARCHAR(100)       '$.requiredBehavior',
        [action.precheckBehavior]      NVARCHAR(100)       '$.precheckBehavior',
        [action.cardinalityBehavior]   NVARCHAR(100)       '$.cardinalityBehavior',
        [action.resource.id]           NVARCHAR(100)       '$.resource.id',
        [action.resource.extension]    NVARCHAR(MAX)       '$.resource.extension',
        [action.resource.reference]    NVARCHAR(4000)      '$.resource.reference',
        [action.resource.type]         VARCHAR(256)        '$.resource.type',
        [action.resource.identifier]   NVARCHAR(MAX)       '$.resource.identifier',
        [action.resource.display]      NVARCHAR(4000)      '$.resource.display',
        [action.action]                NVARCHAR(MAX)       '$.action' AS JSON,
        [action.timing.dateTime]       VARCHAR(64)         '$.timing.dateTime',
        [action.timing.age.id]         NVARCHAR(100)       '$.timing.age.id',
        [action.timing.age.extension]  NVARCHAR(MAX)       '$.timing.age.extension',
        [action.timing.age.value]      float               '$.timing.age.value',
        [action.timing.age.comparator] NVARCHAR(64)        '$.timing.age.comparator',
        [action.timing.age.unit]       NVARCHAR(100)       '$.timing.age.unit',
        [action.timing.age.system]     VARCHAR(256)        '$.timing.age.system',
        [action.timing.age.code]       NVARCHAR(4000)      '$.timing.age.code',
        [action.timing.period.id]      NVARCHAR(100)       '$.timing.period.id',
        [action.timing.period.extension] NVARCHAR(MAX)       '$.timing.period.extension',
        [action.timing.period.start]   VARCHAR(64)         '$.timing.period.start',
        [action.timing.period.end]     VARCHAR(64)         '$.timing.period.end',
        [action.timing.duration.id]    NVARCHAR(100)       '$.timing.duration.id',
        [action.timing.duration.extension] NVARCHAR(MAX)       '$.timing.duration.extension',
        [action.timing.duration.value] float               '$.timing.duration.value',
        [action.timing.duration.comparator] NVARCHAR(64)        '$.timing.duration.comparator',
        [action.timing.duration.unit]  NVARCHAR(100)       '$.timing.duration.unit',
        [action.timing.duration.system] VARCHAR(256)        '$.timing.duration.system',
        [action.timing.duration.code]  NVARCHAR(4000)      '$.timing.duration.code',
        [action.timing.range.id]       NVARCHAR(100)       '$.timing.range.id',
        [action.timing.range.extension] NVARCHAR(MAX)       '$.timing.range.extension',
        [action.timing.range.low]      NVARCHAR(MAX)       '$.timing.range.low',
        [action.timing.range.high]     NVARCHAR(MAX)       '$.timing.range.high',
        [action.timing.timing.id]      NVARCHAR(100)       '$.timing.timing.id',
        [action.timing.timing.extension] NVARCHAR(MAX)       '$.timing.timing.extension',
        [action.timing.timing.modifierExtension] NVARCHAR(MAX)       '$.timing.timing.modifierExtension',
        [action.timing.timing.event]   NVARCHAR(MAX)       '$.timing.timing.event',
        [action.timing.timing.repeat]  NVARCHAR(MAX)       '$.timing.timing.repeat',
        [action.timing.timing.code]    NVARCHAR(MAX)       '$.timing.timing.code'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[ResearchStudy] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [url] VARCHAR(256),
    [identifier] VARCHAR(MAX),
    [version] NVARCHAR(100),
    [name] NVARCHAR(500),
    [title] NVARCHAR(4000),
    [label] VARCHAR(MAX),
    [protocol] VARCHAR(MAX),
    [partOf] VARCHAR(MAX),
    [relatedArtifact] VARCHAR(MAX),
    [date] VARCHAR(64),
    [status] NVARCHAR(100),
    [primaryPurposeType.id] NVARCHAR(100),
    [primaryPurposeType.extension] NVARCHAR(MAX),
    [primaryPurposeType.coding] VARCHAR(MAX),
    [primaryPurposeType.text] NVARCHAR(4000),
    [phase.id] NVARCHAR(100),
    [phase.extension] NVARCHAR(MAX),
    [phase.coding] VARCHAR(MAX),
    [phase.text] NVARCHAR(4000),
    [category] VARCHAR(MAX),
    [focus] VARCHAR(MAX),
    [condition] VARCHAR(MAX),
    [keyword] VARCHAR(MAX),
    [location] VARCHAR(MAX),
    [descriptionSummary] NVARCHAR(MAX),
    [description] NVARCHAR(MAX),
    [period.id] NVARCHAR(100),
    [period.extension] NVARCHAR(MAX),
    [period.start] VARCHAR(64),
    [period.end] VARCHAR(64),
    [contact] VARCHAR(MAX),
    [sponsor.id] NVARCHAR(100),
    [sponsor.extension] NVARCHAR(MAX),
    [sponsor.reference] NVARCHAR(4000),
    [sponsor.type] VARCHAR(256),
    [sponsor.identifier.id] NVARCHAR(100),
    [sponsor.identifier.extension] NVARCHAR(MAX),
    [sponsor.identifier.use] NVARCHAR(64),
    [sponsor.identifier.type] NVARCHAR(MAX),
    [sponsor.identifier.system] VARCHAR(256),
    [sponsor.identifier.value] NVARCHAR(4000),
    [sponsor.identifier.period] NVARCHAR(MAX),
    [sponsor.identifier.assigner] NVARCHAR(MAX),
    [sponsor.display] NVARCHAR(4000),
    [principalInvestigator.id] NVARCHAR(100),
    [principalInvestigator.extension] NVARCHAR(MAX),
    [principalInvestigator.reference] NVARCHAR(4000),
    [principalInvestigator.type] VARCHAR(256),
    [principalInvestigator.identifier.id] NVARCHAR(100),
    [principalInvestigator.identifier.extension] NVARCHAR(MAX),
    [principalInvestigator.identifier.use] NVARCHAR(64),
    [principalInvestigator.identifier.type] NVARCHAR(MAX),
    [principalInvestigator.identifier.system] VARCHAR(256),
    [principalInvestigator.identifier.value] NVARCHAR(4000),
    [principalInvestigator.identifier.period] NVARCHAR(MAX),
    [principalInvestigator.identifier.assigner] NVARCHAR(MAX),
    [principalInvestigator.display] NVARCHAR(4000),
    [site] VARCHAR(MAX),
    [note] VARCHAR(MAX),
    [classification] VARCHAR(MAX),
    [associatedParty] VARCHAR(MAX),
    [currentState] VARCHAR(MAX),
    [statusDate] VARCHAR(MAX),
    [whyStopped.id] NVARCHAR(100),
    [whyStopped.extension] NVARCHAR(MAX),
    [whyStopped.coding] VARCHAR(MAX),
    [whyStopped.text] NVARCHAR(4000),
    [recruitment.id] NVARCHAR(100),
    [recruitment.extension] NVARCHAR(MAX),
    [recruitment.modifierExtension] NVARCHAR(MAX),
    [recruitment.targetNumber] bigint,
    [recruitment.actualNumber] bigint,
    [recruitment.eligibility.id] NVARCHAR(100),
    [recruitment.eligibility.extension] NVARCHAR(MAX),
    [recruitment.eligibility.reference] NVARCHAR(4000),
    [recruitment.eligibility.type] VARCHAR(256),
    [recruitment.eligibility.identifier] NVARCHAR(MAX),
    [recruitment.eligibility.display] NVARCHAR(4000),
    [recruitment.actualGroup.id] NVARCHAR(100),
    [recruitment.actualGroup.extension] NVARCHAR(MAX),
    [recruitment.actualGroup.reference] NVARCHAR(4000),
    [recruitment.actualGroup.type] VARCHAR(256),
    [recruitment.actualGroup.identifier] NVARCHAR(MAX),
    [recruitment.actualGroup.display] NVARCHAR(4000),
    [comparisonGroup] VARCHAR(MAX),
    [objective] VARCHAR(MAX),
    [outcomeMeasure] VARCHAR(MAX),
    [result] VARCHAR(MAX),
    [webLocation] VARCHAR(MAX),
) WITH (
    LOCATION='/ResearchStudy/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.ResearchStudyIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'ResearchStudy/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.ResearchStudyLabel AS
SELECT
    [id],
    [label.JSON],
    [label.id],
    [label.extension],
    [label.modifierExtension],
    [label.type.id],
    [label.type.extension],
    [label.type.coding],
    [label.type.text],
    [label.value]
FROM openrowset (
        BULK 'ResearchStudy/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [label.JSON]  VARCHAR(MAX) '$.label'
    ) AS rowset
    CROSS APPLY openjson (rowset.[label.JSON]) with (
        [label.id]                     NVARCHAR(100)       '$.id',
        [label.extension]              NVARCHAR(MAX)       '$.extension',
        [label.modifierExtension]      NVARCHAR(MAX)       '$.modifierExtension',
        [label.type.id]                NVARCHAR(100)       '$.type.id',
        [label.type.extension]         NVARCHAR(MAX)       '$.type.extension',
        [label.type.coding]            NVARCHAR(MAX)       '$.type.coding',
        [label.type.text]              NVARCHAR(4000)      '$.type.text',
        [label.value]                  NVARCHAR(4000)      '$.value'
    ) j

GO

CREATE VIEW fhir.ResearchStudyProtocol AS
SELECT
    [id],
    [protocol.JSON],
    [protocol.id],
    [protocol.extension],
    [protocol.reference],
    [protocol.type],
    [protocol.identifier.id],
    [protocol.identifier.extension],
    [protocol.identifier.use],
    [protocol.identifier.type],
    [protocol.identifier.system],
    [protocol.identifier.value],
    [protocol.identifier.period],
    [protocol.identifier.assigner],
    [protocol.display]
FROM openrowset (
        BULK 'ResearchStudy/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [protocol.JSON]  VARCHAR(MAX) '$.protocol'
    ) AS rowset
    CROSS APPLY openjson (rowset.[protocol.JSON]) with (
        [protocol.id]                  NVARCHAR(100)       '$.id',
        [protocol.extension]           NVARCHAR(MAX)       '$.extension',
        [protocol.reference]           NVARCHAR(4000)      '$.reference',
        [protocol.type]                VARCHAR(256)        '$.type',
        [protocol.identifier.id]       NVARCHAR(100)       '$.identifier.id',
        [protocol.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [protocol.identifier.use]      NVARCHAR(64)        '$.identifier.use',
        [protocol.identifier.type]     NVARCHAR(MAX)       '$.identifier.type',
        [protocol.identifier.system]   VARCHAR(256)        '$.identifier.system',
        [protocol.identifier.value]    NVARCHAR(4000)      '$.identifier.value',
        [protocol.identifier.period]   NVARCHAR(MAX)       '$.identifier.period',
        [protocol.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [protocol.display]             NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.ResearchStudyPartOf AS
SELECT
    [id],
    [partOf.JSON],
    [partOf.id],
    [partOf.extension],
    [partOf.reference],
    [partOf.type],
    [partOf.identifier.id],
    [partOf.identifier.extension],
    [partOf.identifier.use],
    [partOf.identifier.type],
    [partOf.identifier.system],
    [partOf.identifier.value],
    [partOf.identifier.period],
    [partOf.identifier.assigner],
    [partOf.display]
FROM openrowset (
        BULK 'ResearchStudy/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [partOf.JSON]  VARCHAR(MAX) '$.partOf'
    ) AS rowset
    CROSS APPLY openjson (rowset.[partOf.JSON]) with (
        [partOf.id]                    NVARCHAR(100)       '$.id',
        [partOf.extension]             NVARCHAR(MAX)       '$.extension',
        [partOf.reference]             NVARCHAR(4000)      '$.reference',
        [partOf.type]                  VARCHAR(256)        '$.type',
        [partOf.identifier.id]         NVARCHAR(100)       '$.identifier.id',
        [partOf.identifier.extension]  NVARCHAR(MAX)       '$.identifier.extension',
        [partOf.identifier.use]        NVARCHAR(64)        '$.identifier.use',
        [partOf.identifier.type]       NVARCHAR(MAX)       '$.identifier.type',
        [partOf.identifier.system]     VARCHAR(256)        '$.identifier.system',
        [partOf.identifier.value]      NVARCHAR(4000)      '$.identifier.value',
        [partOf.identifier.period]     NVARCHAR(MAX)       '$.identifier.period',
        [partOf.identifier.assigner]   NVARCHAR(MAX)       '$.identifier.assigner',
        [partOf.display]               NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.ResearchStudyRelatedArtifact AS
SELECT
    [id],
    [relatedArtifact.JSON],
    [relatedArtifact.id],
    [relatedArtifact.extension],
    [relatedArtifact.type],
    [relatedArtifact.classifier],
    [relatedArtifact.label],
    [relatedArtifact.display],
    [relatedArtifact.citation],
    [relatedArtifact.document.id],
    [relatedArtifact.document.extension],
    [relatedArtifact.document.contentType],
    [relatedArtifact.document.language],
    [relatedArtifact.document.data],
    [relatedArtifact.document.url],
    [relatedArtifact.document.size],
    [relatedArtifact.document.hash],
    [relatedArtifact.document.title],
    [relatedArtifact.document.creation],
    [relatedArtifact.document.height],
    [relatedArtifact.document.width],
    [relatedArtifact.document.frames],
    [relatedArtifact.document.duration],
    [relatedArtifact.document.pages],
    [relatedArtifact.resource],
    [relatedArtifact.resourceReference.id],
    [relatedArtifact.resourceReference.extension],
    [relatedArtifact.resourceReference.reference],
    [relatedArtifact.resourceReference.type],
    [relatedArtifact.resourceReference.identifier],
    [relatedArtifact.resourceReference.display]
FROM openrowset (
        BULK 'ResearchStudy/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [relatedArtifact.JSON]  VARCHAR(MAX) '$.relatedArtifact'
    ) AS rowset
    CROSS APPLY openjson (rowset.[relatedArtifact.JSON]) with (
        [relatedArtifact.id]           NVARCHAR(100)       '$.id',
        [relatedArtifact.extension]    NVARCHAR(MAX)       '$.extension',
        [relatedArtifact.type]         NVARCHAR(64)        '$.type',
        [relatedArtifact.classifier]   NVARCHAR(MAX)       '$.classifier' AS JSON,
        [relatedArtifact.label]        NVARCHAR(100)       '$.label',
        [relatedArtifact.display]      NVARCHAR(4000)      '$.display',
        [relatedArtifact.citation]     NVARCHAR(MAX)       '$.citation',
        [relatedArtifact.document.id]  NVARCHAR(100)       '$.document.id',
        [relatedArtifact.document.extension] NVARCHAR(MAX)       '$.document.extension',
        [relatedArtifact.document.contentType] NVARCHAR(100)       '$.document.contentType',
        [relatedArtifact.document.language] NVARCHAR(100)       '$.document.language',
        [relatedArtifact.document.data] NVARCHAR(MAX)       '$.document.data',
        [relatedArtifact.document.url] VARCHAR(256)        '$.document.url',
        [relatedArtifact.document.size] NVARCHAR(MAX)       '$.document.size',
        [relatedArtifact.document.hash] NVARCHAR(MAX)       '$.document.hash',
        [relatedArtifact.document.title] NVARCHAR(4000)      '$.document.title',
        [relatedArtifact.document.creation] VARCHAR(64)         '$.document.creation',
        [relatedArtifact.document.height] bigint              '$.document.height',
        [relatedArtifact.document.width] bigint              '$.document.width',
        [relatedArtifact.document.frames] bigint              '$.document.frames',
        [relatedArtifact.document.duration] float               '$.document.duration',
        [relatedArtifact.document.pages] bigint              '$.document.pages',
        [relatedArtifact.resource]     VARCHAR(256)        '$.resource',
        [relatedArtifact.resourceReference.id] NVARCHAR(100)       '$.resourceReference.id',
        [relatedArtifact.resourceReference.extension] NVARCHAR(MAX)       '$.resourceReference.extension',
        [relatedArtifact.resourceReference.reference] NVARCHAR(4000)      '$.resourceReference.reference',
        [relatedArtifact.resourceReference.type] VARCHAR(256)        '$.resourceReference.type',
        [relatedArtifact.resourceReference.identifier] NVARCHAR(MAX)       '$.resourceReference.identifier',
        [relatedArtifact.resourceReference.display] NVARCHAR(4000)      '$.resourceReference.display'
    ) j

GO

CREATE VIEW fhir.ResearchStudyCategory AS
SELECT
    [id],
    [category.JSON],
    [category.id],
    [category.extension],
    [category.coding],
    [category.text]
FROM openrowset (
        BULK 'ResearchStudy/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [category.JSON]  VARCHAR(MAX) '$.category'
    ) AS rowset
    CROSS APPLY openjson (rowset.[category.JSON]) with (
        [category.id]                  NVARCHAR(100)       '$.id',
        [category.extension]           NVARCHAR(MAX)       '$.extension',
        [category.coding]              NVARCHAR(MAX)       '$.coding' AS JSON,
        [category.text]                NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.ResearchStudyFocus AS
SELECT
    [id],
    [focus.JSON],
    [focus.id],
    [focus.extension],
    [focus.modifierExtension],
    [focus.productCode.id],
    [focus.productCode.extension],
    [focus.productCode.coding],
    [focus.productCode.text],
    [focus.focusType],
    [focus.factor]
FROM openrowset (
        BULK 'ResearchStudy/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [focus.JSON]  VARCHAR(MAX) '$.focus'
    ) AS rowset
    CROSS APPLY openjson (rowset.[focus.JSON]) with (
        [focus.id]                     NVARCHAR(100)       '$.id',
        [focus.extension]              NVARCHAR(MAX)       '$.extension',
        [focus.modifierExtension]      NVARCHAR(MAX)       '$.modifierExtension',
        [focus.productCode.id]         NVARCHAR(100)       '$.productCode.id',
        [focus.productCode.extension]  NVARCHAR(MAX)       '$.productCode.extension',
        [focus.productCode.coding]     NVARCHAR(MAX)       '$.productCode.coding',
        [focus.productCode.text]       NVARCHAR(4000)      '$.productCode.text',
        [focus.focusType]              NVARCHAR(MAX)       '$.focusType' AS JSON,
        [focus.factor]                 NVARCHAR(MAX)       '$.factor'
    ) j

GO

CREATE VIEW fhir.ResearchStudyCondition AS
SELECT
    [id],
    [condition.JSON],
    [condition.id],
    [condition.extension],
    [condition.coding],
    [condition.text]
FROM openrowset (
        BULK 'ResearchStudy/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [condition.JSON]  VARCHAR(MAX) '$.condition'
    ) AS rowset
    CROSS APPLY openjson (rowset.[condition.JSON]) with (
        [condition.id]                 NVARCHAR(100)       '$.id',
        [condition.extension]          NVARCHAR(MAX)       '$.extension',
        [condition.coding]             NVARCHAR(MAX)       '$.coding' AS JSON,
        [condition.text]               NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.ResearchStudyKeyword AS
SELECT
    [id],
    [keyword.JSON],
    [keyword.id],
    [keyword.extension],
    [keyword.coding],
    [keyword.text]
FROM openrowset (
        BULK 'ResearchStudy/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [keyword.JSON]  VARCHAR(MAX) '$.keyword'
    ) AS rowset
    CROSS APPLY openjson (rowset.[keyword.JSON]) with (
        [keyword.id]                   NVARCHAR(100)       '$.id',
        [keyword.extension]            NVARCHAR(MAX)       '$.extension',
        [keyword.coding]               NVARCHAR(MAX)       '$.coding' AS JSON,
        [keyword.text]                 NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.ResearchStudyLocation AS
SELECT
    [id],
    [location.JSON],
    [location.id],
    [location.extension],
    [location.coding],
    [location.text]
FROM openrowset (
        BULK 'ResearchStudy/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [location.JSON]  VARCHAR(MAX) '$.location'
    ) AS rowset
    CROSS APPLY openjson (rowset.[location.JSON]) with (
        [location.id]                  NVARCHAR(100)       '$.id',
        [location.extension]           NVARCHAR(MAX)       '$.extension',
        [location.coding]              NVARCHAR(MAX)       '$.coding' AS JSON,
        [location.text]                NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.ResearchStudyContact AS
SELECT
    [id],
    [contact.JSON],
    [contact.id],
    [contact.extension],
    [contact.name],
    [contact.telecom]
FROM openrowset (
        BULK 'ResearchStudy/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [contact.JSON]  VARCHAR(MAX) '$.contact'
    ) AS rowset
    CROSS APPLY openjson (rowset.[contact.JSON]) with (
        [contact.id]                   NVARCHAR(100)       '$.id',
        [contact.extension]            NVARCHAR(MAX)       '$.extension',
        [contact.name]                 NVARCHAR(500)       '$.name',
        [contact.telecom]              NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.ResearchStudySite AS
SELECT
    [id],
    [site.JSON],
    [site.id],
    [site.extension],
    [site.reference],
    [site.type],
    [site.identifier.id],
    [site.identifier.extension],
    [site.identifier.use],
    [site.identifier.type],
    [site.identifier.system],
    [site.identifier.value],
    [site.identifier.period],
    [site.identifier.assigner],
    [site.display]
FROM openrowset (
        BULK 'ResearchStudy/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [site.JSON]  VARCHAR(MAX) '$.site'
    ) AS rowset
    CROSS APPLY openjson (rowset.[site.JSON]) with (
        [site.id]                      NVARCHAR(100)       '$.id',
        [site.extension]               NVARCHAR(MAX)       '$.extension',
        [site.reference]               NVARCHAR(4000)      '$.reference',
        [site.type]                    VARCHAR(256)        '$.type',
        [site.identifier.id]           NVARCHAR(100)       '$.identifier.id',
        [site.identifier.extension]    NVARCHAR(MAX)       '$.identifier.extension',
        [site.identifier.use]          NVARCHAR(64)        '$.identifier.use',
        [site.identifier.type]         NVARCHAR(MAX)       '$.identifier.type',
        [site.identifier.system]       VARCHAR(256)        '$.identifier.system',
        [site.identifier.value]        NVARCHAR(4000)      '$.identifier.value',
        [site.identifier.period]       NVARCHAR(MAX)       '$.identifier.period',
        [site.identifier.assigner]     NVARCHAR(MAX)       '$.identifier.assigner',
        [site.display]                 NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.ResearchStudyNote AS
SELECT
    [id],
    [note.JSON],
    [note.id],
    [note.extension],
    [note.time],
    [note.text],
    [note.author.reference.id],
    [note.author.reference.extension],
    [note.author.reference.reference],
    [note.author.reference.type],
    [note.author.reference.identifier],
    [note.author.reference.display],
    [note.author.string]
FROM openrowset (
        BULK 'ResearchStudy/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [note.JSON]  VARCHAR(MAX) '$.note'
    ) AS rowset
    CROSS APPLY openjson (rowset.[note.JSON]) with (
        [note.id]                      NVARCHAR(100)       '$.id',
        [note.extension]               NVARCHAR(MAX)       '$.extension',
        [note.time]                    VARCHAR(64)         '$.time',
        [note.text]                    NVARCHAR(MAX)       '$.text',
        [note.author.reference.id]     NVARCHAR(100)       '$.author.reference.id',
        [note.author.reference.extension] NVARCHAR(MAX)       '$.author.reference.extension',
        [note.author.reference.reference] NVARCHAR(4000)      '$.author.reference.reference',
        [note.author.reference.type]   VARCHAR(256)        '$.author.reference.type',
        [note.author.reference.identifier] NVARCHAR(MAX)       '$.author.reference.identifier',
        [note.author.reference.display] NVARCHAR(4000)      '$.author.reference.display',
        [note.author.string]           NVARCHAR(4000)      '$.author.string'
    ) j

GO

CREATE VIEW fhir.ResearchStudyClassification AS
SELECT
    [id],
    [classification.JSON],
    [classification.id],
    [classification.extension],
    [classification.modifierExtension],
    [classification.type.id],
    [classification.type.extension],
    [classification.type.coding],
    [classification.type.text],
    [classification.classifier]
FROM openrowset (
        BULK 'ResearchStudy/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [classification.JSON]  VARCHAR(MAX) '$.classification'
    ) AS rowset
    CROSS APPLY openjson (rowset.[classification.JSON]) with (
        [classification.id]            NVARCHAR(100)       '$.id',
        [classification.extension]     NVARCHAR(MAX)       '$.extension',
        [classification.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [classification.type.id]       NVARCHAR(100)       '$.type.id',
        [classification.type.extension] NVARCHAR(MAX)       '$.type.extension',
        [classification.type.coding]   NVARCHAR(MAX)       '$.type.coding',
        [classification.type.text]     NVARCHAR(4000)      '$.type.text',
        [classification.classifier]    NVARCHAR(MAX)       '$.classifier' AS JSON
    ) j

GO

CREATE VIEW fhir.ResearchStudyAssociatedParty AS
SELECT
    [id],
    [associatedParty.JSON],
    [associatedParty.id],
    [associatedParty.extension],
    [associatedParty.modifierExtension],
    [associatedParty.name],
    [associatedParty.role.id],
    [associatedParty.role.extension],
    [associatedParty.role.coding],
    [associatedParty.role.text],
    [associatedParty.classifier],
    [associatedParty.party.id],
    [associatedParty.party.extension],
    [associatedParty.party.reference],
    [associatedParty.party.type],
    [associatedParty.party.identifier],
    [associatedParty.party.display]
FROM openrowset (
        BULK 'ResearchStudy/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [associatedParty.JSON]  VARCHAR(MAX) '$.associatedParty'
    ) AS rowset
    CROSS APPLY openjson (rowset.[associatedParty.JSON]) with (
        [associatedParty.id]           NVARCHAR(100)       '$.id',
        [associatedParty.extension]    NVARCHAR(MAX)       '$.extension',
        [associatedParty.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [associatedParty.name]         NVARCHAR(500)       '$.name',
        [associatedParty.role.id]      NVARCHAR(100)       '$.role.id',
        [associatedParty.role.extension] NVARCHAR(MAX)       '$.role.extension',
        [associatedParty.role.coding]  NVARCHAR(MAX)       '$.role.coding',
        [associatedParty.role.text]    NVARCHAR(4000)      '$.role.text',
        [associatedParty.classifier]   NVARCHAR(MAX)       '$.classifier' AS JSON,
        [associatedParty.party.id]     NVARCHAR(100)       '$.party.id',
        [associatedParty.party.extension] NVARCHAR(MAX)       '$.party.extension',
        [associatedParty.party.reference] NVARCHAR(4000)      '$.party.reference',
        [associatedParty.party.type]   VARCHAR(256)        '$.party.type',
        [associatedParty.party.identifier] NVARCHAR(MAX)       '$.party.identifier',
        [associatedParty.party.display] NVARCHAR(4000)      '$.party.display'
    ) j

GO

CREATE VIEW fhir.ResearchStudyCurrentState AS
SELECT
    [id],
    [currentState.JSON],
    [currentState.id],
    [currentState.extension],
    [currentState.coding],
    [currentState.text]
FROM openrowset (
        BULK 'ResearchStudy/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [currentState.JSON]  VARCHAR(MAX) '$.currentState'
    ) AS rowset
    CROSS APPLY openjson (rowset.[currentState.JSON]) with (
        [currentState.id]              NVARCHAR(100)       '$.id',
        [currentState.extension]       NVARCHAR(MAX)       '$.extension',
        [currentState.coding]          NVARCHAR(MAX)       '$.coding' AS JSON,
        [currentState.text]            NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.ResearchStudyStatusDate AS
SELECT
    [id],
    [statusDate.JSON],
    [statusDate.id],
    [statusDate.extension],
    [statusDate.modifierExtension],
    [statusDate.activity.id],
    [statusDate.activity.extension],
    [statusDate.activity.coding],
    [statusDate.activity.text],
    [statusDate.actual],
    [statusDate.period.id],
    [statusDate.period.extension],
    [statusDate.period.start],
    [statusDate.period.end]
FROM openrowset (
        BULK 'ResearchStudy/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [statusDate.JSON]  VARCHAR(MAX) '$.statusDate'
    ) AS rowset
    CROSS APPLY openjson (rowset.[statusDate.JSON]) with (
        [statusDate.id]                NVARCHAR(100)       '$.id',
        [statusDate.extension]         NVARCHAR(MAX)       '$.extension',
        [statusDate.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [statusDate.activity.id]       NVARCHAR(100)       '$.activity.id',
        [statusDate.activity.extension] NVARCHAR(MAX)       '$.activity.extension',
        [statusDate.activity.coding]   NVARCHAR(MAX)       '$.activity.coding',
        [statusDate.activity.text]     NVARCHAR(4000)      '$.activity.text',
        [statusDate.actual]            bit                 '$.actual',
        [statusDate.period.id]         NVARCHAR(100)       '$.period.id',
        [statusDate.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [statusDate.period.start]      VARCHAR(64)         '$.period.start',
        [statusDate.period.end]        VARCHAR(64)         '$.period.end'
    ) j

GO

CREATE VIEW fhir.ResearchStudyComparisonGroup AS
SELECT
    [id],
    [comparisonGroup.JSON],
    [comparisonGroup.id],
    [comparisonGroup.extension],
    [comparisonGroup.modifierExtension],
    [comparisonGroup.name],
    [comparisonGroup.type.id],
    [comparisonGroup.type.extension],
    [comparisonGroup.type.coding],
    [comparisonGroup.type.text],
    [comparisonGroup.description],
    [comparisonGroup.intendedExposure],
    [comparisonGroup.observedGroup.id],
    [comparisonGroup.observedGroup.extension],
    [comparisonGroup.observedGroup.reference],
    [comparisonGroup.observedGroup.type],
    [comparisonGroup.observedGroup.identifier],
    [comparisonGroup.observedGroup.display],
    [comparisonGroup.identifier.uri],
    [comparisonGroup.identifier.identifier.id],
    [comparisonGroup.identifier.identifier.extension],
    [comparisonGroup.identifier.identifier.use],
    [comparisonGroup.identifier.identifier.type],
    [comparisonGroup.identifier.identifier.system],
    [comparisonGroup.identifier.identifier.value],
    [comparisonGroup.identifier.identifier.period],
    [comparisonGroup.identifier.identifier.assigner]
FROM openrowset (
        BULK 'ResearchStudy/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [comparisonGroup.JSON]  VARCHAR(MAX) '$.comparisonGroup'
    ) AS rowset
    CROSS APPLY openjson (rowset.[comparisonGroup.JSON]) with (
        [comparisonGroup.id]           NVARCHAR(100)       '$.id',
        [comparisonGroup.extension]    NVARCHAR(MAX)       '$.extension',
        [comparisonGroup.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [comparisonGroup.name]         NVARCHAR(500)       '$.name',
        [comparisonGroup.type.id]      NVARCHAR(100)       '$.type.id',
        [comparisonGroup.type.extension] NVARCHAR(MAX)       '$.type.extension',
        [comparisonGroup.type.coding]  NVARCHAR(MAX)       '$.type.coding',
        [comparisonGroup.type.text]    NVARCHAR(4000)      '$.type.text',
        [comparisonGroup.description]  NVARCHAR(MAX)       '$.description',
        [comparisonGroup.intendedExposure] NVARCHAR(MAX)       '$.intendedExposure' AS JSON,
        [comparisonGroup.observedGroup.id] NVARCHAR(100)       '$.observedGroup.id',
        [comparisonGroup.observedGroup.extension] NVARCHAR(MAX)       '$.observedGroup.extension',
        [comparisonGroup.observedGroup.reference] NVARCHAR(4000)      '$.observedGroup.reference',
        [comparisonGroup.observedGroup.type] VARCHAR(256)        '$.observedGroup.type',
        [comparisonGroup.observedGroup.identifier] NVARCHAR(MAX)       '$.observedGroup.identifier',
        [comparisonGroup.observedGroup.display] NVARCHAR(4000)      '$.observedGroup.display',
        [comparisonGroup.identifier.uri] VARCHAR(256)        '$.identifier.uri',
        [comparisonGroup.identifier.identifier.id] NVARCHAR(100)       '$.identifier.identifier.id',
        [comparisonGroup.identifier.identifier.extension] NVARCHAR(MAX)       '$.identifier.identifier.extension',
        [comparisonGroup.identifier.identifier.use] NVARCHAR(64)        '$.identifier.identifier.use',
        [comparisonGroup.identifier.identifier.type] NVARCHAR(MAX)       '$.identifier.identifier.type',
        [comparisonGroup.identifier.identifier.system] VARCHAR(256)        '$.identifier.identifier.system',
        [comparisonGroup.identifier.identifier.value] NVARCHAR(4000)      '$.identifier.identifier.value',
        [comparisonGroup.identifier.identifier.period] NVARCHAR(MAX)       '$.identifier.identifier.period',
        [comparisonGroup.identifier.identifier.assigner] NVARCHAR(MAX)       '$.identifier.identifier.assigner'
    ) j

GO

CREATE VIEW fhir.ResearchStudyObjective AS
SELECT
    [id],
    [objective.JSON],
    [objective.id],
    [objective.extension],
    [objective.modifierExtension],
    [objective.name],
    [objective.type.id],
    [objective.type.extension],
    [objective.type.coding],
    [objective.type.text],
    [objective.description]
FROM openrowset (
        BULK 'ResearchStudy/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [objective.JSON]  VARCHAR(MAX) '$.objective'
    ) AS rowset
    CROSS APPLY openjson (rowset.[objective.JSON]) with (
        [objective.id]                 NVARCHAR(100)       '$.id',
        [objective.extension]          NVARCHAR(MAX)       '$.extension',
        [objective.modifierExtension]  NVARCHAR(MAX)       '$.modifierExtension',
        [objective.name]               NVARCHAR(500)       '$.name',
        [objective.type.id]            NVARCHAR(100)       '$.type.id',
        [objective.type.extension]     NVARCHAR(MAX)       '$.type.extension',
        [objective.type.coding]        NVARCHAR(MAX)       '$.type.coding',
        [objective.type.text]          NVARCHAR(4000)      '$.type.text',
        [objective.description]        NVARCHAR(MAX)       '$.description'
    ) j

GO

CREATE VIEW fhir.ResearchStudyOutcomeMeasure AS
SELECT
    [id],
    [outcomeMeasure.JSON],
    [outcomeMeasure.id],
    [outcomeMeasure.extension],
    [outcomeMeasure.modifierExtension],
    [outcomeMeasure.name],
    [outcomeMeasure.type],
    [outcomeMeasure.description],
    [outcomeMeasure.reference.id],
    [outcomeMeasure.reference.extension],
    [outcomeMeasure.reference.reference],
    [outcomeMeasure.reference.type],
    [outcomeMeasure.reference.identifier],
    [outcomeMeasure.reference.display]
FROM openrowset (
        BULK 'ResearchStudy/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [outcomeMeasure.JSON]  VARCHAR(MAX) '$.outcomeMeasure'
    ) AS rowset
    CROSS APPLY openjson (rowset.[outcomeMeasure.JSON]) with (
        [outcomeMeasure.id]            NVARCHAR(100)       '$.id',
        [outcomeMeasure.extension]     NVARCHAR(MAX)       '$.extension',
        [outcomeMeasure.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [outcomeMeasure.name]          NVARCHAR(500)       '$.name',
        [outcomeMeasure.type]          NVARCHAR(MAX)       '$.type' AS JSON,
        [outcomeMeasure.description]   NVARCHAR(MAX)       '$.description',
        [outcomeMeasure.reference.id]  NVARCHAR(100)       '$.reference.id',
        [outcomeMeasure.reference.extension] NVARCHAR(MAX)       '$.reference.extension',
        [outcomeMeasure.reference.reference] NVARCHAR(4000)      '$.reference.reference',
        [outcomeMeasure.reference.type] VARCHAR(256)        '$.reference.type',
        [outcomeMeasure.reference.identifier] NVARCHAR(MAX)       '$.reference.identifier',
        [outcomeMeasure.reference.display] NVARCHAR(4000)      '$.reference.display'
    ) j

GO

CREATE VIEW fhir.ResearchStudyResult AS
SELECT
    [id],
    [result.JSON],
    [result.id],
    [result.extension],
    [result.reference],
    [result.type],
    [result.identifier.id],
    [result.identifier.extension],
    [result.identifier.use],
    [result.identifier.type],
    [result.identifier.system],
    [result.identifier.value],
    [result.identifier.period],
    [result.identifier.assigner],
    [result.display]
FROM openrowset (
        BULK 'ResearchStudy/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [result.JSON]  VARCHAR(MAX) '$.result'
    ) AS rowset
    CROSS APPLY openjson (rowset.[result.JSON]) with (
        [result.id]                    NVARCHAR(100)       '$.id',
        [result.extension]             NVARCHAR(MAX)       '$.extension',
        [result.reference]             NVARCHAR(4000)      '$.reference',
        [result.type]                  VARCHAR(256)        '$.type',
        [result.identifier.id]         NVARCHAR(100)       '$.identifier.id',
        [result.identifier.extension]  NVARCHAR(MAX)       '$.identifier.extension',
        [result.identifier.use]        NVARCHAR(64)        '$.identifier.use',
        [result.identifier.type]       NVARCHAR(MAX)       '$.identifier.type',
        [result.identifier.system]     VARCHAR(256)        '$.identifier.system',
        [result.identifier.value]      NVARCHAR(4000)      '$.identifier.value',
        [result.identifier.period]     NVARCHAR(MAX)       '$.identifier.period',
        [result.identifier.assigner]   NVARCHAR(MAX)       '$.identifier.assigner',
        [result.display]               NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.ResearchStudyWebLocation AS
SELECT
    [id],
    [webLocation.JSON],
    [webLocation.id],
    [webLocation.extension],
    [webLocation.modifierExtension],
    [webLocation.type.id],
    [webLocation.type.extension],
    [webLocation.type.coding],
    [webLocation.type.text],
    [webLocation.url]
FROM openrowset (
        BULK 'ResearchStudy/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [webLocation.JSON]  VARCHAR(MAX) '$.webLocation'
    ) AS rowset
    CROSS APPLY openjson (rowset.[webLocation.JSON]) with (
        [webLocation.id]               NVARCHAR(100)       '$.id',
        [webLocation.extension]        NVARCHAR(MAX)       '$.extension',
        [webLocation.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [webLocation.type.id]          NVARCHAR(100)       '$.type.id',
        [webLocation.type.extension]   NVARCHAR(MAX)       '$.type.extension',
        [webLocation.type.coding]      NVARCHAR(MAX)       '$.type.coding',
        [webLocation.type.text]        NVARCHAR(4000)      '$.type.text',
        [webLocation.url]              VARCHAR(256)        '$.url'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[ResearchSubject] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [status] NVARCHAR(100),
    [progress] VARCHAR(MAX),
    [period.id] NVARCHAR(100),
    [period.extension] NVARCHAR(MAX),
    [period.start] VARCHAR(64),
    [period.end] VARCHAR(64),
    [study.id] NVARCHAR(100),
    [study.extension] NVARCHAR(MAX),
    [study.reference] NVARCHAR(4000),
    [study.type] VARCHAR(256),
    [study.identifier.id] NVARCHAR(100),
    [study.identifier.extension] NVARCHAR(MAX),
    [study.identifier.use] NVARCHAR(64),
    [study.identifier.type] NVARCHAR(MAX),
    [study.identifier.system] VARCHAR(256),
    [study.identifier.value] NVARCHAR(4000),
    [study.identifier.period] NVARCHAR(MAX),
    [study.identifier.assigner] NVARCHAR(MAX),
    [study.display] NVARCHAR(4000),
    [subject.id] NVARCHAR(100),
    [subject.extension] NVARCHAR(MAX),
    [subject.reference] NVARCHAR(4000),
    [subject.type] VARCHAR(256),
    [subject.identifier.id] NVARCHAR(100),
    [subject.identifier.extension] NVARCHAR(MAX),
    [subject.identifier.use] NVARCHAR(64),
    [subject.identifier.type] NVARCHAR(MAX),
    [subject.identifier.system] VARCHAR(256),
    [subject.identifier.value] NVARCHAR(4000),
    [subject.identifier.period] NVARCHAR(MAX),
    [subject.identifier.assigner] NVARCHAR(MAX),
    [subject.display] NVARCHAR(4000),
    [assignedArm] NVARCHAR(100),
    [actualArm] NVARCHAR(100),
    [consent.id] NVARCHAR(100),
    [consent.extension] NVARCHAR(MAX),
    [consent.reference] NVARCHAR(4000),
    [consent.type] VARCHAR(256),
    [consent.identifier.id] NVARCHAR(100),
    [consent.identifier.extension] NVARCHAR(MAX),
    [consent.identifier.use] NVARCHAR(64),
    [consent.identifier.type] NVARCHAR(MAX),
    [consent.identifier.system] VARCHAR(256),
    [consent.identifier.value] NVARCHAR(4000),
    [consent.identifier.period] NVARCHAR(MAX),
    [consent.identifier.assigner] NVARCHAR(MAX),
    [consent.display] NVARCHAR(4000),
) WITH (
    LOCATION='/ResearchSubject/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.ResearchSubjectIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'ResearchSubject/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.ResearchSubjectProgress AS
SELECT
    [id],
    [progress.JSON],
    [progress.id],
    [progress.extension],
    [progress.modifierExtension],
    [progress.type.id],
    [progress.type.extension],
    [progress.type.coding],
    [progress.type.text],
    [progress.subjectState.id],
    [progress.subjectState.extension],
    [progress.subjectState.coding],
    [progress.subjectState.text],
    [progress.milestone.id],
    [progress.milestone.extension],
    [progress.milestone.coding],
    [progress.milestone.text],
    [progress.reason.id],
    [progress.reason.extension],
    [progress.reason.coding],
    [progress.reason.text],
    [progress.startDate],
    [progress.endDate]
FROM openrowset (
        BULK 'ResearchSubject/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [progress.JSON]  VARCHAR(MAX) '$.progress'
    ) AS rowset
    CROSS APPLY openjson (rowset.[progress.JSON]) with (
        [progress.id]                  NVARCHAR(100)       '$.id',
        [progress.extension]           NVARCHAR(MAX)       '$.extension',
        [progress.modifierExtension]   NVARCHAR(MAX)       '$.modifierExtension',
        [progress.type.id]             NVARCHAR(100)       '$.type.id',
        [progress.type.extension]      NVARCHAR(MAX)       '$.type.extension',
        [progress.type.coding]         NVARCHAR(MAX)       '$.type.coding',
        [progress.type.text]           NVARCHAR(4000)      '$.type.text',
        [progress.subjectState.id]     NVARCHAR(100)       '$.subjectState.id',
        [progress.subjectState.extension] NVARCHAR(MAX)       '$.subjectState.extension',
        [progress.subjectState.coding] NVARCHAR(MAX)       '$.subjectState.coding',
        [progress.subjectState.text]   NVARCHAR(4000)      '$.subjectState.text',
        [progress.milestone.id]        NVARCHAR(100)       '$.milestone.id',
        [progress.milestone.extension] NVARCHAR(MAX)       '$.milestone.extension',
        [progress.milestone.coding]    NVARCHAR(MAX)       '$.milestone.coding',
        [progress.milestone.text]      NVARCHAR(4000)      '$.milestone.text',
        [progress.reason.id]           NVARCHAR(100)       '$.reason.id',
        [progress.reason.extension]    NVARCHAR(MAX)       '$.reason.extension',
        [progress.reason.coding]       NVARCHAR(MAX)       '$.reason.coding',
        [progress.reason.text]         NVARCHAR(4000)      '$.reason.text',
        [progress.startDate]           VARCHAR(64)         '$.startDate',
        [progress.endDate]             VARCHAR(64)         '$.endDate'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[RiskAssessment] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [basedOn.id] NVARCHAR(100),
    [basedOn.extension] NVARCHAR(MAX),
    [basedOn.reference] NVARCHAR(4000),
    [basedOn.type] VARCHAR(256),
    [basedOn.identifier.id] NVARCHAR(100),
    [basedOn.identifier.extension] NVARCHAR(MAX),
    [basedOn.identifier.use] NVARCHAR(64),
    [basedOn.identifier.type] NVARCHAR(MAX),
    [basedOn.identifier.system] VARCHAR(256),
    [basedOn.identifier.value] NVARCHAR(4000),
    [basedOn.identifier.period] NVARCHAR(MAX),
    [basedOn.identifier.assigner] NVARCHAR(MAX),
    [basedOn.display] NVARCHAR(4000),
    [parent.id] NVARCHAR(100),
    [parent.extension] NVARCHAR(MAX),
    [parent.reference] NVARCHAR(4000),
    [parent.type] VARCHAR(256),
    [parent.identifier.id] NVARCHAR(100),
    [parent.identifier.extension] NVARCHAR(MAX),
    [parent.identifier.use] NVARCHAR(64),
    [parent.identifier.type] NVARCHAR(MAX),
    [parent.identifier.system] VARCHAR(256),
    [parent.identifier.value] NVARCHAR(4000),
    [parent.identifier.period] NVARCHAR(MAX),
    [parent.identifier.assigner] NVARCHAR(MAX),
    [parent.display] NVARCHAR(4000),
    [status] NVARCHAR(100),
    [method.id] NVARCHAR(100),
    [method.extension] NVARCHAR(MAX),
    [method.coding] VARCHAR(MAX),
    [method.text] NVARCHAR(4000),
    [code.id] NVARCHAR(100),
    [code.extension] NVARCHAR(MAX),
    [code.coding] VARCHAR(MAX),
    [code.text] NVARCHAR(4000),
    [subject.id] NVARCHAR(100),
    [subject.extension] NVARCHAR(MAX),
    [subject.reference] NVARCHAR(4000),
    [subject.type] VARCHAR(256),
    [subject.identifier.id] NVARCHAR(100),
    [subject.identifier.extension] NVARCHAR(MAX),
    [subject.identifier.use] NVARCHAR(64),
    [subject.identifier.type] NVARCHAR(MAX),
    [subject.identifier.system] VARCHAR(256),
    [subject.identifier.value] NVARCHAR(4000),
    [subject.identifier.period] NVARCHAR(MAX),
    [subject.identifier.assigner] NVARCHAR(MAX),
    [subject.display] NVARCHAR(4000),
    [encounter.id] NVARCHAR(100),
    [encounter.extension] NVARCHAR(MAX),
    [encounter.reference] NVARCHAR(4000),
    [encounter.type] VARCHAR(256),
    [encounter.identifier.id] NVARCHAR(100),
    [encounter.identifier.extension] NVARCHAR(MAX),
    [encounter.identifier.use] NVARCHAR(64),
    [encounter.identifier.type] NVARCHAR(MAX),
    [encounter.identifier.system] VARCHAR(256),
    [encounter.identifier.value] NVARCHAR(4000),
    [encounter.identifier.period] NVARCHAR(MAX),
    [encounter.identifier.assigner] NVARCHAR(MAX),
    [encounter.display] NVARCHAR(4000),
    [condition.id] NVARCHAR(100),
    [condition.extension] NVARCHAR(MAX),
    [condition.reference] NVARCHAR(4000),
    [condition.type] VARCHAR(256),
    [condition.identifier.id] NVARCHAR(100),
    [condition.identifier.extension] NVARCHAR(MAX),
    [condition.identifier.use] NVARCHAR(64),
    [condition.identifier.type] NVARCHAR(MAX),
    [condition.identifier.system] VARCHAR(256),
    [condition.identifier.value] NVARCHAR(4000),
    [condition.identifier.period] NVARCHAR(MAX),
    [condition.identifier.assigner] NVARCHAR(MAX),
    [condition.display] NVARCHAR(4000),
    [performer.id] NVARCHAR(100),
    [performer.extension] NVARCHAR(MAX),
    [performer.reference] NVARCHAR(4000),
    [performer.type] VARCHAR(256),
    [performer.identifier.id] NVARCHAR(100),
    [performer.identifier.extension] NVARCHAR(MAX),
    [performer.identifier.use] NVARCHAR(64),
    [performer.identifier.type] NVARCHAR(MAX),
    [performer.identifier.system] VARCHAR(256),
    [performer.identifier.value] NVARCHAR(4000),
    [performer.identifier.period] NVARCHAR(MAX),
    [performer.identifier.assigner] NVARCHAR(MAX),
    [performer.display] NVARCHAR(4000),
    [reason] VARCHAR(MAX),
    [basis] VARCHAR(MAX),
    [prediction] VARCHAR(MAX),
    [mitigation] NVARCHAR(4000),
    [note] VARCHAR(MAX),
    [occurrence.dateTime] VARCHAR(64),
    [occurrence.period.id] NVARCHAR(100),
    [occurrence.period.extension] NVARCHAR(MAX),
    [occurrence.period.start] VARCHAR(64),
    [occurrence.period.end] VARCHAR(64),
) WITH (
    LOCATION='/RiskAssessment/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.RiskAssessmentIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'RiskAssessment/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.RiskAssessmentReason AS
SELECT
    [id],
    [reason.JSON],
    [reason.id],
    [reason.extension],
    [reason.concept.id],
    [reason.concept.extension],
    [reason.concept.coding],
    [reason.concept.text],
    [reason.reference.id],
    [reason.reference.extension],
    [reason.reference.reference],
    [reason.reference.type],
    [reason.reference.identifier],
    [reason.reference.display]
FROM openrowset (
        BULK 'RiskAssessment/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [reason.JSON]  VARCHAR(MAX) '$.reason'
    ) AS rowset
    CROSS APPLY openjson (rowset.[reason.JSON]) with (
        [reason.id]                    NVARCHAR(100)       '$.id',
        [reason.extension]             NVARCHAR(MAX)       '$.extension',
        [reason.concept.id]            NVARCHAR(100)       '$.concept.id',
        [reason.concept.extension]     NVARCHAR(MAX)       '$.concept.extension',
        [reason.concept.coding]        NVARCHAR(MAX)       '$.concept.coding',
        [reason.concept.text]          NVARCHAR(4000)      '$.concept.text',
        [reason.reference.id]          NVARCHAR(100)       '$.reference.id',
        [reason.reference.extension]   NVARCHAR(MAX)       '$.reference.extension',
        [reason.reference.reference]   NVARCHAR(4000)      '$.reference.reference',
        [reason.reference.type]        VARCHAR(256)        '$.reference.type',
        [reason.reference.identifier]  NVARCHAR(MAX)       '$.reference.identifier',
        [reason.reference.display]     NVARCHAR(4000)      '$.reference.display'
    ) j

GO

CREATE VIEW fhir.RiskAssessmentBasis AS
SELECT
    [id],
    [basis.JSON],
    [basis.id],
    [basis.extension],
    [basis.reference],
    [basis.type],
    [basis.identifier.id],
    [basis.identifier.extension],
    [basis.identifier.use],
    [basis.identifier.type],
    [basis.identifier.system],
    [basis.identifier.value],
    [basis.identifier.period],
    [basis.identifier.assigner],
    [basis.display]
FROM openrowset (
        BULK 'RiskAssessment/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [basis.JSON]  VARCHAR(MAX) '$.basis'
    ) AS rowset
    CROSS APPLY openjson (rowset.[basis.JSON]) with (
        [basis.id]                     NVARCHAR(100)       '$.id',
        [basis.extension]              NVARCHAR(MAX)       '$.extension',
        [basis.reference]              NVARCHAR(4000)      '$.reference',
        [basis.type]                   VARCHAR(256)        '$.type',
        [basis.identifier.id]          NVARCHAR(100)       '$.identifier.id',
        [basis.identifier.extension]   NVARCHAR(MAX)       '$.identifier.extension',
        [basis.identifier.use]         NVARCHAR(64)        '$.identifier.use',
        [basis.identifier.type]        NVARCHAR(MAX)       '$.identifier.type',
        [basis.identifier.system]      VARCHAR(256)        '$.identifier.system',
        [basis.identifier.value]       NVARCHAR(4000)      '$.identifier.value',
        [basis.identifier.period]      NVARCHAR(MAX)       '$.identifier.period',
        [basis.identifier.assigner]    NVARCHAR(MAX)       '$.identifier.assigner',
        [basis.display]                NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.RiskAssessmentPrediction AS
SELECT
    [id],
    [prediction.JSON],
    [prediction.id],
    [prediction.extension],
    [prediction.modifierExtension],
    [prediction.outcome.id],
    [prediction.outcome.extension],
    [prediction.outcome.coding],
    [prediction.outcome.text],
    [prediction.qualitativeRisk.id],
    [prediction.qualitativeRisk.extension],
    [prediction.qualitativeRisk.coding],
    [prediction.qualitativeRisk.text],
    [prediction.relativeRisk],
    [prediction.rationale],
    [prediction.probability.decimal],
    [prediction.probability.range.id],
    [prediction.probability.range.extension],
    [prediction.probability.range.low],
    [prediction.probability.range.high],
    [prediction.when.period.id],
    [prediction.when.period.extension],
    [prediction.when.period.start],
    [prediction.when.period.end],
    [prediction.when.range.id],
    [prediction.when.range.extension],
    [prediction.when.range.low],
    [prediction.when.range.high]
FROM openrowset (
        BULK 'RiskAssessment/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [prediction.JSON]  VARCHAR(MAX) '$.prediction'
    ) AS rowset
    CROSS APPLY openjson (rowset.[prediction.JSON]) with (
        [prediction.id]                NVARCHAR(100)       '$.id',
        [prediction.extension]         NVARCHAR(MAX)       '$.extension',
        [prediction.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [prediction.outcome.id]        NVARCHAR(100)       '$.outcome.id',
        [prediction.outcome.extension] NVARCHAR(MAX)       '$.outcome.extension',
        [prediction.outcome.coding]    NVARCHAR(MAX)       '$.outcome.coding',
        [prediction.outcome.text]      NVARCHAR(4000)      '$.outcome.text',
        [prediction.qualitativeRisk.id] NVARCHAR(100)       '$.qualitativeRisk.id',
        [prediction.qualitativeRisk.extension] NVARCHAR(MAX)       '$.qualitativeRisk.extension',
        [prediction.qualitativeRisk.coding] NVARCHAR(MAX)       '$.qualitativeRisk.coding',
        [prediction.qualitativeRisk.text] NVARCHAR(4000)      '$.qualitativeRisk.text',
        [prediction.relativeRisk]      float               '$.relativeRisk',
        [prediction.rationale]         NVARCHAR(4000)      '$.rationale',
        [prediction.probability.decimal] float               '$.probability.decimal',
        [prediction.probability.range.id] NVARCHAR(100)       '$.probability.range.id',
        [prediction.probability.range.extension] NVARCHAR(MAX)       '$.probability.range.extension',
        [prediction.probability.range.low] NVARCHAR(MAX)       '$.probability.range.low',
        [prediction.probability.range.high] NVARCHAR(MAX)       '$.probability.range.high',
        [prediction.when.period.id]    NVARCHAR(100)       '$.when.period.id',
        [prediction.when.period.extension] NVARCHAR(MAX)       '$.when.period.extension',
        [prediction.when.period.start] VARCHAR(64)         '$.when.period.start',
        [prediction.when.period.end]   VARCHAR(64)         '$.when.period.end',
        [prediction.when.range.id]     NVARCHAR(100)       '$.when.range.id',
        [prediction.when.range.extension] NVARCHAR(MAX)       '$.when.range.extension',
        [prediction.when.range.low]    NVARCHAR(MAX)       '$.when.range.low',
        [prediction.when.range.high]   NVARCHAR(MAX)       '$.when.range.high'
    ) j

GO

CREATE VIEW fhir.RiskAssessmentNote AS
SELECT
    [id],
    [note.JSON],
    [note.id],
    [note.extension],
    [note.time],
    [note.text],
    [note.author.reference.id],
    [note.author.reference.extension],
    [note.author.reference.reference],
    [note.author.reference.type],
    [note.author.reference.identifier],
    [note.author.reference.display],
    [note.author.string]
FROM openrowset (
        BULK 'RiskAssessment/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [note.JSON]  VARCHAR(MAX) '$.note'
    ) AS rowset
    CROSS APPLY openjson (rowset.[note.JSON]) with (
        [note.id]                      NVARCHAR(100)       '$.id',
        [note.extension]               NVARCHAR(MAX)       '$.extension',
        [note.time]                    VARCHAR(64)         '$.time',
        [note.text]                    NVARCHAR(MAX)       '$.text',
        [note.author.reference.id]     NVARCHAR(100)       '$.author.reference.id',
        [note.author.reference.extension] NVARCHAR(MAX)       '$.author.reference.extension',
        [note.author.reference.reference] NVARCHAR(4000)      '$.author.reference.reference',
        [note.author.reference.type]   VARCHAR(256)        '$.author.reference.type',
        [note.author.reference.identifier] NVARCHAR(MAX)       '$.author.reference.identifier',
        [note.author.reference.display] NVARCHAR(4000)      '$.author.reference.display',
        [note.author.string]           NVARCHAR(4000)      '$.author.string'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[Schedule] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [active] bit,
    [serviceCategory] VARCHAR(MAX),
    [serviceType] VARCHAR(MAX),
    [specialty] VARCHAR(MAX),
    [actor] VARCHAR(MAX),
    [planningHorizon.id] NVARCHAR(100),
    [planningHorizon.extension] NVARCHAR(MAX),
    [planningHorizon.start] VARCHAR(64),
    [planningHorizon.end] VARCHAR(64),
    [comment] NVARCHAR(4000),
) WITH (
    LOCATION='/Schedule/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.ScheduleIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'Schedule/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.ScheduleServiceCategory AS
SELECT
    [id],
    [serviceCategory.JSON],
    [serviceCategory.id],
    [serviceCategory.extension],
    [serviceCategory.coding],
    [serviceCategory.text]
FROM openrowset (
        BULK 'Schedule/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [serviceCategory.JSON]  VARCHAR(MAX) '$.serviceCategory'
    ) AS rowset
    CROSS APPLY openjson (rowset.[serviceCategory.JSON]) with (
        [serviceCategory.id]           NVARCHAR(100)       '$.id',
        [serviceCategory.extension]    NVARCHAR(MAX)       '$.extension',
        [serviceCategory.coding]       NVARCHAR(MAX)       '$.coding' AS JSON,
        [serviceCategory.text]         NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.ScheduleServiceType AS
SELECT
    [id],
    [serviceType.JSON],
    [serviceType.id],
    [serviceType.extension],
    [serviceType.coding],
    [serviceType.text]
FROM openrowset (
        BULK 'Schedule/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [serviceType.JSON]  VARCHAR(MAX) '$.serviceType'
    ) AS rowset
    CROSS APPLY openjson (rowset.[serviceType.JSON]) with (
        [serviceType.id]               NVARCHAR(100)       '$.id',
        [serviceType.extension]        NVARCHAR(MAX)       '$.extension',
        [serviceType.coding]           NVARCHAR(MAX)       '$.coding' AS JSON,
        [serviceType.text]             NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.ScheduleSpecialty AS
SELECT
    [id],
    [specialty.JSON],
    [specialty.id],
    [specialty.extension],
    [specialty.coding],
    [specialty.text]
FROM openrowset (
        BULK 'Schedule/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [specialty.JSON]  VARCHAR(MAX) '$.specialty'
    ) AS rowset
    CROSS APPLY openjson (rowset.[specialty.JSON]) with (
        [specialty.id]                 NVARCHAR(100)       '$.id',
        [specialty.extension]          NVARCHAR(MAX)       '$.extension',
        [specialty.coding]             NVARCHAR(MAX)       '$.coding' AS JSON,
        [specialty.text]               NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.ScheduleActor AS
SELECT
    [id],
    [actor.JSON],
    [actor.id],
    [actor.extension],
    [actor.reference],
    [actor.type],
    [actor.identifier.id],
    [actor.identifier.extension],
    [actor.identifier.use],
    [actor.identifier.type],
    [actor.identifier.system],
    [actor.identifier.value],
    [actor.identifier.period],
    [actor.identifier.assigner],
    [actor.display]
FROM openrowset (
        BULK 'Schedule/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [actor.JSON]  VARCHAR(MAX) '$.actor'
    ) AS rowset
    CROSS APPLY openjson (rowset.[actor.JSON]) with (
        [actor.id]                     NVARCHAR(100)       '$.id',
        [actor.extension]              NVARCHAR(MAX)       '$.extension',
        [actor.reference]              NVARCHAR(4000)      '$.reference',
        [actor.type]                   VARCHAR(256)        '$.type',
        [actor.identifier.id]          NVARCHAR(100)       '$.identifier.id',
        [actor.identifier.extension]   NVARCHAR(MAX)       '$.identifier.extension',
        [actor.identifier.use]         NVARCHAR(64)        '$.identifier.use',
        [actor.identifier.type]        NVARCHAR(MAX)       '$.identifier.type',
        [actor.identifier.system]      VARCHAR(256)        '$.identifier.system',
        [actor.identifier.value]       NVARCHAR(4000)      '$.identifier.value',
        [actor.identifier.period]      NVARCHAR(MAX)       '$.identifier.period',
        [actor.identifier.assigner]    NVARCHAR(MAX)       '$.identifier.assigner',
        [actor.display]                NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[SearchParameter] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [url] VARCHAR(256),
    [identifier] VARCHAR(MAX),
    [version] NVARCHAR(100),
    [name] NVARCHAR(500),
    [title] NVARCHAR(4000),
    [status] NVARCHAR(100),
    [experimental] bit,
    [date] VARCHAR(64),
    [publisher] NVARCHAR(500),
    [contact] VARCHAR(MAX),
    [description] NVARCHAR(MAX),
    [useContext] VARCHAR(MAX),
    [jurisdiction] VARCHAR(MAX),
    [purpose] NVARCHAR(MAX),
    [copyright] NVARCHAR(MAX),
    [derivedFrom] VARCHAR(256),
    [code] NVARCHAR(4000),
    [base] VARCHAR(MAX),
    [type] NVARCHAR(100),
    [expression] NVARCHAR(4000),
    [xpath] NVARCHAR(4000),
    [xpathUsage] NVARCHAR(4000),
    [target] VARCHAR(MAX),
    [multipleOr] bit,
    [multipleAnd] bit,
    [comparator] VARCHAR(MAX),
    [modifier] VARCHAR(MAX),
    [chain] VARCHAR(MAX),
    [component] VARCHAR(MAX),
) WITH (
    LOCATION='/SearchParameter/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.SearchParameterIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'SearchParameter/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.SearchParameterContact AS
SELECT
    [id],
    [contact.JSON],
    [contact.id],
    [contact.extension],
    [contact.name],
    [contact.telecom]
FROM openrowset (
        BULK 'SearchParameter/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [contact.JSON]  VARCHAR(MAX) '$.contact'
    ) AS rowset
    CROSS APPLY openjson (rowset.[contact.JSON]) with (
        [contact.id]                   NVARCHAR(100)       '$.id',
        [contact.extension]            NVARCHAR(MAX)       '$.extension',
        [contact.name]                 NVARCHAR(500)       '$.name',
        [contact.telecom]              NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.SearchParameterUseContext AS
SELECT
    [id],
    [useContext.JSON],
    [useContext.id],
    [useContext.extension],
    [useContext.code.id],
    [useContext.code.extension],
    [useContext.code.system],
    [useContext.code.version],
    [useContext.code.code],
    [useContext.code.display],
    [useContext.code.userSelected],
    [useContext.value.codeableConcept.id],
    [useContext.value.codeableConcept.extension],
    [useContext.value.codeableConcept.coding],
    [useContext.value.codeableConcept.text],
    [useContext.value.quantity.id],
    [useContext.value.quantity.extension],
    [useContext.value.quantity.value],
    [useContext.value.quantity.comparator],
    [useContext.value.quantity.unit],
    [useContext.value.quantity.system],
    [useContext.value.quantity.code],
    [useContext.value.range.id],
    [useContext.value.range.extension],
    [useContext.value.range.low],
    [useContext.value.range.high],
    [useContext.value.reference.id],
    [useContext.value.reference.extension],
    [useContext.value.reference.reference],
    [useContext.value.reference.type],
    [useContext.value.reference.identifier],
    [useContext.value.reference.display]
FROM openrowset (
        BULK 'SearchParameter/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [useContext.JSON]  VARCHAR(MAX) '$.useContext'
    ) AS rowset
    CROSS APPLY openjson (rowset.[useContext.JSON]) with (
        [useContext.id]                NVARCHAR(100)       '$.id',
        [useContext.extension]         NVARCHAR(MAX)       '$.extension',
        [useContext.code.id]           NVARCHAR(100)       '$.code.id',
        [useContext.code.extension]    NVARCHAR(MAX)       '$.code.extension',
        [useContext.code.system]       VARCHAR(256)        '$.code.system',
        [useContext.code.version]      NVARCHAR(100)       '$.code.version',
        [useContext.code.code]         NVARCHAR(4000)      '$.code.code',
        [useContext.code.display]      NVARCHAR(4000)      '$.code.display',
        [useContext.code.userSelected] bit                 '$.code.userSelected',
        [useContext.value.codeableConcept.id] NVARCHAR(100)       '$.value.codeableConcept.id',
        [useContext.value.codeableConcept.extension] NVARCHAR(MAX)       '$.value.codeableConcept.extension',
        [useContext.value.codeableConcept.coding] NVARCHAR(MAX)       '$.value.codeableConcept.coding',
        [useContext.value.codeableConcept.text] NVARCHAR(4000)      '$.value.codeableConcept.text',
        [useContext.value.quantity.id] NVARCHAR(100)       '$.value.quantity.id',
        [useContext.value.quantity.extension] NVARCHAR(MAX)       '$.value.quantity.extension',
        [useContext.value.quantity.value] float               '$.value.quantity.value',
        [useContext.value.quantity.comparator] NVARCHAR(64)        '$.value.quantity.comparator',
        [useContext.value.quantity.unit] NVARCHAR(100)       '$.value.quantity.unit',
        [useContext.value.quantity.system] VARCHAR(256)        '$.value.quantity.system',
        [useContext.value.quantity.code] NVARCHAR(4000)      '$.value.quantity.code',
        [useContext.value.range.id]    NVARCHAR(100)       '$.value.range.id',
        [useContext.value.range.extension] NVARCHAR(MAX)       '$.value.range.extension',
        [useContext.value.range.low]   NVARCHAR(MAX)       '$.value.range.low',
        [useContext.value.range.high]  NVARCHAR(MAX)       '$.value.range.high',
        [useContext.value.reference.id] NVARCHAR(100)       '$.value.reference.id',
        [useContext.value.reference.extension] NVARCHAR(MAX)       '$.value.reference.extension',
        [useContext.value.reference.reference] NVARCHAR(4000)      '$.value.reference.reference',
        [useContext.value.reference.type] VARCHAR(256)        '$.value.reference.type',
        [useContext.value.reference.identifier] NVARCHAR(MAX)       '$.value.reference.identifier',
        [useContext.value.reference.display] NVARCHAR(4000)      '$.value.reference.display'
    ) j

GO

CREATE VIEW fhir.SearchParameterJurisdiction AS
SELECT
    [id],
    [jurisdiction.JSON],
    [jurisdiction.id],
    [jurisdiction.extension],
    [jurisdiction.coding],
    [jurisdiction.text]
FROM openrowset (
        BULK 'SearchParameter/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [jurisdiction.JSON]  VARCHAR(MAX) '$.jurisdiction'
    ) AS rowset
    CROSS APPLY openjson (rowset.[jurisdiction.JSON]) with (
        [jurisdiction.id]              NVARCHAR(100)       '$.id',
        [jurisdiction.extension]       NVARCHAR(MAX)       '$.extension',
        [jurisdiction.coding]          NVARCHAR(MAX)       '$.coding' AS JSON,
        [jurisdiction.text]            NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.SearchParameterBase AS
SELECT
    [id],
    [base.JSON],
    [base]
FROM openrowset (
        BULK 'SearchParameter/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [base.JSON]  VARCHAR(MAX) '$.base'
    ) AS rowset
    CROSS APPLY openjson (rowset.[base.JSON]) with (
        [base]                         NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.SearchParameterTarget AS
SELECT
    [id],
    [target.JSON],
    [target]
FROM openrowset (
        BULK 'SearchParameter/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [target.JSON]  VARCHAR(MAX) '$.target'
    ) AS rowset
    CROSS APPLY openjson (rowset.[target.JSON]) with (
        [target]                       NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.SearchParameterComparator AS
SELECT
    [id],
    [comparator.JSON],
    [comparator]
FROM openrowset (
        BULK 'SearchParameter/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [comparator.JSON]  VARCHAR(MAX) '$.comparator'
    ) AS rowset
    CROSS APPLY openjson (rowset.[comparator.JSON]) with (
        [comparator]                   NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.SearchParameterModifier AS
SELECT
    [id],
    [modifier.JSON],
    [modifier]
FROM openrowset (
        BULK 'SearchParameter/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [modifier.JSON]  VARCHAR(MAX) '$.modifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[modifier.JSON]) with (
        [modifier]                     NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.SearchParameterChain AS
SELECT
    [id],
    [chain.JSON],
    [chain]
FROM openrowset (
        BULK 'SearchParameter/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [chain.JSON]  VARCHAR(MAX) '$.chain'
    ) AS rowset
    CROSS APPLY openjson (rowset.[chain.JSON]) with (
        [chain]                        NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.SearchParameterComponent AS
SELECT
    [id],
    [component.JSON],
    [component.id],
    [component.extension],
    [component.modifierExtension],
    [component.definition],
    [component.expression]
FROM openrowset (
        BULK 'SearchParameter/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [component.JSON]  VARCHAR(MAX) '$.component'
    ) AS rowset
    CROSS APPLY openjson (rowset.[component.JSON]) with (
        [component.id]                 NVARCHAR(100)       '$.id',
        [component.extension]          NVARCHAR(MAX)       '$.extension',
        [component.modifierExtension]  NVARCHAR(MAX)       '$.modifierExtension',
        [component.definition]         VARCHAR(256)        '$.definition',
        [component.expression]         NVARCHAR(4000)      '$.expression'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[ServiceRequest] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [instantiatesCanonical] VARCHAR(MAX),
    [instantiatesUri] VARCHAR(MAX),
    [basedOn] VARCHAR(MAX),
    [replaces] VARCHAR(MAX),
    [requisition.id] NVARCHAR(100),
    [requisition.extension] NVARCHAR(MAX),
    [requisition.use] NVARCHAR(64),
    [requisition.type.id] NVARCHAR(100),
    [requisition.type.extension] NVARCHAR(MAX),
    [requisition.type.coding] NVARCHAR(MAX),
    [requisition.type.text] NVARCHAR(4000),
    [requisition.system] VARCHAR(256),
    [requisition.value] NVARCHAR(4000),
    [requisition.period.id] NVARCHAR(100),
    [requisition.period.extension] NVARCHAR(MAX),
    [requisition.period.start] VARCHAR(64),
    [requisition.period.end] VARCHAR(64),
    [requisition.assigner.id] NVARCHAR(100),
    [requisition.assigner.extension] NVARCHAR(MAX),
    [requisition.assigner.reference] NVARCHAR(4000),
    [requisition.assigner.type] VARCHAR(256),
    [requisition.assigner.identifier] NVARCHAR(MAX),
    [requisition.assigner.display] NVARCHAR(4000),
    [status] NVARCHAR(100),
    [intent] NVARCHAR(100),
    [category] VARCHAR(MAX),
    [priority] NVARCHAR(100),
    [doNotPerform] bit,
    [code.id] NVARCHAR(100),
    [code.extension] NVARCHAR(MAX),
    [code.coding] VARCHAR(MAX),
    [code.text] NVARCHAR(4000),
    [orderDetail] VARCHAR(MAX),
    [subject.id] NVARCHAR(100),
    [subject.extension] NVARCHAR(MAX),
    [subject.reference] NVARCHAR(4000),
    [subject.type] VARCHAR(256),
    [subject.identifier.id] NVARCHAR(100),
    [subject.identifier.extension] NVARCHAR(MAX),
    [subject.identifier.use] NVARCHAR(64),
    [subject.identifier.type] NVARCHAR(MAX),
    [subject.identifier.system] VARCHAR(256),
    [subject.identifier.value] NVARCHAR(4000),
    [subject.identifier.period] NVARCHAR(MAX),
    [subject.identifier.assigner] NVARCHAR(MAX),
    [subject.display] NVARCHAR(4000),
    [encounter.id] NVARCHAR(100),
    [encounter.extension] NVARCHAR(MAX),
    [encounter.reference] NVARCHAR(4000),
    [encounter.type] VARCHAR(256),
    [encounter.identifier.id] NVARCHAR(100),
    [encounter.identifier.extension] NVARCHAR(MAX),
    [encounter.identifier.use] NVARCHAR(64),
    [encounter.identifier.type] NVARCHAR(MAX),
    [encounter.identifier.system] VARCHAR(256),
    [encounter.identifier.value] NVARCHAR(4000),
    [encounter.identifier.period] NVARCHAR(MAX),
    [encounter.identifier.assigner] NVARCHAR(MAX),
    [encounter.display] NVARCHAR(4000),
    [authoredOn] VARCHAR(64),
    [requester.id] NVARCHAR(100),
    [requester.extension] NVARCHAR(MAX),
    [requester.reference] NVARCHAR(4000),
    [requester.type] VARCHAR(256),
    [requester.identifier.id] NVARCHAR(100),
    [requester.identifier.extension] NVARCHAR(MAX),
    [requester.identifier.use] NVARCHAR(64),
    [requester.identifier.type] NVARCHAR(MAX),
    [requester.identifier.system] VARCHAR(256),
    [requester.identifier.value] NVARCHAR(4000),
    [requester.identifier.period] NVARCHAR(MAX),
    [requester.identifier.assigner] NVARCHAR(MAX),
    [requester.display] NVARCHAR(4000),
    [performerType.id] NVARCHAR(100),
    [performerType.extension] NVARCHAR(MAX),
    [performerType.coding] VARCHAR(MAX),
    [performerType.text] NVARCHAR(4000),
    [performer] VARCHAR(MAX),
    [location] VARCHAR(MAX),
    [reason] VARCHAR(MAX),
    [insurance] VARCHAR(MAX),
    [supportingInfo] VARCHAR(MAX),
    [specimen] VARCHAR(MAX),
    [bodySite] VARCHAR(MAX),
    [note] VARCHAR(MAX),
    [patientInstruction] NVARCHAR(4000),
    [relevantHistory] VARCHAR(MAX),
    [quantity.quantity.id] NVARCHAR(100),
    [quantity.quantity.extension] NVARCHAR(MAX),
    [quantity.quantity.value] float,
    [quantity.quantity.comparator] NVARCHAR(64),
    [quantity.quantity.unit] NVARCHAR(100),
    [quantity.quantity.system] VARCHAR(256),
    [quantity.quantity.code] NVARCHAR(4000),
    [quantity.ratio.id] NVARCHAR(100),
    [quantity.ratio.extension] NVARCHAR(MAX),
    [quantity.ratio.numerator.id] NVARCHAR(100),
    [quantity.ratio.numerator.extension] NVARCHAR(MAX),
    [quantity.ratio.numerator.value] float,
    [quantity.ratio.numerator.comparator] NVARCHAR(64),
    [quantity.ratio.numerator.unit] NVARCHAR(100),
    [quantity.ratio.numerator.system] VARCHAR(256),
    [quantity.ratio.numerator.code] NVARCHAR(4000),
    [quantity.ratio.denominator.id] NVARCHAR(100),
    [quantity.ratio.denominator.extension] NVARCHAR(MAX),
    [quantity.ratio.denominator.value] float,
    [quantity.ratio.denominator.comparator] NVARCHAR(64),
    [quantity.ratio.denominator.unit] NVARCHAR(100),
    [quantity.ratio.denominator.system] VARCHAR(256),
    [quantity.ratio.denominator.code] NVARCHAR(4000),
    [quantity.range.id] NVARCHAR(100),
    [quantity.range.extension] NVARCHAR(MAX),
    [quantity.range.low.id] NVARCHAR(100),
    [quantity.range.low.extension] NVARCHAR(MAX),
    [quantity.range.low.value] float,
    [quantity.range.low.comparator] NVARCHAR(64),
    [quantity.range.low.unit] NVARCHAR(100),
    [quantity.range.low.system] VARCHAR(256),
    [quantity.range.low.code] NVARCHAR(4000),
    [quantity.range.high.id] NVARCHAR(100),
    [quantity.range.high.extension] NVARCHAR(MAX),
    [quantity.range.high.value] float,
    [quantity.range.high.comparator] NVARCHAR(64),
    [quantity.range.high.unit] NVARCHAR(100),
    [quantity.range.high.system] VARCHAR(256),
    [quantity.range.high.code] NVARCHAR(4000),
    [occurrence.dateTime] VARCHAR(64),
    [occurrence.period.id] NVARCHAR(100),
    [occurrence.period.extension] NVARCHAR(MAX),
    [occurrence.period.start] VARCHAR(64),
    [occurrence.period.end] VARCHAR(64),
    [occurrence.timing.id] NVARCHAR(100),
    [occurrence.timing.extension] NVARCHAR(MAX),
    [occurrence.timing.modifierExtension] NVARCHAR(MAX),
    [occurrence.timing.event] VARCHAR(MAX),
    [occurrence.timing.repeat.id] NVARCHAR(100),
    [occurrence.timing.repeat.extension] NVARCHAR(MAX),
    [occurrence.timing.repeat.modifierExtension] NVARCHAR(MAX),
    [occurrence.timing.repeat.count] bigint,
    [occurrence.timing.repeat.countMax] bigint,
    [occurrence.timing.repeat.duration] float,
    [occurrence.timing.repeat.durationMax] float,
    [occurrence.timing.repeat.durationUnit] NVARCHAR(64),
    [occurrence.timing.repeat.frequency] bigint,
    [occurrence.timing.repeat.frequencyMax] bigint,
    [occurrence.timing.repeat.period] float,
    [occurrence.timing.repeat.periodMax] float,
    [occurrence.timing.repeat.periodUnit] NVARCHAR(64),
    [occurrence.timing.repeat.dayOfWeek] NVARCHAR(MAX),
    [occurrence.timing.repeat.timeOfDay] NVARCHAR(MAX),
    [occurrence.timing.repeat.when] NVARCHAR(MAX),
    [occurrence.timing.repeat.offset] bigint,
    [occurrence.timing.repeat.bounds.duration] NVARCHAR(MAX),
    [occurrence.timing.repeat.bounds.range] NVARCHAR(MAX),
    [occurrence.timing.repeat.bounds.period] NVARCHAR(MAX),
    [occurrence.timing.code.id] NVARCHAR(100),
    [occurrence.timing.code.extension] NVARCHAR(MAX),
    [occurrence.timing.code.coding] NVARCHAR(MAX),
    [occurrence.timing.code.text] NVARCHAR(4000),
    [asNeeded.boolean] bit,
    [asNeeded.codeableConcept.id] NVARCHAR(100),
    [asNeeded.codeableConcept.extension] NVARCHAR(MAX),
    [asNeeded.codeableConcept.coding] VARCHAR(MAX),
    [asNeeded.codeableConcept.text] NVARCHAR(4000),
) WITH (
    LOCATION='/ServiceRequest/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.ServiceRequestIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'ServiceRequest/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.ServiceRequestInstantiatesCanonical AS
SELECT
    [id],
    [instantiatesCanonical.JSON],
    [instantiatesCanonical]
FROM openrowset (
        BULK 'ServiceRequest/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [instantiatesCanonical.JSON]  VARCHAR(MAX) '$.instantiatesCanonical'
    ) AS rowset
    CROSS APPLY openjson (rowset.[instantiatesCanonical.JSON]) with (
        [instantiatesCanonical]        NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.ServiceRequestInstantiatesUri AS
SELECT
    [id],
    [instantiatesUri.JSON],
    [instantiatesUri]
FROM openrowset (
        BULK 'ServiceRequest/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [instantiatesUri.JSON]  VARCHAR(MAX) '$.instantiatesUri'
    ) AS rowset
    CROSS APPLY openjson (rowset.[instantiatesUri.JSON]) with (
        [instantiatesUri]              NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.ServiceRequestBasedOn AS
SELECT
    [id],
    [basedOn.JSON],
    [basedOn.id],
    [basedOn.extension],
    [basedOn.reference],
    [basedOn.type],
    [basedOn.identifier.id],
    [basedOn.identifier.extension],
    [basedOn.identifier.use],
    [basedOn.identifier.type],
    [basedOn.identifier.system],
    [basedOn.identifier.value],
    [basedOn.identifier.period],
    [basedOn.identifier.assigner],
    [basedOn.display]
FROM openrowset (
        BULK 'ServiceRequest/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [basedOn.JSON]  VARCHAR(MAX) '$.basedOn'
    ) AS rowset
    CROSS APPLY openjson (rowset.[basedOn.JSON]) with (
        [basedOn.id]                   NVARCHAR(100)       '$.id',
        [basedOn.extension]            NVARCHAR(MAX)       '$.extension',
        [basedOn.reference]            NVARCHAR(4000)      '$.reference',
        [basedOn.type]                 VARCHAR(256)        '$.type',
        [basedOn.identifier.id]        NVARCHAR(100)       '$.identifier.id',
        [basedOn.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [basedOn.identifier.use]       NVARCHAR(64)        '$.identifier.use',
        [basedOn.identifier.type]      NVARCHAR(MAX)       '$.identifier.type',
        [basedOn.identifier.system]    VARCHAR(256)        '$.identifier.system',
        [basedOn.identifier.value]     NVARCHAR(4000)      '$.identifier.value',
        [basedOn.identifier.period]    NVARCHAR(MAX)       '$.identifier.period',
        [basedOn.identifier.assigner]  NVARCHAR(MAX)       '$.identifier.assigner',
        [basedOn.display]              NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.ServiceRequestReplaces AS
SELECT
    [id],
    [replaces.JSON],
    [replaces.id],
    [replaces.extension],
    [replaces.reference],
    [replaces.type],
    [replaces.identifier.id],
    [replaces.identifier.extension],
    [replaces.identifier.use],
    [replaces.identifier.type],
    [replaces.identifier.system],
    [replaces.identifier.value],
    [replaces.identifier.period],
    [replaces.identifier.assigner],
    [replaces.display]
FROM openrowset (
        BULK 'ServiceRequest/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [replaces.JSON]  VARCHAR(MAX) '$.replaces'
    ) AS rowset
    CROSS APPLY openjson (rowset.[replaces.JSON]) with (
        [replaces.id]                  NVARCHAR(100)       '$.id',
        [replaces.extension]           NVARCHAR(MAX)       '$.extension',
        [replaces.reference]           NVARCHAR(4000)      '$.reference',
        [replaces.type]                VARCHAR(256)        '$.type',
        [replaces.identifier.id]       NVARCHAR(100)       '$.identifier.id',
        [replaces.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [replaces.identifier.use]      NVARCHAR(64)        '$.identifier.use',
        [replaces.identifier.type]     NVARCHAR(MAX)       '$.identifier.type',
        [replaces.identifier.system]   VARCHAR(256)        '$.identifier.system',
        [replaces.identifier.value]    NVARCHAR(4000)      '$.identifier.value',
        [replaces.identifier.period]   NVARCHAR(MAX)       '$.identifier.period',
        [replaces.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [replaces.display]             NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.ServiceRequestCategory AS
SELECT
    [id],
    [category.JSON],
    [category.id],
    [category.extension],
    [category.coding],
    [category.text]
FROM openrowset (
        BULK 'ServiceRequest/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [category.JSON]  VARCHAR(MAX) '$.category'
    ) AS rowset
    CROSS APPLY openjson (rowset.[category.JSON]) with (
        [category.id]                  NVARCHAR(100)       '$.id',
        [category.extension]           NVARCHAR(MAX)       '$.extension',
        [category.coding]              NVARCHAR(MAX)       '$.coding' AS JSON,
        [category.text]                NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.ServiceRequestOrderDetail AS
SELECT
    [id],
    [orderDetail.JSON],
    [orderDetail.id],
    [orderDetail.extension],
    [orderDetail.coding],
    [orderDetail.text]
FROM openrowset (
        BULK 'ServiceRequest/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [orderDetail.JSON]  VARCHAR(MAX) '$.orderDetail'
    ) AS rowset
    CROSS APPLY openjson (rowset.[orderDetail.JSON]) with (
        [orderDetail.id]               NVARCHAR(100)       '$.id',
        [orderDetail.extension]        NVARCHAR(MAX)       '$.extension',
        [orderDetail.coding]           NVARCHAR(MAX)       '$.coding' AS JSON,
        [orderDetail.text]             NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.ServiceRequestPerformer AS
SELECT
    [id],
    [performer.JSON],
    [performer.id],
    [performer.extension],
    [performer.reference],
    [performer.type],
    [performer.identifier.id],
    [performer.identifier.extension],
    [performer.identifier.use],
    [performer.identifier.type],
    [performer.identifier.system],
    [performer.identifier.value],
    [performer.identifier.period],
    [performer.identifier.assigner],
    [performer.display]
FROM openrowset (
        BULK 'ServiceRequest/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [performer.JSON]  VARCHAR(MAX) '$.performer'
    ) AS rowset
    CROSS APPLY openjson (rowset.[performer.JSON]) with (
        [performer.id]                 NVARCHAR(100)       '$.id',
        [performer.extension]          NVARCHAR(MAX)       '$.extension',
        [performer.reference]          NVARCHAR(4000)      '$.reference',
        [performer.type]               VARCHAR(256)        '$.type',
        [performer.identifier.id]      NVARCHAR(100)       '$.identifier.id',
        [performer.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [performer.identifier.use]     NVARCHAR(64)        '$.identifier.use',
        [performer.identifier.type]    NVARCHAR(MAX)       '$.identifier.type',
        [performer.identifier.system]  VARCHAR(256)        '$.identifier.system',
        [performer.identifier.value]   NVARCHAR(4000)      '$.identifier.value',
        [performer.identifier.period]  NVARCHAR(MAX)       '$.identifier.period',
        [performer.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [performer.display]            NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.ServiceRequestLocation AS
SELECT
    [id],
    [location.JSON],
    [location.id],
    [location.extension],
    [location.concept.id],
    [location.concept.extension],
    [location.concept.coding],
    [location.concept.text],
    [location.reference.id],
    [location.reference.extension],
    [location.reference.reference],
    [location.reference.type],
    [location.reference.identifier],
    [location.reference.display]
FROM openrowset (
        BULK 'ServiceRequest/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [location.JSON]  VARCHAR(MAX) '$.location'
    ) AS rowset
    CROSS APPLY openjson (rowset.[location.JSON]) with (
        [location.id]                  NVARCHAR(100)       '$.id',
        [location.extension]           NVARCHAR(MAX)       '$.extension',
        [location.concept.id]          NVARCHAR(100)       '$.concept.id',
        [location.concept.extension]   NVARCHAR(MAX)       '$.concept.extension',
        [location.concept.coding]      NVARCHAR(MAX)       '$.concept.coding',
        [location.concept.text]        NVARCHAR(4000)      '$.concept.text',
        [location.reference.id]        NVARCHAR(100)       '$.reference.id',
        [location.reference.extension] NVARCHAR(MAX)       '$.reference.extension',
        [location.reference.reference] NVARCHAR(4000)      '$.reference.reference',
        [location.reference.type]      VARCHAR(256)        '$.reference.type',
        [location.reference.identifier] NVARCHAR(MAX)       '$.reference.identifier',
        [location.reference.display]   NVARCHAR(4000)      '$.reference.display'
    ) j

GO

CREATE VIEW fhir.ServiceRequestReason AS
SELECT
    [id],
    [reason.JSON],
    [reason.id],
    [reason.extension],
    [reason.concept.id],
    [reason.concept.extension],
    [reason.concept.coding],
    [reason.concept.text],
    [reason.reference.id],
    [reason.reference.extension],
    [reason.reference.reference],
    [reason.reference.type],
    [reason.reference.identifier],
    [reason.reference.display]
FROM openrowset (
        BULK 'ServiceRequest/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [reason.JSON]  VARCHAR(MAX) '$.reason'
    ) AS rowset
    CROSS APPLY openjson (rowset.[reason.JSON]) with (
        [reason.id]                    NVARCHAR(100)       '$.id',
        [reason.extension]             NVARCHAR(MAX)       '$.extension',
        [reason.concept.id]            NVARCHAR(100)       '$.concept.id',
        [reason.concept.extension]     NVARCHAR(MAX)       '$.concept.extension',
        [reason.concept.coding]        NVARCHAR(MAX)       '$.concept.coding',
        [reason.concept.text]          NVARCHAR(4000)      '$.concept.text',
        [reason.reference.id]          NVARCHAR(100)       '$.reference.id',
        [reason.reference.extension]   NVARCHAR(MAX)       '$.reference.extension',
        [reason.reference.reference]   NVARCHAR(4000)      '$.reference.reference',
        [reason.reference.type]        VARCHAR(256)        '$.reference.type',
        [reason.reference.identifier]  NVARCHAR(MAX)       '$.reference.identifier',
        [reason.reference.display]     NVARCHAR(4000)      '$.reference.display'
    ) j

GO

CREATE VIEW fhir.ServiceRequestInsurance AS
SELECT
    [id],
    [insurance.JSON],
    [insurance.id],
    [insurance.extension],
    [insurance.reference],
    [insurance.type],
    [insurance.identifier.id],
    [insurance.identifier.extension],
    [insurance.identifier.use],
    [insurance.identifier.type],
    [insurance.identifier.system],
    [insurance.identifier.value],
    [insurance.identifier.period],
    [insurance.identifier.assigner],
    [insurance.display]
FROM openrowset (
        BULK 'ServiceRequest/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [insurance.JSON]  VARCHAR(MAX) '$.insurance'
    ) AS rowset
    CROSS APPLY openjson (rowset.[insurance.JSON]) with (
        [insurance.id]                 NVARCHAR(100)       '$.id',
        [insurance.extension]          NVARCHAR(MAX)       '$.extension',
        [insurance.reference]          NVARCHAR(4000)      '$.reference',
        [insurance.type]               VARCHAR(256)        '$.type',
        [insurance.identifier.id]      NVARCHAR(100)       '$.identifier.id',
        [insurance.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [insurance.identifier.use]     NVARCHAR(64)        '$.identifier.use',
        [insurance.identifier.type]    NVARCHAR(MAX)       '$.identifier.type',
        [insurance.identifier.system]  VARCHAR(256)        '$.identifier.system',
        [insurance.identifier.value]   NVARCHAR(4000)      '$.identifier.value',
        [insurance.identifier.period]  NVARCHAR(MAX)       '$.identifier.period',
        [insurance.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [insurance.display]            NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.ServiceRequestSupportingInfo AS
SELECT
    [id],
    [supportingInfo.JSON],
    [supportingInfo.id],
    [supportingInfo.extension],
    [supportingInfo.reference],
    [supportingInfo.type],
    [supportingInfo.identifier.id],
    [supportingInfo.identifier.extension],
    [supportingInfo.identifier.use],
    [supportingInfo.identifier.type],
    [supportingInfo.identifier.system],
    [supportingInfo.identifier.value],
    [supportingInfo.identifier.period],
    [supportingInfo.identifier.assigner],
    [supportingInfo.display]
FROM openrowset (
        BULK 'ServiceRequest/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [supportingInfo.JSON]  VARCHAR(MAX) '$.supportingInfo'
    ) AS rowset
    CROSS APPLY openjson (rowset.[supportingInfo.JSON]) with (
        [supportingInfo.id]            NVARCHAR(100)       '$.id',
        [supportingInfo.extension]     NVARCHAR(MAX)       '$.extension',
        [supportingInfo.reference]     NVARCHAR(4000)      '$.reference',
        [supportingInfo.type]          VARCHAR(256)        '$.type',
        [supportingInfo.identifier.id] NVARCHAR(100)       '$.identifier.id',
        [supportingInfo.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [supportingInfo.identifier.use] NVARCHAR(64)        '$.identifier.use',
        [supportingInfo.identifier.type] NVARCHAR(MAX)       '$.identifier.type',
        [supportingInfo.identifier.system] VARCHAR(256)        '$.identifier.system',
        [supportingInfo.identifier.value] NVARCHAR(4000)      '$.identifier.value',
        [supportingInfo.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [supportingInfo.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [supportingInfo.display]       NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.ServiceRequestSpecimen AS
SELECT
    [id],
    [specimen.JSON],
    [specimen.id],
    [specimen.extension],
    [specimen.reference],
    [specimen.type],
    [specimen.identifier.id],
    [specimen.identifier.extension],
    [specimen.identifier.use],
    [specimen.identifier.type],
    [specimen.identifier.system],
    [specimen.identifier.value],
    [specimen.identifier.period],
    [specimen.identifier.assigner],
    [specimen.display]
FROM openrowset (
        BULK 'ServiceRequest/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [specimen.JSON]  VARCHAR(MAX) '$.specimen'
    ) AS rowset
    CROSS APPLY openjson (rowset.[specimen.JSON]) with (
        [specimen.id]                  NVARCHAR(100)       '$.id',
        [specimen.extension]           NVARCHAR(MAX)       '$.extension',
        [specimen.reference]           NVARCHAR(4000)      '$.reference',
        [specimen.type]                VARCHAR(256)        '$.type',
        [specimen.identifier.id]       NVARCHAR(100)       '$.identifier.id',
        [specimen.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [specimen.identifier.use]      NVARCHAR(64)        '$.identifier.use',
        [specimen.identifier.type]     NVARCHAR(MAX)       '$.identifier.type',
        [specimen.identifier.system]   VARCHAR(256)        '$.identifier.system',
        [specimen.identifier.value]    NVARCHAR(4000)      '$.identifier.value',
        [specimen.identifier.period]   NVARCHAR(MAX)       '$.identifier.period',
        [specimen.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [specimen.display]             NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.ServiceRequestBodySite AS
SELECT
    [id],
    [bodySite.JSON],
    [bodySite.id],
    [bodySite.extension],
    [bodySite.coding],
    [bodySite.text]
FROM openrowset (
        BULK 'ServiceRequest/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [bodySite.JSON]  VARCHAR(MAX) '$.bodySite'
    ) AS rowset
    CROSS APPLY openjson (rowset.[bodySite.JSON]) with (
        [bodySite.id]                  NVARCHAR(100)       '$.id',
        [bodySite.extension]           NVARCHAR(MAX)       '$.extension',
        [bodySite.coding]              NVARCHAR(MAX)       '$.coding' AS JSON,
        [bodySite.text]                NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.ServiceRequestNote AS
SELECT
    [id],
    [note.JSON],
    [note.id],
    [note.extension],
    [note.time],
    [note.text],
    [note.author.reference.id],
    [note.author.reference.extension],
    [note.author.reference.reference],
    [note.author.reference.type],
    [note.author.reference.identifier],
    [note.author.reference.display],
    [note.author.string]
FROM openrowset (
        BULK 'ServiceRequest/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [note.JSON]  VARCHAR(MAX) '$.note'
    ) AS rowset
    CROSS APPLY openjson (rowset.[note.JSON]) with (
        [note.id]                      NVARCHAR(100)       '$.id',
        [note.extension]               NVARCHAR(MAX)       '$.extension',
        [note.time]                    VARCHAR(64)         '$.time',
        [note.text]                    NVARCHAR(MAX)       '$.text',
        [note.author.reference.id]     NVARCHAR(100)       '$.author.reference.id',
        [note.author.reference.extension] NVARCHAR(MAX)       '$.author.reference.extension',
        [note.author.reference.reference] NVARCHAR(4000)      '$.author.reference.reference',
        [note.author.reference.type]   VARCHAR(256)        '$.author.reference.type',
        [note.author.reference.identifier] NVARCHAR(MAX)       '$.author.reference.identifier',
        [note.author.reference.display] NVARCHAR(4000)      '$.author.reference.display',
        [note.author.string]           NVARCHAR(4000)      '$.author.string'
    ) j

GO

CREATE VIEW fhir.ServiceRequestRelevantHistory AS
SELECT
    [id],
    [relevantHistory.JSON],
    [relevantHistory.id],
    [relevantHistory.extension],
    [relevantHistory.reference],
    [relevantHistory.type],
    [relevantHistory.identifier.id],
    [relevantHistory.identifier.extension],
    [relevantHistory.identifier.use],
    [relevantHistory.identifier.type],
    [relevantHistory.identifier.system],
    [relevantHistory.identifier.value],
    [relevantHistory.identifier.period],
    [relevantHistory.identifier.assigner],
    [relevantHistory.display]
FROM openrowset (
        BULK 'ServiceRequest/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [relevantHistory.JSON]  VARCHAR(MAX) '$.relevantHistory'
    ) AS rowset
    CROSS APPLY openjson (rowset.[relevantHistory.JSON]) with (
        [relevantHistory.id]           NVARCHAR(100)       '$.id',
        [relevantHistory.extension]    NVARCHAR(MAX)       '$.extension',
        [relevantHistory.reference]    NVARCHAR(4000)      '$.reference',
        [relevantHistory.type]         VARCHAR(256)        '$.type',
        [relevantHistory.identifier.id] NVARCHAR(100)       '$.identifier.id',
        [relevantHistory.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [relevantHistory.identifier.use] NVARCHAR(64)        '$.identifier.use',
        [relevantHistory.identifier.type] NVARCHAR(MAX)       '$.identifier.type',
        [relevantHistory.identifier.system] VARCHAR(256)        '$.identifier.system',
        [relevantHistory.identifier.value] NVARCHAR(4000)      '$.identifier.value',
        [relevantHistory.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [relevantHistory.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [relevantHistory.display]      NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[Slot] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [serviceCategory] VARCHAR(MAX),
    [serviceType] VARCHAR(MAX),
    [specialty] VARCHAR(MAX),
    [appointmentType] VARCHAR(MAX),
    [schedule.id] NVARCHAR(100),
    [schedule.extension] NVARCHAR(MAX),
    [schedule.reference] NVARCHAR(4000),
    [schedule.type] VARCHAR(256),
    [schedule.identifier.id] NVARCHAR(100),
    [schedule.identifier.extension] NVARCHAR(MAX),
    [schedule.identifier.use] NVARCHAR(64),
    [schedule.identifier.type] NVARCHAR(MAX),
    [schedule.identifier.system] VARCHAR(256),
    [schedule.identifier.value] NVARCHAR(4000),
    [schedule.identifier.period] NVARCHAR(MAX),
    [schedule.identifier.assigner] NVARCHAR(MAX),
    [schedule.display] NVARCHAR(4000),
    [status] NVARCHAR(100),
    [start] VARCHAR(64),
    [end] VARCHAR(64),
    [overbooked] bit,
    [comment] NVARCHAR(4000),
) WITH (
    LOCATION='/Slot/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.SlotIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'Slot/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.SlotServiceCategory AS
SELECT
    [id],
    [serviceCategory.JSON],
    [serviceCategory.id],
    [serviceCategory.extension],
    [serviceCategory.coding],
    [serviceCategory.text]
FROM openrowset (
        BULK 'Slot/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [serviceCategory.JSON]  VARCHAR(MAX) '$.serviceCategory'
    ) AS rowset
    CROSS APPLY openjson (rowset.[serviceCategory.JSON]) with (
        [serviceCategory.id]           NVARCHAR(100)       '$.id',
        [serviceCategory.extension]    NVARCHAR(MAX)       '$.extension',
        [serviceCategory.coding]       NVARCHAR(MAX)       '$.coding' AS JSON,
        [serviceCategory.text]         NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.SlotServiceType AS
SELECT
    [id],
    [serviceType.JSON],
    [serviceType.id],
    [serviceType.extension],
    [serviceType.coding],
    [serviceType.text]
FROM openrowset (
        BULK 'Slot/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [serviceType.JSON]  VARCHAR(MAX) '$.serviceType'
    ) AS rowset
    CROSS APPLY openjson (rowset.[serviceType.JSON]) with (
        [serviceType.id]               NVARCHAR(100)       '$.id',
        [serviceType.extension]        NVARCHAR(MAX)       '$.extension',
        [serviceType.coding]           NVARCHAR(MAX)       '$.coding' AS JSON,
        [serviceType.text]             NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.SlotSpecialty AS
SELECT
    [id],
    [specialty.JSON],
    [specialty.id],
    [specialty.extension],
    [specialty.coding],
    [specialty.text]
FROM openrowset (
        BULK 'Slot/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [specialty.JSON]  VARCHAR(MAX) '$.specialty'
    ) AS rowset
    CROSS APPLY openjson (rowset.[specialty.JSON]) with (
        [specialty.id]                 NVARCHAR(100)       '$.id',
        [specialty.extension]          NVARCHAR(MAX)       '$.extension',
        [specialty.coding]             NVARCHAR(MAX)       '$.coding' AS JSON,
        [specialty.text]               NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.SlotAppointmentType AS
SELECT
    [id],
    [appointmentType.JSON],
    [appointmentType.id],
    [appointmentType.extension],
    [appointmentType.coding],
    [appointmentType.text]
FROM openrowset (
        BULK 'Slot/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [appointmentType.JSON]  VARCHAR(MAX) '$.appointmentType'
    ) AS rowset
    CROSS APPLY openjson (rowset.[appointmentType.JSON]) with (
        [appointmentType.id]           NVARCHAR(100)       '$.id',
        [appointmentType.extension]    NVARCHAR(MAX)       '$.extension',
        [appointmentType.coding]       NVARCHAR(MAX)       '$.coding' AS JSON,
        [appointmentType.text]         NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[Specimen] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [accessionIdentifier.id] NVARCHAR(100),
    [accessionIdentifier.extension] NVARCHAR(MAX),
    [accessionIdentifier.use] NVARCHAR(64),
    [accessionIdentifier.type.id] NVARCHAR(100),
    [accessionIdentifier.type.extension] NVARCHAR(MAX),
    [accessionIdentifier.type.coding] NVARCHAR(MAX),
    [accessionIdentifier.type.text] NVARCHAR(4000),
    [accessionIdentifier.system] VARCHAR(256),
    [accessionIdentifier.value] NVARCHAR(4000),
    [accessionIdentifier.period.id] NVARCHAR(100),
    [accessionIdentifier.period.extension] NVARCHAR(MAX),
    [accessionIdentifier.period.start] VARCHAR(64),
    [accessionIdentifier.period.end] VARCHAR(64),
    [accessionIdentifier.assigner.id] NVARCHAR(100),
    [accessionIdentifier.assigner.extension] NVARCHAR(MAX),
    [accessionIdentifier.assigner.reference] NVARCHAR(4000),
    [accessionIdentifier.assigner.type] VARCHAR(256),
    [accessionIdentifier.assigner.identifier] NVARCHAR(MAX),
    [accessionIdentifier.assigner.display] NVARCHAR(4000),
    [status] NVARCHAR(100),
    [type.id] NVARCHAR(100),
    [type.extension] NVARCHAR(MAX),
    [type.coding] VARCHAR(MAX),
    [type.text] NVARCHAR(4000),
    [subject.id] NVARCHAR(100),
    [subject.extension] NVARCHAR(MAX),
    [subject.reference] NVARCHAR(4000),
    [subject.type] VARCHAR(256),
    [subject.identifier.id] NVARCHAR(100),
    [subject.identifier.extension] NVARCHAR(MAX),
    [subject.identifier.use] NVARCHAR(64),
    [subject.identifier.type] NVARCHAR(MAX),
    [subject.identifier.system] VARCHAR(256),
    [subject.identifier.value] NVARCHAR(4000),
    [subject.identifier.period] NVARCHAR(MAX),
    [subject.identifier.assigner] NVARCHAR(MAX),
    [subject.display] NVARCHAR(4000),
    [receivedTime] VARCHAR(64),
    [parent] VARCHAR(MAX),
    [request] VARCHAR(MAX),
    [collection.id] NVARCHAR(100),
    [collection.extension] NVARCHAR(MAX),
    [collection.modifierExtension] NVARCHAR(MAX),
    [collection.collector.id] NVARCHAR(100),
    [collection.collector.extension] NVARCHAR(MAX),
    [collection.collector.reference] NVARCHAR(4000),
    [collection.collector.type] VARCHAR(256),
    [collection.collector.identifier] NVARCHAR(MAX),
    [collection.collector.display] NVARCHAR(4000),
    [collection.duration.id] NVARCHAR(100),
    [collection.duration.extension] NVARCHAR(MAX),
    [collection.duration.value] float,
    [collection.duration.comparator] NVARCHAR(64),
    [collection.duration.unit] NVARCHAR(100),
    [collection.duration.system] VARCHAR(256),
    [collection.duration.code] NVARCHAR(4000),
    [collection.quantity.id] NVARCHAR(100),
    [collection.quantity.extension] NVARCHAR(MAX),
    [collection.quantity.value] float,
    [collection.quantity.comparator] NVARCHAR(64),
    [collection.quantity.unit] NVARCHAR(100),
    [collection.quantity.system] VARCHAR(256),
    [collection.quantity.code] NVARCHAR(4000),
    [collection.method.id] NVARCHAR(100),
    [collection.method.extension] NVARCHAR(MAX),
    [collection.method.coding] NVARCHAR(MAX),
    [collection.method.text] NVARCHAR(4000),
    [collection.device.id] NVARCHAR(100),
    [collection.device.extension] NVARCHAR(MAX),
    [collection.device.concept] NVARCHAR(MAX),
    [collection.device.reference] NVARCHAR(MAX),
    [collection.procedure.id] NVARCHAR(100),
    [collection.procedure.extension] NVARCHAR(MAX),
    [collection.procedure.reference] NVARCHAR(4000),
    [collection.procedure.type] VARCHAR(256),
    [collection.procedure.identifier] NVARCHAR(MAX),
    [collection.procedure.display] NVARCHAR(4000),
    [collection.bodySite.id] NVARCHAR(100),
    [collection.bodySite.extension] NVARCHAR(MAX),
    [collection.bodySite.concept] NVARCHAR(MAX),
    [collection.bodySite.reference] NVARCHAR(MAX),
    [collection.collected.dateTime] VARCHAR(64),
    [collection.collected.period.id] NVARCHAR(100),
    [collection.collected.period.extension] NVARCHAR(MAX),
    [collection.collected.period.start] VARCHAR(64),
    [collection.collected.period.end] VARCHAR(64),
    [collection.fastingStatus.codeableConcept.id] NVARCHAR(100),
    [collection.fastingStatus.codeableConcept.extension] NVARCHAR(MAX),
    [collection.fastingStatus.codeableConcept.coding] NVARCHAR(MAX),
    [collection.fastingStatus.codeableConcept.text] NVARCHAR(4000),
    [collection.fastingStatus.duration.id] NVARCHAR(100),
    [collection.fastingStatus.duration.extension] NVARCHAR(MAX),
    [collection.fastingStatus.duration.value] float,
    [collection.fastingStatus.duration.comparator] NVARCHAR(64),
    [collection.fastingStatus.duration.unit] NVARCHAR(100),
    [collection.fastingStatus.duration.system] VARCHAR(256),
    [collection.fastingStatus.duration.code] NVARCHAR(4000),
    [processing] VARCHAR(MAX),
    [container] VARCHAR(MAX),
    [condition] VARCHAR(MAX),
    [note] VARCHAR(MAX),
) WITH (
    LOCATION='/Specimen/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.SpecimenIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'Specimen/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.SpecimenParent AS
SELECT
    [id],
    [parent.JSON],
    [parent.id],
    [parent.extension],
    [parent.reference],
    [parent.type],
    [parent.identifier.id],
    [parent.identifier.extension],
    [parent.identifier.use],
    [parent.identifier.type],
    [parent.identifier.system],
    [parent.identifier.value],
    [parent.identifier.period],
    [parent.identifier.assigner],
    [parent.display]
FROM openrowset (
        BULK 'Specimen/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [parent.JSON]  VARCHAR(MAX) '$.parent'
    ) AS rowset
    CROSS APPLY openjson (rowset.[parent.JSON]) with (
        [parent.id]                    NVARCHAR(100)       '$.id',
        [parent.extension]             NVARCHAR(MAX)       '$.extension',
        [parent.reference]             NVARCHAR(4000)      '$.reference',
        [parent.type]                  VARCHAR(256)        '$.type',
        [parent.identifier.id]         NVARCHAR(100)       '$.identifier.id',
        [parent.identifier.extension]  NVARCHAR(MAX)       '$.identifier.extension',
        [parent.identifier.use]        NVARCHAR(64)        '$.identifier.use',
        [parent.identifier.type]       NVARCHAR(MAX)       '$.identifier.type',
        [parent.identifier.system]     VARCHAR(256)        '$.identifier.system',
        [parent.identifier.value]      NVARCHAR(4000)      '$.identifier.value',
        [parent.identifier.period]     NVARCHAR(MAX)       '$.identifier.period',
        [parent.identifier.assigner]   NVARCHAR(MAX)       '$.identifier.assigner',
        [parent.display]               NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.SpecimenRequest AS
SELECT
    [id],
    [request.JSON],
    [request.id],
    [request.extension],
    [request.reference],
    [request.type],
    [request.identifier.id],
    [request.identifier.extension],
    [request.identifier.use],
    [request.identifier.type],
    [request.identifier.system],
    [request.identifier.value],
    [request.identifier.period],
    [request.identifier.assigner],
    [request.display]
FROM openrowset (
        BULK 'Specimen/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [request.JSON]  VARCHAR(MAX) '$.request'
    ) AS rowset
    CROSS APPLY openjson (rowset.[request.JSON]) with (
        [request.id]                   NVARCHAR(100)       '$.id',
        [request.extension]            NVARCHAR(MAX)       '$.extension',
        [request.reference]            NVARCHAR(4000)      '$.reference',
        [request.type]                 VARCHAR(256)        '$.type',
        [request.identifier.id]        NVARCHAR(100)       '$.identifier.id',
        [request.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [request.identifier.use]       NVARCHAR(64)        '$.identifier.use',
        [request.identifier.type]      NVARCHAR(MAX)       '$.identifier.type',
        [request.identifier.system]    VARCHAR(256)        '$.identifier.system',
        [request.identifier.value]     NVARCHAR(4000)      '$.identifier.value',
        [request.identifier.period]    NVARCHAR(MAX)       '$.identifier.period',
        [request.identifier.assigner]  NVARCHAR(MAX)       '$.identifier.assigner',
        [request.display]              NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.SpecimenProcessing AS
SELECT
    [id],
    [processing.JSON],
    [processing.id],
    [processing.extension],
    [processing.modifierExtension],
    [processing.description],
    [processing.method.id],
    [processing.method.extension],
    [processing.method.coding],
    [processing.method.text],
    [processing.additive],
    [processing.time.dateTime],
    [processing.time.period.id],
    [processing.time.period.extension],
    [processing.time.period.start],
    [processing.time.period.end]
FROM openrowset (
        BULK 'Specimen/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [processing.JSON]  VARCHAR(MAX) '$.processing'
    ) AS rowset
    CROSS APPLY openjson (rowset.[processing.JSON]) with (
        [processing.id]                NVARCHAR(100)       '$.id',
        [processing.extension]         NVARCHAR(MAX)       '$.extension',
        [processing.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [processing.description]       NVARCHAR(4000)      '$.description',
        [processing.method.id]         NVARCHAR(100)       '$.method.id',
        [processing.method.extension]  NVARCHAR(MAX)       '$.method.extension',
        [processing.method.coding]     NVARCHAR(MAX)       '$.method.coding',
        [processing.method.text]       NVARCHAR(4000)      '$.method.text',
        [processing.additive]          NVARCHAR(MAX)       '$.additive' AS JSON,
        [processing.time.dateTime]     VARCHAR(64)         '$.time.dateTime',
        [processing.time.period.id]    NVARCHAR(100)       '$.time.period.id',
        [processing.time.period.extension] NVARCHAR(MAX)       '$.time.period.extension',
        [processing.time.period.start] VARCHAR(64)         '$.time.period.start',
        [processing.time.period.end]   VARCHAR(64)         '$.time.period.end'
    ) j

GO

CREATE VIEW fhir.SpecimenContainer AS
SELECT
    [id],
    [container.JSON],
    [container.id],
    [container.extension],
    [container.modifierExtension],
    [container.identifier],
    [container.description],
    [container.location.id],
    [container.location.extension],
    [container.location.reference],
    [container.location.type],
    [container.location.identifier],
    [container.location.display],
    [container.type.id],
    [container.type.extension],
    [container.type.coding],
    [container.type.text],
    [container.capacity.id],
    [container.capacity.extension],
    [container.capacity.value],
    [container.capacity.comparator],
    [container.capacity.unit],
    [container.capacity.system],
    [container.capacity.code],
    [container.specimenQuantity.id],
    [container.specimenQuantity.extension],
    [container.specimenQuantity.value],
    [container.specimenQuantity.comparator],
    [container.specimenQuantity.unit],
    [container.specimenQuantity.system],
    [container.specimenQuantity.code],
    [container.additive.codeableConcept.id],
    [container.additive.codeableConcept.extension],
    [container.additive.codeableConcept.coding],
    [container.additive.codeableConcept.text],
    [container.additive.reference.id],
    [container.additive.reference.extension],
    [container.additive.reference.reference],
    [container.additive.reference.type],
    [container.additive.reference.identifier],
    [container.additive.reference.display]
FROM openrowset (
        BULK 'Specimen/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [container.JSON]  VARCHAR(MAX) '$.container'
    ) AS rowset
    CROSS APPLY openjson (rowset.[container.JSON]) with (
        [container.id]                 NVARCHAR(100)       '$.id',
        [container.extension]          NVARCHAR(MAX)       '$.extension',
        [container.modifierExtension]  NVARCHAR(MAX)       '$.modifierExtension',
        [container.identifier]         NVARCHAR(MAX)       '$.identifier' AS JSON,
        [container.description]        NVARCHAR(4000)      '$.description',
        [container.location.id]        NVARCHAR(100)       '$.location.id',
        [container.location.extension] NVARCHAR(MAX)       '$.location.extension',
        [container.location.reference] NVARCHAR(4000)      '$.location.reference',
        [container.location.type]      VARCHAR(256)        '$.location.type',
        [container.location.identifier] NVARCHAR(MAX)       '$.location.identifier',
        [container.location.display]   NVARCHAR(4000)      '$.location.display',
        [container.type.id]            NVARCHAR(100)       '$.type.id',
        [container.type.extension]     NVARCHAR(MAX)       '$.type.extension',
        [container.type.coding]        NVARCHAR(MAX)       '$.type.coding',
        [container.type.text]          NVARCHAR(4000)      '$.type.text',
        [container.capacity.id]        NVARCHAR(100)       '$.capacity.id',
        [container.capacity.extension] NVARCHAR(MAX)       '$.capacity.extension',
        [container.capacity.value]     float               '$.capacity.value',
        [container.capacity.comparator] NVARCHAR(64)        '$.capacity.comparator',
        [container.capacity.unit]      NVARCHAR(100)       '$.capacity.unit',
        [container.capacity.system]    VARCHAR(256)        '$.capacity.system',
        [container.capacity.code]      NVARCHAR(4000)      '$.capacity.code',
        [container.specimenQuantity.id] NVARCHAR(100)       '$.specimenQuantity.id',
        [container.specimenQuantity.extension] NVARCHAR(MAX)       '$.specimenQuantity.extension',
        [container.specimenQuantity.value] float               '$.specimenQuantity.value',
        [container.specimenQuantity.comparator] NVARCHAR(64)        '$.specimenQuantity.comparator',
        [container.specimenQuantity.unit] NVARCHAR(100)       '$.specimenQuantity.unit',
        [container.specimenQuantity.system] VARCHAR(256)        '$.specimenQuantity.system',
        [container.specimenQuantity.code] NVARCHAR(4000)      '$.specimenQuantity.code',
        [container.additive.codeableConcept.id] NVARCHAR(100)       '$.additive.codeableConcept.id',
        [container.additive.codeableConcept.extension] NVARCHAR(MAX)       '$.additive.codeableConcept.extension',
        [container.additive.codeableConcept.coding] NVARCHAR(MAX)       '$.additive.codeableConcept.coding',
        [container.additive.codeableConcept.text] NVARCHAR(4000)      '$.additive.codeableConcept.text',
        [container.additive.reference.id] NVARCHAR(100)       '$.additive.reference.id',
        [container.additive.reference.extension] NVARCHAR(MAX)       '$.additive.reference.extension',
        [container.additive.reference.reference] NVARCHAR(4000)      '$.additive.reference.reference',
        [container.additive.reference.type] VARCHAR(256)        '$.additive.reference.type',
        [container.additive.reference.identifier] NVARCHAR(MAX)       '$.additive.reference.identifier',
        [container.additive.reference.display] NVARCHAR(4000)      '$.additive.reference.display'
    ) j

GO

CREATE VIEW fhir.SpecimenCondition AS
SELECT
    [id],
    [condition.JSON],
    [condition.id],
    [condition.extension],
    [condition.coding],
    [condition.text]
FROM openrowset (
        BULK 'Specimen/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [condition.JSON]  VARCHAR(MAX) '$.condition'
    ) AS rowset
    CROSS APPLY openjson (rowset.[condition.JSON]) with (
        [condition.id]                 NVARCHAR(100)       '$.id',
        [condition.extension]          NVARCHAR(MAX)       '$.extension',
        [condition.coding]             NVARCHAR(MAX)       '$.coding' AS JSON,
        [condition.text]               NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.SpecimenNote AS
SELECT
    [id],
    [note.JSON],
    [note.id],
    [note.extension],
    [note.time],
    [note.text],
    [note.author.reference.id],
    [note.author.reference.extension],
    [note.author.reference.reference],
    [note.author.reference.type],
    [note.author.reference.identifier],
    [note.author.reference.display],
    [note.author.string]
FROM openrowset (
        BULK 'Specimen/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [note.JSON]  VARCHAR(MAX) '$.note'
    ) AS rowset
    CROSS APPLY openjson (rowset.[note.JSON]) with (
        [note.id]                      NVARCHAR(100)       '$.id',
        [note.extension]               NVARCHAR(MAX)       '$.extension',
        [note.time]                    VARCHAR(64)         '$.time',
        [note.text]                    NVARCHAR(MAX)       '$.text',
        [note.author.reference.id]     NVARCHAR(100)       '$.author.reference.id',
        [note.author.reference.extension] NVARCHAR(MAX)       '$.author.reference.extension',
        [note.author.reference.reference] NVARCHAR(4000)      '$.author.reference.reference',
        [note.author.reference.type]   VARCHAR(256)        '$.author.reference.type',
        [note.author.reference.identifier] NVARCHAR(MAX)       '$.author.reference.identifier',
        [note.author.reference.display] NVARCHAR(4000)      '$.author.reference.display',
        [note.author.string]           NVARCHAR(4000)      '$.author.string'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[SpecimenDefinition] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [url] VARCHAR(256),
    [identifier.id] NVARCHAR(100),
    [identifier.extension] NVARCHAR(MAX),
    [identifier.use] NVARCHAR(64),
    [identifier.type.id] NVARCHAR(100),
    [identifier.type.extension] NVARCHAR(MAX),
    [identifier.type.coding] NVARCHAR(MAX),
    [identifier.type.text] NVARCHAR(4000),
    [identifier.system] VARCHAR(256),
    [identifier.value] NVARCHAR(4000),
    [identifier.period.id] NVARCHAR(100),
    [identifier.period.extension] NVARCHAR(MAX),
    [identifier.period.start] VARCHAR(64),
    [identifier.period.end] VARCHAR(64),
    [identifier.assigner.id] NVARCHAR(100),
    [identifier.assigner.extension] NVARCHAR(MAX),
    [identifier.assigner.reference] NVARCHAR(4000),
    [identifier.assigner.type] VARCHAR(256),
    [identifier.assigner.identifier] NVARCHAR(MAX),
    [identifier.assigner.display] NVARCHAR(4000),
    [version] NVARCHAR(100),
    [title] NVARCHAR(4000),
    [derivedFromCanonical] VARCHAR(MAX),
    [derivedFromUri] VARCHAR(MAX),
    [status] NVARCHAR(100),
    [experimental] bit,
    [date] VARCHAR(64),
    [publisher.id] NVARCHAR(100),
    [publisher.extension] NVARCHAR(MAX),
    [publisher.reference] NVARCHAR(4000),
    [publisher.type] VARCHAR(256),
    [publisher.identifier.id] NVARCHAR(100),
    [publisher.identifier.extension] NVARCHAR(MAX),
    [publisher.identifier.use] NVARCHAR(64),
    [publisher.identifier.type] NVARCHAR(MAX),
    [publisher.identifier.system] VARCHAR(256),
    [publisher.identifier.value] NVARCHAR(4000),
    [publisher.identifier.period] NVARCHAR(MAX),
    [publisher.identifier.assigner] NVARCHAR(MAX),
    [publisher.display] NVARCHAR(4000),
    [contact] VARCHAR(MAX),
    [description] NVARCHAR(MAX),
    [useContext] VARCHAR(MAX),
    [jurisdiction] VARCHAR(MAX),
    [purpose] NVARCHAR(MAX),
    [copyright] NVARCHAR(MAX),
    [approvalDate] VARCHAR(64),
    [lastReviewDate] VARCHAR(64),
    [effectivePeriod.id] NVARCHAR(100),
    [effectivePeriod.extension] NVARCHAR(MAX),
    [effectivePeriod.start] VARCHAR(64),
    [effectivePeriod.end] VARCHAR(64),
    [typeCollected.id] NVARCHAR(100),
    [typeCollected.extension] NVARCHAR(MAX),
    [typeCollected.coding] VARCHAR(MAX),
    [typeCollected.text] NVARCHAR(4000),
    [patientPreparation] VARCHAR(MAX),
    [timeAspect] NVARCHAR(100),
    [collection] VARCHAR(MAX),
    [typeTested] VARCHAR(MAX),
    [subject.codeableConcept.id] NVARCHAR(100),
    [subject.codeableConcept.extension] NVARCHAR(MAX),
    [subject.codeableConcept.coding] VARCHAR(MAX),
    [subject.codeableConcept.text] NVARCHAR(4000),
    [subject.reference.id] NVARCHAR(100),
    [subject.reference.extension] NVARCHAR(MAX),
    [subject.reference.reference] NVARCHAR(4000),
    [subject.reference.type] VARCHAR(256),
    [subject.reference.identifier.id] NVARCHAR(100),
    [subject.reference.identifier.extension] NVARCHAR(MAX),
    [subject.reference.identifier.use] NVARCHAR(64),
    [subject.reference.identifier.type] NVARCHAR(MAX),
    [subject.reference.identifier.system] VARCHAR(256),
    [subject.reference.identifier.value] NVARCHAR(4000),
    [subject.reference.identifier.period] NVARCHAR(MAX),
    [subject.reference.identifier.assigner] NVARCHAR(MAX),
    [subject.reference.display] NVARCHAR(4000),
) WITH (
    LOCATION='/SpecimenDefinition/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.SpecimenDefinitionDerivedFromCanonical AS
SELECT
    [id],
    [derivedFromCanonical.JSON],
    [derivedFromCanonical]
FROM openrowset (
        BULK 'SpecimenDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [derivedFromCanonical.JSON]  VARCHAR(MAX) '$.derivedFromCanonical'
    ) AS rowset
    CROSS APPLY openjson (rowset.[derivedFromCanonical.JSON]) with (
        [derivedFromCanonical]         NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.SpecimenDefinitionDerivedFromUri AS
SELECT
    [id],
    [derivedFromUri.JSON],
    [derivedFromUri]
FROM openrowset (
        BULK 'SpecimenDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [derivedFromUri.JSON]  VARCHAR(MAX) '$.derivedFromUri'
    ) AS rowset
    CROSS APPLY openjson (rowset.[derivedFromUri.JSON]) with (
        [derivedFromUri]               NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.SpecimenDefinitionContact AS
SELECT
    [id],
    [contact.JSON],
    [contact.id],
    [contact.extension],
    [contact.name],
    [contact.telecom]
FROM openrowset (
        BULK 'SpecimenDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [contact.JSON]  VARCHAR(MAX) '$.contact'
    ) AS rowset
    CROSS APPLY openjson (rowset.[contact.JSON]) with (
        [contact.id]                   NVARCHAR(100)       '$.id',
        [contact.extension]            NVARCHAR(MAX)       '$.extension',
        [contact.name]                 NVARCHAR(500)       '$.name',
        [contact.telecom]              NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.SpecimenDefinitionUseContext AS
SELECT
    [id],
    [useContext.JSON],
    [useContext.id],
    [useContext.extension],
    [useContext.code.id],
    [useContext.code.extension],
    [useContext.code.system],
    [useContext.code.version],
    [useContext.code.code],
    [useContext.code.display],
    [useContext.code.userSelected],
    [useContext.value.codeableConcept.id],
    [useContext.value.codeableConcept.extension],
    [useContext.value.codeableConcept.coding],
    [useContext.value.codeableConcept.text],
    [useContext.value.quantity.id],
    [useContext.value.quantity.extension],
    [useContext.value.quantity.value],
    [useContext.value.quantity.comparator],
    [useContext.value.quantity.unit],
    [useContext.value.quantity.system],
    [useContext.value.quantity.code],
    [useContext.value.range.id],
    [useContext.value.range.extension],
    [useContext.value.range.low],
    [useContext.value.range.high],
    [useContext.value.reference.id],
    [useContext.value.reference.extension],
    [useContext.value.reference.reference],
    [useContext.value.reference.type],
    [useContext.value.reference.identifier],
    [useContext.value.reference.display]
FROM openrowset (
        BULK 'SpecimenDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [useContext.JSON]  VARCHAR(MAX) '$.useContext'
    ) AS rowset
    CROSS APPLY openjson (rowset.[useContext.JSON]) with (
        [useContext.id]                NVARCHAR(100)       '$.id',
        [useContext.extension]         NVARCHAR(MAX)       '$.extension',
        [useContext.code.id]           NVARCHAR(100)       '$.code.id',
        [useContext.code.extension]    NVARCHAR(MAX)       '$.code.extension',
        [useContext.code.system]       VARCHAR(256)        '$.code.system',
        [useContext.code.version]      NVARCHAR(100)       '$.code.version',
        [useContext.code.code]         NVARCHAR(4000)      '$.code.code',
        [useContext.code.display]      NVARCHAR(4000)      '$.code.display',
        [useContext.code.userSelected] bit                 '$.code.userSelected',
        [useContext.value.codeableConcept.id] NVARCHAR(100)       '$.value.codeableConcept.id',
        [useContext.value.codeableConcept.extension] NVARCHAR(MAX)       '$.value.codeableConcept.extension',
        [useContext.value.codeableConcept.coding] NVARCHAR(MAX)       '$.value.codeableConcept.coding',
        [useContext.value.codeableConcept.text] NVARCHAR(4000)      '$.value.codeableConcept.text',
        [useContext.value.quantity.id] NVARCHAR(100)       '$.value.quantity.id',
        [useContext.value.quantity.extension] NVARCHAR(MAX)       '$.value.quantity.extension',
        [useContext.value.quantity.value] float               '$.value.quantity.value',
        [useContext.value.quantity.comparator] NVARCHAR(64)        '$.value.quantity.comparator',
        [useContext.value.quantity.unit] NVARCHAR(100)       '$.value.quantity.unit',
        [useContext.value.quantity.system] VARCHAR(256)        '$.value.quantity.system',
        [useContext.value.quantity.code] NVARCHAR(4000)      '$.value.quantity.code',
        [useContext.value.range.id]    NVARCHAR(100)       '$.value.range.id',
        [useContext.value.range.extension] NVARCHAR(MAX)       '$.value.range.extension',
        [useContext.value.range.low]   NVARCHAR(MAX)       '$.value.range.low',
        [useContext.value.range.high]  NVARCHAR(MAX)       '$.value.range.high',
        [useContext.value.reference.id] NVARCHAR(100)       '$.value.reference.id',
        [useContext.value.reference.extension] NVARCHAR(MAX)       '$.value.reference.extension',
        [useContext.value.reference.reference] NVARCHAR(4000)      '$.value.reference.reference',
        [useContext.value.reference.type] VARCHAR(256)        '$.value.reference.type',
        [useContext.value.reference.identifier] NVARCHAR(MAX)       '$.value.reference.identifier',
        [useContext.value.reference.display] NVARCHAR(4000)      '$.value.reference.display'
    ) j

GO

CREATE VIEW fhir.SpecimenDefinitionJurisdiction AS
SELECT
    [id],
    [jurisdiction.JSON],
    [jurisdiction.id],
    [jurisdiction.extension],
    [jurisdiction.coding],
    [jurisdiction.text]
FROM openrowset (
        BULK 'SpecimenDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [jurisdiction.JSON]  VARCHAR(MAX) '$.jurisdiction'
    ) AS rowset
    CROSS APPLY openjson (rowset.[jurisdiction.JSON]) with (
        [jurisdiction.id]              NVARCHAR(100)       '$.id',
        [jurisdiction.extension]       NVARCHAR(MAX)       '$.extension',
        [jurisdiction.coding]          NVARCHAR(MAX)       '$.coding' AS JSON,
        [jurisdiction.text]            NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.SpecimenDefinitionPatientPreparation AS
SELECT
    [id],
    [patientPreparation.JSON],
    [patientPreparation.id],
    [patientPreparation.extension],
    [patientPreparation.coding],
    [patientPreparation.text]
FROM openrowset (
        BULK 'SpecimenDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [patientPreparation.JSON]  VARCHAR(MAX) '$.patientPreparation'
    ) AS rowset
    CROSS APPLY openjson (rowset.[patientPreparation.JSON]) with (
        [patientPreparation.id]        NVARCHAR(100)       '$.id',
        [patientPreparation.extension] NVARCHAR(MAX)       '$.extension',
        [patientPreparation.coding]    NVARCHAR(MAX)       '$.coding' AS JSON,
        [patientPreparation.text]      NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.SpecimenDefinitionCollection AS
SELECT
    [id],
    [collection.JSON],
    [collection.id],
    [collection.extension],
    [collection.coding],
    [collection.text]
FROM openrowset (
        BULK 'SpecimenDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [collection.JSON]  VARCHAR(MAX) '$.collection'
    ) AS rowset
    CROSS APPLY openjson (rowset.[collection.JSON]) with (
        [collection.id]                NVARCHAR(100)       '$.id',
        [collection.extension]         NVARCHAR(MAX)       '$.extension',
        [collection.coding]            NVARCHAR(MAX)       '$.coding' AS JSON,
        [collection.text]              NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.SpecimenDefinitionTypeTested AS
SELECT
    [id],
    [typeTested.JSON],
    [typeTested.id],
    [typeTested.extension],
    [typeTested.modifierExtension],
    [typeTested.isDerived],
    [typeTested.type.id],
    [typeTested.type.extension],
    [typeTested.type.coding],
    [typeTested.type.text],
    [typeTested.preference],
    [typeTested.container.id],
    [typeTested.container.extension],
    [typeTested.container.modifierExtension],
    [typeTested.container.material],
    [typeTested.container.type],
    [typeTested.container.cap],
    [typeTested.container.description],
    [typeTested.container.capacity],
    [typeTested.container.minimumVolumeQuantity],
    [typeTested.container.additive],
    [typeTested.container.preparation],
    [typeTested.container.minimumVolume.quantity],
    [typeTested.container.minimumVolume.string],
    [typeTested.requirement],
    [typeTested.retentionTime.id],
    [typeTested.retentionTime.extension],
    [typeTested.retentionTime.value],
    [typeTested.retentionTime.comparator],
    [typeTested.retentionTime.unit],
    [typeTested.retentionTime.system],
    [typeTested.retentionTime.code],
    [typeTested.singleUse],
    [typeTested.rejectionCriterion],
    [typeTested.handling],
    [typeTested.testingDestination]
FROM openrowset (
        BULK 'SpecimenDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [typeTested.JSON]  VARCHAR(MAX) '$.typeTested'
    ) AS rowset
    CROSS APPLY openjson (rowset.[typeTested.JSON]) with (
        [typeTested.id]                NVARCHAR(100)       '$.id',
        [typeTested.extension]         NVARCHAR(MAX)       '$.extension',
        [typeTested.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [typeTested.isDerived]         bit                 '$.isDerived',
        [typeTested.type.id]           NVARCHAR(100)       '$.type.id',
        [typeTested.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [typeTested.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [typeTested.type.text]         NVARCHAR(4000)      '$.type.text',
        [typeTested.preference]        NVARCHAR(4000)      '$.preference',
        [typeTested.container.id]      NVARCHAR(100)       '$.container.id',
        [typeTested.container.extension] NVARCHAR(MAX)       '$.container.extension',
        [typeTested.container.modifierExtension] NVARCHAR(MAX)       '$.container.modifierExtension',
        [typeTested.container.material] NVARCHAR(MAX)       '$.container.material',
        [typeTested.container.type]    NVARCHAR(MAX)       '$.container.type',
        [typeTested.container.cap]     NVARCHAR(MAX)       '$.container.cap',
        [typeTested.container.description] NVARCHAR(4000)      '$.container.description',
        [typeTested.container.capacity] NVARCHAR(MAX)       '$.container.capacity',
        [typeTested.container.minimumVolumeQuantity] NVARCHAR(MAX)       '$.container.minimumVolumeQuantity',
        [typeTested.container.additive] NVARCHAR(MAX)       '$.container.additive',
        [typeTested.container.preparation] NVARCHAR(4000)      '$.container.preparation',
        [typeTested.container.minimumVolume.quantity] NVARCHAR(MAX)       '$.container.minimumVolume.quantity',
        [typeTested.container.minimumVolume.string] NVARCHAR(4000)      '$.container.minimumVolume.string',
        [typeTested.requirement]       NVARCHAR(500)       '$.requirement',
        [typeTested.retentionTime.id]  NVARCHAR(100)       '$.retentionTime.id',
        [typeTested.retentionTime.extension] NVARCHAR(MAX)       '$.retentionTime.extension',
        [typeTested.retentionTime.value] float               '$.retentionTime.value',
        [typeTested.retentionTime.comparator] NVARCHAR(64)        '$.retentionTime.comparator',
        [typeTested.retentionTime.unit] NVARCHAR(100)       '$.retentionTime.unit',
        [typeTested.retentionTime.system] VARCHAR(256)        '$.retentionTime.system',
        [typeTested.retentionTime.code] NVARCHAR(4000)      '$.retentionTime.code',
        [typeTested.singleUse]         bit                 '$.singleUse',
        [typeTested.rejectionCriterion] NVARCHAR(MAX)       '$.rejectionCriterion' AS JSON,
        [typeTested.handling]          NVARCHAR(MAX)       '$.handling' AS JSON,
        [typeTested.testingDestination] NVARCHAR(MAX)       '$.testingDestination' AS JSON
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[StructureMap] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [url] VARCHAR(256),
    [identifier] VARCHAR(MAX),
    [version] NVARCHAR(100),
    [name] NVARCHAR(500),
    [title] NVARCHAR(4000),
    [status] NVARCHAR(100),
    [experimental] bit,
    [date] VARCHAR(64),
    [publisher] NVARCHAR(500),
    [contact] VARCHAR(MAX),
    [description] NVARCHAR(MAX),
    [useContext] VARCHAR(MAX),
    [jurisdiction] VARCHAR(MAX),
    [purpose] NVARCHAR(MAX),
    [copyright] NVARCHAR(MAX),
    [structure] VARCHAR(MAX),
    [import] VARCHAR(MAX),
    [group] VARCHAR(MAX),
) WITH (
    LOCATION='/StructureMap/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.StructureMapIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'StructureMap/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.StructureMapContact AS
SELECT
    [id],
    [contact.JSON],
    [contact.id],
    [contact.extension],
    [contact.name],
    [contact.telecom]
FROM openrowset (
        BULK 'StructureMap/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [contact.JSON]  VARCHAR(MAX) '$.contact'
    ) AS rowset
    CROSS APPLY openjson (rowset.[contact.JSON]) with (
        [contact.id]                   NVARCHAR(100)       '$.id',
        [contact.extension]            NVARCHAR(MAX)       '$.extension',
        [contact.name]                 NVARCHAR(500)       '$.name',
        [contact.telecom]              NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.StructureMapUseContext AS
SELECT
    [id],
    [useContext.JSON],
    [useContext.id],
    [useContext.extension],
    [useContext.code.id],
    [useContext.code.extension],
    [useContext.code.system],
    [useContext.code.version],
    [useContext.code.code],
    [useContext.code.display],
    [useContext.code.userSelected],
    [useContext.value.codeableConcept.id],
    [useContext.value.codeableConcept.extension],
    [useContext.value.codeableConcept.coding],
    [useContext.value.codeableConcept.text],
    [useContext.value.quantity.id],
    [useContext.value.quantity.extension],
    [useContext.value.quantity.value],
    [useContext.value.quantity.comparator],
    [useContext.value.quantity.unit],
    [useContext.value.quantity.system],
    [useContext.value.quantity.code],
    [useContext.value.range.id],
    [useContext.value.range.extension],
    [useContext.value.range.low],
    [useContext.value.range.high],
    [useContext.value.reference.id],
    [useContext.value.reference.extension],
    [useContext.value.reference.reference],
    [useContext.value.reference.type],
    [useContext.value.reference.identifier],
    [useContext.value.reference.display]
FROM openrowset (
        BULK 'StructureMap/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [useContext.JSON]  VARCHAR(MAX) '$.useContext'
    ) AS rowset
    CROSS APPLY openjson (rowset.[useContext.JSON]) with (
        [useContext.id]                NVARCHAR(100)       '$.id',
        [useContext.extension]         NVARCHAR(MAX)       '$.extension',
        [useContext.code.id]           NVARCHAR(100)       '$.code.id',
        [useContext.code.extension]    NVARCHAR(MAX)       '$.code.extension',
        [useContext.code.system]       VARCHAR(256)        '$.code.system',
        [useContext.code.version]      NVARCHAR(100)       '$.code.version',
        [useContext.code.code]         NVARCHAR(4000)      '$.code.code',
        [useContext.code.display]      NVARCHAR(4000)      '$.code.display',
        [useContext.code.userSelected] bit                 '$.code.userSelected',
        [useContext.value.codeableConcept.id] NVARCHAR(100)       '$.value.codeableConcept.id',
        [useContext.value.codeableConcept.extension] NVARCHAR(MAX)       '$.value.codeableConcept.extension',
        [useContext.value.codeableConcept.coding] NVARCHAR(MAX)       '$.value.codeableConcept.coding',
        [useContext.value.codeableConcept.text] NVARCHAR(4000)      '$.value.codeableConcept.text',
        [useContext.value.quantity.id] NVARCHAR(100)       '$.value.quantity.id',
        [useContext.value.quantity.extension] NVARCHAR(MAX)       '$.value.quantity.extension',
        [useContext.value.quantity.value] float               '$.value.quantity.value',
        [useContext.value.quantity.comparator] NVARCHAR(64)        '$.value.quantity.comparator',
        [useContext.value.quantity.unit] NVARCHAR(100)       '$.value.quantity.unit',
        [useContext.value.quantity.system] VARCHAR(256)        '$.value.quantity.system',
        [useContext.value.quantity.code] NVARCHAR(4000)      '$.value.quantity.code',
        [useContext.value.range.id]    NVARCHAR(100)       '$.value.range.id',
        [useContext.value.range.extension] NVARCHAR(MAX)       '$.value.range.extension',
        [useContext.value.range.low]   NVARCHAR(MAX)       '$.value.range.low',
        [useContext.value.range.high]  NVARCHAR(MAX)       '$.value.range.high',
        [useContext.value.reference.id] NVARCHAR(100)       '$.value.reference.id',
        [useContext.value.reference.extension] NVARCHAR(MAX)       '$.value.reference.extension',
        [useContext.value.reference.reference] NVARCHAR(4000)      '$.value.reference.reference',
        [useContext.value.reference.type] VARCHAR(256)        '$.value.reference.type',
        [useContext.value.reference.identifier] NVARCHAR(MAX)       '$.value.reference.identifier',
        [useContext.value.reference.display] NVARCHAR(4000)      '$.value.reference.display'
    ) j

GO

CREATE VIEW fhir.StructureMapJurisdiction AS
SELECT
    [id],
    [jurisdiction.JSON],
    [jurisdiction.id],
    [jurisdiction.extension],
    [jurisdiction.coding],
    [jurisdiction.text]
FROM openrowset (
        BULK 'StructureMap/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [jurisdiction.JSON]  VARCHAR(MAX) '$.jurisdiction'
    ) AS rowset
    CROSS APPLY openjson (rowset.[jurisdiction.JSON]) with (
        [jurisdiction.id]              NVARCHAR(100)       '$.id',
        [jurisdiction.extension]       NVARCHAR(MAX)       '$.extension',
        [jurisdiction.coding]          NVARCHAR(MAX)       '$.coding' AS JSON,
        [jurisdiction.text]            NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.StructureMapStructure AS
SELECT
    [id],
    [structure.JSON],
    [structure.id],
    [structure.extension],
    [structure.modifierExtension],
    [structure.url],
    [structure.mode],
    [structure.alias],
    [structure.documentation]
FROM openrowset (
        BULK 'StructureMap/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [structure.JSON]  VARCHAR(MAX) '$.structure'
    ) AS rowset
    CROSS APPLY openjson (rowset.[structure.JSON]) with (
        [structure.id]                 NVARCHAR(100)       '$.id',
        [structure.extension]          NVARCHAR(MAX)       '$.extension',
        [structure.modifierExtension]  NVARCHAR(MAX)       '$.modifierExtension',
        [structure.url]                VARCHAR(256)        '$.url',
        [structure.mode]               NVARCHAR(100)       '$.mode',
        [structure.alias]              NVARCHAR(500)       '$.alias',
        [structure.documentation]      NVARCHAR(4000)      '$.documentation'
    ) j

GO

CREATE VIEW fhir.StructureMapImport AS
SELECT
    [id],
    [import.JSON],
    [import]
FROM openrowset (
        BULK 'StructureMap/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [import.JSON]  VARCHAR(MAX) '$.import'
    ) AS rowset
    CROSS APPLY openjson (rowset.[import.JSON]) with (
        [import]                       NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.StructureMapGroup AS
SELECT
    [id],
    [group.JSON],
    [group.id],
    [group.extension],
    [group.modifierExtension],
    [group.name],
    [group.extends],
    [group.typeMode],
    [group.documentation],
    [group.input],
    [group.rule]
FROM openrowset (
        BULK 'StructureMap/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [group.JSON]  VARCHAR(MAX) '$.group'
    ) AS rowset
    CROSS APPLY openjson (rowset.[group.JSON]) with (
        [group.id]                     NVARCHAR(100)       '$.id',
        [group.extension]              NVARCHAR(MAX)       '$.extension',
        [group.modifierExtension]      NVARCHAR(MAX)       '$.modifierExtension',
        [group.name]                   VARCHAR(64)         '$.name',
        [group.extends]                VARCHAR(64)         '$.extends',
        [group.typeMode]               NVARCHAR(4000)      '$.typeMode',
        [group.documentation]          NVARCHAR(4000)      '$.documentation',
        [group.input]                  NVARCHAR(MAX)       '$.input' AS JSON,
        [group.rule]                   NVARCHAR(MAX)       '$.rule' AS JSON
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[Subscription] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [name] NVARCHAR(500),
    [status] NVARCHAR(100),
    [topic] VARCHAR(256),
    [contact] VARCHAR(MAX),
    [end] VARCHAR(64),
    [reason] NVARCHAR(4000),
    [filterBy] VARCHAR(MAX),
    [channelType.id] NVARCHAR(100),
    [channelType.extension] NVARCHAR(MAX),
    [channelType.system] VARCHAR(256),
    [channelType.version] NVARCHAR(100),
    [channelType.code] NVARCHAR(4000),
    [channelType.display] NVARCHAR(4000),
    [channelType.userSelected] bit,
    [endpoint] VARCHAR(256),
    [header] VARCHAR(MAX),
    [heartbeatPeriod] bigint,
    [timeout] bigint,
    [contentType] NVARCHAR(100),
    [content] NVARCHAR(4000),
    [notificationUrlLocation] NVARCHAR(4000),
    [maxCount] bigint,
) WITH (
    LOCATION='/Subscription/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.SubscriptionIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'Subscription/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.SubscriptionContact AS
SELECT
    [id],
    [contact.JSON],
    [contact.id],
    [contact.extension],
    [contact.system],
    [contact.value],
    [contact.use],
    [contact.rank],
    [contact.period.id],
    [contact.period.extension],
    [contact.period.start],
    [contact.period.end]
FROM openrowset (
        BULK 'Subscription/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [contact.JSON]  VARCHAR(MAX) '$.contact'
    ) AS rowset
    CROSS APPLY openjson (rowset.[contact.JSON]) with (
        [contact.id]                   NVARCHAR(100)       '$.id',
        [contact.extension]            NVARCHAR(MAX)       '$.extension',
        [contact.system]               NVARCHAR(64)        '$.system',
        [contact.value]                NVARCHAR(4000)      '$.value',
        [contact.use]                  NVARCHAR(64)        '$.use',
        [contact.rank]                 bigint              '$.rank',
        [contact.period.id]            NVARCHAR(100)       '$.period.id',
        [contact.period.extension]     NVARCHAR(MAX)       '$.period.extension',
        [contact.period.start]         VARCHAR(64)         '$.period.start',
        [contact.period.end]           VARCHAR(64)         '$.period.end'
    ) j

GO

CREATE VIEW fhir.SubscriptionFilterBy AS
SELECT
    [id],
    [filterBy.JSON],
    [filterBy.id],
    [filterBy.extension],
    [filterBy.modifierExtension],
    [filterBy.resourceType],
    [filterBy.searchParamName],
    [filterBy.searchModifier],
    [filterBy.value]
FROM openrowset (
        BULK 'Subscription/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [filterBy.JSON]  VARCHAR(MAX) '$.filterBy'
    ) AS rowset
    CROSS APPLY openjson (rowset.[filterBy.JSON]) with (
        [filterBy.id]                  NVARCHAR(100)       '$.id',
        [filterBy.extension]           NVARCHAR(MAX)       '$.extension',
        [filterBy.modifierExtension]   NVARCHAR(MAX)       '$.modifierExtension',
        [filterBy.resourceType]        NVARCHAR(4000)      '$.resourceType',
        [filterBy.searchParamName]     NVARCHAR(4000)      '$.searchParamName',
        [filterBy.searchModifier]      NVARCHAR(4000)      '$.searchModifier',
        [filterBy.value]               NVARCHAR(4000)      '$.value'
    ) j

GO

CREATE VIEW fhir.SubscriptionHeader AS
SELECT
    [id],
    [header.JSON],
    [header]
FROM openrowset (
        BULK 'Subscription/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [header.JSON]  VARCHAR(MAX) '$.header'
    ) AS rowset
    CROSS APPLY openjson (rowset.[header.JSON]) with (
        [header]                       NVARCHAR(MAX)       '$'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[SubscriptionStatus] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [status] NVARCHAR(100),
    [type] NVARCHAR(100),
    [eventsSinceSubscriptionStart] NVARCHAR(MAX),
    [eventsInNotification] bigint,
    [notificationEvent] VARCHAR(MAX),
    [subscription.id] NVARCHAR(100),
    [subscription.extension] NVARCHAR(MAX),
    [subscription.reference] NVARCHAR(4000),
    [subscription.type] VARCHAR(256),
    [subscription.identifier.id] NVARCHAR(100),
    [subscription.identifier.extension] NVARCHAR(MAX),
    [subscription.identifier.use] NVARCHAR(64),
    [subscription.identifier.type] NVARCHAR(MAX),
    [subscription.identifier.system] VARCHAR(256),
    [subscription.identifier.value] NVARCHAR(4000),
    [subscription.identifier.period] NVARCHAR(MAX),
    [subscription.identifier.assigner] NVARCHAR(MAX),
    [subscription.display] NVARCHAR(4000),
    [topic] VARCHAR(256),
    [error] VARCHAR(MAX),
) WITH (
    LOCATION='/SubscriptionStatus/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.SubscriptionStatusNotificationEvent AS
SELECT
    [id],
    [notificationEvent.JSON],
    [notificationEvent.id],
    [notificationEvent.extension],
    [notificationEvent.modifierExtension],
    [notificationEvent.eventNumber],
    [notificationEvent.timestamp],
    [notificationEvent.focus.id],
    [notificationEvent.focus.extension],
    [notificationEvent.focus.reference],
    [notificationEvent.focus.type],
    [notificationEvent.focus.identifier],
    [notificationEvent.focus.display],
    [notificationEvent.additionalContext]
FROM openrowset (
        BULK 'SubscriptionStatus/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [notificationEvent.JSON]  VARCHAR(MAX) '$.notificationEvent'
    ) AS rowset
    CROSS APPLY openjson (rowset.[notificationEvent.JSON]) with (
        [notificationEvent.id]         NVARCHAR(100)       '$.id',
        [notificationEvent.extension]  NVARCHAR(MAX)       '$.extension',
        [notificationEvent.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [notificationEvent.eventNumber] NVARCHAR(MAX)       '$.eventNumber',
        [notificationEvent.timestamp]  VARCHAR(64)         '$.timestamp',
        [notificationEvent.focus.id]   NVARCHAR(100)       '$.focus.id',
        [notificationEvent.focus.extension] NVARCHAR(MAX)       '$.focus.extension',
        [notificationEvent.focus.reference] NVARCHAR(4000)      '$.focus.reference',
        [notificationEvent.focus.type] VARCHAR(256)        '$.focus.type',
        [notificationEvent.focus.identifier] NVARCHAR(MAX)       '$.focus.identifier',
        [notificationEvent.focus.display] NVARCHAR(4000)      '$.focus.display',
        [notificationEvent.additionalContext] NVARCHAR(MAX)       '$.additionalContext' AS JSON
    ) j

GO

CREATE VIEW fhir.SubscriptionStatusError AS
SELECT
    [id],
    [error.JSON],
    [error.id],
    [error.extension],
    [error.coding],
    [error.text]
FROM openrowset (
        BULK 'SubscriptionStatus/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [error.JSON]  VARCHAR(MAX) '$.error'
    ) AS rowset
    CROSS APPLY openjson (rowset.[error.JSON]) with (
        [error.id]                     NVARCHAR(100)       '$.id',
        [error.extension]              NVARCHAR(MAX)       '$.extension',
        [error.coding]                 NVARCHAR(MAX)       '$.coding' AS JSON,
        [error.text]                   NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[SubscriptionTopic] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [url] VARCHAR(256),
    [identifier] VARCHAR(MAX),
    [version] NVARCHAR(100),
    [title] NVARCHAR(4000),
    [derivedFrom] VARCHAR(MAX),
    [status] NVARCHAR(100),
    [experimental] bit,
    [date] VARCHAR(64),
    [publisher] NVARCHAR(500),
    [contact] VARCHAR(MAX),
    [description] NVARCHAR(MAX),
    [useContext] VARCHAR(MAX),
    [jurisdiction] VARCHAR(MAX),
    [purpose] NVARCHAR(MAX),
    [copyright] NVARCHAR(MAX),
    [approvalDate] VARCHAR(64),
    [lastReviewDate] VARCHAR(64),
    [effectivePeriod.id] NVARCHAR(100),
    [effectivePeriod.extension] NVARCHAR(MAX),
    [effectivePeriod.start] VARCHAR(64),
    [effectivePeriod.end] VARCHAR(64),
    [resourceTrigger] VARCHAR(MAX),
    [eventTrigger] VARCHAR(MAX),
    [canFilterBy] VARCHAR(MAX),
    [notificationShape] VARCHAR(MAX),
) WITH (
    LOCATION='/SubscriptionTopic/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.SubscriptionTopicIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'SubscriptionTopic/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.SubscriptionTopicDerivedFrom AS
SELECT
    [id],
    [derivedFrom.JSON],
    [derivedFrom]
FROM openrowset (
        BULK 'SubscriptionTopic/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [derivedFrom.JSON]  VARCHAR(MAX) '$.derivedFrom'
    ) AS rowset
    CROSS APPLY openjson (rowset.[derivedFrom.JSON]) with (
        [derivedFrom]                  NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.SubscriptionTopicContact AS
SELECT
    [id],
    [contact.JSON],
    [contact.id],
    [contact.extension],
    [contact.name],
    [contact.telecom]
FROM openrowset (
        BULK 'SubscriptionTopic/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [contact.JSON]  VARCHAR(MAX) '$.contact'
    ) AS rowset
    CROSS APPLY openjson (rowset.[contact.JSON]) with (
        [contact.id]                   NVARCHAR(100)       '$.id',
        [contact.extension]            NVARCHAR(MAX)       '$.extension',
        [contact.name]                 NVARCHAR(500)       '$.name',
        [contact.telecom]              NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.SubscriptionTopicUseContext AS
SELECT
    [id],
    [useContext.JSON],
    [useContext.id],
    [useContext.extension],
    [useContext.code.id],
    [useContext.code.extension],
    [useContext.code.system],
    [useContext.code.version],
    [useContext.code.code],
    [useContext.code.display],
    [useContext.code.userSelected],
    [useContext.value.codeableConcept.id],
    [useContext.value.codeableConcept.extension],
    [useContext.value.codeableConcept.coding],
    [useContext.value.codeableConcept.text],
    [useContext.value.quantity.id],
    [useContext.value.quantity.extension],
    [useContext.value.quantity.value],
    [useContext.value.quantity.comparator],
    [useContext.value.quantity.unit],
    [useContext.value.quantity.system],
    [useContext.value.quantity.code],
    [useContext.value.range.id],
    [useContext.value.range.extension],
    [useContext.value.range.low],
    [useContext.value.range.high],
    [useContext.value.reference.id],
    [useContext.value.reference.extension],
    [useContext.value.reference.reference],
    [useContext.value.reference.type],
    [useContext.value.reference.identifier],
    [useContext.value.reference.display]
FROM openrowset (
        BULK 'SubscriptionTopic/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [useContext.JSON]  VARCHAR(MAX) '$.useContext'
    ) AS rowset
    CROSS APPLY openjson (rowset.[useContext.JSON]) with (
        [useContext.id]                NVARCHAR(100)       '$.id',
        [useContext.extension]         NVARCHAR(MAX)       '$.extension',
        [useContext.code.id]           NVARCHAR(100)       '$.code.id',
        [useContext.code.extension]    NVARCHAR(MAX)       '$.code.extension',
        [useContext.code.system]       VARCHAR(256)        '$.code.system',
        [useContext.code.version]      NVARCHAR(100)       '$.code.version',
        [useContext.code.code]         NVARCHAR(4000)      '$.code.code',
        [useContext.code.display]      NVARCHAR(4000)      '$.code.display',
        [useContext.code.userSelected] bit                 '$.code.userSelected',
        [useContext.value.codeableConcept.id] NVARCHAR(100)       '$.value.codeableConcept.id',
        [useContext.value.codeableConcept.extension] NVARCHAR(MAX)       '$.value.codeableConcept.extension',
        [useContext.value.codeableConcept.coding] NVARCHAR(MAX)       '$.value.codeableConcept.coding',
        [useContext.value.codeableConcept.text] NVARCHAR(4000)      '$.value.codeableConcept.text',
        [useContext.value.quantity.id] NVARCHAR(100)       '$.value.quantity.id',
        [useContext.value.quantity.extension] NVARCHAR(MAX)       '$.value.quantity.extension',
        [useContext.value.quantity.value] float               '$.value.quantity.value',
        [useContext.value.quantity.comparator] NVARCHAR(64)        '$.value.quantity.comparator',
        [useContext.value.quantity.unit] NVARCHAR(100)       '$.value.quantity.unit',
        [useContext.value.quantity.system] VARCHAR(256)        '$.value.quantity.system',
        [useContext.value.quantity.code] NVARCHAR(4000)      '$.value.quantity.code',
        [useContext.value.range.id]    NVARCHAR(100)       '$.value.range.id',
        [useContext.value.range.extension] NVARCHAR(MAX)       '$.value.range.extension',
        [useContext.value.range.low]   NVARCHAR(MAX)       '$.value.range.low',
        [useContext.value.range.high]  NVARCHAR(MAX)       '$.value.range.high',
        [useContext.value.reference.id] NVARCHAR(100)       '$.value.reference.id',
        [useContext.value.reference.extension] NVARCHAR(MAX)       '$.value.reference.extension',
        [useContext.value.reference.reference] NVARCHAR(4000)      '$.value.reference.reference',
        [useContext.value.reference.type] VARCHAR(256)        '$.value.reference.type',
        [useContext.value.reference.identifier] NVARCHAR(MAX)       '$.value.reference.identifier',
        [useContext.value.reference.display] NVARCHAR(4000)      '$.value.reference.display'
    ) j

GO

CREATE VIEW fhir.SubscriptionTopicJurisdiction AS
SELECT
    [id],
    [jurisdiction.JSON],
    [jurisdiction.id],
    [jurisdiction.extension],
    [jurisdiction.coding],
    [jurisdiction.text]
FROM openrowset (
        BULK 'SubscriptionTopic/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [jurisdiction.JSON]  VARCHAR(MAX) '$.jurisdiction'
    ) AS rowset
    CROSS APPLY openjson (rowset.[jurisdiction.JSON]) with (
        [jurisdiction.id]              NVARCHAR(100)       '$.id',
        [jurisdiction.extension]       NVARCHAR(MAX)       '$.extension',
        [jurisdiction.coding]          NVARCHAR(MAX)       '$.coding' AS JSON,
        [jurisdiction.text]            NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.SubscriptionTopicResourceTrigger AS
SELECT
    [id],
    [resourceTrigger.JSON],
    [resourceTrigger.id],
    [resourceTrigger.extension],
    [resourceTrigger.modifierExtension],
    [resourceTrigger.description],
    [resourceTrigger.resource],
    [resourceTrigger.supportedInteraction],
    [resourceTrigger.queryCriteria.id],
    [resourceTrigger.queryCriteria.extension],
    [resourceTrigger.queryCriteria.modifierExtension],
    [resourceTrigger.queryCriteria.previous],
    [resourceTrigger.queryCriteria.resultForCreate],
    [resourceTrigger.queryCriteria.current],
    [resourceTrigger.queryCriteria.resultForDelete],
    [resourceTrigger.queryCriteria.requireBoth],
    [resourceTrigger.fhirPathCriteria]
FROM openrowset (
        BULK 'SubscriptionTopic/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [resourceTrigger.JSON]  VARCHAR(MAX) '$.resourceTrigger'
    ) AS rowset
    CROSS APPLY openjson (rowset.[resourceTrigger.JSON]) with (
        [resourceTrigger.id]           NVARCHAR(100)       '$.id',
        [resourceTrigger.extension]    NVARCHAR(MAX)       '$.extension',
        [resourceTrigger.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [resourceTrigger.description]  NVARCHAR(MAX)       '$.description',
        [resourceTrigger.resource]     VARCHAR(256)        '$.resource',
        [resourceTrigger.supportedInteraction] NVARCHAR(MAX)       '$.supportedInteraction' AS JSON,
        [resourceTrigger.queryCriteria.id] NVARCHAR(100)       '$.queryCriteria.id',
        [resourceTrigger.queryCriteria.extension] NVARCHAR(MAX)       '$.queryCriteria.extension',
        [resourceTrigger.queryCriteria.modifierExtension] NVARCHAR(MAX)       '$.queryCriteria.modifierExtension',
        [resourceTrigger.queryCriteria.previous] NVARCHAR(4000)      '$.queryCriteria.previous',
        [resourceTrigger.queryCriteria.resultForCreate] NVARCHAR(4000)      '$.queryCriteria.resultForCreate',
        [resourceTrigger.queryCriteria.current] NVARCHAR(4000)      '$.queryCriteria.current',
        [resourceTrigger.queryCriteria.resultForDelete] NVARCHAR(4000)      '$.queryCriteria.resultForDelete',
        [resourceTrigger.queryCriteria.requireBoth] bit                 '$.queryCriteria.requireBoth',
        [resourceTrigger.fhirPathCriteria] NVARCHAR(4000)      '$.fhirPathCriteria'
    ) j

GO

CREATE VIEW fhir.SubscriptionTopicEventTrigger AS
SELECT
    [id],
    [eventTrigger.JSON],
    [eventTrigger.id],
    [eventTrigger.extension],
    [eventTrigger.modifierExtension],
    [eventTrigger.description],
    [eventTrigger.event.id],
    [eventTrigger.event.extension],
    [eventTrigger.event.coding],
    [eventTrigger.event.text],
    [eventTrigger.resource]
FROM openrowset (
        BULK 'SubscriptionTopic/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [eventTrigger.JSON]  VARCHAR(MAX) '$.eventTrigger'
    ) AS rowset
    CROSS APPLY openjson (rowset.[eventTrigger.JSON]) with (
        [eventTrigger.id]              NVARCHAR(100)       '$.id',
        [eventTrigger.extension]       NVARCHAR(MAX)       '$.extension',
        [eventTrigger.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [eventTrigger.description]     NVARCHAR(MAX)       '$.description',
        [eventTrigger.event.id]        NVARCHAR(100)       '$.event.id',
        [eventTrigger.event.extension] NVARCHAR(MAX)       '$.event.extension',
        [eventTrigger.event.coding]    NVARCHAR(MAX)       '$.event.coding',
        [eventTrigger.event.text]      NVARCHAR(4000)      '$.event.text',
        [eventTrigger.resource]        VARCHAR(256)        '$.resource'
    ) j

GO

CREATE VIEW fhir.SubscriptionTopicCanFilterBy AS
SELECT
    [id],
    [canFilterBy.JSON],
    [canFilterBy.id],
    [canFilterBy.extension],
    [canFilterBy.modifierExtension],
    [canFilterBy.description],
    [canFilterBy.resource],
    [canFilterBy.filterParameter],
    [canFilterBy.modifier]
FROM openrowset (
        BULK 'SubscriptionTopic/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [canFilterBy.JSON]  VARCHAR(MAX) '$.canFilterBy'
    ) AS rowset
    CROSS APPLY openjson (rowset.[canFilterBy.JSON]) with (
        [canFilterBy.id]               NVARCHAR(100)       '$.id',
        [canFilterBy.extension]        NVARCHAR(MAX)       '$.extension',
        [canFilterBy.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [canFilterBy.description]      NVARCHAR(MAX)       '$.description',
        [canFilterBy.resource]         VARCHAR(256)        '$.resource',
        [canFilterBy.filterParameter]  NVARCHAR(4000)      '$.filterParameter',
        [canFilterBy.modifier]         NVARCHAR(MAX)       '$.modifier' AS JSON
    ) j

GO

CREATE VIEW fhir.SubscriptionTopicNotificationShape AS
SELECT
    [id],
    [notificationShape.JSON],
    [notificationShape.id],
    [notificationShape.extension],
    [notificationShape.modifierExtension],
    [notificationShape.resource],
    [notificationShape.include],
    [notificationShape.revInclude]
FROM openrowset (
        BULK 'SubscriptionTopic/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [notificationShape.JSON]  VARCHAR(MAX) '$.notificationShape'
    ) AS rowset
    CROSS APPLY openjson (rowset.[notificationShape.JSON]) with (
        [notificationShape.id]         NVARCHAR(100)       '$.id',
        [notificationShape.extension]  NVARCHAR(MAX)       '$.extension',
        [notificationShape.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [notificationShape.resource]   VARCHAR(256)        '$.resource',
        [notificationShape.include]    NVARCHAR(MAX)       '$.include' AS JSON,
        [notificationShape.revInclude] NVARCHAR(MAX)       '$.revInclude' AS JSON
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[Substance] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [instance] bit,
    [status] NVARCHAR(100),
    [category] VARCHAR(MAX),
    [code.id] NVARCHAR(100),
    [code.extension] NVARCHAR(MAX),
    [code.concept.id] NVARCHAR(100),
    [code.concept.extension] NVARCHAR(MAX),
    [code.concept.coding] NVARCHAR(MAX),
    [code.concept.text] NVARCHAR(4000),
    [code.reference.id] NVARCHAR(100),
    [code.reference.extension] NVARCHAR(MAX),
    [code.reference.reference] NVARCHAR(4000),
    [code.reference.type] VARCHAR(256),
    [code.reference.identifier] NVARCHAR(MAX),
    [code.reference.display] NVARCHAR(4000),
    [description] NVARCHAR(4000),
    [expiry] VARCHAR(64),
    [quantity.id] NVARCHAR(100),
    [quantity.extension] NVARCHAR(MAX),
    [quantity.value] float,
    [quantity.comparator] NVARCHAR(64),
    [quantity.unit] NVARCHAR(100),
    [quantity.system] VARCHAR(256),
    [quantity.code] NVARCHAR(4000),
    [ingredient] VARCHAR(MAX),
) WITH (
    LOCATION='/Substance/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.SubstanceIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'Substance/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.SubstanceCategory AS
SELECT
    [id],
    [category.JSON],
    [category.id],
    [category.extension],
    [category.coding],
    [category.text]
FROM openrowset (
        BULK 'Substance/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [category.JSON]  VARCHAR(MAX) '$.category'
    ) AS rowset
    CROSS APPLY openjson (rowset.[category.JSON]) with (
        [category.id]                  NVARCHAR(100)       '$.id',
        [category.extension]           NVARCHAR(MAX)       '$.extension',
        [category.coding]              NVARCHAR(MAX)       '$.coding' AS JSON,
        [category.text]                NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.SubstanceIngredient AS
SELECT
    [id],
    [ingredient.JSON],
    [ingredient.id],
    [ingredient.extension],
    [ingredient.modifierExtension],
    [ingredient.quantity.id],
    [ingredient.quantity.extension],
    [ingredient.quantity.numerator],
    [ingredient.quantity.denominator],
    [ingredient.substance.codeableConcept.id],
    [ingredient.substance.codeableConcept.extension],
    [ingredient.substance.codeableConcept.coding],
    [ingredient.substance.codeableConcept.text],
    [ingredient.substance.reference.id],
    [ingredient.substance.reference.extension],
    [ingredient.substance.reference.reference],
    [ingredient.substance.reference.type],
    [ingredient.substance.reference.identifier],
    [ingredient.substance.reference.display]
FROM openrowset (
        BULK 'Substance/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [ingredient.JSON]  VARCHAR(MAX) '$.ingredient'
    ) AS rowset
    CROSS APPLY openjson (rowset.[ingredient.JSON]) with (
        [ingredient.id]                NVARCHAR(100)       '$.id',
        [ingredient.extension]         NVARCHAR(MAX)       '$.extension',
        [ingredient.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [ingredient.quantity.id]       NVARCHAR(100)       '$.quantity.id',
        [ingredient.quantity.extension] NVARCHAR(MAX)       '$.quantity.extension',
        [ingredient.quantity.numerator] NVARCHAR(MAX)       '$.quantity.numerator',
        [ingredient.quantity.denominator] NVARCHAR(MAX)       '$.quantity.denominator',
        [ingredient.substance.codeableConcept.id] NVARCHAR(100)       '$.substance.codeableConcept.id',
        [ingredient.substance.codeableConcept.extension] NVARCHAR(MAX)       '$.substance.codeableConcept.extension',
        [ingredient.substance.codeableConcept.coding] NVARCHAR(MAX)       '$.substance.codeableConcept.coding',
        [ingredient.substance.codeableConcept.text] NVARCHAR(4000)      '$.substance.codeableConcept.text',
        [ingredient.substance.reference.id] NVARCHAR(100)       '$.substance.reference.id',
        [ingredient.substance.reference.extension] NVARCHAR(MAX)       '$.substance.reference.extension',
        [ingredient.substance.reference.reference] NVARCHAR(4000)      '$.substance.reference.reference',
        [ingredient.substance.reference.type] VARCHAR(256)        '$.substance.reference.type',
        [ingredient.substance.reference.identifier] NVARCHAR(MAX)       '$.substance.reference.identifier',
        [ingredient.substance.reference.display] NVARCHAR(4000)      '$.substance.reference.display'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[SubstanceDefinition] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [version] NVARCHAR(100),
    [status.id] NVARCHAR(100),
    [status.extension] NVARCHAR(MAX),
    [status.coding] VARCHAR(MAX),
    [status.text] NVARCHAR(4000),
    [classification] VARCHAR(MAX),
    [domain.id] NVARCHAR(100),
    [domain.extension] NVARCHAR(MAX),
    [domain.coding] VARCHAR(MAX),
    [domain.text] NVARCHAR(4000),
    [grade] VARCHAR(MAX),
    [description] NVARCHAR(MAX),
    [informationSource] VARCHAR(MAX),
    [note] VARCHAR(MAX),
    [manufacturer] VARCHAR(MAX),
    [supplier] VARCHAR(MAX),
    [moiety] VARCHAR(MAX),
    [property] VARCHAR(MAX),
    [referenceInformation.id] NVARCHAR(100),
    [referenceInformation.extension] NVARCHAR(MAX),
    [referenceInformation.reference] NVARCHAR(4000),
    [referenceInformation.type] VARCHAR(256),
    [referenceInformation.identifier.id] NVARCHAR(100),
    [referenceInformation.identifier.extension] NVARCHAR(MAX),
    [referenceInformation.identifier.use] NVARCHAR(64),
    [referenceInformation.identifier.type] NVARCHAR(MAX),
    [referenceInformation.identifier.system] VARCHAR(256),
    [referenceInformation.identifier.value] NVARCHAR(4000),
    [referenceInformation.identifier.period] NVARCHAR(MAX),
    [referenceInformation.identifier.assigner] NVARCHAR(MAX),
    [referenceInformation.display] NVARCHAR(4000),
    [molecularWeight] VARCHAR(MAX),
    [structure.id] NVARCHAR(100),
    [structure.extension] NVARCHAR(MAX),
    [structure.modifierExtension] NVARCHAR(MAX),
    [structure.stereochemistry.id] NVARCHAR(100),
    [structure.stereochemistry.extension] NVARCHAR(MAX),
    [structure.stereochemistry.coding] NVARCHAR(MAX),
    [structure.stereochemistry.text] NVARCHAR(4000),
    [structure.opticalActivity.id] NVARCHAR(100),
    [structure.opticalActivity.extension] NVARCHAR(MAX),
    [structure.opticalActivity.coding] NVARCHAR(MAX),
    [structure.opticalActivity.text] NVARCHAR(4000),
    [structure.molecularFormula] NVARCHAR(500),
    [structure.molecularFormulaByMoiety] NVARCHAR(500),
    [structure.molecularWeight.id] NVARCHAR(100),
    [structure.molecularWeight.extension] NVARCHAR(MAX),
    [structure.molecularWeight.modifierExtension] NVARCHAR(MAX),
    [structure.molecularWeight.method] NVARCHAR(MAX),
    [structure.molecularWeight.type] NVARCHAR(MAX),
    [structure.molecularWeight.amount] NVARCHAR(MAX),
    [structure.technique] VARCHAR(MAX),
    [structure.sourceDocument] VARCHAR(MAX),
    [structure.representation] VARCHAR(MAX),
    [code] VARCHAR(MAX),
    [name] VARCHAR(MAX),
    [relationship] VARCHAR(MAX),
    [nucleicAcid.id] NVARCHAR(100),
    [nucleicAcid.extension] NVARCHAR(MAX),
    [nucleicAcid.reference] NVARCHAR(4000),
    [nucleicAcid.type] VARCHAR(256),
    [nucleicAcid.identifier.id] NVARCHAR(100),
    [nucleicAcid.identifier.extension] NVARCHAR(MAX),
    [nucleicAcid.identifier.use] NVARCHAR(64),
    [nucleicAcid.identifier.type] NVARCHAR(MAX),
    [nucleicAcid.identifier.system] VARCHAR(256),
    [nucleicAcid.identifier.value] NVARCHAR(4000),
    [nucleicAcid.identifier.period] NVARCHAR(MAX),
    [nucleicAcid.identifier.assigner] NVARCHAR(MAX),
    [nucleicAcid.display] NVARCHAR(4000),
    [polymer.id] NVARCHAR(100),
    [polymer.extension] NVARCHAR(MAX),
    [polymer.reference] NVARCHAR(4000),
    [polymer.type] VARCHAR(256),
    [polymer.identifier.id] NVARCHAR(100),
    [polymer.identifier.extension] NVARCHAR(MAX),
    [polymer.identifier.use] NVARCHAR(64),
    [polymer.identifier.type] NVARCHAR(MAX),
    [polymer.identifier.system] VARCHAR(256),
    [polymer.identifier.value] NVARCHAR(4000),
    [polymer.identifier.period] NVARCHAR(MAX),
    [polymer.identifier.assigner] NVARCHAR(MAX),
    [polymer.display] NVARCHAR(4000),
    [protein.id] NVARCHAR(100),
    [protein.extension] NVARCHAR(MAX),
    [protein.reference] NVARCHAR(4000),
    [protein.type] VARCHAR(256),
    [protein.identifier.id] NVARCHAR(100),
    [protein.identifier.extension] NVARCHAR(MAX),
    [protein.identifier.use] NVARCHAR(64),
    [protein.identifier.type] NVARCHAR(MAX),
    [protein.identifier.system] VARCHAR(256),
    [protein.identifier.value] NVARCHAR(4000),
    [protein.identifier.period] NVARCHAR(MAX),
    [protein.identifier.assigner] NVARCHAR(MAX),
    [protein.display] NVARCHAR(4000),
    [sourceMaterial.id] NVARCHAR(100),
    [sourceMaterial.extension] NVARCHAR(MAX),
    [sourceMaterial.modifierExtension] NVARCHAR(MAX),
    [sourceMaterial.type.id] NVARCHAR(100),
    [sourceMaterial.type.extension] NVARCHAR(MAX),
    [sourceMaterial.type.coding] NVARCHAR(MAX),
    [sourceMaterial.type.text] NVARCHAR(4000),
    [sourceMaterial.genus.id] NVARCHAR(100),
    [sourceMaterial.genus.extension] NVARCHAR(MAX),
    [sourceMaterial.genus.coding] NVARCHAR(MAX),
    [sourceMaterial.genus.text] NVARCHAR(4000),
    [sourceMaterial.species.id] NVARCHAR(100),
    [sourceMaterial.species.extension] NVARCHAR(MAX),
    [sourceMaterial.species.coding] NVARCHAR(MAX),
    [sourceMaterial.species.text] NVARCHAR(4000),
    [sourceMaterial.part.id] NVARCHAR(100),
    [sourceMaterial.part.extension] NVARCHAR(MAX),
    [sourceMaterial.part.coding] NVARCHAR(MAX),
    [sourceMaterial.part.text] NVARCHAR(4000),
    [sourceMaterial.countryOfOrigin] VARCHAR(MAX),
) WITH (
    LOCATION='/SubstanceDefinition/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.SubstanceDefinitionIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'SubstanceDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.SubstanceDefinitionClassification AS
SELECT
    [id],
    [classification.JSON],
    [classification.id],
    [classification.extension],
    [classification.coding],
    [classification.text]
FROM openrowset (
        BULK 'SubstanceDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [classification.JSON]  VARCHAR(MAX) '$.classification'
    ) AS rowset
    CROSS APPLY openjson (rowset.[classification.JSON]) with (
        [classification.id]            NVARCHAR(100)       '$.id',
        [classification.extension]     NVARCHAR(MAX)       '$.extension',
        [classification.coding]        NVARCHAR(MAX)       '$.coding' AS JSON,
        [classification.text]          NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.SubstanceDefinitionGrade AS
SELECT
    [id],
    [grade.JSON],
    [grade.id],
    [grade.extension],
    [grade.coding],
    [grade.text]
FROM openrowset (
        BULK 'SubstanceDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [grade.JSON]  VARCHAR(MAX) '$.grade'
    ) AS rowset
    CROSS APPLY openjson (rowset.[grade.JSON]) with (
        [grade.id]                     NVARCHAR(100)       '$.id',
        [grade.extension]              NVARCHAR(MAX)       '$.extension',
        [grade.coding]                 NVARCHAR(MAX)       '$.coding' AS JSON,
        [grade.text]                   NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.SubstanceDefinitionInformationSource AS
SELECT
    [id],
    [informationSource.JSON],
    [informationSource.id],
    [informationSource.extension],
    [informationSource.reference],
    [informationSource.type],
    [informationSource.identifier.id],
    [informationSource.identifier.extension],
    [informationSource.identifier.use],
    [informationSource.identifier.type],
    [informationSource.identifier.system],
    [informationSource.identifier.value],
    [informationSource.identifier.period],
    [informationSource.identifier.assigner],
    [informationSource.display]
FROM openrowset (
        BULK 'SubstanceDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [informationSource.JSON]  VARCHAR(MAX) '$.informationSource'
    ) AS rowset
    CROSS APPLY openjson (rowset.[informationSource.JSON]) with (
        [informationSource.id]         NVARCHAR(100)       '$.id',
        [informationSource.extension]  NVARCHAR(MAX)       '$.extension',
        [informationSource.reference]  NVARCHAR(4000)      '$.reference',
        [informationSource.type]       VARCHAR(256)        '$.type',
        [informationSource.identifier.id] NVARCHAR(100)       '$.identifier.id',
        [informationSource.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [informationSource.identifier.use] NVARCHAR(64)        '$.identifier.use',
        [informationSource.identifier.type] NVARCHAR(MAX)       '$.identifier.type',
        [informationSource.identifier.system] VARCHAR(256)        '$.identifier.system',
        [informationSource.identifier.value] NVARCHAR(4000)      '$.identifier.value',
        [informationSource.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [informationSource.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [informationSource.display]    NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.SubstanceDefinitionNote AS
SELECT
    [id],
    [note.JSON],
    [note.id],
    [note.extension],
    [note.time],
    [note.text],
    [note.author.reference.id],
    [note.author.reference.extension],
    [note.author.reference.reference],
    [note.author.reference.type],
    [note.author.reference.identifier],
    [note.author.reference.display],
    [note.author.string]
FROM openrowset (
        BULK 'SubstanceDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [note.JSON]  VARCHAR(MAX) '$.note'
    ) AS rowset
    CROSS APPLY openjson (rowset.[note.JSON]) with (
        [note.id]                      NVARCHAR(100)       '$.id',
        [note.extension]               NVARCHAR(MAX)       '$.extension',
        [note.time]                    VARCHAR(64)         '$.time',
        [note.text]                    NVARCHAR(MAX)       '$.text',
        [note.author.reference.id]     NVARCHAR(100)       '$.author.reference.id',
        [note.author.reference.extension] NVARCHAR(MAX)       '$.author.reference.extension',
        [note.author.reference.reference] NVARCHAR(4000)      '$.author.reference.reference',
        [note.author.reference.type]   VARCHAR(256)        '$.author.reference.type',
        [note.author.reference.identifier] NVARCHAR(MAX)       '$.author.reference.identifier',
        [note.author.reference.display] NVARCHAR(4000)      '$.author.reference.display',
        [note.author.string]           NVARCHAR(4000)      '$.author.string'
    ) j

GO

CREATE VIEW fhir.SubstanceDefinitionManufacturer AS
SELECT
    [id],
    [manufacturer.JSON],
    [manufacturer.id],
    [manufacturer.extension],
    [manufacturer.reference],
    [manufacturer.type],
    [manufacturer.identifier.id],
    [manufacturer.identifier.extension],
    [manufacturer.identifier.use],
    [manufacturer.identifier.type],
    [manufacturer.identifier.system],
    [manufacturer.identifier.value],
    [manufacturer.identifier.period],
    [manufacturer.identifier.assigner],
    [manufacturer.display]
FROM openrowset (
        BULK 'SubstanceDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [manufacturer.JSON]  VARCHAR(MAX) '$.manufacturer'
    ) AS rowset
    CROSS APPLY openjson (rowset.[manufacturer.JSON]) with (
        [manufacturer.id]              NVARCHAR(100)       '$.id',
        [manufacturer.extension]       NVARCHAR(MAX)       '$.extension',
        [manufacturer.reference]       NVARCHAR(4000)      '$.reference',
        [manufacturer.type]            VARCHAR(256)        '$.type',
        [manufacturer.identifier.id]   NVARCHAR(100)       '$.identifier.id',
        [manufacturer.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [manufacturer.identifier.use]  NVARCHAR(64)        '$.identifier.use',
        [manufacturer.identifier.type] NVARCHAR(MAX)       '$.identifier.type',
        [manufacturer.identifier.system] VARCHAR(256)        '$.identifier.system',
        [manufacturer.identifier.value] NVARCHAR(4000)      '$.identifier.value',
        [manufacturer.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [manufacturer.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [manufacturer.display]         NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.SubstanceDefinitionSupplier AS
SELECT
    [id],
    [supplier.JSON],
    [supplier.id],
    [supplier.extension],
    [supplier.reference],
    [supplier.type],
    [supplier.identifier.id],
    [supplier.identifier.extension],
    [supplier.identifier.use],
    [supplier.identifier.type],
    [supplier.identifier.system],
    [supplier.identifier.value],
    [supplier.identifier.period],
    [supplier.identifier.assigner],
    [supplier.display]
FROM openrowset (
        BULK 'SubstanceDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [supplier.JSON]  VARCHAR(MAX) '$.supplier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[supplier.JSON]) with (
        [supplier.id]                  NVARCHAR(100)       '$.id',
        [supplier.extension]           NVARCHAR(MAX)       '$.extension',
        [supplier.reference]           NVARCHAR(4000)      '$.reference',
        [supplier.type]                VARCHAR(256)        '$.type',
        [supplier.identifier.id]       NVARCHAR(100)       '$.identifier.id',
        [supplier.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [supplier.identifier.use]      NVARCHAR(64)        '$.identifier.use',
        [supplier.identifier.type]     NVARCHAR(MAX)       '$.identifier.type',
        [supplier.identifier.system]   VARCHAR(256)        '$.identifier.system',
        [supplier.identifier.value]    NVARCHAR(4000)      '$.identifier.value',
        [supplier.identifier.period]   NVARCHAR(MAX)       '$.identifier.period',
        [supplier.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [supplier.display]             NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.SubstanceDefinitionMoiety AS
SELECT
    [id],
    [moiety.JSON],
    [moiety.id],
    [moiety.extension],
    [moiety.modifierExtension],
    [moiety.role.id],
    [moiety.role.extension],
    [moiety.role.coding],
    [moiety.role.text],
    [moiety.identifier.id],
    [moiety.identifier.extension],
    [moiety.identifier.use],
    [moiety.identifier.type],
    [moiety.identifier.system],
    [moiety.identifier.value],
    [moiety.identifier.period],
    [moiety.identifier.assigner],
    [moiety.name],
    [moiety.stereochemistry.id],
    [moiety.stereochemistry.extension],
    [moiety.stereochemistry.coding],
    [moiety.stereochemistry.text],
    [moiety.opticalActivity.id],
    [moiety.opticalActivity.extension],
    [moiety.opticalActivity.coding],
    [moiety.opticalActivity.text],
    [moiety.molecularFormula],
    [moiety.amountType.id],
    [moiety.amountType.extension],
    [moiety.amountType.coding],
    [moiety.amountType.text],
    [moiety.amount.quantity.id],
    [moiety.amount.quantity.extension],
    [moiety.amount.quantity.value],
    [moiety.amount.quantity.comparator],
    [moiety.amount.quantity.unit],
    [moiety.amount.quantity.system],
    [moiety.amount.quantity.code],
    [moiety.amount.string]
FROM openrowset (
        BULK 'SubstanceDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [moiety.JSON]  VARCHAR(MAX) '$.moiety'
    ) AS rowset
    CROSS APPLY openjson (rowset.[moiety.JSON]) with (
        [moiety.id]                    NVARCHAR(100)       '$.id',
        [moiety.extension]             NVARCHAR(MAX)       '$.extension',
        [moiety.modifierExtension]     NVARCHAR(MAX)       '$.modifierExtension',
        [moiety.role.id]               NVARCHAR(100)       '$.role.id',
        [moiety.role.extension]        NVARCHAR(MAX)       '$.role.extension',
        [moiety.role.coding]           NVARCHAR(MAX)       '$.role.coding',
        [moiety.role.text]             NVARCHAR(4000)      '$.role.text',
        [moiety.identifier.id]         NVARCHAR(100)       '$.identifier.id',
        [moiety.identifier.extension]  NVARCHAR(MAX)       '$.identifier.extension',
        [moiety.identifier.use]        NVARCHAR(64)        '$.identifier.use',
        [moiety.identifier.type]       NVARCHAR(MAX)       '$.identifier.type',
        [moiety.identifier.system]     VARCHAR(256)        '$.identifier.system',
        [moiety.identifier.value]      NVARCHAR(4000)      '$.identifier.value',
        [moiety.identifier.period]     NVARCHAR(MAX)       '$.identifier.period',
        [moiety.identifier.assigner]   NVARCHAR(MAX)       '$.identifier.assigner',
        [moiety.name]                  NVARCHAR(500)       '$.name',
        [moiety.stereochemistry.id]    NVARCHAR(100)       '$.stereochemistry.id',
        [moiety.stereochemistry.extension] NVARCHAR(MAX)       '$.stereochemistry.extension',
        [moiety.stereochemistry.coding] NVARCHAR(MAX)       '$.stereochemistry.coding',
        [moiety.stereochemistry.text]  NVARCHAR(4000)      '$.stereochemistry.text',
        [moiety.opticalActivity.id]    NVARCHAR(100)       '$.opticalActivity.id',
        [moiety.opticalActivity.extension] NVARCHAR(MAX)       '$.opticalActivity.extension',
        [moiety.opticalActivity.coding] NVARCHAR(MAX)       '$.opticalActivity.coding',
        [moiety.opticalActivity.text]  NVARCHAR(4000)      '$.opticalActivity.text',
        [moiety.molecularFormula]      NVARCHAR(500)       '$.molecularFormula',
        [moiety.amountType.id]         NVARCHAR(100)       '$.amountType.id',
        [moiety.amountType.extension]  NVARCHAR(MAX)       '$.amountType.extension',
        [moiety.amountType.coding]     NVARCHAR(MAX)       '$.amountType.coding',
        [moiety.amountType.text]       NVARCHAR(4000)      '$.amountType.text',
        [moiety.amount.quantity.id]    NVARCHAR(100)       '$.amount.quantity.id',
        [moiety.amount.quantity.extension] NVARCHAR(MAX)       '$.amount.quantity.extension',
        [moiety.amount.quantity.value] float               '$.amount.quantity.value',
        [moiety.amount.quantity.comparator] NVARCHAR(64)        '$.amount.quantity.comparator',
        [moiety.amount.quantity.unit]  NVARCHAR(100)       '$.amount.quantity.unit',
        [moiety.amount.quantity.system] VARCHAR(256)        '$.amount.quantity.system',
        [moiety.amount.quantity.code]  NVARCHAR(4000)      '$.amount.quantity.code',
        [moiety.amount.string]         NVARCHAR(4000)      '$.amount.string'
    ) j

GO

CREATE VIEW fhir.SubstanceDefinitionProperty AS
SELECT
    [id],
    [property.JSON],
    [property.id],
    [property.extension],
    [property.modifierExtension],
    [property.type.id],
    [property.type.extension],
    [property.type.coding],
    [property.type.text],
    [property.value.codeableConcept.id],
    [property.value.codeableConcept.extension],
    [property.value.codeableConcept.coding],
    [property.value.codeableConcept.text],
    [property.value.quantity.id],
    [property.value.quantity.extension],
    [property.value.quantity.value],
    [property.value.quantity.comparator],
    [property.value.quantity.unit],
    [property.value.quantity.system],
    [property.value.quantity.code],
    [property.value.date],
    [property.value.boolean],
    [property.value.attachment.id],
    [property.value.attachment.extension],
    [property.value.attachment.contentType],
    [property.value.attachment.language],
    [property.value.attachment.data],
    [property.value.attachment.url],
    [property.value.attachment.size],
    [property.value.attachment.hash],
    [property.value.attachment.title],
    [property.value.attachment.creation],
    [property.value.attachment.height],
    [property.value.attachment.width],
    [property.value.attachment.frames],
    [property.value.attachment.duration],
    [property.value.attachment.pages]
FROM openrowset (
        BULK 'SubstanceDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [property.JSON]  VARCHAR(MAX) '$.property'
    ) AS rowset
    CROSS APPLY openjson (rowset.[property.JSON]) with (
        [property.id]                  NVARCHAR(100)       '$.id',
        [property.extension]           NVARCHAR(MAX)       '$.extension',
        [property.modifierExtension]   NVARCHAR(MAX)       '$.modifierExtension',
        [property.type.id]             NVARCHAR(100)       '$.type.id',
        [property.type.extension]      NVARCHAR(MAX)       '$.type.extension',
        [property.type.coding]         NVARCHAR(MAX)       '$.type.coding',
        [property.type.text]           NVARCHAR(4000)      '$.type.text',
        [property.value.codeableConcept.id] NVARCHAR(100)       '$.value.codeableConcept.id',
        [property.value.codeableConcept.extension] NVARCHAR(MAX)       '$.value.codeableConcept.extension',
        [property.value.codeableConcept.coding] NVARCHAR(MAX)       '$.value.codeableConcept.coding',
        [property.value.codeableConcept.text] NVARCHAR(4000)      '$.value.codeableConcept.text',
        [property.value.quantity.id]   NVARCHAR(100)       '$.value.quantity.id',
        [property.value.quantity.extension] NVARCHAR(MAX)       '$.value.quantity.extension',
        [property.value.quantity.value] float               '$.value.quantity.value',
        [property.value.quantity.comparator] NVARCHAR(64)        '$.value.quantity.comparator',
        [property.value.quantity.unit] NVARCHAR(100)       '$.value.quantity.unit',
        [property.value.quantity.system] VARCHAR(256)        '$.value.quantity.system',
        [property.value.quantity.code] NVARCHAR(4000)      '$.value.quantity.code',
        [property.value.date]          VARCHAR(64)         '$.value.date',
        [property.value.boolean]       bit                 '$.value.boolean',
        [property.value.attachment.id] NVARCHAR(100)       '$.value.attachment.id',
        [property.value.attachment.extension] NVARCHAR(MAX)       '$.value.attachment.extension',
        [property.value.attachment.contentType] NVARCHAR(100)       '$.value.attachment.contentType',
        [property.value.attachment.language] NVARCHAR(100)       '$.value.attachment.language',
        [property.value.attachment.data] NVARCHAR(MAX)       '$.value.attachment.data',
        [property.value.attachment.url] VARCHAR(256)        '$.value.attachment.url',
        [property.value.attachment.size] NVARCHAR(MAX)       '$.value.attachment.size',
        [property.value.attachment.hash] NVARCHAR(MAX)       '$.value.attachment.hash',
        [property.value.attachment.title] NVARCHAR(4000)      '$.value.attachment.title',
        [property.value.attachment.creation] VARCHAR(64)         '$.value.attachment.creation',
        [property.value.attachment.height] bigint              '$.value.attachment.height',
        [property.value.attachment.width] bigint              '$.value.attachment.width',
        [property.value.attachment.frames] bigint              '$.value.attachment.frames',
        [property.value.attachment.duration] float               '$.value.attachment.duration',
        [property.value.attachment.pages] bigint              '$.value.attachment.pages'
    ) j

GO

CREATE VIEW fhir.SubstanceDefinitionMolecularWeight AS
SELECT
    [id],
    [molecularWeight.JSON],
    [molecularWeight.id],
    [molecularWeight.extension],
    [molecularWeight.modifierExtension],
    [molecularWeight.method.id],
    [molecularWeight.method.extension],
    [molecularWeight.method.coding],
    [molecularWeight.method.text],
    [molecularWeight.type.id],
    [molecularWeight.type.extension],
    [molecularWeight.type.coding],
    [molecularWeight.type.text],
    [molecularWeight.amount.id],
    [molecularWeight.amount.extension],
    [molecularWeight.amount.value],
    [molecularWeight.amount.comparator],
    [molecularWeight.amount.unit],
    [molecularWeight.amount.system],
    [molecularWeight.amount.code]
FROM openrowset (
        BULK 'SubstanceDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [molecularWeight.JSON]  VARCHAR(MAX) '$.molecularWeight'
    ) AS rowset
    CROSS APPLY openjson (rowset.[molecularWeight.JSON]) with (
        [molecularWeight.id]           NVARCHAR(100)       '$.id',
        [molecularWeight.extension]    NVARCHAR(MAX)       '$.extension',
        [molecularWeight.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [molecularWeight.method.id]    NVARCHAR(100)       '$.method.id',
        [molecularWeight.method.extension] NVARCHAR(MAX)       '$.method.extension',
        [molecularWeight.method.coding] NVARCHAR(MAX)       '$.method.coding',
        [molecularWeight.method.text]  NVARCHAR(4000)      '$.method.text',
        [molecularWeight.type.id]      NVARCHAR(100)       '$.type.id',
        [molecularWeight.type.extension] NVARCHAR(MAX)       '$.type.extension',
        [molecularWeight.type.coding]  NVARCHAR(MAX)       '$.type.coding',
        [molecularWeight.type.text]    NVARCHAR(4000)      '$.type.text',
        [molecularWeight.amount.id]    NVARCHAR(100)       '$.amount.id',
        [molecularWeight.amount.extension] NVARCHAR(MAX)       '$.amount.extension',
        [molecularWeight.amount.value] float               '$.amount.value',
        [molecularWeight.amount.comparator] NVARCHAR(64)        '$.amount.comparator',
        [molecularWeight.amount.unit]  NVARCHAR(100)       '$.amount.unit',
        [molecularWeight.amount.system] VARCHAR(256)        '$.amount.system',
        [molecularWeight.amount.code]  NVARCHAR(4000)      '$.amount.code'
    ) j

GO

CREATE VIEW fhir.SubstanceDefinitionCode AS
SELECT
    [id],
    [code.JSON],
    [code.id],
    [code.extension],
    [code.modifierExtension],
    [code.code.id],
    [code.code.extension],
    [code.code.coding],
    [code.code.text],
    [code.status.id],
    [code.status.extension],
    [code.status.coding],
    [code.status.text],
    [code.statusDate],
    [code.note],
    [code.source]
FROM openrowset (
        BULK 'SubstanceDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [code.JSON]  VARCHAR(MAX) '$.code'
    ) AS rowset
    CROSS APPLY openjson (rowset.[code.JSON]) with (
        [code.id]                      NVARCHAR(100)       '$.id',
        [code.extension]               NVARCHAR(MAX)       '$.extension',
        [code.modifierExtension]       NVARCHAR(MAX)       '$.modifierExtension',
        [code.code.id]                 NVARCHAR(100)       '$.code.id',
        [code.code.extension]          NVARCHAR(MAX)       '$.code.extension',
        [code.code.coding]             NVARCHAR(MAX)       '$.code.coding',
        [code.code.text]               NVARCHAR(4000)      '$.code.text',
        [code.status.id]               NVARCHAR(100)       '$.status.id',
        [code.status.extension]        NVARCHAR(MAX)       '$.status.extension',
        [code.status.coding]           NVARCHAR(MAX)       '$.status.coding',
        [code.status.text]             NVARCHAR(4000)      '$.status.text',
        [code.statusDate]              VARCHAR(64)         '$.statusDate',
        [code.note]                    NVARCHAR(MAX)       '$.note' AS JSON,
        [code.source]                  NVARCHAR(MAX)       '$.source' AS JSON
    ) j

GO

CREATE VIEW fhir.SubstanceDefinitionName AS
SELECT
    [id],
    [name.JSON],
    [name.id],
    [name.extension],
    [name.modifierExtension],
    [name.name],
    [name.type.id],
    [name.type.extension],
    [name.type.coding],
    [name.type.text],
    [name.status.id],
    [name.status.extension],
    [name.status.coding],
    [name.status.text],
    [name.preferred],
    [name.language],
    [name.domain],
    [name.jurisdiction],
    [name.synonym],
    [name.translation],
    [name.official],
    [name.source]
FROM openrowset (
        BULK 'SubstanceDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [name.JSON]  VARCHAR(MAX) '$.name'
    ) AS rowset
    CROSS APPLY openjson (rowset.[name.JSON]) with (
        [name.id]                      NVARCHAR(100)       '$.id',
        [name.extension]               NVARCHAR(MAX)       '$.extension',
        [name.modifierExtension]       NVARCHAR(MAX)       '$.modifierExtension',
        [name.name]                    NVARCHAR(500)       '$.name',
        [name.type.id]                 NVARCHAR(100)       '$.type.id',
        [name.type.extension]          NVARCHAR(MAX)       '$.type.extension',
        [name.type.coding]             NVARCHAR(MAX)       '$.type.coding',
        [name.type.text]               NVARCHAR(4000)      '$.type.text',
        [name.status.id]               NVARCHAR(100)       '$.status.id',
        [name.status.extension]        NVARCHAR(MAX)       '$.status.extension',
        [name.status.coding]           NVARCHAR(MAX)       '$.status.coding',
        [name.status.text]             NVARCHAR(4000)      '$.status.text',
        [name.preferred]               bit                 '$.preferred',
        [name.language]                NVARCHAR(MAX)       '$.language' AS JSON,
        [name.domain]                  NVARCHAR(MAX)       '$.domain' AS JSON,
        [name.jurisdiction]            NVARCHAR(MAX)       '$.jurisdiction' AS JSON,
        [name.synonym]                 NVARCHAR(MAX)       '$.synonym' AS JSON,
        [name.translation]             NVARCHAR(MAX)       '$.translation' AS JSON,
        [name.official]                NVARCHAR(MAX)       '$.official' AS JSON,
        [name.source]                  NVARCHAR(MAX)       '$.source' AS JSON
    ) j

GO

CREATE VIEW fhir.SubstanceDefinitionRelationship AS
SELECT
    [id],
    [relationship.JSON],
    [relationship.id],
    [relationship.extension],
    [relationship.modifierExtension],
    [relationship.type.id],
    [relationship.type.extension],
    [relationship.type.coding],
    [relationship.type.text],
    [relationship.isDefining],
    [relationship.amountRatioHighLimit.id],
    [relationship.amountRatioHighLimit.extension],
    [relationship.amountRatioHighLimit.numerator],
    [relationship.amountRatioHighLimit.denominator],
    [relationship.amountType.id],
    [relationship.amountType.extension],
    [relationship.amountType.coding],
    [relationship.amountType.text],
    [relationship.source],
    [relationship.substanceDefinition.reference.id],
    [relationship.substanceDefinition.reference.extension],
    [relationship.substanceDefinition.reference.reference],
    [relationship.substanceDefinition.reference.type],
    [relationship.substanceDefinition.reference.identifier],
    [relationship.substanceDefinition.reference.display],
    [relationship.substanceDefinition.codeableConcept.id],
    [relationship.substanceDefinition.codeableConcept.extension],
    [relationship.substanceDefinition.codeableConcept.coding],
    [relationship.substanceDefinition.codeableConcept.text],
    [relationship.amount.quantity.id],
    [relationship.amount.quantity.extension],
    [relationship.amount.quantity.value],
    [relationship.amount.quantity.comparator],
    [relationship.amount.quantity.unit],
    [relationship.amount.quantity.system],
    [relationship.amount.quantity.code],
    [relationship.amount.ratio.id],
    [relationship.amount.ratio.extension],
    [relationship.amount.ratio.numerator],
    [relationship.amount.ratio.denominator],
    [relationship.amount.string]
FROM openrowset (
        BULK 'SubstanceDefinition/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [relationship.JSON]  VARCHAR(MAX) '$.relationship'
    ) AS rowset
    CROSS APPLY openjson (rowset.[relationship.JSON]) with (
        [relationship.id]              NVARCHAR(100)       '$.id',
        [relationship.extension]       NVARCHAR(MAX)       '$.extension',
        [relationship.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [relationship.type.id]         NVARCHAR(100)       '$.type.id',
        [relationship.type.extension]  NVARCHAR(MAX)       '$.type.extension',
        [relationship.type.coding]     NVARCHAR(MAX)       '$.type.coding',
        [relationship.type.text]       NVARCHAR(4000)      '$.type.text',
        [relationship.isDefining]      bit                 '$.isDefining',
        [relationship.amountRatioHighLimit.id] NVARCHAR(100)       '$.amountRatioHighLimit.id',
        [relationship.amountRatioHighLimit.extension] NVARCHAR(MAX)       '$.amountRatioHighLimit.extension',
        [relationship.amountRatioHighLimit.numerator] NVARCHAR(MAX)       '$.amountRatioHighLimit.numerator',
        [relationship.amountRatioHighLimit.denominator] NVARCHAR(MAX)       '$.amountRatioHighLimit.denominator',
        [relationship.amountType.id]   NVARCHAR(100)       '$.amountType.id',
        [relationship.amountType.extension] NVARCHAR(MAX)       '$.amountType.extension',
        [relationship.amountType.coding] NVARCHAR(MAX)       '$.amountType.coding',
        [relationship.amountType.text] NVARCHAR(4000)      '$.amountType.text',
        [relationship.source]          NVARCHAR(MAX)       '$.source' AS JSON,
        [relationship.substanceDefinition.reference.id] NVARCHAR(100)       '$.substanceDefinition.reference.id',
        [relationship.substanceDefinition.reference.extension] NVARCHAR(MAX)       '$.substanceDefinition.reference.extension',
        [relationship.substanceDefinition.reference.reference] NVARCHAR(4000)      '$.substanceDefinition.reference.reference',
        [relationship.substanceDefinition.reference.type] VARCHAR(256)        '$.substanceDefinition.reference.type',
        [relationship.substanceDefinition.reference.identifier] NVARCHAR(MAX)       '$.substanceDefinition.reference.identifier',
        [relationship.substanceDefinition.reference.display] NVARCHAR(4000)      '$.substanceDefinition.reference.display',
        [relationship.substanceDefinition.codeableConcept.id] NVARCHAR(100)       '$.substanceDefinition.codeableConcept.id',
        [relationship.substanceDefinition.codeableConcept.extension] NVARCHAR(MAX)       '$.substanceDefinition.codeableConcept.extension',
        [relationship.substanceDefinition.codeableConcept.coding] NVARCHAR(MAX)       '$.substanceDefinition.codeableConcept.coding',
        [relationship.substanceDefinition.codeableConcept.text] NVARCHAR(4000)      '$.substanceDefinition.codeableConcept.text',
        [relationship.amount.quantity.id] NVARCHAR(100)       '$.amount.quantity.id',
        [relationship.amount.quantity.extension] NVARCHAR(MAX)       '$.amount.quantity.extension',
        [relationship.amount.quantity.value] float               '$.amount.quantity.value',
        [relationship.amount.quantity.comparator] NVARCHAR(64)        '$.amount.quantity.comparator',
        [relationship.amount.quantity.unit] NVARCHAR(100)       '$.amount.quantity.unit',
        [relationship.amount.quantity.system] VARCHAR(256)        '$.amount.quantity.system',
        [relationship.amount.quantity.code] NVARCHAR(4000)      '$.amount.quantity.code',
        [relationship.amount.ratio.id] NVARCHAR(100)       '$.amount.ratio.id',
        [relationship.amount.ratio.extension] NVARCHAR(MAX)       '$.amount.ratio.extension',
        [relationship.amount.ratio.numerator] NVARCHAR(MAX)       '$.amount.ratio.numerator',
        [relationship.amount.ratio.denominator] NVARCHAR(MAX)       '$.amount.ratio.denominator',
        [relationship.amount.string]   NVARCHAR(4000)      '$.amount.string'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[SubstanceNucleicAcid] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [sequenceType.id] NVARCHAR(100),
    [sequenceType.extension] NVARCHAR(MAX),
    [sequenceType.coding] VARCHAR(MAX),
    [sequenceType.text] NVARCHAR(4000),
    [numberOfSubunits] bigint,
    [areaOfHybridisation] NVARCHAR(4000),
    [oligoNucleotideType.id] NVARCHAR(100),
    [oligoNucleotideType.extension] NVARCHAR(MAX),
    [oligoNucleotideType.coding] VARCHAR(MAX),
    [oligoNucleotideType.text] NVARCHAR(4000),
    [subunit] VARCHAR(MAX),
) WITH (
    LOCATION='/SubstanceNucleicAcid/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.SubstanceNucleicAcidSubunit AS
SELECT
    [id],
    [subunit.JSON],
    [subunit.id],
    [subunit.extension],
    [subunit.modifierExtension],
    [subunit.subunit],
    [subunit.sequence],
    [subunit.length],
    [subunit.sequenceAttachment.id],
    [subunit.sequenceAttachment.extension],
    [subunit.sequenceAttachment.contentType],
    [subunit.sequenceAttachment.language],
    [subunit.sequenceAttachment.data],
    [subunit.sequenceAttachment.url],
    [subunit.sequenceAttachment.size],
    [subunit.sequenceAttachment.hash],
    [subunit.sequenceAttachment.title],
    [subunit.sequenceAttachment.creation],
    [subunit.sequenceAttachment.height],
    [subunit.sequenceAttachment.width],
    [subunit.sequenceAttachment.frames],
    [subunit.sequenceAttachment.duration],
    [subunit.sequenceAttachment.pages],
    [subunit.fivePrime.id],
    [subunit.fivePrime.extension],
    [subunit.fivePrime.coding],
    [subunit.fivePrime.text],
    [subunit.threePrime.id],
    [subunit.threePrime.extension],
    [subunit.threePrime.coding],
    [subunit.threePrime.text],
    [subunit.linkage],
    [subunit.sugar]
FROM openrowset (
        BULK 'SubstanceNucleicAcid/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [subunit.JSON]  VARCHAR(MAX) '$.subunit'
    ) AS rowset
    CROSS APPLY openjson (rowset.[subunit.JSON]) with (
        [subunit.id]                   NVARCHAR(100)       '$.id',
        [subunit.extension]            NVARCHAR(MAX)       '$.extension',
        [subunit.modifierExtension]    NVARCHAR(MAX)       '$.modifierExtension',
        [subunit.subunit]              bigint              '$.subunit',
        [subunit.sequence]             NVARCHAR(4000)      '$.sequence',
        [subunit.length]               bigint              '$.length',
        [subunit.sequenceAttachment.id] NVARCHAR(100)       '$.sequenceAttachment.id',
        [subunit.sequenceAttachment.extension] NVARCHAR(MAX)       '$.sequenceAttachment.extension',
        [subunit.sequenceAttachment.contentType] NVARCHAR(100)       '$.sequenceAttachment.contentType',
        [subunit.sequenceAttachment.language] NVARCHAR(100)       '$.sequenceAttachment.language',
        [subunit.sequenceAttachment.data] NVARCHAR(MAX)       '$.sequenceAttachment.data',
        [subunit.sequenceAttachment.url] VARCHAR(256)        '$.sequenceAttachment.url',
        [subunit.sequenceAttachment.size] NVARCHAR(MAX)       '$.sequenceAttachment.size',
        [subunit.sequenceAttachment.hash] NVARCHAR(MAX)       '$.sequenceAttachment.hash',
        [subunit.sequenceAttachment.title] NVARCHAR(4000)      '$.sequenceAttachment.title',
        [subunit.sequenceAttachment.creation] VARCHAR(64)         '$.sequenceAttachment.creation',
        [subunit.sequenceAttachment.height] bigint              '$.sequenceAttachment.height',
        [subunit.sequenceAttachment.width] bigint              '$.sequenceAttachment.width',
        [subunit.sequenceAttachment.frames] bigint              '$.sequenceAttachment.frames',
        [subunit.sequenceAttachment.duration] float               '$.sequenceAttachment.duration',
        [subunit.sequenceAttachment.pages] bigint              '$.sequenceAttachment.pages',
        [subunit.fivePrime.id]         NVARCHAR(100)       '$.fivePrime.id',
        [subunit.fivePrime.extension]  NVARCHAR(MAX)       '$.fivePrime.extension',
        [subunit.fivePrime.coding]     NVARCHAR(MAX)       '$.fivePrime.coding',
        [subunit.fivePrime.text]       NVARCHAR(4000)      '$.fivePrime.text',
        [subunit.threePrime.id]        NVARCHAR(100)       '$.threePrime.id',
        [subunit.threePrime.extension] NVARCHAR(MAX)       '$.threePrime.extension',
        [subunit.threePrime.coding]    NVARCHAR(MAX)       '$.threePrime.coding',
        [subunit.threePrime.text]      NVARCHAR(4000)      '$.threePrime.text',
        [subunit.linkage]              NVARCHAR(MAX)       '$.linkage' AS JSON,
        [subunit.sugar]                NVARCHAR(MAX)       '$.sugar' AS JSON
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[SubstancePolymer] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier.id] NVARCHAR(100),
    [identifier.extension] NVARCHAR(MAX),
    [identifier.use] NVARCHAR(64),
    [identifier.type.id] NVARCHAR(100),
    [identifier.type.extension] NVARCHAR(MAX),
    [identifier.type.coding] NVARCHAR(MAX),
    [identifier.type.text] NVARCHAR(4000),
    [identifier.system] VARCHAR(256),
    [identifier.value] NVARCHAR(4000),
    [identifier.period.id] NVARCHAR(100),
    [identifier.period.extension] NVARCHAR(MAX),
    [identifier.period.start] VARCHAR(64),
    [identifier.period.end] VARCHAR(64),
    [identifier.assigner.id] NVARCHAR(100),
    [identifier.assigner.extension] NVARCHAR(MAX),
    [identifier.assigner.reference] NVARCHAR(4000),
    [identifier.assigner.type] VARCHAR(256),
    [identifier.assigner.identifier] NVARCHAR(MAX),
    [identifier.assigner.display] NVARCHAR(4000),
    [class.id] NVARCHAR(100),
    [class.extension] NVARCHAR(MAX),
    [class.coding] VARCHAR(MAX),
    [class.text] NVARCHAR(4000),
    [geometry.id] NVARCHAR(100),
    [geometry.extension] NVARCHAR(MAX),
    [geometry.coding] VARCHAR(MAX),
    [geometry.text] NVARCHAR(4000),
    [copolymerConnectivity] VARCHAR(MAX),
    [modification] NVARCHAR(4000),
    [monomerSet] VARCHAR(MAX),
    [repeat] VARCHAR(MAX),
) WITH (
    LOCATION='/SubstancePolymer/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.SubstancePolymerCopolymerConnectivity AS
SELECT
    [id],
    [copolymerConnectivity.JSON],
    [copolymerConnectivity.id],
    [copolymerConnectivity.extension],
    [copolymerConnectivity.coding],
    [copolymerConnectivity.text]
FROM openrowset (
        BULK 'SubstancePolymer/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [copolymerConnectivity.JSON]  VARCHAR(MAX) '$.copolymerConnectivity'
    ) AS rowset
    CROSS APPLY openjson (rowset.[copolymerConnectivity.JSON]) with (
        [copolymerConnectivity.id]     NVARCHAR(100)       '$.id',
        [copolymerConnectivity.extension] NVARCHAR(MAX)       '$.extension',
        [copolymerConnectivity.coding] NVARCHAR(MAX)       '$.coding' AS JSON,
        [copolymerConnectivity.text]   NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.SubstancePolymerMonomerSet AS
SELECT
    [id],
    [monomerSet.JSON],
    [monomerSet.id],
    [monomerSet.extension],
    [monomerSet.modifierExtension],
    [monomerSet.ratioType.id],
    [monomerSet.ratioType.extension],
    [monomerSet.ratioType.coding],
    [monomerSet.ratioType.text],
    [monomerSet.startingMaterial]
FROM openrowset (
        BULK 'SubstancePolymer/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [monomerSet.JSON]  VARCHAR(MAX) '$.monomerSet'
    ) AS rowset
    CROSS APPLY openjson (rowset.[monomerSet.JSON]) with (
        [monomerSet.id]                NVARCHAR(100)       '$.id',
        [monomerSet.extension]         NVARCHAR(MAX)       '$.extension',
        [monomerSet.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [monomerSet.ratioType.id]      NVARCHAR(100)       '$.ratioType.id',
        [monomerSet.ratioType.extension] NVARCHAR(MAX)       '$.ratioType.extension',
        [monomerSet.ratioType.coding]  NVARCHAR(MAX)       '$.ratioType.coding',
        [monomerSet.ratioType.text]    NVARCHAR(4000)      '$.ratioType.text',
        [monomerSet.startingMaterial]  NVARCHAR(MAX)       '$.startingMaterial' AS JSON
    ) j

GO

CREATE VIEW fhir.SubstancePolymerRepeat AS
SELECT
    [id],
    [repeat.JSON],
    [repeat.id],
    [repeat.extension],
    [repeat.modifierExtension],
    [repeat.averageMolecularFormula],
    [repeat.repeatUnitAmountType.id],
    [repeat.repeatUnitAmountType.extension],
    [repeat.repeatUnitAmountType.coding],
    [repeat.repeatUnitAmountType.text],
    [repeat.repeatUnit]
FROM openrowset (
        BULK 'SubstancePolymer/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [repeat.JSON]  VARCHAR(MAX) '$.repeat'
    ) AS rowset
    CROSS APPLY openjson (rowset.[repeat.JSON]) with (
        [repeat.id]                    NVARCHAR(100)       '$.id',
        [repeat.extension]             NVARCHAR(MAX)       '$.extension',
        [repeat.modifierExtension]     NVARCHAR(MAX)       '$.modifierExtension',
        [repeat.averageMolecularFormula] NVARCHAR(500)       '$.averageMolecularFormula',
        [repeat.repeatUnitAmountType.id] NVARCHAR(100)       '$.repeatUnitAmountType.id',
        [repeat.repeatUnitAmountType.extension] NVARCHAR(MAX)       '$.repeatUnitAmountType.extension',
        [repeat.repeatUnitAmountType.coding] NVARCHAR(MAX)       '$.repeatUnitAmountType.coding',
        [repeat.repeatUnitAmountType.text] NVARCHAR(4000)      '$.repeatUnitAmountType.text',
        [repeat.repeatUnit]            NVARCHAR(MAX)       '$.repeatUnit' AS JSON
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[SubstanceProtein] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [sequenceType.id] NVARCHAR(100),
    [sequenceType.extension] NVARCHAR(MAX),
    [sequenceType.coding] VARCHAR(MAX),
    [sequenceType.text] NVARCHAR(4000),
    [numberOfSubunits] bigint,
    [disulfideLinkage] VARCHAR(MAX),
    [subunit] VARCHAR(MAX),
) WITH (
    LOCATION='/SubstanceProtein/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.SubstanceProteinDisulfideLinkage AS
SELECT
    [id],
    [disulfideLinkage.JSON],
    [disulfideLinkage]
FROM openrowset (
        BULK 'SubstanceProtein/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [disulfideLinkage.JSON]  VARCHAR(MAX) '$.disulfideLinkage'
    ) AS rowset
    CROSS APPLY openjson (rowset.[disulfideLinkage.JSON]) with (
        [disulfideLinkage]             NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.SubstanceProteinSubunit AS
SELECT
    [id],
    [subunit.JSON],
    [subunit.id],
    [subunit.extension],
    [subunit.modifierExtension],
    [subunit.subunit],
    [subunit.sequence],
    [subunit.length],
    [subunit.sequenceAttachment.id],
    [subunit.sequenceAttachment.extension],
    [subunit.sequenceAttachment.contentType],
    [subunit.sequenceAttachment.language],
    [subunit.sequenceAttachment.data],
    [subunit.sequenceAttachment.url],
    [subunit.sequenceAttachment.size],
    [subunit.sequenceAttachment.hash],
    [subunit.sequenceAttachment.title],
    [subunit.sequenceAttachment.creation],
    [subunit.sequenceAttachment.height],
    [subunit.sequenceAttachment.width],
    [subunit.sequenceAttachment.frames],
    [subunit.sequenceAttachment.duration],
    [subunit.sequenceAttachment.pages],
    [subunit.nTerminalModificationId.id],
    [subunit.nTerminalModificationId.extension],
    [subunit.nTerminalModificationId.use],
    [subunit.nTerminalModificationId.type],
    [subunit.nTerminalModificationId.system],
    [subunit.nTerminalModificationId.value],
    [subunit.nTerminalModificationId.period],
    [subunit.nTerminalModificationId.assigner],
    [subunit.nTerminalModification],
    [subunit.cTerminalModificationId.id],
    [subunit.cTerminalModificationId.extension],
    [subunit.cTerminalModificationId.use],
    [subunit.cTerminalModificationId.type],
    [subunit.cTerminalModificationId.system],
    [subunit.cTerminalModificationId.value],
    [subunit.cTerminalModificationId.period],
    [subunit.cTerminalModificationId.assigner],
    [subunit.cTerminalModification]
FROM openrowset (
        BULK 'SubstanceProtein/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [subunit.JSON]  VARCHAR(MAX) '$.subunit'
    ) AS rowset
    CROSS APPLY openjson (rowset.[subunit.JSON]) with (
        [subunit.id]                   NVARCHAR(100)       '$.id',
        [subunit.extension]            NVARCHAR(MAX)       '$.extension',
        [subunit.modifierExtension]    NVARCHAR(MAX)       '$.modifierExtension',
        [subunit.subunit]              bigint              '$.subunit',
        [subunit.sequence]             NVARCHAR(4000)      '$.sequence',
        [subunit.length]               bigint              '$.length',
        [subunit.sequenceAttachment.id] NVARCHAR(100)       '$.sequenceAttachment.id',
        [subunit.sequenceAttachment.extension] NVARCHAR(MAX)       '$.sequenceAttachment.extension',
        [subunit.sequenceAttachment.contentType] NVARCHAR(100)       '$.sequenceAttachment.contentType',
        [subunit.sequenceAttachment.language] NVARCHAR(100)       '$.sequenceAttachment.language',
        [subunit.sequenceAttachment.data] NVARCHAR(MAX)       '$.sequenceAttachment.data',
        [subunit.sequenceAttachment.url] VARCHAR(256)        '$.sequenceAttachment.url',
        [subunit.sequenceAttachment.size] NVARCHAR(MAX)       '$.sequenceAttachment.size',
        [subunit.sequenceAttachment.hash] NVARCHAR(MAX)       '$.sequenceAttachment.hash',
        [subunit.sequenceAttachment.title] NVARCHAR(4000)      '$.sequenceAttachment.title',
        [subunit.sequenceAttachment.creation] VARCHAR(64)         '$.sequenceAttachment.creation',
        [subunit.sequenceAttachment.height] bigint              '$.sequenceAttachment.height',
        [subunit.sequenceAttachment.width] bigint              '$.sequenceAttachment.width',
        [subunit.sequenceAttachment.frames] bigint              '$.sequenceAttachment.frames',
        [subunit.sequenceAttachment.duration] float               '$.sequenceAttachment.duration',
        [subunit.sequenceAttachment.pages] bigint              '$.sequenceAttachment.pages',
        [subunit.nTerminalModificationId.id] NVARCHAR(100)       '$.nTerminalModificationId.id',
        [subunit.nTerminalModificationId.extension] NVARCHAR(MAX)       '$.nTerminalModificationId.extension',
        [subunit.nTerminalModificationId.use] NVARCHAR(64)        '$.nTerminalModificationId.use',
        [subunit.nTerminalModificationId.type] NVARCHAR(MAX)       '$.nTerminalModificationId.type',
        [subunit.nTerminalModificationId.system] VARCHAR(256)        '$.nTerminalModificationId.system',
        [subunit.nTerminalModificationId.value] NVARCHAR(4000)      '$.nTerminalModificationId.value',
        [subunit.nTerminalModificationId.period] NVARCHAR(MAX)       '$.nTerminalModificationId.period',
        [subunit.nTerminalModificationId.assigner] NVARCHAR(MAX)       '$.nTerminalModificationId.assigner',
        [subunit.nTerminalModification] NVARCHAR(500)       '$.nTerminalModification',
        [subunit.cTerminalModificationId.id] NVARCHAR(100)       '$.cTerminalModificationId.id',
        [subunit.cTerminalModificationId.extension] NVARCHAR(MAX)       '$.cTerminalModificationId.extension',
        [subunit.cTerminalModificationId.use] NVARCHAR(64)        '$.cTerminalModificationId.use',
        [subunit.cTerminalModificationId.type] NVARCHAR(MAX)       '$.cTerminalModificationId.type',
        [subunit.cTerminalModificationId.system] VARCHAR(256)        '$.cTerminalModificationId.system',
        [subunit.cTerminalModificationId.value] NVARCHAR(4000)      '$.cTerminalModificationId.value',
        [subunit.cTerminalModificationId.period] NVARCHAR(MAX)       '$.cTerminalModificationId.period',
        [subunit.cTerminalModificationId.assigner] NVARCHAR(MAX)       '$.cTerminalModificationId.assigner',
        [subunit.cTerminalModification] NVARCHAR(500)       '$.cTerminalModification'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[SubstanceReferenceInformation] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [comment] NVARCHAR(4000),
    [gene] VARCHAR(MAX),
    [geneElement] VARCHAR(MAX),
    [target] VARCHAR(MAX),
) WITH (
    LOCATION='/SubstanceReferenceInformation/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.SubstanceReferenceInformationGene AS
SELECT
    [id],
    [gene.JSON],
    [gene.id],
    [gene.extension],
    [gene.modifierExtension],
    [gene.geneSequenceOrigin.id],
    [gene.geneSequenceOrigin.extension],
    [gene.geneSequenceOrigin.coding],
    [gene.geneSequenceOrigin.text],
    [gene.gene.id],
    [gene.gene.extension],
    [gene.gene.coding],
    [gene.gene.text],
    [gene.source]
FROM openrowset (
        BULK 'SubstanceReferenceInformation/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [gene.JSON]  VARCHAR(MAX) '$.gene'
    ) AS rowset
    CROSS APPLY openjson (rowset.[gene.JSON]) with (
        [gene.id]                      NVARCHAR(100)       '$.id',
        [gene.extension]               NVARCHAR(MAX)       '$.extension',
        [gene.modifierExtension]       NVARCHAR(MAX)       '$.modifierExtension',
        [gene.geneSequenceOrigin.id]   NVARCHAR(100)       '$.geneSequenceOrigin.id',
        [gene.geneSequenceOrigin.extension] NVARCHAR(MAX)       '$.geneSequenceOrigin.extension',
        [gene.geneSequenceOrigin.coding] NVARCHAR(MAX)       '$.geneSequenceOrigin.coding',
        [gene.geneSequenceOrigin.text] NVARCHAR(4000)      '$.geneSequenceOrigin.text',
        [gene.gene.id]                 NVARCHAR(100)       '$.gene.id',
        [gene.gene.extension]          NVARCHAR(MAX)       '$.gene.extension',
        [gene.gene.coding]             NVARCHAR(MAX)       '$.gene.coding',
        [gene.gene.text]               NVARCHAR(4000)      '$.gene.text',
        [gene.source]                  NVARCHAR(MAX)       '$.source' AS JSON
    ) j

GO

CREATE VIEW fhir.SubstanceReferenceInformationGeneElement AS
SELECT
    [id],
    [geneElement.JSON],
    [geneElement.id],
    [geneElement.extension],
    [geneElement.modifierExtension],
    [geneElement.type.id],
    [geneElement.type.extension],
    [geneElement.type.coding],
    [geneElement.type.text],
    [geneElement.element.id],
    [geneElement.element.extension],
    [geneElement.element.use],
    [geneElement.element.type],
    [geneElement.element.system],
    [geneElement.element.value],
    [geneElement.element.period],
    [geneElement.element.assigner],
    [geneElement.source]
FROM openrowset (
        BULK 'SubstanceReferenceInformation/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [geneElement.JSON]  VARCHAR(MAX) '$.geneElement'
    ) AS rowset
    CROSS APPLY openjson (rowset.[geneElement.JSON]) with (
        [geneElement.id]               NVARCHAR(100)       '$.id',
        [geneElement.extension]        NVARCHAR(MAX)       '$.extension',
        [geneElement.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [geneElement.type.id]          NVARCHAR(100)       '$.type.id',
        [geneElement.type.extension]   NVARCHAR(MAX)       '$.type.extension',
        [geneElement.type.coding]      NVARCHAR(MAX)       '$.type.coding',
        [geneElement.type.text]        NVARCHAR(4000)      '$.type.text',
        [geneElement.element.id]       NVARCHAR(100)       '$.element.id',
        [geneElement.element.extension] NVARCHAR(MAX)       '$.element.extension',
        [geneElement.element.use]      NVARCHAR(64)        '$.element.use',
        [geneElement.element.type]     NVARCHAR(MAX)       '$.element.type',
        [geneElement.element.system]   VARCHAR(256)        '$.element.system',
        [geneElement.element.value]    NVARCHAR(4000)      '$.element.value',
        [geneElement.element.period]   NVARCHAR(MAX)       '$.element.period',
        [geneElement.element.assigner] NVARCHAR(MAX)       '$.element.assigner',
        [geneElement.source]           NVARCHAR(MAX)       '$.source' AS JSON
    ) j

GO

CREATE VIEW fhir.SubstanceReferenceInformationTarget AS
SELECT
    [id],
    [target.JSON],
    [target.id],
    [target.extension],
    [target.modifierExtension],
    [target.target.id],
    [target.target.extension],
    [target.target.use],
    [target.target.type],
    [target.target.system],
    [target.target.value],
    [target.target.period],
    [target.target.assigner],
    [target.type.id],
    [target.type.extension],
    [target.type.coding],
    [target.type.text],
    [target.interaction.id],
    [target.interaction.extension],
    [target.interaction.coding],
    [target.interaction.text],
    [target.organism.id],
    [target.organism.extension],
    [target.organism.coding],
    [target.organism.text],
    [target.organismType.id],
    [target.organismType.extension],
    [target.organismType.coding],
    [target.organismType.text],
    [target.amountType.id],
    [target.amountType.extension],
    [target.amountType.coding],
    [target.amountType.text],
    [target.source],
    [target.amount.quantity.id],
    [target.amount.quantity.extension],
    [target.amount.quantity.value],
    [target.amount.quantity.comparator],
    [target.amount.quantity.unit],
    [target.amount.quantity.system],
    [target.amount.quantity.code],
    [target.amount.range.id],
    [target.amount.range.extension],
    [target.amount.range.low],
    [target.amount.range.high],
    [target.amount.string]
FROM openrowset (
        BULK 'SubstanceReferenceInformation/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [target.JSON]  VARCHAR(MAX) '$.target'
    ) AS rowset
    CROSS APPLY openjson (rowset.[target.JSON]) with (
        [target.id]                    NVARCHAR(100)       '$.id',
        [target.extension]             NVARCHAR(MAX)       '$.extension',
        [target.modifierExtension]     NVARCHAR(MAX)       '$.modifierExtension',
        [target.target.id]             NVARCHAR(100)       '$.target.id',
        [target.target.extension]      NVARCHAR(MAX)       '$.target.extension',
        [target.target.use]            NVARCHAR(64)        '$.target.use',
        [target.target.type]           NVARCHAR(MAX)       '$.target.type',
        [target.target.system]         VARCHAR(256)        '$.target.system',
        [target.target.value]          NVARCHAR(4000)      '$.target.value',
        [target.target.period]         NVARCHAR(MAX)       '$.target.period',
        [target.target.assigner]       NVARCHAR(MAX)       '$.target.assigner',
        [target.type.id]               NVARCHAR(100)       '$.type.id',
        [target.type.extension]        NVARCHAR(MAX)       '$.type.extension',
        [target.type.coding]           NVARCHAR(MAX)       '$.type.coding',
        [target.type.text]             NVARCHAR(4000)      '$.type.text',
        [target.interaction.id]        NVARCHAR(100)       '$.interaction.id',
        [target.interaction.extension] NVARCHAR(MAX)       '$.interaction.extension',
        [target.interaction.coding]    NVARCHAR(MAX)       '$.interaction.coding',
        [target.interaction.text]      NVARCHAR(4000)      '$.interaction.text',
        [target.organism.id]           NVARCHAR(100)       '$.organism.id',
        [target.organism.extension]    NVARCHAR(MAX)       '$.organism.extension',
        [target.organism.coding]       NVARCHAR(MAX)       '$.organism.coding',
        [target.organism.text]         NVARCHAR(4000)      '$.organism.text',
        [target.organismType.id]       NVARCHAR(100)       '$.organismType.id',
        [target.organismType.extension] NVARCHAR(MAX)       '$.organismType.extension',
        [target.organismType.coding]   NVARCHAR(MAX)       '$.organismType.coding',
        [target.organismType.text]     NVARCHAR(4000)      '$.organismType.text',
        [target.amountType.id]         NVARCHAR(100)       '$.amountType.id',
        [target.amountType.extension]  NVARCHAR(MAX)       '$.amountType.extension',
        [target.amountType.coding]     NVARCHAR(MAX)       '$.amountType.coding',
        [target.amountType.text]       NVARCHAR(4000)      '$.amountType.text',
        [target.source]                NVARCHAR(MAX)       '$.source' AS JSON,
        [target.amount.quantity.id]    NVARCHAR(100)       '$.amount.quantity.id',
        [target.amount.quantity.extension] NVARCHAR(MAX)       '$.amount.quantity.extension',
        [target.amount.quantity.value] float               '$.amount.quantity.value',
        [target.amount.quantity.comparator] NVARCHAR(64)        '$.amount.quantity.comparator',
        [target.amount.quantity.unit]  NVARCHAR(100)       '$.amount.quantity.unit',
        [target.amount.quantity.system] VARCHAR(256)        '$.amount.quantity.system',
        [target.amount.quantity.code]  NVARCHAR(4000)      '$.amount.quantity.code',
        [target.amount.range.id]       NVARCHAR(100)       '$.amount.range.id',
        [target.amount.range.extension] NVARCHAR(MAX)       '$.amount.range.extension',
        [target.amount.range.low]      NVARCHAR(MAX)       '$.amount.range.low',
        [target.amount.range.high]     NVARCHAR(MAX)       '$.amount.range.high',
        [target.amount.string]         NVARCHAR(4000)      '$.amount.string'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[SubstanceSourceMaterial] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [sourceMaterialClass.id] NVARCHAR(100),
    [sourceMaterialClass.extension] NVARCHAR(MAX),
    [sourceMaterialClass.coding] VARCHAR(MAX),
    [sourceMaterialClass.text] NVARCHAR(4000),
    [sourceMaterialType.id] NVARCHAR(100),
    [sourceMaterialType.extension] NVARCHAR(MAX),
    [sourceMaterialType.coding] VARCHAR(MAX),
    [sourceMaterialType.text] NVARCHAR(4000),
    [sourceMaterialState.id] NVARCHAR(100),
    [sourceMaterialState.extension] NVARCHAR(MAX),
    [sourceMaterialState.coding] VARCHAR(MAX),
    [sourceMaterialState.text] NVARCHAR(4000),
    [organismId.id] NVARCHAR(100),
    [organismId.extension] NVARCHAR(MAX),
    [organismId.use] NVARCHAR(64),
    [organismId.type.id] NVARCHAR(100),
    [organismId.type.extension] NVARCHAR(MAX),
    [organismId.type.coding] NVARCHAR(MAX),
    [organismId.type.text] NVARCHAR(4000),
    [organismId.system] VARCHAR(256),
    [organismId.value] NVARCHAR(4000),
    [organismId.period.id] NVARCHAR(100),
    [organismId.period.extension] NVARCHAR(MAX),
    [organismId.period.start] VARCHAR(64),
    [organismId.period.end] VARCHAR(64),
    [organismId.assigner.id] NVARCHAR(100),
    [organismId.assigner.extension] NVARCHAR(MAX),
    [organismId.assigner.reference] NVARCHAR(4000),
    [organismId.assigner.type] VARCHAR(256),
    [organismId.assigner.identifier] NVARCHAR(MAX),
    [organismId.assigner.display] NVARCHAR(4000),
    [organismName] NVARCHAR(500),
    [parentSubstanceId] VARCHAR(MAX),
    [parentSubstanceName] VARCHAR(MAX),
    [countryOfOrigin] VARCHAR(MAX),
    [geographicalLocation] VARCHAR(MAX),
    [developmentStage.id] NVARCHAR(100),
    [developmentStage.extension] NVARCHAR(MAX),
    [developmentStage.coding] VARCHAR(MAX),
    [developmentStage.text] NVARCHAR(4000),
    [fractionDescription] VARCHAR(MAX),
    [organism.id] NVARCHAR(100),
    [organism.extension] NVARCHAR(MAX),
    [organism.modifierExtension] NVARCHAR(MAX),
    [organism.family.id] NVARCHAR(100),
    [organism.family.extension] NVARCHAR(MAX),
    [organism.family.coding] NVARCHAR(MAX),
    [organism.family.text] NVARCHAR(4000),
    [organism.genus.id] NVARCHAR(100),
    [organism.genus.extension] NVARCHAR(MAX),
    [organism.genus.coding] NVARCHAR(MAX),
    [organism.genus.text] NVARCHAR(4000),
    [organism.species.id] NVARCHAR(100),
    [organism.species.extension] NVARCHAR(MAX),
    [organism.species.coding] NVARCHAR(MAX),
    [organism.species.text] NVARCHAR(4000),
    [organism.intraspecificType.id] NVARCHAR(100),
    [organism.intraspecificType.extension] NVARCHAR(MAX),
    [organism.intraspecificType.coding] NVARCHAR(MAX),
    [organism.intraspecificType.text] NVARCHAR(4000),
    [organism.intraspecificDescription] NVARCHAR(4000),
    [organism.author] VARCHAR(MAX),
    [organism.hybrid.id] NVARCHAR(100),
    [organism.hybrid.extension] NVARCHAR(MAX),
    [organism.hybrid.modifierExtension] NVARCHAR(MAX),
    [organism.hybrid.maternalOrganismId] NVARCHAR(100),
    [organism.hybrid.maternalOrganismName] NVARCHAR(500),
    [organism.hybrid.paternalOrganismId] NVARCHAR(100),
    [organism.hybrid.paternalOrganismName] NVARCHAR(500),
    [organism.hybrid.hybridType] NVARCHAR(MAX),
    [organism.organismGeneral.id] NVARCHAR(100),
    [organism.organismGeneral.extension] NVARCHAR(MAX),
    [organism.organismGeneral.modifierExtension] NVARCHAR(MAX),
    [organism.organismGeneral.kingdom] NVARCHAR(MAX),
    [organism.organismGeneral.phylum] NVARCHAR(MAX),
    [organism.organismGeneral.class] NVARCHAR(MAX),
    [organism.organismGeneral.order] NVARCHAR(MAX),
    [partDescription] VARCHAR(MAX),
) WITH (
    LOCATION='/SubstanceSourceMaterial/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.SubstanceSourceMaterialParentSubstanceId AS
SELECT
    [id],
    [parentSubstanceId.JSON],
    [parentSubstanceId.id],
    [parentSubstanceId.extension],
    [parentSubstanceId.use],
    [parentSubstanceId.type.id],
    [parentSubstanceId.type.extension],
    [parentSubstanceId.type.coding],
    [parentSubstanceId.type.text],
    [parentSubstanceId.system],
    [parentSubstanceId.value],
    [parentSubstanceId.period.id],
    [parentSubstanceId.period.extension],
    [parentSubstanceId.period.start],
    [parentSubstanceId.period.end],
    [parentSubstanceId.assigner.id],
    [parentSubstanceId.assigner.extension],
    [parentSubstanceId.assigner.reference],
    [parentSubstanceId.assigner.type],
    [parentSubstanceId.assigner.identifier],
    [parentSubstanceId.assigner.display]
FROM openrowset (
        BULK 'SubstanceSourceMaterial/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [parentSubstanceId.JSON]  VARCHAR(MAX) '$.parentSubstanceId'
    ) AS rowset
    CROSS APPLY openjson (rowset.[parentSubstanceId.JSON]) with (
        [parentSubstanceId.id]         NVARCHAR(100)       '$.id',
        [parentSubstanceId.extension]  NVARCHAR(MAX)       '$.extension',
        [parentSubstanceId.use]        NVARCHAR(64)        '$.use',
        [parentSubstanceId.type.id]    NVARCHAR(100)       '$.type.id',
        [parentSubstanceId.type.extension] NVARCHAR(MAX)       '$.type.extension',
        [parentSubstanceId.type.coding] NVARCHAR(MAX)       '$.type.coding',
        [parentSubstanceId.type.text]  NVARCHAR(4000)      '$.type.text',
        [parentSubstanceId.system]     VARCHAR(256)        '$.system',
        [parentSubstanceId.value]      NVARCHAR(4000)      '$.value',
        [parentSubstanceId.period.id]  NVARCHAR(100)       '$.period.id',
        [parentSubstanceId.period.extension] NVARCHAR(MAX)       '$.period.extension',
        [parentSubstanceId.period.start] VARCHAR(64)         '$.period.start',
        [parentSubstanceId.period.end] VARCHAR(64)         '$.period.end',
        [parentSubstanceId.assigner.id] NVARCHAR(100)       '$.assigner.id',
        [parentSubstanceId.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [parentSubstanceId.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [parentSubstanceId.assigner.type] VARCHAR(256)        '$.assigner.type',
        [parentSubstanceId.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [parentSubstanceId.assigner.display] NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.SubstanceSourceMaterialParentSubstanceName AS
SELECT
    [id],
    [parentSubstanceName.JSON],
    [parentSubstanceName]
FROM openrowset (
        BULK 'SubstanceSourceMaterial/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [parentSubstanceName.JSON]  VARCHAR(MAX) '$.parentSubstanceName'
    ) AS rowset
    CROSS APPLY openjson (rowset.[parentSubstanceName.JSON]) with (
        [parentSubstanceName]          NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.SubstanceSourceMaterialCountryOfOrigin AS
SELECT
    [id],
    [countryOfOrigin.JSON],
    [countryOfOrigin.id],
    [countryOfOrigin.extension],
    [countryOfOrigin.coding],
    [countryOfOrigin.text]
FROM openrowset (
        BULK 'SubstanceSourceMaterial/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [countryOfOrigin.JSON]  VARCHAR(MAX) '$.countryOfOrigin'
    ) AS rowset
    CROSS APPLY openjson (rowset.[countryOfOrigin.JSON]) with (
        [countryOfOrigin.id]           NVARCHAR(100)       '$.id',
        [countryOfOrigin.extension]    NVARCHAR(MAX)       '$.extension',
        [countryOfOrigin.coding]       NVARCHAR(MAX)       '$.coding' AS JSON,
        [countryOfOrigin.text]         NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.SubstanceSourceMaterialGeographicalLocation AS
SELECT
    [id],
    [geographicalLocation.JSON],
    [geographicalLocation]
FROM openrowset (
        BULK 'SubstanceSourceMaterial/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [geographicalLocation.JSON]  VARCHAR(MAX) '$.geographicalLocation'
    ) AS rowset
    CROSS APPLY openjson (rowset.[geographicalLocation.JSON]) with (
        [geographicalLocation]         NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.SubstanceSourceMaterialFractionDescription AS
SELECT
    [id],
    [fractionDescription.JSON],
    [fractionDescription.id],
    [fractionDescription.extension],
    [fractionDescription.modifierExtension],
    [fractionDescription.fraction],
    [fractionDescription.materialType.id],
    [fractionDescription.materialType.extension],
    [fractionDescription.materialType.coding],
    [fractionDescription.materialType.text]
FROM openrowset (
        BULK 'SubstanceSourceMaterial/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [fractionDescription.JSON]  VARCHAR(MAX) '$.fractionDescription'
    ) AS rowset
    CROSS APPLY openjson (rowset.[fractionDescription.JSON]) with (
        [fractionDescription.id]       NVARCHAR(100)       '$.id',
        [fractionDescription.extension] NVARCHAR(MAX)       '$.extension',
        [fractionDescription.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [fractionDescription.fraction] NVARCHAR(100)       '$.fraction',
        [fractionDescription.materialType.id] NVARCHAR(100)       '$.materialType.id',
        [fractionDescription.materialType.extension] NVARCHAR(MAX)       '$.materialType.extension',
        [fractionDescription.materialType.coding] NVARCHAR(MAX)       '$.materialType.coding',
        [fractionDescription.materialType.text] NVARCHAR(4000)      '$.materialType.text'
    ) j

GO

CREATE VIEW fhir.SubstanceSourceMaterialPartDescription AS
SELECT
    [id],
    [partDescription.JSON],
    [partDescription.id],
    [partDescription.extension],
    [partDescription.modifierExtension],
    [partDescription.part.id],
    [partDescription.part.extension],
    [partDescription.part.coding],
    [partDescription.part.text],
    [partDescription.partLocation.id],
    [partDescription.partLocation.extension],
    [partDescription.partLocation.coding],
    [partDescription.partLocation.text]
FROM openrowset (
        BULK 'SubstanceSourceMaterial/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [partDescription.JSON]  VARCHAR(MAX) '$.partDescription'
    ) AS rowset
    CROSS APPLY openjson (rowset.[partDescription.JSON]) with (
        [partDescription.id]           NVARCHAR(100)       '$.id',
        [partDescription.extension]    NVARCHAR(MAX)       '$.extension',
        [partDescription.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [partDescription.part.id]      NVARCHAR(100)       '$.part.id',
        [partDescription.part.extension] NVARCHAR(MAX)       '$.part.extension',
        [partDescription.part.coding]  NVARCHAR(MAX)       '$.part.coding',
        [partDescription.part.text]    NVARCHAR(4000)      '$.part.text',
        [partDescription.partLocation.id] NVARCHAR(100)       '$.partLocation.id',
        [partDescription.partLocation.extension] NVARCHAR(MAX)       '$.partLocation.extension',
        [partDescription.partLocation.coding] NVARCHAR(MAX)       '$.partLocation.coding',
        [partDescription.partLocation.text] NVARCHAR(4000)      '$.partLocation.text'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[SupplyDelivery] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [basedOn] VARCHAR(MAX),
    [partOf] VARCHAR(MAX),
    [status] NVARCHAR(100),
    [patient.id] NVARCHAR(100),
    [patient.extension] NVARCHAR(MAX),
    [patient.reference] NVARCHAR(4000),
    [patient.type] VARCHAR(256),
    [patient.identifier.id] NVARCHAR(100),
    [patient.identifier.extension] NVARCHAR(MAX),
    [patient.identifier.use] NVARCHAR(64),
    [patient.identifier.type] NVARCHAR(MAX),
    [patient.identifier.system] VARCHAR(256),
    [patient.identifier.value] NVARCHAR(4000),
    [patient.identifier.period] NVARCHAR(MAX),
    [patient.identifier.assigner] NVARCHAR(MAX),
    [patient.display] NVARCHAR(4000),
    [type.id] NVARCHAR(100),
    [type.extension] NVARCHAR(MAX),
    [type.coding] VARCHAR(MAX),
    [type.text] NVARCHAR(4000),
    [suppliedItem.id] NVARCHAR(100),
    [suppliedItem.extension] NVARCHAR(MAX),
    [suppliedItem.modifierExtension] NVARCHAR(MAX),
    [suppliedItem.quantity.id] NVARCHAR(100),
    [suppliedItem.quantity.extension] NVARCHAR(MAX),
    [suppliedItem.quantity.value] float,
    [suppliedItem.quantity.comparator] NVARCHAR(64),
    [suppliedItem.quantity.unit] NVARCHAR(100),
    [suppliedItem.quantity.system] VARCHAR(256),
    [suppliedItem.quantity.code] NVARCHAR(4000),
    [suppliedItem.item.codeableConcept.id] NVARCHAR(100),
    [suppliedItem.item.codeableConcept.extension] NVARCHAR(MAX),
    [suppliedItem.item.codeableConcept.coding] NVARCHAR(MAX),
    [suppliedItem.item.codeableConcept.text] NVARCHAR(4000),
    [suppliedItem.item.reference.id] NVARCHAR(100),
    [suppliedItem.item.reference.extension] NVARCHAR(MAX),
    [suppliedItem.item.reference.reference] NVARCHAR(4000),
    [suppliedItem.item.reference.type] VARCHAR(256),
    [suppliedItem.item.reference.identifier] NVARCHAR(MAX),
    [suppliedItem.item.reference.display] NVARCHAR(4000),
    [supplier.id] NVARCHAR(100),
    [supplier.extension] NVARCHAR(MAX),
    [supplier.reference] NVARCHAR(4000),
    [supplier.type] VARCHAR(256),
    [supplier.identifier.id] NVARCHAR(100),
    [supplier.identifier.extension] NVARCHAR(MAX),
    [supplier.identifier.use] NVARCHAR(64),
    [supplier.identifier.type] NVARCHAR(MAX),
    [supplier.identifier.system] VARCHAR(256),
    [supplier.identifier.value] NVARCHAR(4000),
    [supplier.identifier.period] NVARCHAR(MAX),
    [supplier.identifier.assigner] NVARCHAR(MAX),
    [supplier.display] NVARCHAR(4000),
    [destination.id] NVARCHAR(100),
    [destination.extension] NVARCHAR(MAX),
    [destination.reference] NVARCHAR(4000),
    [destination.type] VARCHAR(256),
    [destination.identifier.id] NVARCHAR(100),
    [destination.identifier.extension] NVARCHAR(MAX),
    [destination.identifier.use] NVARCHAR(64),
    [destination.identifier.type] NVARCHAR(MAX),
    [destination.identifier.system] VARCHAR(256),
    [destination.identifier.value] NVARCHAR(4000),
    [destination.identifier.period] NVARCHAR(MAX),
    [destination.identifier.assigner] NVARCHAR(MAX),
    [destination.display] NVARCHAR(4000),
    [receiver] VARCHAR(MAX),
    [occurrence.dateTime] VARCHAR(64),
    [occurrence.period.id] NVARCHAR(100),
    [occurrence.period.extension] NVARCHAR(MAX),
    [occurrence.period.start] VARCHAR(64),
    [occurrence.period.end] VARCHAR(64),
    [occurrence.timing.id] NVARCHAR(100),
    [occurrence.timing.extension] NVARCHAR(MAX),
    [occurrence.timing.modifierExtension] NVARCHAR(MAX),
    [occurrence.timing.event] VARCHAR(MAX),
    [occurrence.timing.repeat.id] NVARCHAR(100),
    [occurrence.timing.repeat.extension] NVARCHAR(MAX),
    [occurrence.timing.repeat.modifierExtension] NVARCHAR(MAX),
    [occurrence.timing.repeat.count] bigint,
    [occurrence.timing.repeat.countMax] bigint,
    [occurrence.timing.repeat.duration] float,
    [occurrence.timing.repeat.durationMax] float,
    [occurrence.timing.repeat.durationUnit] NVARCHAR(64),
    [occurrence.timing.repeat.frequency] bigint,
    [occurrence.timing.repeat.frequencyMax] bigint,
    [occurrence.timing.repeat.period] float,
    [occurrence.timing.repeat.periodMax] float,
    [occurrence.timing.repeat.periodUnit] NVARCHAR(64),
    [occurrence.timing.repeat.dayOfWeek] NVARCHAR(MAX),
    [occurrence.timing.repeat.timeOfDay] NVARCHAR(MAX),
    [occurrence.timing.repeat.when] NVARCHAR(MAX),
    [occurrence.timing.repeat.offset] bigint,
    [occurrence.timing.repeat.bounds.duration] NVARCHAR(MAX),
    [occurrence.timing.repeat.bounds.range] NVARCHAR(MAX),
    [occurrence.timing.repeat.bounds.period] NVARCHAR(MAX),
    [occurrence.timing.code.id] NVARCHAR(100),
    [occurrence.timing.code.extension] NVARCHAR(MAX),
    [occurrence.timing.code.coding] NVARCHAR(MAX),
    [occurrence.timing.code.text] NVARCHAR(4000),
) WITH (
    LOCATION='/SupplyDelivery/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.SupplyDeliveryIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'SupplyDelivery/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.SupplyDeliveryBasedOn AS
SELECT
    [id],
    [basedOn.JSON],
    [basedOn.id],
    [basedOn.extension],
    [basedOn.reference],
    [basedOn.type],
    [basedOn.identifier.id],
    [basedOn.identifier.extension],
    [basedOn.identifier.use],
    [basedOn.identifier.type],
    [basedOn.identifier.system],
    [basedOn.identifier.value],
    [basedOn.identifier.period],
    [basedOn.identifier.assigner],
    [basedOn.display]
FROM openrowset (
        BULK 'SupplyDelivery/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [basedOn.JSON]  VARCHAR(MAX) '$.basedOn'
    ) AS rowset
    CROSS APPLY openjson (rowset.[basedOn.JSON]) with (
        [basedOn.id]                   NVARCHAR(100)       '$.id',
        [basedOn.extension]            NVARCHAR(MAX)       '$.extension',
        [basedOn.reference]            NVARCHAR(4000)      '$.reference',
        [basedOn.type]                 VARCHAR(256)        '$.type',
        [basedOn.identifier.id]        NVARCHAR(100)       '$.identifier.id',
        [basedOn.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [basedOn.identifier.use]       NVARCHAR(64)        '$.identifier.use',
        [basedOn.identifier.type]      NVARCHAR(MAX)       '$.identifier.type',
        [basedOn.identifier.system]    VARCHAR(256)        '$.identifier.system',
        [basedOn.identifier.value]     NVARCHAR(4000)      '$.identifier.value',
        [basedOn.identifier.period]    NVARCHAR(MAX)       '$.identifier.period',
        [basedOn.identifier.assigner]  NVARCHAR(MAX)       '$.identifier.assigner',
        [basedOn.display]              NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.SupplyDeliveryPartOf AS
SELECT
    [id],
    [partOf.JSON],
    [partOf.id],
    [partOf.extension],
    [partOf.reference],
    [partOf.type],
    [partOf.identifier.id],
    [partOf.identifier.extension],
    [partOf.identifier.use],
    [partOf.identifier.type],
    [partOf.identifier.system],
    [partOf.identifier.value],
    [partOf.identifier.period],
    [partOf.identifier.assigner],
    [partOf.display]
FROM openrowset (
        BULK 'SupplyDelivery/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [partOf.JSON]  VARCHAR(MAX) '$.partOf'
    ) AS rowset
    CROSS APPLY openjson (rowset.[partOf.JSON]) with (
        [partOf.id]                    NVARCHAR(100)       '$.id',
        [partOf.extension]             NVARCHAR(MAX)       '$.extension',
        [partOf.reference]             NVARCHAR(4000)      '$.reference',
        [partOf.type]                  VARCHAR(256)        '$.type',
        [partOf.identifier.id]         NVARCHAR(100)       '$.identifier.id',
        [partOf.identifier.extension]  NVARCHAR(MAX)       '$.identifier.extension',
        [partOf.identifier.use]        NVARCHAR(64)        '$.identifier.use',
        [partOf.identifier.type]       NVARCHAR(MAX)       '$.identifier.type',
        [partOf.identifier.system]     VARCHAR(256)        '$.identifier.system',
        [partOf.identifier.value]      NVARCHAR(4000)      '$.identifier.value',
        [partOf.identifier.period]     NVARCHAR(MAX)       '$.identifier.period',
        [partOf.identifier.assigner]   NVARCHAR(MAX)       '$.identifier.assigner',
        [partOf.display]               NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.SupplyDeliveryReceiver AS
SELECT
    [id],
    [receiver.JSON],
    [receiver.id],
    [receiver.extension],
    [receiver.reference],
    [receiver.type],
    [receiver.identifier.id],
    [receiver.identifier.extension],
    [receiver.identifier.use],
    [receiver.identifier.type],
    [receiver.identifier.system],
    [receiver.identifier.value],
    [receiver.identifier.period],
    [receiver.identifier.assigner],
    [receiver.display]
FROM openrowset (
        BULK 'SupplyDelivery/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [receiver.JSON]  VARCHAR(MAX) '$.receiver'
    ) AS rowset
    CROSS APPLY openjson (rowset.[receiver.JSON]) with (
        [receiver.id]                  NVARCHAR(100)       '$.id',
        [receiver.extension]           NVARCHAR(MAX)       '$.extension',
        [receiver.reference]           NVARCHAR(4000)      '$.reference',
        [receiver.type]                VARCHAR(256)        '$.type',
        [receiver.identifier.id]       NVARCHAR(100)       '$.identifier.id',
        [receiver.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [receiver.identifier.use]      NVARCHAR(64)        '$.identifier.use',
        [receiver.identifier.type]     NVARCHAR(MAX)       '$.identifier.type',
        [receiver.identifier.system]   VARCHAR(256)        '$.identifier.system',
        [receiver.identifier.value]    NVARCHAR(4000)      '$.identifier.value',
        [receiver.identifier.period]   NVARCHAR(MAX)       '$.identifier.period',
        [receiver.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [receiver.display]             NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[SupplyRequest] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [status] NVARCHAR(100),
    [basedOn] VARCHAR(MAX),
    [category.id] NVARCHAR(100),
    [category.extension] NVARCHAR(MAX),
    [category.coding] VARCHAR(MAX),
    [category.text] NVARCHAR(4000),
    [priority] NVARCHAR(100),
    [item.id] NVARCHAR(100),
    [item.extension] NVARCHAR(MAX),
    [item.concept.id] NVARCHAR(100),
    [item.concept.extension] NVARCHAR(MAX),
    [item.concept.coding] NVARCHAR(MAX),
    [item.concept.text] NVARCHAR(4000),
    [item.reference.id] NVARCHAR(100),
    [item.reference.extension] NVARCHAR(MAX),
    [item.reference.reference] NVARCHAR(4000),
    [item.reference.type] VARCHAR(256),
    [item.reference.identifier] NVARCHAR(MAX),
    [item.reference.display] NVARCHAR(4000),
    [quantity.id] NVARCHAR(100),
    [quantity.extension] NVARCHAR(MAX),
    [quantity.value] float,
    [quantity.comparator] NVARCHAR(64),
    [quantity.unit] NVARCHAR(100),
    [quantity.system] VARCHAR(256),
    [quantity.code] NVARCHAR(4000),
    [parameter] VARCHAR(MAX),
    [authoredOn] VARCHAR(64),
    [requester.id] NVARCHAR(100),
    [requester.extension] NVARCHAR(MAX),
    [requester.reference] NVARCHAR(4000),
    [requester.type] VARCHAR(256),
    [requester.identifier.id] NVARCHAR(100),
    [requester.identifier.extension] NVARCHAR(MAX),
    [requester.identifier.use] NVARCHAR(64),
    [requester.identifier.type] NVARCHAR(MAX),
    [requester.identifier.system] VARCHAR(256),
    [requester.identifier.value] NVARCHAR(4000),
    [requester.identifier.period] NVARCHAR(MAX),
    [requester.identifier.assigner] NVARCHAR(MAX),
    [requester.display] NVARCHAR(4000),
    [supplier] VARCHAR(MAX),
    [reason] VARCHAR(MAX),
    [deliverFrom.id] NVARCHAR(100),
    [deliverFrom.extension] NVARCHAR(MAX),
    [deliverFrom.reference] NVARCHAR(4000),
    [deliverFrom.type] VARCHAR(256),
    [deliverFrom.identifier.id] NVARCHAR(100),
    [deliverFrom.identifier.extension] NVARCHAR(MAX),
    [deliverFrom.identifier.use] NVARCHAR(64),
    [deliverFrom.identifier.type] NVARCHAR(MAX),
    [deliverFrom.identifier.system] VARCHAR(256),
    [deliverFrom.identifier.value] NVARCHAR(4000),
    [deliverFrom.identifier.period] NVARCHAR(MAX),
    [deliverFrom.identifier.assigner] NVARCHAR(MAX),
    [deliverFrom.display] NVARCHAR(4000),
    [deliverTo.id] NVARCHAR(100),
    [deliverTo.extension] NVARCHAR(MAX),
    [deliverTo.reference] NVARCHAR(4000),
    [deliverTo.type] VARCHAR(256),
    [deliverTo.identifier.id] NVARCHAR(100),
    [deliverTo.identifier.extension] NVARCHAR(MAX),
    [deliverTo.identifier.use] NVARCHAR(64),
    [deliverTo.identifier.type] NVARCHAR(MAX),
    [deliverTo.identifier.system] VARCHAR(256),
    [deliverTo.identifier.value] NVARCHAR(4000),
    [deliverTo.identifier.period] NVARCHAR(MAX),
    [deliverTo.identifier.assigner] NVARCHAR(MAX),
    [deliverTo.display] NVARCHAR(4000),
    [occurrence.dateTime] VARCHAR(64),
    [occurrence.period.id] NVARCHAR(100),
    [occurrence.period.extension] NVARCHAR(MAX),
    [occurrence.period.start] VARCHAR(64),
    [occurrence.period.end] VARCHAR(64),
    [occurrence.timing.id] NVARCHAR(100),
    [occurrence.timing.extension] NVARCHAR(MAX),
    [occurrence.timing.modifierExtension] NVARCHAR(MAX),
    [occurrence.timing.event] VARCHAR(MAX),
    [occurrence.timing.repeat.id] NVARCHAR(100),
    [occurrence.timing.repeat.extension] NVARCHAR(MAX),
    [occurrence.timing.repeat.modifierExtension] NVARCHAR(MAX),
    [occurrence.timing.repeat.count] bigint,
    [occurrence.timing.repeat.countMax] bigint,
    [occurrence.timing.repeat.duration] float,
    [occurrence.timing.repeat.durationMax] float,
    [occurrence.timing.repeat.durationUnit] NVARCHAR(64),
    [occurrence.timing.repeat.frequency] bigint,
    [occurrence.timing.repeat.frequencyMax] bigint,
    [occurrence.timing.repeat.period] float,
    [occurrence.timing.repeat.periodMax] float,
    [occurrence.timing.repeat.periodUnit] NVARCHAR(64),
    [occurrence.timing.repeat.dayOfWeek] NVARCHAR(MAX),
    [occurrence.timing.repeat.timeOfDay] NVARCHAR(MAX),
    [occurrence.timing.repeat.when] NVARCHAR(MAX),
    [occurrence.timing.repeat.offset] bigint,
    [occurrence.timing.repeat.bounds.duration] NVARCHAR(MAX),
    [occurrence.timing.repeat.bounds.range] NVARCHAR(MAX),
    [occurrence.timing.repeat.bounds.period] NVARCHAR(MAX),
    [occurrence.timing.code.id] NVARCHAR(100),
    [occurrence.timing.code.extension] NVARCHAR(MAX),
    [occurrence.timing.code.coding] NVARCHAR(MAX),
    [occurrence.timing.code.text] NVARCHAR(4000),
) WITH (
    LOCATION='/SupplyRequest/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.SupplyRequestIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'SupplyRequest/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.SupplyRequestBasedOn AS
SELECT
    [id],
    [basedOn.JSON],
    [basedOn.id],
    [basedOn.extension],
    [basedOn.reference],
    [basedOn.type],
    [basedOn.identifier.id],
    [basedOn.identifier.extension],
    [basedOn.identifier.use],
    [basedOn.identifier.type],
    [basedOn.identifier.system],
    [basedOn.identifier.value],
    [basedOn.identifier.period],
    [basedOn.identifier.assigner],
    [basedOn.display]
FROM openrowset (
        BULK 'SupplyRequest/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [basedOn.JSON]  VARCHAR(MAX) '$.basedOn'
    ) AS rowset
    CROSS APPLY openjson (rowset.[basedOn.JSON]) with (
        [basedOn.id]                   NVARCHAR(100)       '$.id',
        [basedOn.extension]            NVARCHAR(MAX)       '$.extension',
        [basedOn.reference]            NVARCHAR(4000)      '$.reference',
        [basedOn.type]                 VARCHAR(256)        '$.type',
        [basedOn.identifier.id]        NVARCHAR(100)       '$.identifier.id',
        [basedOn.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [basedOn.identifier.use]       NVARCHAR(64)        '$.identifier.use',
        [basedOn.identifier.type]      NVARCHAR(MAX)       '$.identifier.type',
        [basedOn.identifier.system]    VARCHAR(256)        '$.identifier.system',
        [basedOn.identifier.value]     NVARCHAR(4000)      '$.identifier.value',
        [basedOn.identifier.period]    NVARCHAR(MAX)       '$.identifier.period',
        [basedOn.identifier.assigner]  NVARCHAR(MAX)       '$.identifier.assigner',
        [basedOn.display]              NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.SupplyRequestParameter AS
SELECT
    [id],
    [parameter.JSON],
    [parameter.id],
    [parameter.extension],
    [parameter.modifierExtension],
    [parameter.code.id],
    [parameter.code.extension],
    [parameter.code.coding],
    [parameter.code.text],
    [parameter.value.codeableConcept.id],
    [parameter.value.codeableConcept.extension],
    [parameter.value.codeableConcept.coding],
    [parameter.value.codeableConcept.text],
    [parameter.value.quantity.id],
    [parameter.value.quantity.extension],
    [parameter.value.quantity.value],
    [parameter.value.quantity.comparator],
    [parameter.value.quantity.unit],
    [parameter.value.quantity.system],
    [parameter.value.quantity.code],
    [parameter.value.range.id],
    [parameter.value.range.extension],
    [parameter.value.range.low],
    [parameter.value.range.high],
    [parameter.value.boolean]
FROM openrowset (
        BULK 'SupplyRequest/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [parameter.JSON]  VARCHAR(MAX) '$.parameter'
    ) AS rowset
    CROSS APPLY openjson (rowset.[parameter.JSON]) with (
        [parameter.id]                 NVARCHAR(100)       '$.id',
        [parameter.extension]          NVARCHAR(MAX)       '$.extension',
        [parameter.modifierExtension]  NVARCHAR(MAX)       '$.modifierExtension',
        [parameter.code.id]            NVARCHAR(100)       '$.code.id',
        [parameter.code.extension]     NVARCHAR(MAX)       '$.code.extension',
        [parameter.code.coding]        NVARCHAR(MAX)       '$.code.coding',
        [parameter.code.text]          NVARCHAR(4000)      '$.code.text',
        [parameter.value.codeableConcept.id] NVARCHAR(100)       '$.value.codeableConcept.id',
        [parameter.value.codeableConcept.extension] NVARCHAR(MAX)       '$.value.codeableConcept.extension',
        [parameter.value.codeableConcept.coding] NVARCHAR(MAX)       '$.value.codeableConcept.coding',
        [parameter.value.codeableConcept.text] NVARCHAR(4000)      '$.value.codeableConcept.text',
        [parameter.value.quantity.id]  NVARCHAR(100)       '$.value.quantity.id',
        [parameter.value.quantity.extension] NVARCHAR(MAX)       '$.value.quantity.extension',
        [parameter.value.quantity.value] float               '$.value.quantity.value',
        [parameter.value.quantity.comparator] NVARCHAR(64)        '$.value.quantity.comparator',
        [parameter.value.quantity.unit] NVARCHAR(100)       '$.value.quantity.unit',
        [parameter.value.quantity.system] VARCHAR(256)        '$.value.quantity.system',
        [parameter.value.quantity.code] NVARCHAR(4000)      '$.value.quantity.code',
        [parameter.value.range.id]     NVARCHAR(100)       '$.value.range.id',
        [parameter.value.range.extension] NVARCHAR(MAX)       '$.value.range.extension',
        [parameter.value.range.low]    NVARCHAR(MAX)       '$.value.range.low',
        [parameter.value.range.high]   NVARCHAR(MAX)       '$.value.range.high',
        [parameter.value.boolean]      bit                 '$.value.boolean'
    ) j

GO

CREATE VIEW fhir.SupplyRequestSupplier AS
SELECT
    [id],
    [supplier.JSON],
    [supplier.id],
    [supplier.extension],
    [supplier.reference],
    [supplier.type],
    [supplier.identifier.id],
    [supplier.identifier.extension],
    [supplier.identifier.use],
    [supplier.identifier.type],
    [supplier.identifier.system],
    [supplier.identifier.value],
    [supplier.identifier.period],
    [supplier.identifier.assigner],
    [supplier.display]
FROM openrowset (
        BULK 'SupplyRequest/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [supplier.JSON]  VARCHAR(MAX) '$.supplier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[supplier.JSON]) with (
        [supplier.id]                  NVARCHAR(100)       '$.id',
        [supplier.extension]           NVARCHAR(MAX)       '$.extension',
        [supplier.reference]           NVARCHAR(4000)      '$.reference',
        [supplier.type]                VARCHAR(256)        '$.type',
        [supplier.identifier.id]       NVARCHAR(100)       '$.identifier.id',
        [supplier.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [supplier.identifier.use]      NVARCHAR(64)        '$.identifier.use',
        [supplier.identifier.type]     NVARCHAR(MAX)       '$.identifier.type',
        [supplier.identifier.system]   VARCHAR(256)        '$.identifier.system',
        [supplier.identifier.value]    NVARCHAR(4000)      '$.identifier.value',
        [supplier.identifier.period]   NVARCHAR(MAX)       '$.identifier.period',
        [supplier.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [supplier.display]             NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.SupplyRequestReason AS
SELECT
    [id],
    [reason.JSON],
    [reason.id],
    [reason.extension],
    [reason.concept.id],
    [reason.concept.extension],
    [reason.concept.coding],
    [reason.concept.text],
    [reason.reference.id],
    [reason.reference.extension],
    [reason.reference.reference],
    [reason.reference.type],
    [reason.reference.identifier],
    [reason.reference.display]
FROM openrowset (
        BULK 'SupplyRequest/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [reason.JSON]  VARCHAR(MAX) '$.reason'
    ) AS rowset
    CROSS APPLY openjson (rowset.[reason.JSON]) with (
        [reason.id]                    NVARCHAR(100)       '$.id',
        [reason.extension]             NVARCHAR(MAX)       '$.extension',
        [reason.concept.id]            NVARCHAR(100)       '$.concept.id',
        [reason.concept.extension]     NVARCHAR(MAX)       '$.concept.extension',
        [reason.concept.coding]        NVARCHAR(MAX)       '$.concept.coding',
        [reason.concept.text]          NVARCHAR(4000)      '$.concept.text',
        [reason.reference.id]          NVARCHAR(100)       '$.reference.id',
        [reason.reference.extension]   NVARCHAR(MAX)       '$.reference.extension',
        [reason.reference.reference]   NVARCHAR(4000)      '$.reference.reference',
        [reason.reference.type]        VARCHAR(256)        '$.reference.type',
        [reason.reference.identifier]  NVARCHAR(MAX)       '$.reference.identifier',
        [reason.reference.display]     NVARCHAR(4000)      '$.reference.display'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[Task] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [instantiatesCanonical] VARCHAR(256),
    [instantiatesUri] VARCHAR(256),
    [basedOn] VARCHAR(MAX),
    [groupIdentifier.id] NVARCHAR(100),
    [groupIdentifier.extension] NVARCHAR(MAX),
    [groupIdentifier.use] NVARCHAR(64),
    [groupIdentifier.type.id] NVARCHAR(100),
    [groupIdentifier.type.extension] NVARCHAR(MAX),
    [groupIdentifier.type.coding] NVARCHAR(MAX),
    [groupIdentifier.type.text] NVARCHAR(4000),
    [groupIdentifier.system] VARCHAR(256),
    [groupIdentifier.value] NVARCHAR(4000),
    [groupIdentifier.period.id] NVARCHAR(100),
    [groupIdentifier.period.extension] NVARCHAR(MAX),
    [groupIdentifier.period.start] VARCHAR(64),
    [groupIdentifier.period.end] VARCHAR(64),
    [groupIdentifier.assigner.id] NVARCHAR(100),
    [groupIdentifier.assigner.extension] NVARCHAR(MAX),
    [groupIdentifier.assigner.reference] NVARCHAR(4000),
    [groupIdentifier.assigner.type] VARCHAR(256),
    [groupIdentifier.assigner.identifier] NVARCHAR(MAX),
    [groupIdentifier.assigner.display] NVARCHAR(4000),
    [partOf] VARCHAR(MAX),
    [status] NVARCHAR(100),
    [statusReason.id] NVARCHAR(100),
    [statusReason.extension] NVARCHAR(MAX),
    [statusReason.coding] VARCHAR(MAX),
    [statusReason.text] NVARCHAR(4000),
    [businessStatus.id] NVARCHAR(100),
    [businessStatus.extension] NVARCHAR(MAX),
    [businessStatus.coding] VARCHAR(MAX),
    [businessStatus.text] NVARCHAR(4000),
    [intent] NVARCHAR(100),
    [priority] NVARCHAR(100),
    [code.id] NVARCHAR(100),
    [code.extension] NVARCHAR(MAX),
    [code.coding] VARCHAR(MAX),
    [code.text] NVARCHAR(4000),
    [description] NVARCHAR(4000),
    [focus.id] NVARCHAR(100),
    [focus.extension] NVARCHAR(MAX),
    [focus.reference] NVARCHAR(4000),
    [focus.type] VARCHAR(256),
    [focus.identifier.id] NVARCHAR(100),
    [focus.identifier.extension] NVARCHAR(MAX),
    [focus.identifier.use] NVARCHAR(64),
    [focus.identifier.type] NVARCHAR(MAX),
    [focus.identifier.system] VARCHAR(256),
    [focus.identifier.value] NVARCHAR(4000),
    [focus.identifier.period] NVARCHAR(MAX),
    [focus.identifier.assigner] NVARCHAR(MAX),
    [focus.display] NVARCHAR(4000),
    [for.id] NVARCHAR(100),
    [for.extension] NVARCHAR(MAX),
    [for.reference] NVARCHAR(4000),
    [for.type] VARCHAR(256),
    [for.identifier.id] NVARCHAR(100),
    [for.identifier.extension] NVARCHAR(MAX),
    [for.identifier.use] NVARCHAR(64),
    [for.identifier.type] NVARCHAR(MAX),
    [for.identifier.system] VARCHAR(256),
    [for.identifier.value] NVARCHAR(4000),
    [for.identifier.period] NVARCHAR(MAX),
    [for.identifier.assigner] NVARCHAR(MAX),
    [for.display] NVARCHAR(4000),
    [encounter.id] NVARCHAR(100),
    [encounter.extension] NVARCHAR(MAX),
    [encounter.reference] NVARCHAR(4000),
    [encounter.type] VARCHAR(256),
    [encounter.identifier.id] NVARCHAR(100),
    [encounter.identifier.extension] NVARCHAR(MAX),
    [encounter.identifier.use] NVARCHAR(64),
    [encounter.identifier.type] NVARCHAR(MAX),
    [encounter.identifier.system] VARCHAR(256),
    [encounter.identifier.value] NVARCHAR(4000),
    [encounter.identifier.period] NVARCHAR(MAX),
    [encounter.identifier.assigner] NVARCHAR(MAX),
    [encounter.display] NVARCHAR(4000),
    [executionPeriod.id] NVARCHAR(100),
    [executionPeriod.extension] NVARCHAR(MAX),
    [executionPeriod.start] VARCHAR(64),
    [executionPeriod.end] VARCHAR(64),
    [authoredOn] VARCHAR(64),
    [lastModified] VARCHAR(64),
    [requester.id] NVARCHAR(100),
    [requester.extension] NVARCHAR(MAX),
    [requester.reference] NVARCHAR(4000),
    [requester.type] VARCHAR(256),
    [requester.identifier.id] NVARCHAR(100),
    [requester.identifier.extension] NVARCHAR(MAX),
    [requester.identifier.use] NVARCHAR(64),
    [requester.identifier.type] NVARCHAR(MAX),
    [requester.identifier.system] VARCHAR(256),
    [requester.identifier.value] NVARCHAR(4000),
    [requester.identifier.period] NVARCHAR(MAX),
    [requester.identifier.assigner] NVARCHAR(MAX),
    [requester.display] NVARCHAR(4000),
    [performerType] VARCHAR(MAX),
    [owner.id] NVARCHAR(100),
    [owner.extension] NVARCHAR(MAX),
    [owner.reference] NVARCHAR(4000),
    [owner.type] VARCHAR(256),
    [owner.identifier.id] NVARCHAR(100),
    [owner.identifier.extension] NVARCHAR(MAX),
    [owner.identifier.use] NVARCHAR(64),
    [owner.identifier.type] NVARCHAR(MAX),
    [owner.identifier.system] VARCHAR(256),
    [owner.identifier.value] NVARCHAR(4000),
    [owner.identifier.period] NVARCHAR(MAX),
    [owner.identifier.assigner] NVARCHAR(MAX),
    [owner.display] NVARCHAR(4000),
    [location.id] NVARCHAR(100),
    [location.extension] NVARCHAR(MAX),
    [location.reference] NVARCHAR(4000),
    [location.type] VARCHAR(256),
    [location.identifier.id] NVARCHAR(100),
    [location.identifier.extension] NVARCHAR(MAX),
    [location.identifier.use] NVARCHAR(64),
    [location.identifier.type] NVARCHAR(MAX),
    [location.identifier.system] VARCHAR(256),
    [location.identifier.value] NVARCHAR(4000),
    [location.identifier.period] NVARCHAR(MAX),
    [location.identifier.assigner] NVARCHAR(MAX),
    [location.display] NVARCHAR(4000),
    [reasonCode.id] NVARCHAR(100),
    [reasonCode.extension] NVARCHAR(MAX),
    [reasonCode.coding] VARCHAR(MAX),
    [reasonCode.text] NVARCHAR(4000),
    [reasonReference.id] NVARCHAR(100),
    [reasonReference.extension] NVARCHAR(MAX),
    [reasonReference.reference] NVARCHAR(4000),
    [reasonReference.type] VARCHAR(256),
    [reasonReference.identifier.id] NVARCHAR(100),
    [reasonReference.identifier.extension] NVARCHAR(MAX),
    [reasonReference.identifier.use] NVARCHAR(64),
    [reasonReference.identifier.type] NVARCHAR(MAX),
    [reasonReference.identifier.system] VARCHAR(256),
    [reasonReference.identifier.value] NVARCHAR(4000),
    [reasonReference.identifier.period] NVARCHAR(MAX),
    [reasonReference.identifier.assigner] NVARCHAR(MAX),
    [reasonReference.display] NVARCHAR(4000),
    [insurance] VARCHAR(MAX),
    [note] VARCHAR(MAX),
    [relevantHistory] VARCHAR(MAX),
    [restriction.id] NVARCHAR(100),
    [restriction.extension] NVARCHAR(MAX),
    [restriction.modifierExtension] NVARCHAR(MAX),
    [restriction.repetitions] bigint,
    [restriction.period.id] NVARCHAR(100),
    [restriction.period.extension] NVARCHAR(MAX),
    [restriction.period.start] VARCHAR(64),
    [restriction.period.end] VARCHAR(64),
    [restriction.recipient] VARCHAR(MAX),
    [input] VARCHAR(MAX),
    [output] VARCHAR(MAX),
) WITH (
    LOCATION='/Task/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.TaskIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'Task/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.TaskBasedOn AS
SELECT
    [id],
    [basedOn.JSON],
    [basedOn.id],
    [basedOn.extension],
    [basedOn.reference],
    [basedOn.type],
    [basedOn.identifier.id],
    [basedOn.identifier.extension],
    [basedOn.identifier.use],
    [basedOn.identifier.type],
    [basedOn.identifier.system],
    [basedOn.identifier.value],
    [basedOn.identifier.period],
    [basedOn.identifier.assigner],
    [basedOn.display]
FROM openrowset (
        BULK 'Task/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [basedOn.JSON]  VARCHAR(MAX) '$.basedOn'
    ) AS rowset
    CROSS APPLY openjson (rowset.[basedOn.JSON]) with (
        [basedOn.id]                   NVARCHAR(100)       '$.id',
        [basedOn.extension]            NVARCHAR(MAX)       '$.extension',
        [basedOn.reference]            NVARCHAR(4000)      '$.reference',
        [basedOn.type]                 VARCHAR(256)        '$.type',
        [basedOn.identifier.id]        NVARCHAR(100)       '$.identifier.id',
        [basedOn.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [basedOn.identifier.use]       NVARCHAR(64)        '$.identifier.use',
        [basedOn.identifier.type]      NVARCHAR(MAX)       '$.identifier.type',
        [basedOn.identifier.system]    VARCHAR(256)        '$.identifier.system',
        [basedOn.identifier.value]     NVARCHAR(4000)      '$.identifier.value',
        [basedOn.identifier.period]    NVARCHAR(MAX)       '$.identifier.period',
        [basedOn.identifier.assigner]  NVARCHAR(MAX)       '$.identifier.assigner',
        [basedOn.display]              NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.TaskPartOf AS
SELECT
    [id],
    [partOf.JSON],
    [partOf.id],
    [partOf.extension],
    [partOf.reference],
    [partOf.type],
    [partOf.identifier.id],
    [partOf.identifier.extension],
    [partOf.identifier.use],
    [partOf.identifier.type],
    [partOf.identifier.system],
    [partOf.identifier.value],
    [partOf.identifier.period],
    [partOf.identifier.assigner],
    [partOf.display]
FROM openrowset (
        BULK 'Task/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [partOf.JSON]  VARCHAR(MAX) '$.partOf'
    ) AS rowset
    CROSS APPLY openjson (rowset.[partOf.JSON]) with (
        [partOf.id]                    NVARCHAR(100)       '$.id',
        [partOf.extension]             NVARCHAR(MAX)       '$.extension',
        [partOf.reference]             NVARCHAR(4000)      '$.reference',
        [partOf.type]                  VARCHAR(256)        '$.type',
        [partOf.identifier.id]         NVARCHAR(100)       '$.identifier.id',
        [partOf.identifier.extension]  NVARCHAR(MAX)       '$.identifier.extension',
        [partOf.identifier.use]        NVARCHAR(64)        '$.identifier.use',
        [partOf.identifier.type]       NVARCHAR(MAX)       '$.identifier.type',
        [partOf.identifier.system]     VARCHAR(256)        '$.identifier.system',
        [partOf.identifier.value]      NVARCHAR(4000)      '$.identifier.value',
        [partOf.identifier.period]     NVARCHAR(MAX)       '$.identifier.period',
        [partOf.identifier.assigner]   NVARCHAR(MAX)       '$.identifier.assigner',
        [partOf.display]               NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.TaskPerformerType AS
SELECT
    [id],
    [performerType.JSON],
    [performerType.id],
    [performerType.extension],
    [performerType.coding],
    [performerType.text]
FROM openrowset (
        BULK 'Task/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [performerType.JSON]  VARCHAR(MAX) '$.performerType'
    ) AS rowset
    CROSS APPLY openjson (rowset.[performerType.JSON]) with (
        [performerType.id]             NVARCHAR(100)       '$.id',
        [performerType.extension]      NVARCHAR(MAX)       '$.extension',
        [performerType.coding]         NVARCHAR(MAX)       '$.coding' AS JSON,
        [performerType.text]           NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.TaskInsurance AS
SELECT
    [id],
    [insurance.JSON],
    [insurance.id],
    [insurance.extension],
    [insurance.reference],
    [insurance.type],
    [insurance.identifier.id],
    [insurance.identifier.extension],
    [insurance.identifier.use],
    [insurance.identifier.type],
    [insurance.identifier.system],
    [insurance.identifier.value],
    [insurance.identifier.period],
    [insurance.identifier.assigner],
    [insurance.display]
FROM openrowset (
        BULK 'Task/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [insurance.JSON]  VARCHAR(MAX) '$.insurance'
    ) AS rowset
    CROSS APPLY openjson (rowset.[insurance.JSON]) with (
        [insurance.id]                 NVARCHAR(100)       '$.id',
        [insurance.extension]          NVARCHAR(MAX)       '$.extension',
        [insurance.reference]          NVARCHAR(4000)      '$.reference',
        [insurance.type]               VARCHAR(256)        '$.type',
        [insurance.identifier.id]      NVARCHAR(100)       '$.identifier.id',
        [insurance.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [insurance.identifier.use]     NVARCHAR(64)        '$.identifier.use',
        [insurance.identifier.type]    NVARCHAR(MAX)       '$.identifier.type',
        [insurance.identifier.system]  VARCHAR(256)        '$.identifier.system',
        [insurance.identifier.value]   NVARCHAR(4000)      '$.identifier.value',
        [insurance.identifier.period]  NVARCHAR(MAX)       '$.identifier.period',
        [insurance.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [insurance.display]            NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.TaskNote AS
SELECT
    [id],
    [note.JSON],
    [note.id],
    [note.extension],
    [note.time],
    [note.text],
    [note.author.reference.id],
    [note.author.reference.extension],
    [note.author.reference.reference],
    [note.author.reference.type],
    [note.author.reference.identifier],
    [note.author.reference.display],
    [note.author.string]
FROM openrowset (
        BULK 'Task/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [note.JSON]  VARCHAR(MAX) '$.note'
    ) AS rowset
    CROSS APPLY openjson (rowset.[note.JSON]) with (
        [note.id]                      NVARCHAR(100)       '$.id',
        [note.extension]               NVARCHAR(MAX)       '$.extension',
        [note.time]                    VARCHAR(64)         '$.time',
        [note.text]                    NVARCHAR(MAX)       '$.text',
        [note.author.reference.id]     NVARCHAR(100)       '$.author.reference.id',
        [note.author.reference.extension] NVARCHAR(MAX)       '$.author.reference.extension',
        [note.author.reference.reference] NVARCHAR(4000)      '$.author.reference.reference',
        [note.author.reference.type]   VARCHAR(256)        '$.author.reference.type',
        [note.author.reference.identifier] NVARCHAR(MAX)       '$.author.reference.identifier',
        [note.author.reference.display] NVARCHAR(4000)      '$.author.reference.display',
        [note.author.string]           NVARCHAR(4000)      '$.author.string'
    ) j

GO

CREATE VIEW fhir.TaskRelevantHistory AS
SELECT
    [id],
    [relevantHistory.JSON],
    [relevantHistory.id],
    [relevantHistory.extension],
    [relevantHistory.reference],
    [relevantHistory.type],
    [relevantHistory.identifier.id],
    [relevantHistory.identifier.extension],
    [relevantHistory.identifier.use],
    [relevantHistory.identifier.type],
    [relevantHistory.identifier.system],
    [relevantHistory.identifier.value],
    [relevantHistory.identifier.period],
    [relevantHistory.identifier.assigner],
    [relevantHistory.display]
FROM openrowset (
        BULK 'Task/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [relevantHistory.JSON]  VARCHAR(MAX) '$.relevantHistory'
    ) AS rowset
    CROSS APPLY openjson (rowset.[relevantHistory.JSON]) with (
        [relevantHistory.id]           NVARCHAR(100)       '$.id',
        [relevantHistory.extension]    NVARCHAR(MAX)       '$.extension',
        [relevantHistory.reference]    NVARCHAR(4000)      '$.reference',
        [relevantHistory.type]         VARCHAR(256)        '$.type',
        [relevantHistory.identifier.id] NVARCHAR(100)       '$.identifier.id',
        [relevantHistory.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [relevantHistory.identifier.use] NVARCHAR(64)        '$.identifier.use',
        [relevantHistory.identifier.type] NVARCHAR(MAX)       '$.identifier.type',
        [relevantHistory.identifier.system] VARCHAR(256)        '$.identifier.system',
        [relevantHistory.identifier.value] NVARCHAR(4000)      '$.identifier.value',
        [relevantHistory.identifier.period] NVARCHAR(MAX)       '$.identifier.period',
        [relevantHistory.identifier.assigner] NVARCHAR(MAX)       '$.identifier.assigner',
        [relevantHistory.display]      NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.TaskInput AS
SELECT
    [id],
    [input.JSON],
    [input.id],
    [input.extension],
    [input.modifierExtension],
    [input.type.id],
    [input.type.extension],
    [input.type.coding],
    [input.type.text],
    [input.valueInteger64],
    [input.valueCodeableReference.id],
    [input.valueCodeableReference.extension],
    [input.valueCodeableReference.concept],
    [input.valueCodeableReference.reference],
    [input.valueRatioRange.id],
    [input.valueRatioRange.extension],
    [input.valueRatioRange.lowNumerator],
    [input.valueRatioRange.highNumerator],
    [input.valueRatioRange.denominator],
    [input.value.base64Binary],
    [input.value.boolean],
    [input.value.canonical],
    [input.value.code],
    [input.value.date],
    [input.value.dateTime],
    [input.value.decimal],
    [input.value.id],
    [input.value.instant],
    [input.value.integer],
    [input.value.markdown],
    [input.value.oid],
    [input.value.positiveInt],
    [input.value.string],
    [input.value.time],
    [input.value.unsignedInt],
    [input.value.uri],
    [input.value.url],
    [input.value.uuid],
    [input.value.address.id],
    [input.value.address.extension],
    [input.value.address.use],
    [input.value.address.type],
    [input.value.address.text],
    [input.value.address.line],
    [input.value.address.city],
    [input.value.address.district],
    [input.value.address.state],
    [input.value.address.postalCode],
    [input.value.address.country],
    [input.value.address.period],
    [input.value.age.id],
    [input.value.age.extension],
    [input.value.age.value],
    [input.value.age.comparator],
    [input.value.age.unit],
    [input.value.age.system],
    [input.value.age.code],
    [input.value.annotation.id],
    [input.value.annotation.extension],
    [input.value.annotation.time],
    [input.value.annotation.text],
    [input.value.annotation.author.reference],
    [input.value.annotation.author.string],
    [input.value.attachment.id],
    [input.value.attachment.extension],
    [input.value.attachment.contentType],
    [input.value.attachment.language],
    [input.value.attachment.data],
    [input.value.attachment.url],
    [input.value.attachment.size],
    [input.value.attachment.hash],
    [input.value.attachment.title],
    [input.value.attachment.creation],
    [input.value.attachment.height],
    [input.value.attachment.width],
    [input.value.attachment.frames],
    [input.value.attachment.duration],
    [input.value.attachment.pages],
    [input.value.codeableConcept.id],
    [input.value.codeableConcept.extension],
    [input.value.codeableConcept.coding],
    [input.value.codeableConcept.text],
    [input.value.coding.id],
    [input.value.coding.extension],
    [input.value.coding.system],
    [input.value.coding.version],
    [input.value.coding.code],
    [input.value.coding.display],
    [input.value.coding.userSelected],
    [input.value.contactPoint.id],
    [input.value.contactPoint.extension],
    [input.value.contactPoint.system],
    [input.value.contactPoint.value],
    [input.value.contactPoint.use],
    [input.value.contactPoint.rank],
    [input.value.contactPoint.period],
    [input.value.count.id],
    [input.value.count.extension],
    [input.value.count.value],
    [input.value.count.comparator],
    [input.value.count.unit],
    [input.value.count.system],
    [input.value.count.code],
    [input.value.distance.id],
    [input.value.distance.extension],
    [input.value.distance.value],
    [input.value.distance.comparator],
    [input.value.distance.unit],
    [input.value.distance.system],
    [input.value.distance.code],
    [input.value.duration.id],
    [input.value.duration.extension],
    [input.value.duration.value],
    [input.value.duration.comparator],
    [input.value.duration.unit],
    [input.value.duration.system],
    [input.value.duration.code],
    [input.value.humanName.id],
    [input.value.humanName.extension],
    [input.value.humanName.use],
    [input.value.humanName.text],
    [input.value.humanName.family],
    [input.value.humanName.given],
    [input.value.humanName.prefix],
    [input.value.humanName.suffix],
    [input.value.humanName.period],
    [input.value.identifier.id],
    [input.value.identifier.extension],
    [input.value.identifier.use],
    [input.value.identifier.type],
    [input.value.identifier.system],
    [input.value.identifier.value],
    [input.value.identifier.period],
    [input.value.identifier.assigner],
    [input.value.money.id],
    [input.value.money.extension],
    [input.value.money.value],
    [input.value.money.currency],
    [input.value.period.id],
    [input.value.period.extension],
    [input.value.period.start],
    [input.value.period.end],
    [input.value.quantity.id],
    [input.value.quantity.extension],
    [input.value.quantity.value],
    [input.value.quantity.comparator],
    [input.value.quantity.unit],
    [input.value.quantity.system],
    [input.value.quantity.code],
    [input.value.range.id],
    [input.value.range.extension],
    [input.value.range.low],
    [input.value.range.high],
    [input.value.ratio.id],
    [input.value.ratio.extension],
    [input.value.ratio.numerator],
    [input.value.ratio.denominator],
    [input.value.reference.id],
    [input.value.reference.extension],
    [input.value.reference.reference],
    [input.value.reference.type],
    [input.value.reference.identifier],
    [input.value.reference.display],
    [input.value.sampledData.id],
    [input.value.sampledData.extension],
    [input.value.sampledData.origin],
    [input.value.sampledData.period],
    [input.value.sampledData.factor],
    [input.value.sampledData.lowerLimit],
    [input.value.sampledData.upperLimit],
    [input.value.sampledData.dimensions],
    [input.value.sampledData.data],
    [input.value.signature.id],
    [input.value.signature.extension],
    [input.value.signature.type],
    [input.value.signature.when],
    [input.value.signature.who],
    [input.value.signature.onBehalfOf],
    [input.value.signature.targetFormat],
    [input.value.signature.sigFormat],
    [input.value.signature.data],
    [input.value.timing.id],
    [input.value.timing.extension],
    [input.value.timing.modifierExtension],
    [input.value.timing.event],
    [input.value.timing.repeat],
    [input.value.timing.code],
    [input.value.contactDetail.id],
    [input.value.contactDetail.extension],
    [input.value.contactDetail.name],
    [input.value.contactDetail.telecom],
    [input.value.contributor.id],
    [input.value.contributor.extension],
    [input.value.contributor.type],
    [input.value.contributor.name],
    [input.value.contributor.contact],
    [input.value.dataRequirement.id],
    [input.value.dataRequirement.extension],
    [input.value.dataRequirement.type],
    [input.value.dataRequirement.profile],
    [input.value.dataRequirement.mustSupport],
    [input.value.dataRequirement.codeFilter],
    [input.value.dataRequirement.dateFilter],
    [input.value.dataRequirement.limit],
    [input.value.dataRequirement.sort],
    [input.value.dataRequirement.subject.codeableConcept],
    [input.value.dataRequirement.subject.reference],
    [input.value.expression.id],
    [input.value.expression.extension],
    [input.value.expression.description],
    [input.value.expression.name],
    [input.value.expression.language],
    [input.value.expression.expression],
    [input.value.expression.reference],
    [input.value.parameterDefinition.id],
    [input.value.parameterDefinition.extension],
    [input.value.parameterDefinition.name],
    [input.value.parameterDefinition.use],
    [input.value.parameterDefinition.min],
    [input.value.parameterDefinition.max],
    [input.value.parameterDefinition.documentation],
    [input.value.parameterDefinition.type],
    [input.value.parameterDefinition.profile],
    [input.value.relatedArtifact.id],
    [input.value.relatedArtifact.extension],
    [input.value.relatedArtifact.type],
    [input.value.relatedArtifact.classifier],
    [input.value.relatedArtifact.label],
    [input.value.relatedArtifact.display],
    [input.value.relatedArtifact.citation],
    [input.value.relatedArtifact.document],
    [input.value.relatedArtifact.resource],
    [input.value.relatedArtifact.resourceReference],
    [input.value.triggerDefinition.id],
    [input.value.triggerDefinition.extension],
    [input.value.triggerDefinition.type],
    [input.value.triggerDefinition.name],
    [input.value.triggerDefinition.data],
    [input.value.triggerDefinition.condition],
    [input.value.triggerDefinition.timing.timing],
    [input.value.triggerDefinition.timing.reference],
    [input.value.triggerDefinition.timing.date],
    [input.value.triggerDefinition.timing.dateTime],
    [input.value.usageContext.id],
    [input.value.usageContext.extension],
    [input.value.usageContext.code],
    [input.value.usageContext.value.codeableConcept],
    [input.value.usageContext.value.quantity],
    [input.value.usageContext.value.range],
    [input.value.usageContext.value.reference],
    [input.value.dosage.id],
    [input.value.dosage.extension],
    [input.value.dosage.modifierExtension],
    [input.value.dosage.sequence],
    [input.value.dosage.text],
    [input.value.dosage.additionalInstruction],
    [input.value.dosage.patientInstruction],
    [input.value.dosage.timing],
    [input.value.dosage.site],
    [input.value.dosage.route],
    [input.value.dosage.method],
    [input.value.dosage.doseAndRate],
    [input.value.dosage.maxDosePerPeriod],
    [input.value.dosage.maxDosePerAdministration],
    [input.value.dosage.maxDosePerLifetime],
    [input.value.dosage.asNeeded.boolean],
    [input.value.dosage.asNeeded.codeableConcept],
    [input.value.meta.id],
    [input.value.meta.extension],
    [input.value.meta.versionId],
    [input.value.meta.lastUpdated],
    [input.value.meta.source],
    [input.value.meta.profile],
    [input.value.meta.security],
    [input.value.meta.tag]
FROM openrowset (
        BULK 'Task/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [input.JSON]  VARCHAR(MAX) '$.input'
    ) AS rowset
    CROSS APPLY openjson (rowset.[input.JSON]) with (
        [input.id]                     NVARCHAR(100)       '$.id',
        [input.extension]              NVARCHAR(MAX)       '$.extension',
        [input.modifierExtension]      NVARCHAR(MAX)       '$.modifierExtension',
        [input.type.id]                NVARCHAR(100)       '$.type.id',
        [input.type.extension]         NVARCHAR(MAX)       '$.type.extension',
        [input.type.coding]            NVARCHAR(MAX)       '$.type.coding',
        [input.type.text]              NVARCHAR(4000)      '$.type.text',
        [input.valueInteger64]         NVARCHAR(4000)      '$.valueInteger64',
        [input.valueCodeableReference.id] NVARCHAR(100)       '$.valueCodeableReference.id',
        [input.valueCodeableReference.extension] NVARCHAR(MAX)       '$.valueCodeableReference.extension',
        [input.valueCodeableReference.concept] NVARCHAR(MAX)       '$.valueCodeableReference.concept',
        [input.valueCodeableReference.reference] NVARCHAR(MAX)       '$.valueCodeableReference.reference',
        [input.valueRatioRange.id]     NVARCHAR(100)       '$.valueRatioRange.id',
        [input.valueRatioRange.extension] NVARCHAR(MAX)       '$.valueRatioRange.extension',
        [input.valueRatioRange.lowNumerator] NVARCHAR(MAX)       '$.valueRatioRange.lowNumerator',
        [input.valueRatioRange.highNumerator] NVARCHAR(MAX)       '$.valueRatioRange.highNumerator',
        [input.valueRatioRange.denominator] NVARCHAR(MAX)       '$.valueRatioRange.denominator',
        [input.value.base64Binary]     NVARCHAR(MAX)       '$.value.base64Binary',
        [input.value.boolean]          bit                 '$.value.boolean',
        [input.value.canonical]        VARCHAR(256)        '$.value.canonical',
        [input.value.code]             NVARCHAR(4000)      '$.value.code',
        [input.value.date]             VARCHAR(64)         '$.value.date',
        [input.value.dateTime]         VARCHAR(64)         '$.value.dateTime',
        [input.value.decimal]          float               '$.value.decimal',
        [input.value.id]               VARCHAR(64)         '$.value.id',
        [input.value.instant]          VARCHAR(64)         '$.value.instant',
        [input.value.integer]          bigint              '$.value.integer',
        [input.value.markdown]         NVARCHAR(MAX)       '$.value.markdown',
        [input.value.oid]              VARCHAR(64)         '$.value.oid',
        [input.value.positiveInt]      bigint              '$.value.positiveInt',
        [input.value.string]           NVARCHAR(4000)      '$.value.string',
        [input.value.time]             NVARCHAR(MAX)       '$.value.time',
        [input.value.unsignedInt]      bigint              '$.value.unsignedInt',
        [input.value.uri]              VARCHAR(256)        '$.value.uri',
        [input.value.url]              VARCHAR(256)        '$.value.url',
        [input.value.uuid]             NVARCHAR(MAX)       '$.value.uuid',
        [input.value.address.id]       NVARCHAR(100)       '$.value.address.id',
        [input.value.address.extension] NVARCHAR(MAX)       '$.value.address.extension',
        [input.value.address.use]      NVARCHAR(64)        '$.value.address.use',
        [input.value.address.type]     NVARCHAR(64)        '$.value.address.type',
        [input.value.address.text]     NVARCHAR(4000)      '$.value.address.text',
        [input.value.address.line]     NVARCHAR(MAX)       '$.value.address.line',
        [input.value.address.city]     NVARCHAR(500)       '$.value.address.city',
        [input.value.address.district] NVARCHAR(500)       '$.value.address.district',
        [input.value.address.state]    NVARCHAR(500)       '$.value.address.state',
        [input.value.address.postalCode] NVARCHAR(100)       '$.value.address.postalCode',
        [input.value.address.country]  NVARCHAR(500)       '$.value.address.country',
        [input.value.address.period]   NVARCHAR(MAX)       '$.value.address.period',
        [input.value.age.id]           NVARCHAR(100)       '$.value.age.id',
        [input.value.age.extension]    NVARCHAR(MAX)       '$.value.age.extension',
        [input.value.age.value]        float               '$.value.age.value',
        [input.value.age.comparator]   NVARCHAR(64)        '$.value.age.comparator',
        [input.value.age.unit]         NVARCHAR(100)       '$.value.age.unit',
        [input.value.age.system]       VARCHAR(256)        '$.value.age.system',
        [input.value.age.code]         NVARCHAR(4000)      '$.value.age.code',
        [input.value.annotation.id]    NVARCHAR(100)       '$.value.annotation.id',
        [input.value.annotation.extension] NVARCHAR(MAX)       '$.value.annotation.extension',
        [input.value.annotation.time]  VARCHAR(64)         '$.value.annotation.time',
        [input.value.annotation.text]  NVARCHAR(MAX)       '$.value.annotation.text',
        [input.value.annotation.author.reference] NVARCHAR(MAX)       '$.value.annotation.author.reference',
        [input.value.annotation.author.string] NVARCHAR(4000)      '$.value.annotation.author.string',
        [input.value.attachment.id]    NVARCHAR(100)       '$.value.attachment.id',
        [input.value.attachment.extension] NVARCHAR(MAX)       '$.value.attachment.extension',
        [input.value.attachment.contentType] NVARCHAR(100)       '$.value.attachment.contentType',
        [input.value.attachment.language] NVARCHAR(100)       '$.value.attachment.language',
        [input.value.attachment.data]  NVARCHAR(MAX)       '$.value.attachment.data',
        [input.value.attachment.url]   VARCHAR(256)        '$.value.attachment.url',
        [input.value.attachment.size]  NVARCHAR(MAX)       '$.value.attachment.size',
        [input.value.attachment.hash]  NVARCHAR(MAX)       '$.value.attachment.hash',
        [input.value.attachment.title] NVARCHAR(4000)      '$.value.attachment.title',
        [input.value.attachment.creation] VARCHAR(64)         '$.value.attachment.creation',
        [input.value.attachment.height] bigint              '$.value.attachment.height',
        [input.value.attachment.width] bigint              '$.value.attachment.width',
        [input.value.attachment.frames] bigint              '$.value.attachment.frames',
        [input.value.attachment.duration] float               '$.value.attachment.duration',
        [input.value.attachment.pages] bigint              '$.value.attachment.pages',
        [input.value.codeableConcept.id] NVARCHAR(100)       '$.value.codeableConcept.id',
        [input.value.codeableConcept.extension] NVARCHAR(MAX)       '$.value.codeableConcept.extension',
        [input.value.codeableConcept.coding] NVARCHAR(MAX)       '$.value.codeableConcept.coding',
        [input.value.codeableConcept.text] NVARCHAR(4000)      '$.value.codeableConcept.text',
        [input.value.coding.id]        NVARCHAR(100)       '$.value.coding.id',
        [input.value.coding.extension] NVARCHAR(MAX)       '$.value.coding.extension',
        [input.value.coding.system]    VARCHAR(256)        '$.value.coding.system',
        [input.value.coding.version]   NVARCHAR(100)       '$.value.coding.version',
        [input.value.coding.code]      NVARCHAR(4000)      '$.value.coding.code',
        [input.value.coding.display]   NVARCHAR(4000)      '$.value.coding.display',
        [input.value.coding.userSelected] bit                 '$.value.coding.userSelected',
        [input.value.contactPoint.id]  NVARCHAR(100)       '$.value.contactPoint.id',
        [input.value.contactPoint.extension] NVARCHAR(MAX)       '$.value.contactPoint.extension',
        [input.value.contactPoint.system] NVARCHAR(64)        '$.value.contactPoint.system',
        [input.value.contactPoint.value] NVARCHAR(4000)      '$.value.contactPoint.value',
        [input.value.contactPoint.use] NVARCHAR(64)        '$.value.contactPoint.use',
        [input.value.contactPoint.rank] bigint              '$.value.contactPoint.rank',
        [input.value.contactPoint.period] NVARCHAR(MAX)       '$.value.contactPoint.period',
        [input.value.count.id]         NVARCHAR(100)       '$.value.count.id',
        [input.value.count.extension]  NVARCHAR(MAX)       '$.value.count.extension',
        [input.value.count.value]      float               '$.value.count.value',
        [input.value.count.comparator] NVARCHAR(64)        '$.value.count.comparator',
        [input.value.count.unit]       NVARCHAR(100)       '$.value.count.unit',
        [input.value.count.system]     VARCHAR(256)        '$.value.count.system',
        [input.value.count.code]       NVARCHAR(4000)      '$.value.count.code',
        [input.value.distance.id]      NVARCHAR(100)       '$.value.distance.id',
        [input.value.distance.extension] NVARCHAR(MAX)       '$.value.distance.extension',
        [input.value.distance.value]   float               '$.value.distance.value',
        [input.value.distance.comparator] NVARCHAR(64)        '$.value.distance.comparator',
        [input.value.distance.unit]    NVARCHAR(100)       '$.value.distance.unit',
        [input.value.distance.system]  VARCHAR(256)        '$.value.distance.system',
        [input.value.distance.code]    NVARCHAR(4000)      '$.value.distance.code',
        [input.value.duration.id]      NVARCHAR(100)       '$.value.duration.id',
        [input.value.duration.extension] NVARCHAR(MAX)       '$.value.duration.extension',
        [input.value.duration.value]   float               '$.value.duration.value',
        [input.value.duration.comparator] NVARCHAR(64)        '$.value.duration.comparator',
        [input.value.duration.unit]    NVARCHAR(100)       '$.value.duration.unit',
        [input.value.duration.system]  VARCHAR(256)        '$.value.duration.system',
        [input.value.duration.code]    NVARCHAR(4000)      '$.value.duration.code',
        [input.value.humanName.id]     NVARCHAR(100)       '$.value.humanName.id',
        [input.value.humanName.extension] NVARCHAR(MAX)       '$.value.humanName.extension',
        [input.value.humanName.use]    NVARCHAR(64)        '$.value.humanName.use',
        [input.value.humanName.text]   NVARCHAR(4000)      '$.value.humanName.text',
        [input.value.humanName.family] NVARCHAR(500)       '$.value.humanName.family',
        [input.value.humanName.given]  NVARCHAR(MAX)       '$.value.humanName.given',
        [input.value.humanName.prefix] NVARCHAR(MAX)       '$.value.humanName.prefix',
        [input.value.humanName.suffix] NVARCHAR(MAX)       '$.value.humanName.suffix',
        [input.value.humanName.period] NVARCHAR(MAX)       '$.value.humanName.period',
        [input.value.identifier.id]    NVARCHAR(100)       '$.value.identifier.id',
        [input.value.identifier.extension] NVARCHAR(MAX)       '$.value.identifier.extension',
        [input.value.identifier.use]   NVARCHAR(64)        '$.value.identifier.use',
        [input.value.identifier.type]  NVARCHAR(MAX)       '$.value.identifier.type',
        [input.value.identifier.system] VARCHAR(256)        '$.value.identifier.system',
        [input.value.identifier.value] NVARCHAR(4000)      '$.value.identifier.value',
        [input.value.identifier.period] NVARCHAR(MAX)       '$.value.identifier.period',
        [input.value.identifier.assigner] NVARCHAR(MAX)       '$.value.identifier.assigner',
        [input.value.money.id]         NVARCHAR(100)       '$.value.money.id',
        [input.value.money.extension]  NVARCHAR(MAX)       '$.value.money.extension',
        [input.value.money.value]      float               '$.value.money.value',
        [input.value.money.currency]   NVARCHAR(100)       '$.value.money.currency',
        [input.value.period.id]        NVARCHAR(100)       '$.value.period.id',
        [input.value.period.extension] NVARCHAR(MAX)       '$.value.period.extension',
        [input.value.period.start]     VARCHAR(64)         '$.value.period.start',
        [input.value.period.end]       VARCHAR(64)         '$.value.period.end',
        [input.value.quantity.id]      NVARCHAR(100)       '$.value.quantity.id',
        [input.value.quantity.extension] NVARCHAR(MAX)       '$.value.quantity.extension',
        [input.value.quantity.value]   float               '$.value.quantity.value',
        [input.value.quantity.comparator] NVARCHAR(64)        '$.value.quantity.comparator',
        [input.value.quantity.unit]    NVARCHAR(100)       '$.value.quantity.unit',
        [input.value.quantity.system]  VARCHAR(256)        '$.value.quantity.system',
        [input.value.quantity.code]    NVARCHAR(4000)      '$.value.quantity.code',
        [input.value.range.id]         NVARCHAR(100)       '$.value.range.id',
        [input.value.range.extension]  NVARCHAR(MAX)       '$.value.range.extension',
        [input.value.range.low]        NVARCHAR(MAX)       '$.value.range.low',
        [input.value.range.high]       NVARCHAR(MAX)       '$.value.range.high',
        [input.value.ratio.id]         NVARCHAR(100)       '$.value.ratio.id',
        [input.value.ratio.extension]  NVARCHAR(MAX)       '$.value.ratio.extension',
        [input.value.ratio.numerator]  NVARCHAR(MAX)       '$.value.ratio.numerator',
        [input.value.ratio.denominator] NVARCHAR(MAX)       '$.value.ratio.denominator',
        [input.value.reference.id]     NVARCHAR(100)       '$.value.reference.id',
        [input.value.reference.extension] NVARCHAR(MAX)       '$.value.reference.extension',
        [input.value.reference.reference] NVARCHAR(4000)      '$.value.reference.reference',
        [input.value.reference.type]   VARCHAR(256)        '$.value.reference.type',
        [input.value.reference.identifier] NVARCHAR(MAX)       '$.value.reference.identifier',
        [input.value.reference.display] NVARCHAR(4000)      '$.value.reference.display',
        [input.value.sampledData.id]   NVARCHAR(100)       '$.value.sampledData.id',
        [input.value.sampledData.extension] NVARCHAR(MAX)       '$.value.sampledData.extension',
        [input.value.sampledData.origin] NVARCHAR(MAX)       '$.value.sampledData.origin',
        [input.value.sampledData.period] float               '$.value.sampledData.period',
        [input.value.sampledData.factor] float               '$.value.sampledData.factor',
        [input.value.sampledData.lowerLimit] float               '$.value.sampledData.lowerLimit',
        [input.value.sampledData.upperLimit] float               '$.value.sampledData.upperLimit',
        [input.value.sampledData.dimensions] bigint              '$.value.sampledData.dimensions',
        [input.value.sampledData.data] NVARCHAR(4000)      '$.value.sampledData.data',
        [input.value.signature.id]     NVARCHAR(100)       '$.value.signature.id',
        [input.value.signature.extension] NVARCHAR(MAX)       '$.value.signature.extension',
        [input.value.signature.type]   NVARCHAR(MAX)       '$.value.signature.type',
        [input.value.signature.when]   VARCHAR(64)         '$.value.signature.when',
        [input.value.signature.who]    NVARCHAR(MAX)       '$.value.signature.who',
        [input.value.signature.onBehalfOf] NVARCHAR(MAX)       '$.value.signature.onBehalfOf',
        [input.value.signature.targetFormat] NVARCHAR(100)       '$.value.signature.targetFormat',
        [input.value.signature.sigFormat] NVARCHAR(100)       '$.value.signature.sigFormat',
        [input.value.signature.data]   NVARCHAR(MAX)       '$.value.signature.data',
        [input.value.timing.id]        NVARCHAR(100)       '$.value.timing.id',
        [input.value.timing.extension] NVARCHAR(MAX)       '$.value.timing.extension',
        [input.value.timing.modifierExtension] NVARCHAR(MAX)       '$.value.timing.modifierExtension',
        [input.value.timing.event]     NVARCHAR(MAX)       '$.value.timing.event',
        [input.value.timing.repeat]    NVARCHAR(MAX)       '$.value.timing.repeat',
        [input.value.timing.code]      NVARCHAR(MAX)       '$.value.timing.code',
        [input.value.contactDetail.id] NVARCHAR(100)       '$.value.contactDetail.id',
        [input.value.contactDetail.extension] NVARCHAR(MAX)       '$.value.contactDetail.extension',
        [input.value.contactDetail.name] NVARCHAR(500)       '$.value.contactDetail.name',
        [input.value.contactDetail.telecom] NVARCHAR(MAX)       '$.value.contactDetail.telecom',
        [input.value.contributor.id]   NVARCHAR(100)       '$.value.contributor.id',
        [input.value.contributor.extension] NVARCHAR(MAX)       '$.value.contributor.extension',
        [input.value.contributor.type] NVARCHAR(64)        '$.value.contributor.type',
        [input.value.contributor.name] NVARCHAR(500)       '$.value.contributor.name',
        [input.value.contributor.contact] NVARCHAR(MAX)       '$.value.contributor.contact',
        [input.value.dataRequirement.id] NVARCHAR(100)       '$.value.dataRequirement.id',
        [input.value.dataRequirement.extension] NVARCHAR(MAX)       '$.value.dataRequirement.extension',
        [input.value.dataRequirement.type] NVARCHAR(100)       '$.value.dataRequirement.type',
        [input.value.dataRequirement.profile] NVARCHAR(MAX)       '$.value.dataRequirement.profile',
        [input.value.dataRequirement.mustSupport] NVARCHAR(MAX)       '$.value.dataRequirement.mustSupport',
        [input.value.dataRequirement.codeFilter] NVARCHAR(MAX)       '$.value.dataRequirement.codeFilter',
        [input.value.dataRequirement.dateFilter] NVARCHAR(MAX)       '$.value.dataRequirement.dateFilter',
        [input.value.dataRequirement.limit] bigint              '$.value.dataRequirement.limit',
        [input.value.dataRequirement.sort] NVARCHAR(MAX)       '$.value.dataRequirement.sort',
        [input.value.dataRequirement.subject.codeableConcept] NVARCHAR(MAX)       '$.value.dataRequirement.subject.codeableConcept',
        [input.value.dataRequirement.subject.reference] NVARCHAR(MAX)       '$.value.dataRequirement.subject.reference',
        [input.value.expression.id]    NVARCHAR(100)       '$.value.expression.id',
        [input.value.expression.extension] NVARCHAR(MAX)       '$.value.expression.extension',
        [input.value.expression.description] NVARCHAR(4000)      '$.value.expression.description',
        [input.value.expression.name]  VARCHAR(64)         '$.value.expression.name',
        [input.value.expression.language] NVARCHAR(100)       '$.value.expression.language',
        [input.value.expression.expression] NVARCHAR(4000)      '$.value.expression.expression',
        [input.value.expression.reference] VARCHAR(256)        '$.value.expression.reference',
        [input.value.parameterDefinition.id] NVARCHAR(100)       '$.value.parameterDefinition.id',
        [input.value.parameterDefinition.extension] NVARCHAR(MAX)       '$.value.parameterDefinition.extension',
        [input.value.parameterDefinition.name] NVARCHAR(500)       '$.value.parameterDefinition.name',
        [input.value.parameterDefinition.use] NVARCHAR(100)       '$.value.parameterDefinition.use',
        [input.value.parameterDefinition.min] bigint              '$.value.parameterDefinition.min',
        [input.value.parameterDefinition.max] NVARCHAR(100)       '$.value.parameterDefinition.max',
        [input.value.parameterDefinition.documentation] NVARCHAR(4000)      '$.value.parameterDefinition.documentation',
        [input.value.parameterDefinition.type] NVARCHAR(100)       '$.value.parameterDefinition.type',
        [input.value.parameterDefinition.profile] VARCHAR(256)        '$.value.parameterDefinition.profile',
        [input.value.relatedArtifact.id] NVARCHAR(100)       '$.value.relatedArtifact.id',
        [input.value.relatedArtifact.extension] NVARCHAR(MAX)       '$.value.relatedArtifact.extension',
        [input.value.relatedArtifact.type] NVARCHAR(64)        '$.value.relatedArtifact.type',
        [input.value.relatedArtifact.classifier] NVARCHAR(MAX)       '$.value.relatedArtifact.classifier',
        [input.value.relatedArtifact.label] NVARCHAR(100)       '$.value.relatedArtifact.label',
        [input.value.relatedArtifact.display] NVARCHAR(4000)      '$.value.relatedArtifact.display',
        [input.value.relatedArtifact.citation] NVARCHAR(MAX)       '$.value.relatedArtifact.citation',
        [input.value.relatedArtifact.document] NVARCHAR(MAX)       '$.value.relatedArtifact.document',
        [input.value.relatedArtifact.resource] VARCHAR(256)        '$.value.relatedArtifact.resource',
        [input.value.relatedArtifact.resourceReference] NVARCHAR(MAX)       '$.value.relatedArtifact.resourceReference',
        [input.value.triggerDefinition.id] NVARCHAR(100)       '$.value.triggerDefinition.id',
        [input.value.triggerDefinition.extension] NVARCHAR(MAX)       '$.value.triggerDefinition.extension',
        [input.value.triggerDefinition.type] NVARCHAR(64)        '$.value.triggerDefinition.type',
        [input.value.triggerDefinition.name] NVARCHAR(500)       '$.value.triggerDefinition.name',
        [input.value.triggerDefinition.data] NVARCHAR(MAX)       '$.value.triggerDefinition.data',
        [input.value.triggerDefinition.condition] NVARCHAR(MAX)       '$.value.triggerDefinition.condition',
        [input.value.triggerDefinition.timing.timing] NVARCHAR(MAX)       '$.value.triggerDefinition.timing.timing',
        [input.value.triggerDefinition.timing.reference] NVARCHAR(MAX)       '$.value.triggerDefinition.timing.reference',
        [input.value.triggerDefinition.timing.date] VARCHAR(64)         '$.value.triggerDefinition.timing.date',
        [input.value.triggerDefinition.timing.dateTime] VARCHAR(64)         '$.value.triggerDefinition.timing.dateTime',
        [input.value.usageContext.id]  NVARCHAR(100)       '$.value.usageContext.id',
        [input.value.usageContext.extension] NVARCHAR(MAX)       '$.value.usageContext.extension',
        [input.value.usageContext.code] NVARCHAR(MAX)       '$.value.usageContext.code',
        [input.value.usageContext.value.codeableConcept] NVARCHAR(MAX)       '$.value.usageContext.value.codeableConcept',
        [input.value.usageContext.value.quantity] NVARCHAR(MAX)       '$.value.usageContext.value.quantity',
        [input.value.usageContext.value.range] NVARCHAR(MAX)       '$.value.usageContext.value.range',
        [input.value.usageContext.value.reference] NVARCHAR(MAX)       '$.value.usageContext.value.reference',
        [input.value.dosage.id]        NVARCHAR(100)       '$.value.dosage.id',
        [input.value.dosage.extension] NVARCHAR(MAX)       '$.value.dosage.extension',
        [input.value.dosage.modifierExtension] NVARCHAR(MAX)       '$.value.dosage.modifierExtension',
        [input.value.dosage.sequence]  bigint              '$.value.dosage.sequence',
        [input.value.dosage.text]      NVARCHAR(4000)      '$.value.dosage.text',
        [input.value.dosage.additionalInstruction] NVARCHAR(MAX)       '$.value.dosage.additionalInstruction',
        [input.value.dosage.patientInstruction] NVARCHAR(4000)      '$.value.dosage.patientInstruction',
        [input.value.dosage.timing]    NVARCHAR(MAX)       '$.value.dosage.timing',
        [input.value.dosage.site]      NVARCHAR(MAX)       '$.value.dosage.site',
        [input.value.dosage.route]     NVARCHAR(MAX)       '$.value.dosage.route',
        [input.value.dosage.method]    NVARCHAR(MAX)       '$.value.dosage.method',
        [input.value.dosage.doseAndRate] NVARCHAR(MAX)       '$.value.dosage.doseAndRate',
        [input.value.dosage.maxDosePerPeriod] NVARCHAR(MAX)       '$.value.dosage.maxDosePerPeriod',
        [input.value.dosage.maxDosePerAdministration] NVARCHAR(MAX)       '$.value.dosage.maxDosePerAdministration',
        [input.value.dosage.maxDosePerLifetime] NVARCHAR(MAX)       '$.value.dosage.maxDosePerLifetime',
        [input.value.dosage.asNeeded.boolean] bit                 '$.value.dosage.asNeeded.boolean',
        [input.value.dosage.asNeeded.codeableConcept] NVARCHAR(MAX)       '$.value.dosage.asNeeded.codeableConcept',
        [input.value.meta.id]          NVARCHAR(100)       '$.value.meta.id',
        [input.value.meta.extension]   NVARCHAR(MAX)       '$.value.meta.extension',
        [input.value.meta.versionId]   VARCHAR(64)         '$.value.meta.versionId',
        [input.value.meta.lastUpdated] VARCHAR(64)         '$.value.meta.lastUpdated',
        [input.value.meta.source]      VARCHAR(256)        '$.value.meta.source',
        [input.value.meta.profile]     NVARCHAR(MAX)       '$.value.meta.profile',
        [input.value.meta.security]    NVARCHAR(MAX)       '$.value.meta.security',
        [input.value.meta.tag]         NVARCHAR(MAX)       '$.value.meta.tag'
    ) j

GO

CREATE VIEW fhir.TaskOutput AS
SELECT
    [id],
    [output.JSON],
    [output.id],
    [output.extension],
    [output.modifierExtension],
    [output.type.id],
    [output.type.extension],
    [output.type.coding],
    [output.type.text],
    [output.valueInteger64],
    [output.valueCodeableReference.id],
    [output.valueCodeableReference.extension],
    [output.valueCodeableReference.concept],
    [output.valueCodeableReference.reference],
    [output.valueRatioRange.id],
    [output.valueRatioRange.extension],
    [output.valueRatioRange.lowNumerator],
    [output.valueRatioRange.highNumerator],
    [output.valueRatioRange.denominator],
    [output.value.base64Binary],
    [output.value.boolean],
    [output.value.canonical],
    [output.value.code],
    [output.value.date],
    [output.value.dateTime],
    [output.value.decimal],
    [output.value.id],
    [output.value.instant],
    [output.value.integer],
    [output.value.markdown],
    [output.value.oid],
    [output.value.positiveInt],
    [output.value.string],
    [output.value.time],
    [output.value.unsignedInt],
    [output.value.uri],
    [output.value.url],
    [output.value.uuid],
    [output.value.address.id],
    [output.value.address.extension],
    [output.value.address.use],
    [output.value.address.type],
    [output.value.address.text],
    [output.value.address.line],
    [output.value.address.city],
    [output.value.address.district],
    [output.value.address.state],
    [output.value.address.postalCode],
    [output.value.address.country],
    [output.value.address.period],
    [output.value.age.id],
    [output.value.age.extension],
    [output.value.age.value],
    [output.value.age.comparator],
    [output.value.age.unit],
    [output.value.age.system],
    [output.value.age.code],
    [output.value.annotation.id],
    [output.value.annotation.extension],
    [output.value.annotation.time],
    [output.value.annotation.text],
    [output.value.annotation.author.reference],
    [output.value.annotation.author.string],
    [output.value.attachment.id],
    [output.value.attachment.extension],
    [output.value.attachment.contentType],
    [output.value.attachment.language],
    [output.value.attachment.data],
    [output.value.attachment.url],
    [output.value.attachment.size],
    [output.value.attachment.hash],
    [output.value.attachment.title],
    [output.value.attachment.creation],
    [output.value.attachment.height],
    [output.value.attachment.width],
    [output.value.attachment.frames],
    [output.value.attachment.duration],
    [output.value.attachment.pages],
    [output.value.codeableConcept.id],
    [output.value.codeableConcept.extension],
    [output.value.codeableConcept.coding],
    [output.value.codeableConcept.text],
    [output.value.coding.id],
    [output.value.coding.extension],
    [output.value.coding.system],
    [output.value.coding.version],
    [output.value.coding.code],
    [output.value.coding.display],
    [output.value.coding.userSelected],
    [output.value.contactPoint.id],
    [output.value.contactPoint.extension],
    [output.value.contactPoint.system],
    [output.value.contactPoint.value],
    [output.value.contactPoint.use],
    [output.value.contactPoint.rank],
    [output.value.contactPoint.period],
    [output.value.count.id],
    [output.value.count.extension],
    [output.value.count.value],
    [output.value.count.comparator],
    [output.value.count.unit],
    [output.value.count.system],
    [output.value.count.code],
    [output.value.distance.id],
    [output.value.distance.extension],
    [output.value.distance.value],
    [output.value.distance.comparator],
    [output.value.distance.unit],
    [output.value.distance.system],
    [output.value.distance.code],
    [output.value.duration.id],
    [output.value.duration.extension],
    [output.value.duration.value],
    [output.value.duration.comparator],
    [output.value.duration.unit],
    [output.value.duration.system],
    [output.value.duration.code],
    [output.value.humanName.id],
    [output.value.humanName.extension],
    [output.value.humanName.use],
    [output.value.humanName.text],
    [output.value.humanName.family],
    [output.value.humanName.given],
    [output.value.humanName.prefix],
    [output.value.humanName.suffix],
    [output.value.humanName.period],
    [output.value.identifier.id],
    [output.value.identifier.extension],
    [output.value.identifier.use],
    [output.value.identifier.type],
    [output.value.identifier.system],
    [output.value.identifier.value],
    [output.value.identifier.period],
    [output.value.identifier.assigner],
    [output.value.money.id],
    [output.value.money.extension],
    [output.value.money.value],
    [output.value.money.currency],
    [output.value.period.id],
    [output.value.period.extension],
    [output.value.period.start],
    [output.value.period.end],
    [output.value.quantity.id],
    [output.value.quantity.extension],
    [output.value.quantity.value],
    [output.value.quantity.comparator],
    [output.value.quantity.unit],
    [output.value.quantity.system],
    [output.value.quantity.code],
    [output.value.range.id],
    [output.value.range.extension],
    [output.value.range.low],
    [output.value.range.high],
    [output.value.ratio.id],
    [output.value.ratio.extension],
    [output.value.ratio.numerator],
    [output.value.ratio.denominator],
    [output.value.reference.id],
    [output.value.reference.extension],
    [output.value.reference.reference],
    [output.value.reference.type],
    [output.value.reference.identifier],
    [output.value.reference.display],
    [output.value.sampledData.id],
    [output.value.sampledData.extension],
    [output.value.sampledData.origin],
    [output.value.sampledData.period],
    [output.value.sampledData.factor],
    [output.value.sampledData.lowerLimit],
    [output.value.sampledData.upperLimit],
    [output.value.sampledData.dimensions],
    [output.value.sampledData.data],
    [output.value.signature.id],
    [output.value.signature.extension],
    [output.value.signature.type],
    [output.value.signature.when],
    [output.value.signature.who],
    [output.value.signature.onBehalfOf],
    [output.value.signature.targetFormat],
    [output.value.signature.sigFormat],
    [output.value.signature.data],
    [output.value.timing.id],
    [output.value.timing.extension],
    [output.value.timing.modifierExtension],
    [output.value.timing.event],
    [output.value.timing.repeat],
    [output.value.timing.code],
    [output.value.contactDetail.id],
    [output.value.contactDetail.extension],
    [output.value.contactDetail.name],
    [output.value.contactDetail.telecom],
    [output.value.contributor.id],
    [output.value.contributor.extension],
    [output.value.contributor.type],
    [output.value.contributor.name],
    [output.value.contributor.contact],
    [output.value.dataRequirement.id],
    [output.value.dataRequirement.extension],
    [output.value.dataRequirement.type],
    [output.value.dataRequirement.profile],
    [output.value.dataRequirement.mustSupport],
    [output.value.dataRequirement.codeFilter],
    [output.value.dataRequirement.dateFilter],
    [output.value.dataRequirement.limit],
    [output.value.dataRequirement.sort],
    [output.value.dataRequirement.subject.codeableConcept],
    [output.value.dataRequirement.subject.reference],
    [output.value.expression.id],
    [output.value.expression.extension],
    [output.value.expression.description],
    [output.value.expression.name],
    [output.value.expression.language],
    [output.value.expression.expression],
    [output.value.expression.reference],
    [output.value.parameterDefinition.id],
    [output.value.parameterDefinition.extension],
    [output.value.parameterDefinition.name],
    [output.value.parameterDefinition.use],
    [output.value.parameterDefinition.min],
    [output.value.parameterDefinition.max],
    [output.value.parameterDefinition.documentation],
    [output.value.parameterDefinition.type],
    [output.value.parameterDefinition.profile],
    [output.value.relatedArtifact.id],
    [output.value.relatedArtifact.extension],
    [output.value.relatedArtifact.type],
    [output.value.relatedArtifact.classifier],
    [output.value.relatedArtifact.label],
    [output.value.relatedArtifact.display],
    [output.value.relatedArtifact.citation],
    [output.value.relatedArtifact.document],
    [output.value.relatedArtifact.resource],
    [output.value.relatedArtifact.resourceReference],
    [output.value.triggerDefinition.id],
    [output.value.triggerDefinition.extension],
    [output.value.triggerDefinition.type],
    [output.value.triggerDefinition.name],
    [output.value.triggerDefinition.data],
    [output.value.triggerDefinition.condition],
    [output.value.triggerDefinition.timing.timing],
    [output.value.triggerDefinition.timing.reference],
    [output.value.triggerDefinition.timing.date],
    [output.value.triggerDefinition.timing.dateTime],
    [output.value.usageContext.id],
    [output.value.usageContext.extension],
    [output.value.usageContext.code],
    [output.value.usageContext.value.codeableConcept],
    [output.value.usageContext.value.quantity],
    [output.value.usageContext.value.range],
    [output.value.usageContext.value.reference],
    [output.value.dosage.id],
    [output.value.dosage.extension],
    [output.value.dosage.modifierExtension],
    [output.value.dosage.sequence],
    [output.value.dosage.text],
    [output.value.dosage.additionalInstruction],
    [output.value.dosage.patientInstruction],
    [output.value.dosage.timing],
    [output.value.dosage.site],
    [output.value.dosage.route],
    [output.value.dosage.method],
    [output.value.dosage.doseAndRate],
    [output.value.dosage.maxDosePerPeriod],
    [output.value.dosage.maxDosePerAdministration],
    [output.value.dosage.maxDosePerLifetime],
    [output.value.dosage.asNeeded.boolean],
    [output.value.dosage.asNeeded.codeableConcept],
    [output.value.meta.id],
    [output.value.meta.extension],
    [output.value.meta.versionId],
    [output.value.meta.lastUpdated],
    [output.value.meta.source],
    [output.value.meta.profile],
    [output.value.meta.security],
    [output.value.meta.tag]
FROM openrowset (
        BULK 'Task/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [output.JSON]  VARCHAR(MAX) '$.output'
    ) AS rowset
    CROSS APPLY openjson (rowset.[output.JSON]) with (
        [output.id]                    NVARCHAR(100)       '$.id',
        [output.extension]             NVARCHAR(MAX)       '$.extension',
        [output.modifierExtension]     NVARCHAR(MAX)       '$.modifierExtension',
        [output.type.id]               NVARCHAR(100)       '$.type.id',
        [output.type.extension]        NVARCHAR(MAX)       '$.type.extension',
        [output.type.coding]           NVARCHAR(MAX)       '$.type.coding',
        [output.type.text]             NVARCHAR(4000)      '$.type.text',
        [output.valueInteger64]        NVARCHAR(4000)      '$.valueInteger64',
        [output.valueCodeableReference.id] NVARCHAR(100)       '$.valueCodeableReference.id',
        [output.valueCodeableReference.extension] NVARCHAR(MAX)       '$.valueCodeableReference.extension',
        [output.valueCodeableReference.concept] NVARCHAR(MAX)       '$.valueCodeableReference.concept',
        [output.valueCodeableReference.reference] NVARCHAR(MAX)       '$.valueCodeableReference.reference',
        [output.valueRatioRange.id]    NVARCHAR(100)       '$.valueRatioRange.id',
        [output.valueRatioRange.extension] NVARCHAR(MAX)       '$.valueRatioRange.extension',
        [output.valueRatioRange.lowNumerator] NVARCHAR(MAX)       '$.valueRatioRange.lowNumerator',
        [output.valueRatioRange.highNumerator] NVARCHAR(MAX)       '$.valueRatioRange.highNumerator',
        [output.valueRatioRange.denominator] NVARCHAR(MAX)       '$.valueRatioRange.denominator',
        [output.value.base64Binary]    NVARCHAR(MAX)       '$.value.base64Binary',
        [output.value.boolean]         bit                 '$.value.boolean',
        [output.value.canonical]       VARCHAR(256)        '$.value.canonical',
        [output.value.code]            NVARCHAR(4000)      '$.value.code',
        [output.value.date]            VARCHAR(64)         '$.value.date',
        [output.value.dateTime]        VARCHAR(64)         '$.value.dateTime',
        [output.value.decimal]         float               '$.value.decimal',
        [output.value.id]              VARCHAR(64)         '$.value.id',
        [output.value.instant]         VARCHAR(64)         '$.value.instant',
        [output.value.integer]         bigint              '$.value.integer',
        [output.value.markdown]        NVARCHAR(MAX)       '$.value.markdown',
        [output.value.oid]             VARCHAR(64)         '$.value.oid',
        [output.value.positiveInt]     bigint              '$.value.positiveInt',
        [output.value.string]          NVARCHAR(4000)      '$.value.string',
        [output.value.time]            NVARCHAR(MAX)       '$.value.time',
        [output.value.unsignedInt]     bigint              '$.value.unsignedInt',
        [output.value.uri]             VARCHAR(256)        '$.value.uri',
        [output.value.url]             VARCHAR(256)        '$.value.url',
        [output.value.uuid]            NVARCHAR(MAX)       '$.value.uuid',
        [output.value.address.id]      NVARCHAR(100)       '$.value.address.id',
        [output.value.address.extension] NVARCHAR(MAX)       '$.value.address.extension',
        [output.value.address.use]     NVARCHAR(64)        '$.value.address.use',
        [output.value.address.type]    NVARCHAR(64)        '$.value.address.type',
        [output.value.address.text]    NVARCHAR(4000)      '$.value.address.text',
        [output.value.address.line]    NVARCHAR(MAX)       '$.value.address.line',
        [output.value.address.city]    NVARCHAR(500)       '$.value.address.city',
        [output.value.address.district] NVARCHAR(500)       '$.value.address.district',
        [output.value.address.state]   NVARCHAR(500)       '$.value.address.state',
        [output.value.address.postalCode] NVARCHAR(100)       '$.value.address.postalCode',
        [output.value.address.country] NVARCHAR(500)       '$.value.address.country',
        [output.value.address.period]  NVARCHAR(MAX)       '$.value.address.period',
        [output.value.age.id]          NVARCHAR(100)       '$.value.age.id',
        [output.value.age.extension]   NVARCHAR(MAX)       '$.value.age.extension',
        [output.value.age.value]       float               '$.value.age.value',
        [output.value.age.comparator]  NVARCHAR(64)        '$.value.age.comparator',
        [output.value.age.unit]        NVARCHAR(100)       '$.value.age.unit',
        [output.value.age.system]      VARCHAR(256)        '$.value.age.system',
        [output.value.age.code]        NVARCHAR(4000)      '$.value.age.code',
        [output.value.annotation.id]   NVARCHAR(100)       '$.value.annotation.id',
        [output.value.annotation.extension] NVARCHAR(MAX)       '$.value.annotation.extension',
        [output.value.annotation.time] VARCHAR(64)         '$.value.annotation.time',
        [output.value.annotation.text] NVARCHAR(MAX)       '$.value.annotation.text',
        [output.value.annotation.author.reference] NVARCHAR(MAX)       '$.value.annotation.author.reference',
        [output.value.annotation.author.string] NVARCHAR(4000)      '$.value.annotation.author.string',
        [output.value.attachment.id]   NVARCHAR(100)       '$.value.attachment.id',
        [output.value.attachment.extension] NVARCHAR(MAX)       '$.value.attachment.extension',
        [output.value.attachment.contentType] NVARCHAR(100)       '$.value.attachment.contentType',
        [output.value.attachment.language] NVARCHAR(100)       '$.value.attachment.language',
        [output.value.attachment.data] NVARCHAR(MAX)       '$.value.attachment.data',
        [output.value.attachment.url]  VARCHAR(256)        '$.value.attachment.url',
        [output.value.attachment.size] NVARCHAR(MAX)       '$.value.attachment.size',
        [output.value.attachment.hash] NVARCHAR(MAX)       '$.value.attachment.hash',
        [output.value.attachment.title] NVARCHAR(4000)      '$.value.attachment.title',
        [output.value.attachment.creation] VARCHAR(64)         '$.value.attachment.creation',
        [output.value.attachment.height] bigint              '$.value.attachment.height',
        [output.value.attachment.width] bigint              '$.value.attachment.width',
        [output.value.attachment.frames] bigint              '$.value.attachment.frames',
        [output.value.attachment.duration] float               '$.value.attachment.duration',
        [output.value.attachment.pages] bigint              '$.value.attachment.pages',
        [output.value.codeableConcept.id] NVARCHAR(100)       '$.value.codeableConcept.id',
        [output.value.codeableConcept.extension] NVARCHAR(MAX)       '$.value.codeableConcept.extension',
        [output.value.codeableConcept.coding] NVARCHAR(MAX)       '$.value.codeableConcept.coding',
        [output.value.codeableConcept.text] NVARCHAR(4000)      '$.value.codeableConcept.text',
        [output.value.coding.id]       NVARCHAR(100)       '$.value.coding.id',
        [output.value.coding.extension] NVARCHAR(MAX)       '$.value.coding.extension',
        [output.value.coding.system]   VARCHAR(256)        '$.value.coding.system',
        [output.value.coding.version]  NVARCHAR(100)       '$.value.coding.version',
        [output.value.coding.code]     NVARCHAR(4000)      '$.value.coding.code',
        [output.value.coding.display]  NVARCHAR(4000)      '$.value.coding.display',
        [output.value.coding.userSelected] bit                 '$.value.coding.userSelected',
        [output.value.contactPoint.id] NVARCHAR(100)       '$.value.contactPoint.id',
        [output.value.contactPoint.extension] NVARCHAR(MAX)       '$.value.contactPoint.extension',
        [output.value.contactPoint.system] NVARCHAR(64)        '$.value.contactPoint.system',
        [output.value.contactPoint.value] NVARCHAR(4000)      '$.value.contactPoint.value',
        [output.value.contactPoint.use] NVARCHAR(64)        '$.value.contactPoint.use',
        [output.value.contactPoint.rank] bigint              '$.value.contactPoint.rank',
        [output.value.contactPoint.period] NVARCHAR(MAX)       '$.value.contactPoint.period',
        [output.value.count.id]        NVARCHAR(100)       '$.value.count.id',
        [output.value.count.extension] NVARCHAR(MAX)       '$.value.count.extension',
        [output.value.count.value]     float               '$.value.count.value',
        [output.value.count.comparator] NVARCHAR(64)        '$.value.count.comparator',
        [output.value.count.unit]      NVARCHAR(100)       '$.value.count.unit',
        [output.value.count.system]    VARCHAR(256)        '$.value.count.system',
        [output.value.count.code]      NVARCHAR(4000)      '$.value.count.code',
        [output.value.distance.id]     NVARCHAR(100)       '$.value.distance.id',
        [output.value.distance.extension] NVARCHAR(MAX)       '$.value.distance.extension',
        [output.value.distance.value]  float               '$.value.distance.value',
        [output.value.distance.comparator] NVARCHAR(64)        '$.value.distance.comparator',
        [output.value.distance.unit]   NVARCHAR(100)       '$.value.distance.unit',
        [output.value.distance.system] VARCHAR(256)        '$.value.distance.system',
        [output.value.distance.code]   NVARCHAR(4000)      '$.value.distance.code',
        [output.value.duration.id]     NVARCHAR(100)       '$.value.duration.id',
        [output.value.duration.extension] NVARCHAR(MAX)       '$.value.duration.extension',
        [output.value.duration.value]  float               '$.value.duration.value',
        [output.value.duration.comparator] NVARCHAR(64)        '$.value.duration.comparator',
        [output.value.duration.unit]   NVARCHAR(100)       '$.value.duration.unit',
        [output.value.duration.system] VARCHAR(256)        '$.value.duration.system',
        [output.value.duration.code]   NVARCHAR(4000)      '$.value.duration.code',
        [output.value.humanName.id]    NVARCHAR(100)       '$.value.humanName.id',
        [output.value.humanName.extension] NVARCHAR(MAX)       '$.value.humanName.extension',
        [output.value.humanName.use]   NVARCHAR(64)        '$.value.humanName.use',
        [output.value.humanName.text]  NVARCHAR(4000)      '$.value.humanName.text',
        [output.value.humanName.family] NVARCHAR(500)       '$.value.humanName.family',
        [output.value.humanName.given] NVARCHAR(MAX)       '$.value.humanName.given',
        [output.value.humanName.prefix] NVARCHAR(MAX)       '$.value.humanName.prefix',
        [output.value.humanName.suffix] NVARCHAR(MAX)       '$.value.humanName.suffix',
        [output.value.humanName.period] NVARCHAR(MAX)       '$.value.humanName.period',
        [output.value.identifier.id]   NVARCHAR(100)       '$.value.identifier.id',
        [output.value.identifier.extension] NVARCHAR(MAX)       '$.value.identifier.extension',
        [output.value.identifier.use]  NVARCHAR(64)        '$.value.identifier.use',
        [output.value.identifier.type] NVARCHAR(MAX)       '$.value.identifier.type',
        [output.value.identifier.system] VARCHAR(256)        '$.value.identifier.system',
        [output.value.identifier.value] NVARCHAR(4000)      '$.value.identifier.value',
        [output.value.identifier.period] NVARCHAR(MAX)       '$.value.identifier.period',
        [output.value.identifier.assigner] NVARCHAR(MAX)       '$.value.identifier.assigner',
        [output.value.money.id]        NVARCHAR(100)       '$.value.money.id',
        [output.value.money.extension] NVARCHAR(MAX)       '$.value.money.extension',
        [output.value.money.value]     float               '$.value.money.value',
        [output.value.money.currency]  NVARCHAR(100)       '$.value.money.currency',
        [output.value.period.id]       NVARCHAR(100)       '$.value.period.id',
        [output.value.period.extension] NVARCHAR(MAX)       '$.value.period.extension',
        [output.value.period.start]    VARCHAR(64)         '$.value.period.start',
        [output.value.period.end]      VARCHAR(64)         '$.value.period.end',
        [output.value.quantity.id]     NVARCHAR(100)       '$.value.quantity.id',
        [output.value.quantity.extension] NVARCHAR(MAX)       '$.value.quantity.extension',
        [output.value.quantity.value]  float               '$.value.quantity.value',
        [output.value.quantity.comparator] NVARCHAR(64)        '$.value.quantity.comparator',
        [output.value.quantity.unit]   NVARCHAR(100)       '$.value.quantity.unit',
        [output.value.quantity.system] VARCHAR(256)        '$.value.quantity.system',
        [output.value.quantity.code]   NVARCHAR(4000)      '$.value.quantity.code',
        [output.value.range.id]        NVARCHAR(100)       '$.value.range.id',
        [output.value.range.extension] NVARCHAR(MAX)       '$.value.range.extension',
        [output.value.range.low]       NVARCHAR(MAX)       '$.value.range.low',
        [output.value.range.high]      NVARCHAR(MAX)       '$.value.range.high',
        [output.value.ratio.id]        NVARCHAR(100)       '$.value.ratio.id',
        [output.value.ratio.extension] NVARCHAR(MAX)       '$.value.ratio.extension',
        [output.value.ratio.numerator] NVARCHAR(MAX)       '$.value.ratio.numerator',
        [output.value.ratio.denominator] NVARCHAR(MAX)       '$.value.ratio.denominator',
        [output.value.reference.id]    NVARCHAR(100)       '$.value.reference.id',
        [output.value.reference.extension] NVARCHAR(MAX)       '$.value.reference.extension',
        [output.value.reference.reference] NVARCHAR(4000)      '$.value.reference.reference',
        [output.value.reference.type]  VARCHAR(256)        '$.value.reference.type',
        [output.value.reference.identifier] NVARCHAR(MAX)       '$.value.reference.identifier',
        [output.value.reference.display] NVARCHAR(4000)      '$.value.reference.display',
        [output.value.sampledData.id]  NVARCHAR(100)       '$.value.sampledData.id',
        [output.value.sampledData.extension] NVARCHAR(MAX)       '$.value.sampledData.extension',
        [output.value.sampledData.origin] NVARCHAR(MAX)       '$.value.sampledData.origin',
        [output.value.sampledData.period] float               '$.value.sampledData.period',
        [output.value.sampledData.factor] float               '$.value.sampledData.factor',
        [output.value.sampledData.lowerLimit] float               '$.value.sampledData.lowerLimit',
        [output.value.sampledData.upperLimit] float               '$.value.sampledData.upperLimit',
        [output.value.sampledData.dimensions] bigint              '$.value.sampledData.dimensions',
        [output.value.sampledData.data] NVARCHAR(4000)      '$.value.sampledData.data',
        [output.value.signature.id]    NVARCHAR(100)       '$.value.signature.id',
        [output.value.signature.extension] NVARCHAR(MAX)       '$.value.signature.extension',
        [output.value.signature.type]  NVARCHAR(MAX)       '$.value.signature.type',
        [output.value.signature.when]  VARCHAR(64)         '$.value.signature.when',
        [output.value.signature.who]   NVARCHAR(MAX)       '$.value.signature.who',
        [output.value.signature.onBehalfOf] NVARCHAR(MAX)       '$.value.signature.onBehalfOf',
        [output.value.signature.targetFormat] NVARCHAR(100)       '$.value.signature.targetFormat',
        [output.value.signature.sigFormat] NVARCHAR(100)       '$.value.signature.sigFormat',
        [output.value.signature.data]  NVARCHAR(MAX)       '$.value.signature.data',
        [output.value.timing.id]       NVARCHAR(100)       '$.value.timing.id',
        [output.value.timing.extension] NVARCHAR(MAX)       '$.value.timing.extension',
        [output.value.timing.modifierExtension] NVARCHAR(MAX)       '$.value.timing.modifierExtension',
        [output.value.timing.event]    NVARCHAR(MAX)       '$.value.timing.event',
        [output.value.timing.repeat]   NVARCHAR(MAX)       '$.value.timing.repeat',
        [output.value.timing.code]     NVARCHAR(MAX)       '$.value.timing.code',
        [output.value.contactDetail.id] NVARCHAR(100)       '$.value.contactDetail.id',
        [output.value.contactDetail.extension] NVARCHAR(MAX)       '$.value.contactDetail.extension',
        [output.value.contactDetail.name] NVARCHAR(500)       '$.value.contactDetail.name',
        [output.value.contactDetail.telecom] NVARCHAR(MAX)       '$.value.contactDetail.telecom',
        [output.value.contributor.id]  NVARCHAR(100)       '$.value.contributor.id',
        [output.value.contributor.extension] NVARCHAR(MAX)       '$.value.contributor.extension',
        [output.value.contributor.type] NVARCHAR(64)        '$.value.contributor.type',
        [output.value.contributor.name] NVARCHAR(500)       '$.value.contributor.name',
        [output.value.contributor.contact] NVARCHAR(MAX)       '$.value.contributor.contact',
        [output.value.dataRequirement.id] NVARCHAR(100)       '$.value.dataRequirement.id',
        [output.value.dataRequirement.extension] NVARCHAR(MAX)       '$.value.dataRequirement.extension',
        [output.value.dataRequirement.type] NVARCHAR(100)       '$.value.dataRequirement.type',
        [output.value.dataRequirement.profile] NVARCHAR(MAX)       '$.value.dataRequirement.profile',
        [output.value.dataRequirement.mustSupport] NVARCHAR(MAX)       '$.value.dataRequirement.mustSupport',
        [output.value.dataRequirement.codeFilter] NVARCHAR(MAX)       '$.value.dataRequirement.codeFilter',
        [output.value.dataRequirement.dateFilter] NVARCHAR(MAX)       '$.value.dataRequirement.dateFilter',
        [output.value.dataRequirement.limit] bigint              '$.value.dataRequirement.limit',
        [output.value.dataRequirement.sort] NVARCHAR(MAX)       '$.value.dataRequirement.sort',
        [output.value.dataRequirement.subject.codeableConcept] NVARCHAR(MAX)       '$.value.dataRequirement.subject.codeableConcept',
        [output.value.dataRequirement.subject.reference] NVARCHAR(MAX)       '$.value.dataRequirement.subject.reference',
        [output.value.expression.id]   NVARCHAR(100)       '$.value.expression.id',
        [output.value.expression.extension] NVARCHAR(MAX)       '$.value.expression.extension',
        [output.value.expression.description] NVARCHAR(4000)      '$.value.expression.description',
        [output.value.expression.name] VARCHAR(64)         '$.value.expression.name',
        [output.value.expression.language] NVARCHAR(100)       '$.value.expression.language',
        [output.value.expression.expression] NVARCHAR(4000)      '$.value.expression.expression',
        [output.value.expression.reference] VARCHAR(256)        '$.value.expression.reference',
        [output.value.parameterDefinition.id] NVARCHAR(100)       '$.value.parameterDefinition.id',
        [output.value.parameterDefinition.extension] NVARCHAR(MAX)       '$.value.parameterDefinition.extension',
        [output.value.parameterDefinition.name] NVARCHAR(500)       '$.value.parameterDefinition.name',
        [output.value.parameterDefinition.use] NVARCHAR(100)       '$.value.parameterDefinition.use',
        [output.value.parameterDefinition.min] bigint              '$.value.parameterDefinition.min',
        [output.value.parameterDefinition.max] NVARCHAR(100)       '$.value.parameterDefinition.max',
        [output.value.parameterDefinition.documentation] NVARCHAR(4000)      '$.value.parameterDefinition.documentation',
        [output.value.parameterDefinition.type] NVARCHAR(100)       '$.value.parameterDefinition.type',
        [output.value.parameterDefinition.profile] VARCHAR(256)        '$.value.parameterDefinition.profile',
        [output.value.relatedArtifact.id] NVARCHAR(100)       '$.value.relatedArtifact.id',
        [output.value.relatedArtifact.extension] NVARCHAR(MAX)       '$.value.relatedArtifact.extension',
        [output.value.relatedArtifact.type] NVARCHAR(64)        '$.value.relatedArtifact.type',
        [output.value.relatedArtifact.classifier] NVARCHAR(MAX)       '$.value.relatedArtifact.classifier',
        [output.value.relatedArtifact.label] NVARCHAR(100)       '$.value.relatedArtifact.label',
        [output.value.relatedArtifact.display] NVARCHAR(4000)      '$.value.relatedArtifact.display',
        [output.value.relatedArtifact.citation] NVARCHAR(MAX)       '$.value.relatedArtifact.citation',
        [output.value.relatedArtifact.document] NVARCHAR(MAX)       '$.value.relatedArtifact.document',
        [output.value.relatedArtifact.resource] VARCHAR(256)        '$.value.relatedArtifact.resource',
        [output.value.relatedArtifact.resourceReference] NVARCHAR(MAX)       '$.value.relatedArtifact.resourceReference',
        [output.value.triggerDefinition.id] NVARCHAR(100)       '$.value.triggerDefinition.id',
        [output.value.triggerDefinition.extension] NVARCHAR(MAX)       '$.value.triggerDefinition.extension',
        [output.value.triggerDefinition.type] NVARCHAR(64)        '$.value.triggerDefinition.type',
        [output.value.triggerDefinition.name] NVARCHAR(500)       '$.value.triggerDefinition.name',
        [output.value.triggerDefinition.data] NVARCHAR(MAX)       '$.value.triggerDefinition.data',
        [output.value.triggerDefinition.condition] NVARCHAR(MAX)       '$.value.triggerDefinition.condition',
        [output.value.triggerDefinition.timing.timing] NVARCHAR(MAX)       '$.value.triggerDefinition.timing.timing',
        [output.value.triggerDefinition.timing.reference] NVARCHAR(MAX)       '$.value.triggerDefinition.timing.reference',
        [output.value.triggerDefinition.timing.date] VARCHAR(64)         '$.value.triggerDefinition.timing.date',
        [output.value.triggerDefinition.timing.dateTime] VARCHAR(64)         '$.value.triggerDefinition.timing.dateTime',
        [output.value.usageContext.id] NVARCHAR(100)       '$.value.usageContext.id',
        [output.value.usageContext.extension] NVARCHAR(MAX)       '$.value.usageContext.extension',
        [output.value.usageContext.code] NVARCHAR(MAX)       '$.value.usageContext.code',
        [output.value.usageContext.value.codeableConcept] NVARCHAR(MAX)       '$.value.usageContext.value.codeableConcept',
        [output.value.usageContext.value.quantity] NVARCHAR(MAX)       '$.value.usageContext.value.quantity',
        [output.value.usageContext.value.range] NVARCHAR(MAX)       '$.value.usageContext.value.range',
        [output.value.usageContext.value.reference] NVARCHAR(MAX)       '$.value.usageContext.value.reference',
        [output.value.dosage.id]       NVARCHAR(100)       '$.value.dosage.id',
        [output.value.dosage.extension] NVARCHAR(MAX)       '$.value.dosage.extension',
        [output.value.dosage.modifierExtension] NVARCHAR(MAX)       '$.value.dosage.modifierExtension',
        [output.value.dosage.sequence] bigint              '$.value.dosage.sequence',
        [output.value.dosage.text]     NVARCHAR(4000)      '$.value.dosage.text',
        [output.value.dosage.additionalInstruction] NVARCHAR(MAX)       '$.value.dosage.additionalInstruction',
        [output.value.dosage.patientInstruction] NVARCHAR(4000)      '$.value.dosage.patientInstruction',
        [output.value.dosage.timing]   NVARCHAR(MAX)       '$.value.dosage.timing',
        [output.value.dosage.site]     NVARCHAR(MAX)       '$.value.dosage.site',
        [output.value.dosage.route]    NVARCHAR(MAX)       '$.value.dosage.route',
        [output.value.dosage.method]   NVARCHAR(MAX)       '$.value.dosage.method',
        [output.value.dosage.doseAndRate] NVARCHAR(MAX)       '$.value.dosage.doseAndRate',
        [output.value.dosage.maxDosePerPeriod] NVARCHAR(MAX)       '$.value.dosage.maxDosePerPeriod',
        [output.value.dosage.maxDosePerAdministration] NVARCHAR(MAX)       '$.value.dosage.maxDosePerAdministration',
        [output.value.dosage.maxDosePerLifetime] NVARCHAR(MAX)       '$.value.dosage.maxDosePerLifetime',
        [output.value.dosage.asNeeded.boolean] bit                 '$.value.dosage.asNeeded.boolean',
        [output.value.dosage.asNeeded.codeableConcept] NVARCHAR(MAX)       '$.value.dosage.asNeeded.codeableConcept',
        [output.value.meta.id]         NVARCHAR(100)       '$.value.meta.id',
        [output.value.meta.extension]  NVARCHAR(MAX)       '$.value.meta.extension',
        [output.value.meta.versionId]  VARCHAR(64)         '$.value.meta.versionId',
        [output.value.meta.lastUpdated] VARCHAR(64)         '$.value.meta.lastUpdated',
        [output.value.meta.source]     VARCHAR(256)        '$.value.meta.source',
        [output.value.meta.profile]    NVARCHAR(MAX)       '$.value.meta.profile',
        [output.value.meta.security]   NVARCHAR(MAX)       '$.value.meta.security',
        [output.value.meta.tag]        NVARCHAR(MAX)       '$.value.meta.tag'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[TerminologyCapabilities] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [url] VARCHAR(256),
    [identifier] VARCHAR(MAX),
    [version] NVARCHAR(100),
    [name] NVARCHAR(500),
    [title] NVARCHAR(4000),
    [status] NVARCHAR(100),
    [experimental] bit,
    [date] VARCHAR(64),
    [publisher] NVARCHAR(500),
    [contact] VARCHAR(MAX),
    [description] NVARCHAR(MAX),
    [useContext] VARCHAR(MAX),
    [jurisdiction] VARCHAR(MAX),
    [purpose] NVARCHAR(MAX),
    [copyright] NVARCHAR(MAX),
    [kind] NVARCHAR(100),
    [software.id] NVARCHAR(100),
    [software.extension] NVARCHAR(MAX),
    [software.modifierExtension] NVARCHAR(MAX),
    [software.name] NVARCHAR(500),
    [software.version] NVARCHAR(100),
    [implementation.id] NVARCHAR(100),
    [implementation.extension] NVARCHAR(MAX),
    [implementation.modifierExtension] NVARCHAR(MAX),
    [implementation.description] NVARCHAR(4000),
    [implementation.url] VARCHAR(256),
    [lockedDate] bit,
    [codeSystem] VARCHAR(MAX),
    [expansion.id] NVARCHAR(100),
    [expansion.extension] NVARCHAR(MAX),
    [expansion.modifierExtension] NVARCHAR(MAX),
    [expansion.hierarchical] bit,
    [expansion.paging] bit,
    [expansion.incomplete] bit,
    [expansion.parameter] VARCHAR(MAX),
    [expansion.textFilter] NVARCHAR(MAX),
    [codeSearch] NVARCHAR(4000),
    [validateCode.id] NVARCHAR(100),
    [validateCode.extension] NVARCHAR(MAX),
    [validateCode.modifierExtension] NVARCHAR(MAX),
    [validateCode.translations] bit,
    [translation.id] NVARCHAR(100),
    [translation.extension] NVARCHAR(MAX),
    [translation.modifierExtension] NVARCHAR(MAX),
    [translation.needsMap] bit,
    [closure.id] NVARCHAR(100),
    [closure.extension] NVARCHAR(MAX),
    [closure.modifierExtension] NVARCHAR(MAX),
    [closure.translation] bit,
) WITH (
    LOCATION='/TerminologyCapabilities/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.TerminologyCapabilitiesIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'TerminologyCapabilities/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.TerminologyCapabilitiesContact AS
SELECT
    [id],
    [contact.JSON],
    [contact.id],
    [contact.extension],
    [contact.name],
    [contact.telecom]
FROM openrowset (
        BULK 'TerminologyCapabilities/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [contact.JSON]  VARCHAR(MAX) '$.contact'
    ) AS rowset
    CROSS APPLY openjson (rowset.[contact.JSON]) with (
        [contact.id]                   NVARCHAR(100)       '$.id',
        [contact.extension]            NVARCHAR(MAX)       '$.extension',
        [contact.name]                 NVARCHAR(500)       '$.name',
        [contact.telecom]              NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.TerminologyCapabilitiesUseContext AS
SELECT
    [id],
    [useContext.JSON],
    [useContext.id],
    [useContext.extension],
    [useContext.code.id],
    [useContext.code.extension],
    [useContext.code.system],
    [useContext.code.version],
    [useContext.code.code],
    [useContext.code.display],
    [useContext.code.userSelected],
    [useContext.value.codeableConcept.id],
    [useContext.value.codeableConcept.extension],
    [useContext.value.codeableConcept.coding],
    [useContext.value.codeableConcept.text],
    [useContext.value.quantity.id],
    [useContext.value.quantity.extension],
    [useContext.value.quantity.value],
    [useContext.value.quantity.comparator],
    [useContext.value.quantity.unit],
    [useContext.value.quantity.system],
    [useContext.value.quantity.code],
    [useContext.value.range.id],
    [useContext.value.range.extension],
    [useContext.value.range.low],
    [useContext.value.range.high],
    [useContext.value.reference.id],
    [useContext.value.reference.extension],
    [useContext.value.reference.reference],
    [useContext.value.reference.type],
    [useContext.value.reference.identifier],
    [useContext.value.reference.display]
FROM openrowset (
        BULK 'TerminologyCapabilities/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [useContext.JSON]  VARCHAR(MAX) '$.useContext'
    ) AS rowset
    CROSS APPLY openjson (rowset.[useContext.JSON]) with (
        [useContext.id]                NVARCHAR(100)       '$.id',
        [useContext.extension]         NVARCHAR(MAX)       '$.extension',
        [useContext.code.id]           NVARCHAR(100)       '$.code.id',
        [useContext.code.extension]    NVARCHAR(MAX)       '$.code.extension',
        [useContext.code.system]       VARCHAR(256)        '$.code.system',
        [useContext.code.version]      NVARCHAR(100)       '$.code.version',
        [useContext.code.code]         NVARCHAR(4000)      '$.code.code',
        [useContext.code.display]      NVARCHAR(4000)      '$.code.display',
        [useContext.code.userSelected] bit                 '$.code.userSelected',
        [useContext.value.codeableConcept.id] NVARCHAR(100)       '$.value.codeableConcept.id',
        [useContext.value.codeableConcept.extension] NVARCHAR(MAX)       '$.value.codeableConcept.extension',
        [useContext.value.codeableConcept.coding] NVARCHAR(MAX)       '$.value.codeableConcept.coding',
        [useContext.value.codeableConcept.text] NVARCHAR(4000)      '$.value.codeableConcept.text',
        [useContext.value.quantity.id] NVARCHAR(100)       '$.value.quantity.id',
        [useContext.value.quantity.extension] NVARCHAR(MAX)       '$.value.quantity.extension',
        [useContext.value.quantity.value] float               '$.value.quantity.value',
        [useContext.value.quantity.comparator] NVARCHAR(64)        '$.value.quantity.comparator',
        [useContext.value.quantity.unit] NVARCHAR(100)       '$.value.quantity.unit',
        [useContext.value.quantity.system] VARCHAR(256)        '$.value.quantity.system',
        [useContext.value.quantity.code] NVARCHAR(4000)      '$.value.quantity.code',
        [useContext.value.range.id]    NVARCHAR(100)       '$.value.range.id',
        [useContext.value.range.extension] NVARCHAR(MAX)       '$.value.range.extension',
        [useContext.value.range.low]   NVARCHAR(MAX)       '$.value.range.low',
        [useContext.value.range.high]  NVARCHAR(MAX)       '$.value.range.high',
        [useContext.value.reference.id] NVARCHAR(100)       '$.value.reference.id',
        [useContext.value.reference.extension] NVARCHAR(MAX)       '$.value.reference.extension',
        [useContext.value.reference.reference] NVARCHAR(4000)      '$.value.reference.reference',
        [useContext.value.reference.type] VARCHAR(256)        '$.value.reference.type',
        [useContext.value.reference.identifier] NVARCHAR(MAX)       '$.value.reference.identifier',
        [useContext.value.reference.display] NVARCHAR(4000)      '$.value.reference.display'
    ) j

GO

CREATE VIEW fhir.TerminologyCapabilitiesJurisdiction AS
SELECT
    [id],
    [jurisdiction.JSON],
    [jurisdiction.id],
    [jurisdiction.extension],
    [jurisdiction.coding],
    [jurisdiction.text]
FROM openrowset (
        BULK 'TerminologyCapabilities/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [jurisdiction.JSON]  VARCHAR(MAX) '$.jurisdiction'
    ) AS rowset
    CROSS APPLY openjson (rowset.[jurisdiction.JSON]) with (
        [jurisdiction.id]              NVARCHAR(100)       '$.id',
        [jurisdiction.extension]       NVARCHAR(MAX)       '$.extension',
        [jurisdiction.coding]          NVARCHAR(MAX)       '$.coding' AS JSON,
        [jurisdiction.text]            NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.TerminologyCapabilitiesCodeSystem AS
SELECT
    [id],
    [codeSystem.JSON],
    [codeSystem.id],
    [codeSystem.extension],
    [codeSystem.modifierExtension],
    [codeSystem.uri],
    [codeSystem.version],
    [codeSystem.subsumption]
FROM openrowset (
        BULK 'TerminologyCapabilities/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [codeSystem.JSON]  VARCHAR(MAX) '$.codeSystem'
    ) AS rowset
    CROSS APPLY openjson (rowset.[codeSystem.JSON]) with (
        [codeSystem.id]                NVARCHAR(100)       '$.id',
        [codeSystem.extension]         NVARCHAR(MAX)       '$.extension',
        [codeSystem.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [codeSystem.uri]               VARCHAR(256)        '$.uri',
        [codeSystem.version]           NVARCHAR(MAX)       '$.version' AS JSON,
        [codeSystem.subsumption]       bit                 '$.subsumption'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[TestReport] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier.id] NVARCHAR(100),
    [identifier.extension] NVARCHAR(MAX),
    [identifier.use] NVARCHAR(64),
    [identifier.type.id] NVARCHAR(100),
    [identifier.type.extension] NVARCHAR(MAX),
    [identifier.type.coding] NVARCHAR(MAX),
    [identifier.type.text] NVARCHAR(4000),
    [identifier.system] VARCHAR(256),
    [identifier.value] NVARCHAR(4000),
    [identifier.period.id] NVARCHAR(100),
    [identifier.period.extension] NVARCHAR(MAX),
    [identifier.period.start] VARCHAR(64),
    [identifier.period.end] VARCHAR(64),
    [identifier.assigner.id] NVARCHAR(100),
    [identifier.assigner.extension] NVARCHAR(MAX),
    [identifier.assigner.reference] NVARCHAR(4000),
    [identifier.assigner.type] VARCHAR(256),
    [identifier.assigner.identifier] NVARCHAR(MAX),
    [identifier.assigner.display] NVARCHAR(4000),
    [name] NVARCHAR(500),
    [status] NVARCHAR(100),
    [testScript.id] NVARCHAR(100),
    [testScript.extension] NVARCHAR(MAX),
    [testScript.reference] NVARCHAR(4000),
    [testScript.type] VARCHAR(256),
    [testScript.identifier.id] NVARCHAR(100),
    [testScript.identifier.extension] NVARCHAR(MAX),
    [testScript.identifier.use] NVARCHAR(64),
    [testScript.identifier.type] NVARCHAR(MAX),
    [testScript.identifier.system] VARCHAR(256),
    [testScript.identifier.value] NVARCHAR(4000),
    [testScript.identifier.period] NVARCHAR(MAX),
    [testScript.identifier.assigner] NVARCHAR(MAX),
    [testScript.display] NVARCHAR(4000),
    [result] NVARCHAR(4000),
    [score] float,
    [tester] NVARCHAR(500),
    [issued] VARCHAR(64),
    [participant] VARCHAR(MAX),
    [setup.id] NVARCHAR(100),
    [setup.extension] NVARCHAR(MAX),
    [setup.modifierExtension] NVARCHAR(MAX),
    [setup.action] VARCHAR(MAX),
    [test] VARCHAR(MAX),
    [teardown.id] NVARCHAR(100),
    [teardown.extension] NVARCHAR(MAX),
    [teardown.modifierExtension] NVARCHAR(MAX),
    [teardown.action] VARCHAR(MAX),
) WITH (
    LOCATION='/TestReport/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.TestReportParticipant AS
SELECT
    [id],
    [participant.JSON],
    [participant.id],
    [participant.extension],
    [participant.modifierExtension],
    [participant.type],
    [participant.uri],
    [participant.display]
FROM openrowset (
        BULK 'TestReport/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [participant.JSON]  VARCHAR(MAX) '$.participant'
    ) AS rowset
    CROSS APPLY openjson (rowset.[participant.JSON]) with (
        [participant.id]               NVARCHAR(100)       '$.id',
        [participant.extension]        NVARCHAR(MAX)       '$.extension',
        [participant.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [participant.type]             NVARCHAR(100)       '$.type',
        [participant.uri]              VARCHAR(256)        '$.uri',
        [participant.display]          NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.TestReportTest AS
SELECT
    [id],
    [test.JSON],
    [test.id],
    [test.extension],
    [test.modifierExtension],
    [test.name],
    [test.description],
    [test.action]
FROM openrowset (
        BULK 'TestReport/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [test.JSON]  VARCHAR(MAX) '$.test'
    ) AS rowset
    CROSS APPLY openjson (rowset.[test.JSON]) with (
        [test.id]                      NVARCHAR(100)       '$.id',
        [test.extension]               NVARCHAR(MAX)       '$.extension',
        [test.modifierExtension]       NVARCHAR(MAX)       '$.modifierExtension',
        [test.name]                    NVARCHAR(500)       '$.name',
        [test.description]             NVARCHAR(4000)      '$.description',
        [test.action]                  NVARCHAR(MAX)       '$.action' AS JSON
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[TestScript] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [url] VARCHAR(256),
    [identifier] VARCHAR(MAX),
    [version] NVARCHAR(100),
    [name] NVARCHAR(500),
    [title] NVARCHAR(4000),
    [status] NVARCHAR(100),
    [experimental] bit,
    [date] VARCHAR(64),
    [publisher] NVARCHAR(500),
    [contact] VARCHAR(MAX),
    [description] NVARCHAR(MAX),
    [useContext] VARCHAR(MAX),
    [jurisdiction] VARCHAR(MAX),
    [purpose] NVARCHAR(MAX),
    [copyright] NVARCHAR(MAX),
    [origin] VARCHAR(MAX),
    [destination] VARCHAR(MAX),
    [metadata.id] NVARCHAR(100),
    [metadata.extension] NVARCHAR(MAX),
    [metadata.modifierExtension] NVARCHAR(MAX),
    [metadata.link] VARCHAR(MAX),
    [metadata.capability] VARCHAR(MAX),
    [scope] VARCHAR(MAX),
    [fixture] VARCHAR(MAX),
    [profile] VARCHAR(MAX),
    [variable] VARCHAR(MAX),
    [setup.id] NVARCHAR(100),
    [setup.extension] NVARCHAR(MAX),
    [setup.modifierExtension] NVARCHAR(MAX),
    [setup.action] VARCHAR(MAX),
    [test] VARCHAR(MAX),
    [teardown.id] NVARCHAR(100),
    [teardown.extension] NVARCHAR(MAX),
    [teardown.modifierExtension] NVARCHAR(MAX),
    [teardown.action] VARCHAR(MAX),
) WITH (
    LOCATION='/TestScript/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.TestScriptIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'TestScript/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.TestScriptContact AS
SELECT
    [id],
    [contact.JSON],
    [contact.id],
    [contact.extension],
    [contact.name],
    [contact.telecom]
FROM openrowset (
        BULK 'TestScript/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [contact.JSON]  VARCHAR(MAX) '$.contact'
    ) AS rowset
    CROSS APPLY openjson (rowset.[contact.JSON]) with (
        [contact.id]                   NVARCHAR(100)       '$.id',
        [contact.extension]            NVARCHAR(MAX)       '$.extension',
        [contact.name]                 NVARCHAR(500)       '$.name',
        [contact.telecom]              NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.TestScriptUseContext AS
SELECT
    [id],
    [useContext.JSON],
    [useContext.id],
    [useContext.extension],
    [useContext.code.id],
    [useContext.code.extension],
    [useContext.code.system],
    [useContext.code.version],
    [useContext.code.code],
    [useContext.code.display],
    [useContext.code.userSelected],
    [useContext.value.codeableConcept.id],
    [useContext.value.codeableConcept.extension],
    [useContext.value.codeableConcept.coding],
    [useContext.value.codeableConcept.text],
    [useContext.value.quantity.id],
    [useContext.value.quantity.extension],
    [useContext.value.quantity.value],
    [useContext.value.quantity.comparator],
    [useContext.value.quantity.unit],
    [useContext.value.quantity.system],
    [useContext.value.quantity.code],
    [useContext.value.range.id],
    [useContext.value.range.extension],
    [useContext.value.range.low],
    [useContext.value.range.high],
    [useContext.value.reference.id],
    [useContext.value.reference.extension],
    [useContext.value.reference.reference],
    [useContext.value.reference.type],
    [useContext.value.reference.identifier],
    [useContext.value.reference.display]
FROM openrowset (
        BULK 'TestScript/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [useContext.JSON]  VARCHAR(MAX) '$.useContext'
    ) AS rowset
    CROSS APPLY openjson (rowset.[useContext.JSON]) with (
        [useContext.id]                NVARCHAR(100)       '$.id',
        [useContext.extension]         NVARCHAR(MAX)       '$.extension',
        [useContext.code.id]           NVARCHAR(100)       '$.code.id',
        [useContext.code.extension]    NVARCHAR(MAX)       '$.code.extension',
        [useContext.code.system]       VARCHAR(256)        '$.code.system',
        [useContext.code.version]      NVARCHAR(100)       '$.code.version',
        [useContext.code.code]         NVARCHAR(4000)      '$.code.code',
        [useContext.code.display]      NVARCHAR(4000)      '$.code.display',
        [useContext.code.userSelected] bit                 '$.code.userSelected',
        [useContext.value.codeableConcept.id] NVARCHAR(100)       '$.value.codeableConcept.id',
        [useContext.value.codeableConcept.extension] NVARCHAR(MAX)       '$.value.codeableConcept.extension',
        [useContext.value.codeableConcept.coding] NVARCHAR(MAX)       '$.value.codeableConcept.coding',
        [useContext.value.codeableConcept.text] NVARCHAR(4000)      '$.value.codeableConcept.text',
        [useContext.value.quantity.id] NVARCHAR(100)       '$.value.quantity.id',
        [useContext.value.quantity.extension] NVARCHAR(MAX)       '$.value.quantity.extension',
        [useContext.value.quantity.value] float               '$.value.quantity.value',
        [useContext.value.quantity.comparator] NVARCHAR(64)        '$.value.quantity.comparator',
        [useContext.value.quantity.unit] NVARCHAR(100)       '$.value.quantity.unit',
        [useContext.value.quantity.system] VARCHAR(256)        '$.value.quantity.system',
        [useContext.value.quantity.code] NVARCHAR(4000)      '$.value.quantity.code',
        [useContext.value.range.id]    NVARCHAR(100)       '$.value.range.id',
        [useContext.value.range.extension] NVARCHAR(MAX)       '$.value.range.extension',
        [useContext.value.range.low]   NVARCHAR(MAX)       '$.value.range.low',
        [useContext.value.range.high]  NVARCHAR(MAX)       '$.value.range.high',
        [useContext.value.reference.id] NVARCHAR(100)       '$.value.reference.id',
        [useContext.value.reference.extension] NVARCHAR(MAX)       '$.value.reference.extension',
        [useContext.value.reference.reference] NVARCHAR(4000)      '$.value.reference.reference',
        [useContext.value.reference.type] VARCHAR(256)        '$.value.reference.type',
        [useContext.value.reference.identifier] NVARCHAR(MAX)       '$.value.reference.identifier',
        [useContext.value.reference.display] NVARCHAR(4000)      '$.value.reference.display'
    ) j

GO

CREATE VIEW fhir.TestScriptJurisdiction AS
SELECT
    [id],
    [jurisdiction.JSON],
    [jurisdiction.id],
    [jurisdiction.extension],
    [jurisdiction.coding],
    [jurisdiction.text]
FROM openrowset (
        BULK 'TestScript/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [jurisdiction.JSON]  VARCHAR(MAX) '$.jurisdiction'
    ) AS rowset
    CROSS APPLY openjson (rowset.[jurisdiction.JSON]) with (
        [jurisdiction.id]              NVARCHAR(100)       '$.id',
        [jurisdiction.extension]       NVARCHAR(MAX)       '$.extension',
        [jurisdiction.coding]          NVARCHAR(MAX)       '$.coding' AS JSON,
        [jurisdiction.text]            NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.TestScriptOrigin AS
SELECT
    [id],
    [origin.JSON],
    [origin.id],
    [origin.extension],
    [origin.modifierExtension],
    [origin.index],
    [origin.profile.id],
    [origin.profile.extension],
    [origin.profile.system],
    [origin.profile.version],
    [origin.profile.code],
    [origin.profile.display],
    [origin.profile.userSelected]
FROM openrowset (
        BULK 'TestScript/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [origin.JSON]  VARCHAR(MAX) '$.origin'
    ) AS rowset
    CROSS APPLY openjson (rowset.[origin.JSON]) with (
        [origin.id]                    NVARCHAR(100)       '$.id',
        [origin.extension]             NVARCHAR(MAX)       '$.extension',
        [origin.modifierExtension]     NVARCHAR(MAX)       '$.modifierExtension',
        [origin.index]                 bigint              '$.index',
        [origin.profile.id]            NVARCHAR(100)       '$.profile.id',
        [origin.profile.extension]     NVARCHAR(MAX)       '$.profile.extension',
        [origin.profile.system]        VARCHAR(256)        '$.profile.system',
        [origin.profile.version]       NVARCHAR(100)       '$.profile.version',
        [origin.profile.code]          NVARCHAR(4000)      '$.profile.code',
        [origin.profile.display]       NVARCHAR(4000)      '$.profile.display',
        [origin.profile.userSelected]  bit                 '$.profile.userSelected'
    ) j

GO

CREATE VIEW fhir.TestScriptDestination AS
SELECT
    [id],
    [destination.JSON],
    [destination.id],
    [destination.extension],
    [destination.modifierExtension],
    [destination.index],
    [destination.profile.id],
    [destination.profile.extension],
    [destination.profile.system],
    [destination.profile.version],
    [destination.profile.code],
    [destination.profile.display],
    [destination.profile.userSelected]
FROM openrowset (
        BULK 'TestScript/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [destination.JSON]  VARCHAR(MAX) '$.destination'
    ) AS rowset
    CROSS APPLY openjson (rowset.[destination.JSON]) with (
        [destination.id]               NVARCHAR(100)       '$.id',
        [destination.extension]        NVARCHAR(MAX)       '$.extension',
        [destination.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [destination.index]            bigint              '$.index',
        [destination.profile.id]       NVARCHAR(100)       '$.profile.id',
        [destination.profile.extension] NVARCHAR(MAX)       '$.profile.extension',
        [destination.profile.system]   VARCHAR(256)        '$.profile.system',
        [destination.profile.version]  NVARCHAR(100)       '$.profile.version',
        [destination.profile.code]     NVARCHAR(4000)      '$.profile.code',
        [destination.profile.display]  NVARCHAR(4000)      '$.profile.display',
        [destination.profile.userSelected] bit                 '$.profile.userSelected'
    ) j

GO

CREATE VIEW fhir.TestScriptScope AS
SELECT
    [id],
    [scope.JSON],
    [scope.id],
    [scope.extension],
    [scope.modifierExtension],
    [scope.artifact],
    [scope.conformance.id],
    [scope.conformance.extension],
    [scope.conformance.coding],
    [scope.conformance.text],
    [scope.phase.id],
    [scope.phase.extension],
    [scope.phase.coding],
    [scope.phase.text]
FROM openrowset (
        BULK 'TestScript/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [scope.JSON]  VARCHAR(MAX) '$.scope'
    ) AS rowset
    CROSS APPLY openjson (rowset.[scope.JSON]) with (
        [scope.id]                     NVARCHAR(100)       '$.id',
        [scope.extension]              NVARCHAR(MAX)       '$.extension',
        [scope.modifierExtension]      NVARCHAR(MAX)       '$.modifierExtension',
        [scope.artifact]               VARCHAR(256)        '$.artifact',
        [scope.conformance.id]         NVARCHAR(100)       '$.conformance.id',
        [scope.conformance.extension]  NVARCHAR(MAX)       '$.conformance.extension',
        [scope.conformance.coding]     NVARCHAR(MAX)       '$.conformance.coding',
        [scope.conformance.text]       NVARCHAR(4000)      '$.conformance.text',
        [scope.phase.id]               NVARCHAR(100)       '$.phase.id',
        [scope.phase.extension]        NVARCHAR(MAX)       '$.phase.extension',
        [scope.phase.coding]           NVARCHAR(MAX)       '$.phase.coding',
        [scope.phase.text]             NVARCHAR(4000)      '$.phase.text'
    ) j

GO

CREATE VIEW fhir.TestScriptFixture AS
SELECT
    [id],
    [fixture.JSON],
    [fixture.id],
    [fixture.extension],
    [fixture.modifierExtension],
    [fixture.autocreate],
    [fixture.autodelete],
    [fixture.resource.id],
    [fixture.resource.extension],
    [fixture.resource.reference],
    [fixture.resource.type],
    [fixture.resource.identifier],
    [fixture.resource.display]
FROM openrowset (
        BULK 'TestScript/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [fixture.JSON]  VARCHAR(MAX) '$.fixture'
    ) AS rowset
    CROSS APPLY openjson (rowset.[fixture.JSON]) with (
        [fixture.id]                   NVARCHAR(100)       '$.id',
        [fixture.extension]            NVARCHAR(MAX)       '$.extension',
        [fixture.modifierExtension]    NVARCHAR(MAX)       '$.modifierExtension',
        [fixture.autocreate]           bit                 '$.autocreate',
        [fixture.autodelete]           bit                 '$.autodelete',
        [fixture.resource.id]          NVARCHAR(100)       '$.resource.id',
        [fixture.resource.extension]   NVARCHAR(MAX)       '$.resource.extension',
        [fixture.resource.reference]   NVARCHAR(4000)      '$.resource.reference',
        [fixture.resource.type]        VARCHAR(256)        '$.resource.type',
        [fixture.resource.identifier]  NVARCHAR(MAX)       '$.resource.identifier',
        [fixture.resource.display]     NVARCHAR(4000)      '$.resource.display'
    ) j

GO

CREATE VIEW fhir.TestScriptProfile AS
SELECT
    [id],
    [profile.JSON],
    [profile.id],
    [profile.extension],
    [profile.reference],
    [profile.type],
    [profile.identifier.id],
    [profile.identifier.extension],
    [profile.identifier.use],
    [profile.identifier.type],
    [profile.identifier.system],
    [profile.identifier.value],
    [profile.identifier.period],
    [profile.identifier.assigner],
    [profile.display]
FROM openrowset (
        BULK 'TestScript/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [profile.JSON]  VARCHAR(MAX) '$.profile'
    ) AS rowset
    CROSS APPLY openjson (rowset.[profile.JSON]) with (
        [profile.id]                   NVARCHAR(100)       '$.id',
        [profile.extension]            NVARCHAR(MAX)       '$.extension',
        [profile.reference]            NVARCHAR(4000)      '$.reference',
        [profile.type]                 VARCHAR(256)        '$.type',
        [profile.identifier.id]        NVARCHAR(100)       '$.identifier.id',
        [profile.identifier.extension] NVARCHAR(MAX)       '$.identifier.extension',
        [profile.identifier.use]       NVARCHAR(64)        '$.identifier.use',
        [profile.identifier.type]      NVARCHAR(MAX)       '$.identifier.type',
        [profile.identifier.system]    VARCHAR(256)        '$.identifier.system',
        [profile.identifier.value]     NVARCHAR(4000)      '$.identifier.value',
        [profile.identifier.period]    NVARCHAR(MAX)       '$.identifier.period',
        [profile.identifier.assigner]  NVARCHAR(MAX)       '$.identifier.assigner',
        [profile.display]              NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.TestScriptVariable AS
SELECT
    [id],
    [variable.JSON],
    [variable.id],
    [variable.extension],
    [variable.modifierExtension],
    [variable.name],
    [variable.defaultValue],
    [variable.description],
    [variable.expression],
    [variable.headerField],
    [variable.hint],
    [variable.path],
    [variable.sourceId]
FROM openrowset (
        BULK 'TestScript/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [variable.JSON]  VARCHAR(MAX) '$.variable'
    ) AS rowset
    CROSS APPLY openjson (rowset.[variable.JSON]) with (
        [variable.id]                  NVARCHAR(100)       '$.id',
        [variable.extension]           NVARCHAR(MAX)       '$.extension',
        [variable.modifierExtension]   NVARCHAR(MAX)       '$.modifierExtension',
        [variable.name]                NVARCHAR(500)       '$.name',
        [variable.defaultValue]        NVARCHAR(4000)      '$.defaultValue',
        [variable.description]         NVARCHAR(4000)      '$.description',
        [variable.expression]          NVARCHAR(4000)      '$.expression',
        [variable.headerField]         NVARCHAR(4000)      '$.headerField',
        [variable.hint]                NVARCHAR(4000)      '$.hint',
        [variable.path]                NVARCHAR(4000)      '$.path',
        [variable.sourceId]            VARCHAR(64)         '$.sourceId'
    ) j

GO

CREATE VIEW fhir.TestScriptTest AS
SELECT
    [id],
    [test.JSON],
    [test.id],
    [test.extension],
    [test.modifierExtension],
    [test.name],
    [test.description],
    [test.action]
FROM openrowset (
        BULK 'TestScript/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [test.JSON]  VARCHAR(MAX) '$.test'
    ) AS rowset
    CROSS APPLY openjson (rowset.[test.JSON]) with (
        [test.id]                      NVARCHAR(100)       '$.id',
        [test.extension]               NVARCHAR(MAX)       '$.extension',
        [test.modifierExtension]       NVARCHAR(MAX)       '$.modifierExtension',
        [test.name]                    NVARCHAR(500)       '$.name',
        [test.description]             NVARCHAR(4000)      '$.description',
        [test.action]                  NVARCHAR(MAX)       '$.action' AS JSON
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[ValueSet] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [url] VARCHAR(256),
    [identifier] VARCHAR(MAX),
    [version] NVARCHAR(100),
    [name] NVARCHAR(500),
    [title] NVARCHAR(4000),
    [status] NVARCHAR(100),
    [experimental] bit,
    [date] VARCHAR(64),
    [publisher] NVARCHAR(500),
    [contact] VARCHAR(MAX),
    [description] NVARCHAR(MAX),
    [useContext] VARCHAR(MAX),
    [jurisdiction] VARCHAR(MAX),
    [purpose] NVARCHAR(MAX),
    [copyright] NVARCHAR(MAX),
    [immutable] bit,
    [compose.id] NVARCHAR(100),
    [compose.extension] NVARCHAR(MAX),
    [compose.modifierExtension] NVARCHAR(MAX),
    [compose.lockedDate] VARCHAR(64),
    [compose.inactive] bit,
    [compose.include] VARCHAR(MAX),
    [compose.exclude] VARCHAR(MAX),
    [compose.property] VARCHAR(MAX),
    [expansion.id] NVARCHAR(100),
    [expansion.extension] NVARCHAR(MAX),
    [expansion.modifierExtension] NVARCHAR(MAX),
    [expansion.identifier] VARCHAR(256),
    [expansion.timestamp] VARCHAR(64),
    [expansion.total] bigint,
    [expansion.offset] bigint,
    [expansion.parameter] VARCHAR(MAX),
    [expansion.property] VARCHAR(MAX),
    [expansion.contains] VARCHAR(MAX),
    [scope.id] NVARCHAR(100),
    [scope.extension] NVARCHAR(MAX),
    [scope.modifierExtension] NVARCHAR(MAX),
    [scope.focus] NVARCHAR(4000),
    [scope.inclusionCriteria] NVARCHAR(4000),
    [scope.exclusionCriteria] NVARCHAR(4000),
) WITH (
    LOCATION='/ValueSet/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.ValueSetIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'ValueSet/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.ValueSetContact AS
SELECT
    [id],
    [contact.JSON],
    [contact.id],
    [contact.extension],
    [contact.name],
    [contact.telecom]
FROM openrowset (
        BULK 'ValueSet/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [contact.JSON]  VARCHAR(MAX) '$.contact'
    ) AS rowset
    CROSS APPLY openjson (rowset.[contact.JSON]) with (
        [contact.id]                   NVARCHAR(100)       '$.id',
        [contact.extension]            NVARCHAR(MAX)       '$.extension',
        [contact.name]                 NVARCHAR(500)       '$.name',
        [contact.telecom]              NVARCHAR(MAX)       '$.telecom' AS JSON
    ) j

GO

CREATE VIEW fhir.ValueSetUseContext AS
SELECT
    [id],
    [useContext.JSON],
    [useContext.id],
    [useContext.extension],
    [useContext.code.id],
    [useContext.code.extension],
    [useContext.code.system],
    [useContext.code.version],
    [useContext.code.code],
    [useContext.code.display],
    [useContext.code.userSelected],
    [useContext.value.codeableConcept.id],
    [useContext.value.codeableConcept.extension],
    [useContext.value.codeableConcept.coding],
    [useContext.value.codeableConcept.text],
    [useContext.value.quantity.id],
    [useContext.value.quantity.extension],
    [useContext.value.quantity.value],
    [useContext.value.quantity.comparator],
    [useContext.value.quantity.unit],
    [useContext.value.quantity.system],
    [useContext.value.quantity.code],
    [useContext.value.range.id],
    [useContext.value.range.extension],
    [useContext.value.range.low],
    [useContext.value.range.high],
    [useContext.value.reference.id],
    [useContext.value.reference.extension],
    [useContext.value.reference.reference],
    [useContext.value.reference.type],
    [useContext.value.reference.identifier],
    [useContext.value.reference.display]
FROM openrowset (
        BULK 'ValueSet/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [useContext.JSON]  VARCHAR(MAX) '$.useContext'
    ) AS rowset
    CROSS APPLY openjson (rowset.[useContext.JSON]) with (
        [useContext.id]                NVARCHAR(100)       '$.id',
        [useContext.extension]         NVARCHAR(MAX)       '$.extension',
        [useContext.code.id]           NVARCHAR(100)       '$.code.id',
        [useContext.code.extension]    NVARCHAR(MAX)       '$.code.extension',
        [useContext.code.system]       VARCHAR(256)        '$.code.system',
        [useContext.code.version]      NVARCHAR(100)       '$.code.version',
        [useContext.code.code]         NVARCHAR(4000)      '$.code.code',
        [useContext.code.display]      NVARCHAR(4000)      '$.code.display',
        [useContext.code.userSelected] bit                 '$.code.userSelected',
        [useContext.value.codeableConcept.id] NVARCHAR(100)       '$.value.codeableConcept.id',
        [useContext.value.codeableConcept.extension] NVARCHAR(MAX)       '$.value.codeableConcept.extension',
        [useContext.value.codeableConcept.coding] NVARCHAR(MAX)       '$.value.codeableConcept.coding',
        [useContext.value.codeableConcept.text] NVARCHAR(4000)      '$.value.codeableConcept.text',
        [useContext.value.quantity.id] NVARCHAR(100)       '$.value.quantity.id',
        [useContext.value.quantity.extension] NVARCHAR(MAX)       '$.value.quantity.extension',
        [useContext.value.quantity.value] float               '$.value.quantity.value',
        [useContext.value.quantity.comparator] NVARCHAR(64)        '$.value.quantity.comparator',
        [useContext.value.quantity.unit] NVARCHAR(100)       '$.value.quantity.unit',
        [useContext.value.quantity.system] VARCHAR(256)        '$.value.quantity.system',
        [useContext.value.quantity.code] NVARCHAR(4000)      '$.value.quantity.code',
        [useContext.value.range.id]    NVARCHAR(100)       '$.value.range.id',
        [useContext.value.range.extension] NVARCHAR(MAX)       '$.value.range.extension',
        [useContext.value.range.low]   NVARCHAR(MAX)       '$.value.range.low',
        [useContext.value.range.high]  NVARCHAR(MAX)       '$.value.range.high',
        [useContext.value.reference.id] NVARCHAR(100)       '$.value.reference.id',
        [useContext.value.reference.extension] NVARCHAR(MAX)       '$.value.reference.extension',
        [useContext.value.reference.reference] NVARCHAR(4000)      '$.value.reference.reference',
        [useContext.value.reference.type] VARCHAR(256)        '$.value.reference.type',
        [useContext.value.reference.identifier] NVARCHAR(MAX)       '$.value.reference.identifier',
        [useContext.value.reference.display] NVARCHAR(4000)      '$.value.reference.display'
    ) j

GO

CREATE VIEW fhir.ValueSetJurisdiction AS
SELECT
    [id],
    [jurisdiction.JSON],
    [jurisdiction.id],
    [jurisdiction.extension],
    [jurisdiction.coding],
    [jurisdiction.text]
FROM openrowset (
        BULK 'ValueSet/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [jurisdiction.JSON]  VARCHAR(MAX) '$.jurisdiction'
    ) AS rowset
    CROSS APPLY openjson (rowset.[jurisdiction.JSON]) with (
        [jurisdiction.id]              NVARCHAR(100)       '$.id',
        [jurisdiction.extension]       NVARCHAR(MAX)       '$.extension',
        [jurisdiction.coding]          NVARCHAR(MAX)       '$.coding' AS JSON,
        [jurisdiction.text]            NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[VerificationResult] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [target] VARCHAR(MAX),
    [targetLocation] VARCHAR(MAX),
    [need.id] NVARCHAR(100),
    [need.extension] NVARCHAR(MAX),
    [need.coding] VARCHAR(MAX),
    [need.text] NVARCHAR(4000),
    [status] NVARCHAR(100),
    [statusDate] VARCHAR(64),
    [validationType.id] NVARCHAR(100),
    [validationType.extension] NVARCHAR(MAX),
    [validationType.coding] VARCHAR(MAX),
    [validationType.text] NVARCHAR(4000),
    [validationProcess] VARCHAR(MAX),
    [frequency.id] NVARCHAR(100),
    [frequency.extension] NVARCHAR(MAX),
    [frequency.modifierExtension] NVARCHAR(MAX),
    [frequency.event] VARCHAR(MAX),
    [frequency.repeat.id] NVARCHAR(100),
    [frequency.repeat.extension] NVARCHAR(MAX),
    [frequency.repeat.modifierExtension] NVARCHAR(MAX),
    [frequency.repeat.count] bigint,
    [frequency.repeat.countMax] bigint,
    [frequency.repeat.duration] float,
    [frequency.repeat.durationMax] float,
    [frequency.repeat.durationUnit] NVARCHAR(64),
    [frequency.repeat.frequency] bigint,
    [frequency.repeat.frequencyMax] bigint,
    [frequency.repeat.period] float,
    [frequency.repeat.periodMax] float,
    [frequency.repeat.periodUnit] NVARCHAR(64),
    [frequency.repeat.dayOfWeek] NVARCHAR(MAX),
    [frequency.repeat.timeOfDay] NVARCHAR(MAX),
    [frequency.repeat.when] NVARCHAR(MAX),
    [frequency.repeat.offset] bigint,
    [frequency.repeat.bounds.duration] NVARCHAR(MAX),
    [frequency.repeat.bounds.range] NVARCHAR(MAX),
    [frequency.repeat.bounds.period] NVARCHAR(MAX),
    [frequency.code.id] NVARCHAR(100),
    [frequency.code.extension] NVARCHAR(MAX),
    [frequency.code.coding] NVARCHAR(MAX),
    [frequency.code.text] NVARCHAR(4000),
    [lastPerformed] VARCHAR(64),
    [nextScheduled] VARCHAR(64),
    [failureAction.id] NVARCHAR(100),
    [failureAction.extension] NVARCHAR(MAX),
    [failureAction.coding] VARCHAR(MAX),
    [failureAction.text] NVARCHAR(4000),
    [primarySource] VARCHAR(MAX),
    [attestation.id] NVARCHAR(100),
    [attestation.extension] NVARCHAR(MAX),
    [attestation.modifierExtension] NVARCHAR(MAX),
    [attestation.who.id] NVARCHAR(100),
    [attestation.who.extension] NVARCHAR(MAX),
    [attestation.who.reference] NVARCHAR(4000),
    [attestation.who.type] VARCHAR(256),
    [attestation.who.identifier] NVARCHAR(MAX),
    [attestation.who.display] NVARCHAR(4000),
    [attestation.onBehalfOf.id] NVARCHAR(100),
    [attestation.onBehalfOf.extension] NVARCHAR(MAX),
    [attestation.onBehalfOf.reference] NVARCHAR(4000),
    [attestation.onBehalfOf.type] VARCHAR(256),
    [attestation.onBehalfOf.identifier] NVARCHAR(MAX),
    [attestation.onBehalfOf.display] NVARCHAR(4000),
    [attestation.communicationMethod.id] NVARCHAR(100),
    [attestation.communicationMethod.extension] NVARCHAR(MAX),
    [attestation.communicationMethod.coding] NVARCHAR(MAX),
    [attestation.communicationMethod.text] NVARCHAR(4000),
    [attestation.date] VARCHAR(64),
    [attestation.sourceIdentityCertificate] NVARCHAR(4000),
    [attestation.proxyIdentityCertificate] NVARCHAR(4000),
    [attestation.proxySignature.id] NVARCHAR(100),
    [attestation.proxySignature.extension] NVARCHAR(MAX),
    [attestation.proxySignature.type] NVARCHAR(MAX),
    [attestation.proxySignature.when] VARCHAR(64),
    [attestation.proxySignature.who] NVARCHAR(MAX),
    [attestation.proxySignature.onBehalfOf] NVARCHAR(MAX),
    [attestation.proxySignature.targetFormat] NVARCHAR(100),
    [attestation.proxySignature.sigFormat] NVARCHAR(100),
    [attestation.proxySignature.data] NVARCHAR(MAX),
    [attestation.sourceSignature.id] NVARCHAR(100),
    [attestation.sourceSignature.extension] NVARCHAR(MAX),
    [attestation.sourceSignature.type] NVARCHAR(MAX),
    [attestation.sourceSignature.when] VARCHAR(64),
    [attestation.sourceSignature.who] NVARCHAR(MAX),
    [attestation.sourceSignature.onBehalfOf] NVARCHAR(MAX),
    [attestation.sourceSignature.targetFormat] NVARCHAR(100),
    [attestation.sourceSignature.sigFormat] NVARCHAR(100),
    [attestation.sourceSignature.data] NVARCHAR(MAX),
    [validator] VARCHAR(MAX),
) WITH (
    LOCATION='/VerificationResult/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.VerificationResultTarget AS
SELECT
    [id],
    [target.JSON],
    [target.id],
    [target.extension],
    [target.reference],
    [target.type],
    [target.identifier.id],
    [target.identifier.extension],
    [target.identifier.use],
    [target.identifier.type],
    [target.identifier.system],
    [target.identifier.value],
    [target.identifier.period],
    [target.identifier.assigner],
    [target.display]
FROM openrowset (
        BULK 'VerificationResult/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [target.JSON]  VARCHAR(MAX) '$.target'
    ) AS rowset
    CROSS APPLY openjson (rowset.[target.JSON]) with (
        [target.id]                    NVARCHAR(100)       '$.id',
        [target.extension]             NVARCHAR(MAX)       '$.extension',
        [target.reference]             NVARCHAR(4000)      '$.reference',
        [target.type]                  VARCHAR(256)        '$.type',
        [target.identifier.id]         NVARCHAR(100)       '$.identifier.id',
        [target.identifier.extension]  NVARCHAR(MAX)       '$.identifier.extension',
        [target.identifier.use]        NVARCHAR(64)        '$.identifier.use',
        [target.identifier.type]       NVARCHAR(MAX)       '$.identifier.type',
        [target.identifier.system]     VARCHAR(256)        '$.identifier.system',
        [target.identifier.value]      NVARCHAR(4000)      '$.identifier.value',
        [target.identifier.period]     NVARCHAR(MAX)       '$.identifier.period',
        [target.identifier.assigner]   NVARCHAR(MAX)       '$.identifier.assigner',
        [target.display]               NVARCHAR(4000)      '$.display'
    ) j

GO

CREATE VIEW fhir.VerificationResultTargetLocation AS
SELECT
    [id],
    [targetLocation.JSON],
    [targetLocation]
FROM openrowset (
        BULK 'VerificationResult/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [targetLocation.JSON]  VARCHAR(MAX) '$.targetLocation'
    ) AS rowset
    CROSS APPLY openjson (rowset.[targetLocation.JSON]) with (
        [targetLocation]               NVARCHAR(MAX)       '$'
    ) j

GO

CREATE VIEW fhir.VerificationResultValidationProcess AS
SELECT
    [id],
    [validationProcess.JSON],
    [validationProcess.id],
    [validationProcess.extension],
    [validationProcess.coding],
    [validationProcess.text]
FROM openrowset (
        BULK 'VerificationResult/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [validationProcess.JSON]  VARCHAR(MAX) '$.validationProcess'
    ) AS rowset
    CROSS APPLY openjson (rowset.[validationProcess.JSON]) with (
        [validationProcess.id]         NVARCHAR(100)       '$.id',
        [validationProcess.extension]  NVARCHAR(MAX)       '$.extension',
        [validationProcess.coding]     NVARCHAR(MAX)       '$.coding' AS JSON,
        [validationProcess.text]       NVARCHAR(4000)      '$.text'
    ) j

GO

CREATE VIEW fhir.VerificationResultPrimarySource AS
SELECT
    [id],
    [primarySource.JSON],
    [primarySource.id],
    [primarySource.extension],
    [primarySource.modifierExtension],
    [primarySource.who.id],
    [primarySource.who.extension],
    [primarySource.who.reference],
    [primarySource.who.type],
    [primarySource.who.identifier],
    [primarySource.who.display],
    [primarySource.type],
    [primarySource.communicationMethod],
    [primarySource.validationStatus.id],
    [primarySource.validationStatus.extension],
    [primarySource.validationStatus.coding],
    [primarySource.validationStatus.text],
    [primarySource.validationDate],
    [primarySource.canPushUpdates.id],
    [primarySource.canPushUpdates.extension],
    [primarySource.canPushUpdates.coding],
    [primarySource.canPushUpdates.text],
    [primarySource.pushTypeAvailable]
FROM openrowset (
        BULK 'VerificationResult/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [primarySource.JSON]  VARCHAR(MAX) '$.primarySource'
    ) AS rowset
    CROSS APPLY openjson (rowset.[primarySource.JSON]) with (
        [primarySource.id]             NVARCHAR(100)       '$.id',
        [primarySource.extension]      NVARCHAR(MAX)       '$.extension',
        [primarySource.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [primarySource.who.id]         NVARCHAR(100)       '$.who.id',
        [primarySource.who.extension]  NVARCHAR(MAX)       '$.who.extension',
        [primarySource.who.reference]  NVARCHAR(4000)      '$.who.reference',
        [primarySource.who.type]       VARCHAR(256)        '$.who.type',
        [primarySource.who.identifier] NVARCHAR(MAX)       '$.who.identifier',
        [primarySource.who.display]    NVARCHAR(4000)      '$.who.display',
        [primarySource.type]           NVARCHAR(MAX)       '$.type' AS JSON,
        [primarySource.communicationMethod] NVARCHAR(MAX)       '$.communicationMethod' AS JSON,
        [primarySource.validationStatus.id] NVARCHAR(100)       '$.validationStatus.id',
        [primarySource.validationStatus.extension] NVARCHAR(MAX)       '$.validationStatus.extension',
        [primarySource.validationStatus.coding] NVARCHAR(MAX)       '$.validationStatus.coding',
        [primarySource.validationStatus.text] NVARCHAR(4000)      '$.validationStatus.text',
        [primarySource.validationDate] VARCHAR(64)         '$.validationDate',
        [primarySource.canPushUpdates.id] NVARCHAR(100)       '$.canPushUpdates.id',
        [primarySource.canPushUpdates.extension] NVARCHAR(MAX)       '$.canPushUpdates.extension',
        [primarySource.canPushUpdates.coding] NVARCHAR(MAX)       '$.canPushUpdates.coding',
        [primarySource.canPushUpdates.text] NVARCHAR(4000)      '$.canPushUpdates.text',
        [primarySource.pushTypeAvailable] NVARCHAR(MAX)       '$.pushTypeAvailable' AS JSON
    ) j

GO

CREATE VIEW fhir.VerificationResultValidator AS
SELECT
    [id],
    [validator.JSON],
    [validator.id],
    [validator.extension],
    [validator.modifierExtension],
    [validator.organization.id],
    [validator.organization.extension],
    [validator.organization.reference],
    [validator.organization.type],
    [validator.organization.identifier],
    [validator.organization.display],
    [validator.identityCertificate],
    [validator.attestationSignature.id],
    [validator.attestationSignature.extension],
    [validator.attestationSignature.type],
    [validator.attestationSignature.when],
    [validator.attestationSignature.who],
    [validator.attestationSignature.onBehalfOf],
    [validator.attestationSignature.targetFormat],
    [validator.attestationSignature.sigFormat],
    [validator.attestationSignature.data]
FROM openrowset (
        BULK 'VerificationResult/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [validator.JSON]  VARCHAR(MAX) '$.validator'
    ) AS rowset
    CROSS APPLY openjson (rowset.[validator.JSON]) with (
        [validator.id]                 NVARCHAR(100)       '$.id',
        [validator.extension]          NVARCHAR(MAX)       '$.extension',
        [validator.modifierExtension]  NVARCHAR(MAX)       '$.modifierExtension',
        [validator.organization.id]    NVARCHAR(100)       '$.organization.id',
        [validator.organization.extension] NVARCHAR(MAX)       '$.organization.extension',
        [validator.organization.reference] NVARCHAR(4000)      '$.organization.reference',
        [validator.organization.type]  VARCHAR(256)        '$.organization.type',
        [validator.organization.identifier] NVARCHAR(MAX)       '$.organization.identifier',
        [validator.organization.display] NVARCHAR(4000)      '$.organization.display',
        [validator.identityCertificate] NVARCHAR(4000)      '$.identityCertificate',
        [validator.attestationSignature.id] NVARCHAR(100)       '$.attestationSignature.id',
        [validator.attestationSignature.extension] NVARCHAR(MAX)       '$.attestationSignature.extension',
        [validator.attestationSignature.type] NVARCHAR(MAX)       '$.attestationSignature.type',
        [validator.attestationSignature.when] VARCHAR(64)         '$.attestationSignature.when',
        [validator.attestationSignature.who] NVARCHAR(MAX)       '$.attestationSignature.who',
        [validator.attestationSignature.onBehalfOf] NVARCHAR(MAX)       '$.attestationSignature.onBehalfOf',
        [validator.attestationSignature.targetFormat] NVARCHAR(100)       '$.attestationSignature.targetFormat',
        [validator.attestationSignature.sigFormat] NVARCHAR(100)       '$.attestationSignature.sigFormat',
        [validator.attestationSignature.data] NVARCHAR(MAX)       '$.attestationSignature.data'
    ) j

GO

CREATE EXTERNAL TABLE [fhir].[VisionPrescription] (
    [resourceType] NVARCHAR(4000),
    [id] VARCHAR(64),
    [meta.id] NVARCHAR(100),
    [meta.extension] NVARCHAR(MAX),
    [meta.versionId] VARCHAR(64),
    [meta.lastUpdated] VARCHAR(64),
    [meta.source] VARCHAR(256),
    [meta.profile] VARCHAR(MAX),
    [meta.security] VARCHAR(MAX),
    [meta.tag] VARCHAR(MAX),
    [implicitRules] VARCHAR(256),
    [language] NVARCHAR(100),
    [text.id] NVARCHAR(100),
    [text.extension] NVARCHAR(MAX),
    [text.status] NVARCHAR(64),
    [text.div] NVARCHAR(MAX),
    [extension] NVARCHAR(MAX),
    [modifierExtension] NVARCHAR(MAX),
    [identifier] VARCHAR(MAX),
    [status] NVARCHAR(100),
    [created] VARCHAR(64),
    [patient.id] NVARCHAR(100),
    [patient.extension] NVARCHAR(MAX),
    [patient.reference] NVARCHAR(4000),
    [patient.type] VARCHAR(256),
    [patient.identifier.id] NVARCHAR(100),
    [patient.identifier.extension] NVARCHAR(MAX),
    [patient.identifier.use] NVARCHAR(64),
    [patient.identifier.type] NVARCHAR(MAX),
    [patient.identifier.system] VARCHAR(256),
    [patient.identifier.value] NVARCHAR(4000),
    [patient.identifier.period] NVARCHAR(MAX),
    [patient.identifier.assigner] NVARCHAR(MAX),
    [patient.display] NVARCHAR(4000),
    [encounter.id] NVARCHAR(100),
    [encounter.extension] NVARCHAR(MAX),
    [encounter.reference] NVARCHAR(4000),
    [encounter.type] VARCHAR(256),
    [encounter.identifier.id] NVARCHAR(100),
    [encounter.identifier.extension] NVARCHAR(MAX),
    [encounter.identifier.use] NVARCHAR(64),
    [encounter.identifier.type] NVARCHAR(MAX),
    [encounter.identifier.system] VARCHAR(256),
    [encounter.identifier.value] NVARCHAR(4000),
    [encounter.identifier.period] NVARCHAR(MAX),
    [encounter.identifier.assigner] NVARCHAR(MAX),
    [encounter.display] NVARCHAR(4000),
    [dateWritten] VARCHAR(64),
    [prescriber.id] NVARCHAR(100),
    [prescriber.extension] NVARCHAR(MAX),
    [prescriber.reference] NVARCHAR(4000),
    [prescriber.type] VARCHAR(256),
    [prescriber.identifier.id] NVARCHAR(100),
    [prescriber.identifier.extension] NVARCHAR(MAX),
    [prescriber.identifier.use] NVARCHAR(64),
    [prescriber.identifier.type] NVARCHAR(MAX),
    [prescriber.identifier.system] VARCHAR(256),
    [prescriber.identifier.value] NVARCHAR(4000),
    [prescriber.identifier.period] NVARCHAR(MAX),
    [prescriber.identifier.assigner] NVARCHAR(MAX),
    [prescriber.display] NVARCHAR(4000),
    [lensSpecification] VARCHAR(MAX),
) WITH (
    LOCATION='/VisionPrescription/**',
    DATA_SOURCE = ParquetSource,
    FILE_FORMAT = ParquetFormat
);

GO

CREATE VIEW fhir.VisionPrescriptionIdentifier AS
SELECT
    [id],
    [identifier.JSON],
    [identifier.id],
    [identifier.extension],
    [identifier.use],
    [identifier.type.id],
    [identifier.type.extension],
    [identifier.type.coding],
    [identifier.type.text],
    [identifier.system],
    [identifier.value],
    [identifier.period.id],
    [identifier.period.extension],
    [identifier.period.start],
    [identifier.period.end],
    [identifier.assigner.id],
    [identifier.assigner.extension],
    [identifier.assigner.reference],
    [identifier.assigner.type],
    [identifier.assigner.identifier],
    [identifier.assigner.display]
FROM openrowset (
        BULK 'VisionPrescription/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [identifier.JSON]  VARCHAR(MAX) '$.identifier'
    ) AS rowset
    CROSS APPLY openjson (rowset.[identifier.JSON]) with (
        [identifier.id]                NVARCHAR(100)       '$.id',
        [identifier.extension]         NVARCHAR(MAX)       '$.extension',
        [identifier.use]               NVARCHAR(64)        '$.use',
        [identifier.type.id]           NVARCHAR(100)       '$.type.id',
        [identifier.type.extension]    NVARCHAR(MAX)       '$.type.extension',
        [identifier.type.coding]       NVARCHAR(MAX)       '$.type.coding',
        [identifier.type.text]         NVARCHAR(4000)      '$.type.text',
        [identifier.system]            VARCHAR(256)        '$.system',
        [identifier.value]             NVARCHAR(4000)      '$.value',
        [identifier.period.id]         NVARCHAR(100)       '$.period.id',
        [identifier.period.extension]  NVARCHAR(MAX)       '$.period.extension',
        [identifier.period.start]      VARCHAR(64)         '$.period.start',
        [identifier.period.end]        VARCHAR(64)         '$.period.end',
        [identifier.assigner.id]       NVARCHAR(100)       '$.assigner.id',
        [identifier.assigner.extension] NVARCHAR(MAX)       '$.assigner.extension',
        [identifier.assigner.reference] NVARCHAR(4000)      '$.assigner.reference',
        [identifier.assigner.type]     VARCHAR(256)        '$.assigner.type',
        [identifier.assigner.identifier] NVARCHAR(MAX)       '$.assigner.identifier',
        [identifier.assigner.display]  NVARCHAR(4000)      '$.assigner.display'
    ) j

GO

CREATE VIEW fhir.VisionPrescriptionLensSpecification AS
SELECT
    [id],
    [lensSpecification.JSON],
    [lensSpecification.id],
    [lensSpecification.extension],
    [lensSpecification.modifierExtension],
    [lensSpecification.product.id],
    [lensSpecification.product.extension],
    [lensSpecification.product.coding],
    [lensSpecification.product.text],
    [lensSpecification.eye],
    [lensSpecification.sphere],
    [lensSpecification.cylinder],
    [lensSpecification.axis],
    [lensSpecification.prism],
    [lensSpecification.add],
    [lensSpecification.power],
    [lensSpecification.backCurve],
    [lensSpecification.diameter],
    [lensSpecification.duration.id],
    [lensSpecification.duration.extension],
    [lensSpecification.duration.value],
    [lensSpecification.duration.comparator],
    [lensSpecification.duration.unit],
    [lensSpecification.duration.system],
    [lensSpecification.duration.code],
    [lensSpecification.color],
    [lensSpecification.brand],
    [lensSpecification.note]
FROM openrowset (
        BULK 'VisionPrescription/**',
        DATA_SOURCE = 'ParquetSource',
        FORMAT = 'PARQUET'
    ) WITH (
        [id]   VARCHAR(64),
       [lensSpecification.JSON]  VARCHAR(MAX) '$.lensSpecification'
    ) AS rowset
    CROSS APPLY openjson (rowset.[lensSpecification.JSON]) with (
        [lensSpecification.id]         NVARCHAR(100)       '$.id',
        [lensSpecification.extension]  NVARCHAR(MAX)       '$.extension',
        [lensSpecification.modifierExtension] NVARCHAR(MAX)       '$.modifierExtension',
        [lensSpecification.product.id] NVARCHAR(100)       '$.product.id',
        [lensSpecification.product.extension] NVARCHAR(MAX)       '$.product.extension',
        [lensSpecification.product.coding] NVARCHAR(MAX)       '$.product.coding',
        [lensSpecification.product.text] NVARCHAR(4000)      '$.product.text',
        [lensSpecification.eye]        NVARCHAR(4000)      '$.eye',
        [lensSpecification.sphere]     float               '$.sphere',
        [lensSpecification.cylinder]   float               '$.cylinder',
        [lensSpecification.axis]       bigint              '$.axis',
        [lensSpecification.prism]      NVARCHAR(MAX)       '$.prism' AS JSON,
        [lensSpecification.add]        float               '$.add',
        [lensSpecification.power]      float               '$.power',
        [lensSpecification.backCurve]  float               '$.backCurve',
        [lensSpecification.diameter]   float               '$.diameter',
        [lensSpecification.duration.id] NVARCHAR(100)       '$.duration.id',
        [lensSpecification.duration.extension] NVARCHAR(MAX)       '$.duration.extension',
        [lensSpecification.duration.value] float               '$.duration.value',
        [lensSpecification.duration.comparator] NVARCHAR(64)        '$.duration.comparator',
        [lensSpecification.duration.unit] NVARCHAR(100)       '$.duration.unit',
        [lensSpecification.duration.system] VARCHAR(256)        '$.duration.system',
        [lensSpecification.duration.code] NVARCHAR(4000)      '$.duration.code',
        [lensSpecification.color]      NVARCHAR(100)       '$.color',
        [lensSpecification.brand]      NVARCHAR(500)       '$.brand',
        [lensSpecification.note]       NVARCHAR(MAX)       '$.note' AS JSON
    ) j
