steps:
- task: NuGetAuthenticate@0
  displayName: 'NuGet Authenticate'

- task: NuGetToolInstaller@1
  displayName: 'Use NuGet 5.11'
  inputs:
    versionSpec: 5.11

- task: NuGetCommand@2
  displayName: 'NuGet restore packages.config'
  inputs:
    restoreSolution: '**/*.Native/packages.config'
    vstsFeed: 'FhirAnalytics/FhirAnalyticsPublic'
    restoreDirectory: '../../packages'

- task: DotNetCoreCLI@2
  displayName: 'dotnet restore solution'
  inputs:
    command: restore
    projects: FhirToDataLake/*.sln
    feedsToUse: 'config'
    nugetConfigPath: 'FhirToDataLake/NuGet.Config'

- task: MSBuild@1
  displayName: 'Build solution'
  inputs:
    solution: FhirToDataLake/*.sln
    msbuildArchitecture: $(buildPlatform)
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
    msbuildArguments: '-p:ApplicationVersion=$(version)'

- task: NodeTool@0
  displayName: 'Use Node.js'
  inputs:
    versionSpec: '16.*'

- bash: |
    sudo npm install -g azurite
    sudo mkdir azurite
    sudo azurite --silent --location azurite --debug azurite\debug.log &
  displayName: 'Install and Run Azurite'

- task: AzureKeyVault@2
  inputs:
    azureSubscription: 'ResoluteOpenSource'
    KeyVaultName: 'fhiranalyticspipeline'
    SecretsFilter: '*'
    RunAsPreJob: false

- task: VSTest@2
  displayName: 'Run native unit tests'
  inputs:
    testAssemblyVer2: |
      **\*Native*\**\*UnitTests.dll
      !**\obj\**
      !**\ref\**
    searchFolder: '$(Build.SourcesDirectory)'
    codeCoverageEnabled: true
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: VSTest@2
  displayName: 'Run managed unit tests'
  inputs:
    testAssemblyVer2: |
      FhirToDataLake\**\*Tests.dll
      !**\*E2ETests.dll
      !**\*Native*\**\*UnitTests.dll
      !**\obj\**
      !**\ref\**
    searchFolder: '$(Build.SourcesDirectory)'
    codeCoverageEnabled: true
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
  env:
    TestContainerRegistryServer: $(pipeline-container-registry-server)
    TestContainerRegistryPassword: $(pipeline-container-registry-password)
    AZURE_CLIENT_ID: $(pipeline-service-principal-name)
    AZURE_CLIENT_SECRET: $(pipeline-service-principal-password)
    AZURE_TENANT_ID: $(pipeline-tenant-id)

- task: AzureCLI@2
  displayName: Run E2E tests
  inputs:
    azureSubscription: 'ResoluteOpenSource'
    workingDirectory: '$(Build.SourcesDirectory)'
    scriptType: ps
    scriptLocation: inlineScript
    inlineScript: |
      dotnet test **\bin\**\*E2ETests.dll --verbosity detailed

# ref: https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/deploy/azure-function-app?view=azure-devops#error-publish-using-zip-deploy-option-is-not-supported-for-msbuild-package-type
- task: MSBuild@1
  displayName: 'Publish function app'
  inputs:
    solution: FhirToDataLake/**/*.FunctionApp.csproj
    msbuildArchitecture: $(BuildPlatform)
    platform: '$(BuildPlatform)'
    configuration: '$(BuildConfiguration)'
    msbuildArguments: '-p:DeployOnBuild=true -p:DeployDefaultTarget=WebPublish -p:WebPublishMethod=FileSystem -p:DeleteExistingFiles=True -p:publishUrl=$(Build.SourcesDirectory)/bin/publish/functionapp -p:ApplicationVersion=$(version)'

- task: ArchiveFiles@2
  displayName: 'Archive function app'
  inputs:
    rootFolderOrFile: '$(Build.SourcesDirectory)/bin/publish/functionapp'
    includeRootFolder: false
    archiveFile: '$(Build.ArtifactStagingDirectory)/FhirToDataLake/Microsoft.Health.Fhir.Synapse.FunctionApp.zip'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/FhirToDataLake'
    ArtifactName: FhirToDataLakeBuild