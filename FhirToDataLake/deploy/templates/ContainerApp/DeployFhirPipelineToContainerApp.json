{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
      "location": {
          "type": "string",
          "defaultValue": "East US",
          "allowedValues": [
              "Australia East",
              "Brazil South",
              "Canada Central",
              "Central US",
              "East Asia",
              "East US",
              "East US 2",
              "France Central",
              "Germany West Central",
              "Japan East",
              "Korea Central",
              "North Central US",
              "North Europe",
              "Norway East",
              "South Africa North",
              "South Central US",
              "UK South",
              "West Europe",
              "West US",
              "West US 3"
          ],
          "metadata": {
              "description": "Location for all resources."
          }
      },
      "pipelineName": {
          "type": "string",
          "minLength": 3,
          "maxLength": 24,
          "metadata": {
              "description": "The name of the container app."
          }
      },
      "containerAppEnvironmentName": {
          "type": "string",
          "defaultValue": "",
          "maxLength": 24,
          "metadata": {
              "description": "The name of the existing Azure Container App environment. If not specified, new environment will be created."
          }
      },
      "fhirServerUrl": {
          "type": "string",
          "metadata": {
              "description": "The fhir server endpoint to get data."
          }
      },
      "authentication": {
          "type": "bool",
          "defaultValue": false,
          "allowedValues": [
          true,
          false
          ],
          "metadata": {
              "description": "Whether to access Azure API for FHIR with managed identity authentication. Set it false if you use an OSS public FHIR server instance."
          }
      },
      "fhirVersion": {
          "type": "string",
          "defaultValue": "R4",
          "allowedValues": ["R4"]
      },
      "dataStart": {
          "type": "string",
          "defaultValue": "1970-01-01 00:00:00 +00:00",
          "metadata": {
              "description": "Start timestamp of the data range to export."
          }
      },
      "dataEnd": {
          "type": "string",
          "defaultValue": "",
          "metadata": {
              "description": "End timestamp of the data range to export. If not specified, all data will be exported."
          }
      },
      "containerName": {
          "type": "string",
          "defaultValue": "fhir",
          "metadata": {
              "description": "The name of the container to store job and data."
          }
      },
      "jobConcurrency": {
          "type": "int",
          "defaultValue": 3,
          "minValue": 2,
          "maxValue": 10,
          "metadata": {
              "description": "Count of concurrent jobs executing in parallel."
          }
      },
      "schedulerIntervalInMinutes": {
          "type": "string",
          "defaultValue": "5",
          "allowedValues": [
          "5",
          "30",
          "60",
          "1440",
          "customized"
          ],
          "metadata": {
              "description": "The scheduler interval in minutes. To customize the scheduler, set the value to \"customized\" and specify the value in Scheduler Crontab Expression below."
          }
      },
      "schedulerCrontabExpression": {
          "type": "string",
          "defaultValue": "",
          "metadata": {
              "description": "Use a crontab expression to set the scheduler. A crontab expression is a six-part crontab format (sec min hour day month day-of-week). Refer to https://github.com/atifaziz/NCrontab for more about crontab expression."
          }
      },
      "customizedSchemaImageReference":{
          "type": "string",
          "defaultValue": "",
          "metadata": {
              "description": "The customized schema image reference for the image on Container Registry. Refer to https://github.com/microsoft/FHIR-Converter/blob/main/docs/TemplateManagementCLI.md for manage your template images."
          }
      },
      "filterConfigImageReference":{
          "type": "string",
          "defaultValue": "",
          "metadata": {
              "description": "Azure Container Registry image reference of filter configuration file."
          }
      },
      "filterScope":{
          "type": "string",
          "defaultValue": "System",
          "metadata": {
              "description": "For data filtering use. The export scope can be System or Group. The default value is System if no filter is applied."
          }
      },
      "groupId":{
          "type": "string",
          "defaultValue": "",
          "metadata": {
              "description": "For data filtering use. If the Filter scope is set as Group, you need to fill the group Id, otherwise leave it blank."
          }
      },
      "requiredTypes":{
          "type": "string",
          "defaultValue": "",
          "metadata": {
              "description": "For data filtering use. Specify which types of resources will be included. For example, type=Patient would return only patient resources. All resource types will be exported if not specified. Leave it blank if no filter is applied."
          }
      },
      "typeFilters":{
          "type": "string",
          "defaultValue": "",
          "metadata": {
              "description": "For data filtering use. Use along with the requiredTypes configuration. The value is a comma-separated list of FHIR queries that further restrict the results. All data of requiredTypes will be exported if not specified. Leave it blank if no filter is applied."
          }
      },
      "image": {
          "type": "string",
          "defaultValue": "healthplatformregistry.azurecr.io/healthdatatodatalaketool:v0.6.0",
          "metadata": {
              "description": "Container image to deploy. Should be of the form repoName/imagename:tag for images stored in public Docker Hub, or a fully qualified URI for other registries. Images from private registries require additional registry credentials."
          }
      },
      "maxInstanceCount": {
          "type": "int",
          "defaultValue": 10,
          "minValue": 1,
          "maxValue": 30,
          "metadata": {
              "description": "Maximum number of replicas running for fhir to datalake container app."
          }
      },
      "storageAccountType": {
          "type": "string",
          "defaultValue": "Standard_LRS",
          "allowedValues": [
              "Standard_LRS",
              "Standard_GRS",
              "Standard_RAGRS"
          ],
          "metadata": {
              "description": "Storage Account type"
          }
      }
    },
    "variables": {
      "pipelineContainerName": "fhir-to-datalake",
      "pipelineName": "[toLower(parameters('pipelineName'))]",
      "analyticsWorkspaceName": "[concat(variables('pipelineName'), '-LogAnalytics')]",
      "environmentName": "[if(empty(parameters('containerAppEnvironmentName')), concat(variables('pipelineName'), '-Environment') ,parameters('containerAppEnvironmentName'))]",
      "jobInfoQueueName": "[concat(variables('pipelineName'), 'jobinfoqueue')]",
      "jobInfoTableName": "[concat(variables('pipelineName'), 'jobinfotable')]",
      "metadataTableName": "[concat(variables('pipelineName'), 'metadatatable')]",
      "resourceTags": {"FhirAnalyticsPipeline": "FhirToDataLake", "FhirSchemaVersion": "v0.6.0"},
      "storageAccountName": "[concat(substring(replace(variables('pipelineName'), '-', ''), 0, min(11, length(replace(variables('pipelineName'), '-', '')))), uniquestring(resourceGroup().id, variables('pipelineName')))]",
      "storageBlobDataContributerRoleId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
      "storageQueueDataContributerRoleId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '974c5e8b-45b9-4653-ba55-5f855dd0fb88')]",
      "storageTableDataContributerRoleId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '0a9a7e1f-b9d0-4cc4-a60d-0319b160aaa3')]",
      "filterConfigImageReference": "[toLower(parameters('filterConfigImageReference'))]",
      "customizedSchemaImageReference": "[toLower(parameters('customizedSchemaImageReference'))]",
      "schedulerCronExpression": "[if(equals(parameters('schedulerIntervalInMinutes'), '5'), '0 */5 * * * *', if(equals(parameters('schedulerIntervalInMinutes'), '30'), '0 */30 * * * *', if(equals(parameters('schedulerIntervalInMinutes'), '60'), '0 0 * * * *', if(equals(parameters('schedulerIntervalInMinutes'), '1440'), '0 0 0 * * *', parameters('schedulerCrontabExpression')))))]"
    },
    "resources": [
      {
          "type": "Microsoft.Storage/storageAccounts",
          "apiVersion": "2019-06-01",
          "name": "[variables('storageAccountName')]",
          "location": "[parameters('location')]",
          "tags": "[variables('resourceTags')]",
          "sku": {
              "name": "[parameters('storageAccountType')]"
          },
          "properties": {
              "isHnsEnabled": true
          },
          "kind": "StorageV2"
      },
      {
        "type": "Microsoft.OperationalInsights/workspaces",
        "apiVersion": "2021-12-01-preview",
        "name": "[variables('analyticsWorkspaceName')]",
        "location": "[parameters('location')]",
        "tags": "[variables('resourceTags')]",
        "properties": {
          "sku": {
            "name": "PerGB2018"
          },
          "retentionInDays": 60
        }
      },
      {
        "type": "Microsoft.App/managedEnvironments",
        "apiVersion": "2022-03-01",
        "name": "[variables('environmentName')]",
        "dependsOn": [
          "[resourceId('Microsoft.OperationalInsights/workspaces', variables('analyticsWorkspaceName'))]"
        ],
        "location": "[parameters('location')]",
        "tags": "[variables('resourceTags')]",
        "properties": {
          "appLogsConfiguration": {
            "destination": "log-analytics",
            "logAnalyticsConfiguration": {
              "customerId": "[reference(resourceId('Microsoft.OperationalInsights/workspaces/', variables('analyticsWorkspaceName')), '2015-03-20').customerId]",
              "sharedKey": "[listKeys(resourceId('Microsoft.OperationalInsights/workspaces/', variables('analyticsWorkspaceName')), '2015-03-20').primarySharedKey]"
            }
          }
        }
      },
      {
        "apiVersion": "2022-03-01",
        "type": "Microsoft.App/containerApps",
        "name": "[variables('pipelineName')]",
        "dependsOn": [
          "[resourceId('Microsoft.App/managedEnvironments', variables('environmentName'))]"
        ],
        "identity": {
          "type": "SystemAssigned"
        },
        "location": "[parameters('location')]",
        "tags": "[variables('resourceTags')]",
        "properties": {
          "managedEnvironmentId": "[resourceId('Microsoft.App/managedEnvironments', variables('environmentName'))]",
          "template": {
            "revisionSuffix": "myrevision",
            "containers": [
              {
                "name": "[variables('pipelineContainerName')]",
                "image": "[parameters('image')]",
                "env": [
                  {
                      "name": "job__jobInfoQueueName",
                      "value": "[variables('jobInfoQueueName')]"
                  },
                  {
                      "name": "job__jobInfoTableName",
                      "value": "[variables('jobInfoTableName')]"
                  },
                  {
                      "name": "job__metadataTableName",
                      "value": "[variables('metadataTableName')]"
                  },
                  {
                      "name": "job__maxRunningJobCount",
                      "value": "[string(parameters('jobConcurrency'))]"
                  },
                  {
                      "name": "job__containerName",
                      "value": "[parameters('containerName')]"
                  },
                  {
                      "name": "job__startTime",
                      "value": "[parameters('dataStart')]"
                  },
                  {
                      "name": "job__endTime",
                      "value": "[parameters('dataEnd')]"
                  },
                  {
                      "name": "job__tableUrl",
                      "value": "[concat('https://', variables('storageAccountName'), '.table.core.windows.net')]"
                  },
                  {
                      "name": "job__queueUrl",
                      "value": "[concat('https://', variables('storageAccountName'), '.queue.core.windows.net')]"
                  },
                  {
                      "name": "job__schedulerCronExpression",
                      "value": "[variables('schedulerCronExpression')]"
                  },
                  {
                      "name": "dataLakeStore__storageUrl",
                      "value": "[concat('https://', variables('storageAccountName'), '.blob.core.windows.net')]"
                  },
                  {
                      "name": "filter__filterScope",
                      "value": "[parameters('filterScope')]"
                  },
                  {
                      "name": "filter__enableExternalFilter",
                      "value": "[if(empty(variables('filterConfigImageReference')), 'false', 'true')]"
                  },
                  {
                      "name": "filter__filterImageReference",
                      "value": "[variables('filterConfigImageReference')]"
                  },
                  {
                      "name": "filter__groupId",
                      "value": "[parameters('groupId')]"
                  },
                  {
                      "name": "filter__requiredTypes",
                      "value": "[parameters('requiredTypes')]"
                  },
                  {
                      "name": "filter__typeFilters",
                      "value": "[parameters('typeFilters')]"
                  },
                  {
                      "name": "schema__enableCustomizedSchema",
                      "value": "[if(empty(variables('customizedSchemaImageReference')), 'false', 'true')]"
                  },
                  {
                      "name": "schema__schemaImageReference",
                      "value": "[variables('customizedSchemaImageReference')]"
                  },
                  {
                      "name": "fhirServer__serverUrl",
                      "value": "[parameters('fhirServerUrl')]"
                  },
                  {
                      "name": "fhirServer__version",
                      "value": "[parameters('fhirVersion')]"
                  },
                  {
                      "name": "fhirServer__authentication",
                      "value": "[if(parameters('authentication'), 'ManagedIdentity', 'None')]"
                  }
                ],
                "resources": {
                  "cpu": 2,
                  "memory": "4Gi"
                }
              }
            ],
            "scale": {
              "minReplicas": 1,
              "maxReplicas": "[parameters('maxInstanceCount')]",
              "rules": [
                  {
                  "name": "cpu-scaling-rule",
                  "custom": {
                      "type": "cpu",
                      "metadata": {
                          "type": "Utilization",
                          "value": "50"
                          }
                      }
                  },
                  {
                      "name": "memory-scaling-rule",
                      "custom": {
                          "type": "memory",
                          "metadata": {
                              "type": "Utilization",
                              "value": "50"
                          }
                      }
                  }
              ]
            }
          }
        }
      },
      {
          "type": "Microsoft.Storage/storageAccounts/providers/roleAssignments",
          "apiVersion": "2018-09-01-preview",
          "name": "[concat(variables('storageAccountName'), '/Microsoft.Authorization/', guid(uniqueString(variables('storageAccountName'), variables('pipelineName'), 'blob')))]",
          "dependsOn": [
              "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
              "[resourceId('Microsoft.App/containerApps', variables('pipelineName'))]"
          ],
          "properties": {
              "roleDefinitionId": "[variables('storageBlobDataContributerRoleId')]",
              "principalId": "[reference(resourceId('Microsoft.App/containerApps/', variables('pipelineName')), '2022-03-01', 'Full').identity.principalId]",
              "principalType": "ServicePrincipal"
          }
      },
      {
          "type": "Microsoft.Storage/storageAccounts/providers/roleAssignments",
          "apiVersion": "2018-09-01-preview",
          "name": "[concat(variables('storageAccountName'), '/Microsoft.Authorization/', guid(uniqueString(variables('storageAccountName'), variables('pipelineName'), 'queue')))]",
          "dependsOn": [
              "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
              "[resourceId('Microsoft.App/containerApps', variables('pipelineName'))]"
          ],
          "properties": {
              "roleDefinitionId": "[variables('storageQueueDataContributerRoleId')]",
              "principalId": "[reference(resourceId('Microsoft.App/containerApps/', variables('pipelineName')), '2022-03-01', 'Full').identity.principalId]",
              "principalType": "ServicePrincipal"
          }
      },
      {
          "type": "Microsoft.Storage/storageAccounts/providers/roleAssignments",
          "apiVersion": "2018-09-01-preview",
          "name": "[concat(variables('storageAccountName'), '/Microsoft.Authorization/', guid(uniqueString(variables('storageAccountName'), variables('pipelineName'), 'table')))]",
          "dependsOn": [
              "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
              "[resourceId('Microsoft.App/containerApps', variables('pipelineName'))]"
          ],
          "properties": {
              "roleDefinitionId": "[variables('storageTableDataContributerRoleId')]",
              "principalId": "[reference(resourceId('Microsoft.App/containerApps/', variables('pipelineName')), '2022-03-01', 'Full').identity.principalId]",
              "principalType": "ServicePrincipal"
          }
      }
    ]
  }
  
