steps:
- powershell: |
    $buildNumber = ([string]$(Build.BuildNumber)).replace('.', '')
    $pipelineName = 'fhir' + $buildNumber.substring($buildNumber.length - 7)

    Write-Host $("Build number: " + $buildNumber)
    Write-Host $("Pipeline name: " + $pipelineName)
    
    $databaseName = $pipelineName
    $containerName = 'ci' + $pipelineName
    Write-Host "##vso[task.setvariable variable=databaseName;]$databaseName"
    Write-Host "##vso[task.setvariable variable=containerName;]$containerName"
  displayName: Set up internal variables 

- task: AzureKeyVault@2
  inputs:
    azureSubscription: 'ResoluteOpenSource'
    KeyVaultName: $(keyVaultName)
    SecretsFilter: '*'
    RunAsPreJob: false

- task: AzureCLI@2
  displayName: Reset test Container Instance in CI test environment
  inputs: 
    azureSubscription: ResoluteOpenSource
    scriptType: pscore
    scriptLocation: inlineScript
    inlineScript: |
      $serverName = ($env:CONTAINER_REGISTRY_SERVER -split '.', 0, "simplematch")[0]

      # Update test running container instance 
      az container create `
        --resource-group $(resourceGroup) `
        --name $(fhirToDatalakeInstanceName) `
        --image $env:CONTAINER_REGISTRY_SERVER/$(imageName):$(version) `
        --restart-policy Never `
        --cpu 2 --memory 4 `
        --registry-username $serverName `
        --registry-password $env:CONTAINER_REGISTRY_PASSWORD `
        --environment-variables `
          job__jobInfoQueueName='$(containerName)jobinfoqueue' `
          job__jobInfoTableName='$(containerName)jobinfotable' `
          job__metadataTableName='$(containerName)metadatatable' `
          job__containerName='$(containerName)' `
          job__tableUrl='https://$(fhirToDatalakeStorageAccountName).table.core.windows.net' `
          job__queueUrl='https://$(fhirToDatalakeStorageAccountName).queue.core.windows.net' `
          dataLakeStore__storageUrl='https://$(fhirToDatalakeStorageAccountName).blob.core.windows.net' `
          schema__enableCustomizedSchema=true `
          schema__schemaImageReference='$(customizedSchemaImageReference)' `
          fhirServer__serverUrl='https://analyticspipelineci-readonlytest.fhir.azurehealthcareapis.com' `
          fhirServer__version=R4 `
          fhirServer__authentication=ManagedIdentity `
          ApplicationInsights__ConnectionString='$(application-insights-connection-string)' `
          Logging__ApplicationInsights__LogLevel__Default=Information
  env:
    CONTAINER_REGISTRY_SERVER: $(pipeline-container-registry-server)
    CONTAINER_REGISTRY_PASSWORD: $(pipeline-container-registry-password)

- powershell: |
    $containerInstanceStartTime = ([DateTimeOffset](Get-Date)).ToUnixTimeSeconds()
    Write-Host "##vso[task.setvariable variable=containerInstanceStartTime;]$containerInstanceStartTime"
  displayName: Set up container instance start time

- task: AzurePowerShell@5
  displayName: Set up Synapse Environment with script
  inputs:
    azureSubscription: ResoluteOpenSource
    azurePowerShellVersion: latestVersion
    workingDirectory: $(System.DefaultWorkingDirectory)/FhirToDataLake/scripts/
    ScriptType: inlineScript
    pwsh: true
    Inline: |
      Install-Module -Name Az.Synapse -RequiredVersion 0.7.0 -Force
      Install-Module -Name SqlServer -Force
      Import-Module Az.Synapse

      # Retry to avoid the warming up of Synapse SQL pool and other potential issues
      # see https://docs.microsoft.com/en-us/sql/relational-databases/errors-events/mssqlserver-42109-database-engine-error?view=sql-server-ver15

      $attempts = 1
      $maxAttempts = 3
      do
      {
          try
          {
              ./Set-SynapseEnvironment.ps1 `
                -SynapseWorkspaceName $(synapseWorkspaceName) `
                -StorageName $(fhirToDatalakeStorageAccountName) `
                -Container $(containerName) `
                -Database $(databaseName) `
                -CustomizedSchemaImage $(customizedSchemaImageReference) `
                -SqlScriptCollectionPath $(System.DefaultWorkingDirectory)/FhirToDataLake/scripts/sql
              break;
          }
          catch [Exception]
          {
              Write-Host $_.Exception.Message
          }

          # exponential backoff delay
          $attempts++
          if ($attempts -le $maxAttempts) {
              $retryDelaySeconds = [math]::Pow(2, $attempts)
              $retryDelaySeconds = $retryDelaySeconds - 1  # Exponential Backoff Max == (2^n)-1
              Write-Host("Set up EXTERNAL TABLEs and VIEWs failed. Waiting " + $retryDelaySeconds + " seconds before attempt " + $attempts + " of " + $maxAttempts + ".")
              Start-Sleep $retryDelaySeconds 
          }
          else {
              Write-Error $_.Exception.Message
          }
      } while ($attempts -le $maxAttempts)

- task: AzureCLI@2
  displayName: Sync and process data from FHIR server
  inputs: 
    azureSubscription: ResoluteOpenSource
    scriptType: ps
    scriptLocation: inlineScript
    inlineScript: |
      # Here delay some time if Container Instance runs less than 7 minutes
      $timeNow = ([DateTimeOffset](Get-Date)).ToUnixTimeSeconds()
      $intervalSeconds = $timeNow - $(containerInstanceStartTime)
      
      if ($intervalSeconds -lt 420){
        $waitSeconds = 420-$intervalSeconds
        Start-Sleep -s $waitSeconds
      }

      # Stop Container Instance
      az container stop --name $(fhirToDatalakeInstanceName) --resource-group $(resourceGroup)

- task: AzureCLI@2
  displayName: Get fhir service access token
  inputs: 
    azureSubscription: ResoluteOpenSource
    scriptType: ps
    scriptLocation: inlineScript
    inlineScript: |
      $token=$(az account get-access-token --resource=$(fhirServer:serverUrl) --query accessToken --output tsv)
      Write-Output("##vso[task.setvariable variable=fhirServiceAccessToken;]$token")

- powershell: |
    $validateResourceTypes = 'AllergyIntolerance,CarePlan,CareTeam,Claim,Condition,Device,DiagnosticReport,DocumentReference,Encounter,ExplanationOfBenefit,Group,ImagingStudy,Immunization,Medication,MedicationAdministration,MedicationRequest,Observation,Patient,Procedure,Provenance'
    Write-Host "##vso[task.setvariable variable=validateResourceTypes;]$validateResourceTypes"
    Write-Host "Validate $validateResourceTypes"
  displayName: Set up validate resource types

- script: python -m pip install requests pyodbc pandas
  displayName: Install requirements for validate script

- task: PythonScript@0
  displayName: Validate data on Synapse
  inputs:
    scriptSource: filePath
    scriptPath: '$(Build.SourcesDirectory)/FhirToDataLake/synapse/FhirToSynapseValidator.py'
    arguments: --synapse_workspace $(synapseWorkspaceName) --fhir_server_url $(fhirServer:serverUrl) --database $(databaseName) --schema_directory $(System.DefaultWorkingDirectory)/FhirToDataLake/data/schemas/r4/ --fhir_server_access_token $(fhirServiceAccessToken) --resource_types $(validateResourceTypes) --customized_schema True
  env:
    SQL_USERNAME: $(synapse-sql-username)
    SQL_PASSWORD: $(synapse-sql-password)

- task: AzurePowerShell@5
  displayName: Clean up test container and database
  inputs:
    azureSubscription: ResoluteOpenSource
    azurePowerShellVersion: latestVersion
    ScriptType: inlineScript
    pwsh: true
    Inline: |
      $storageAccountKey = (Get-AzStorageAccountKey -ResourceGroupName $(resourceGroup) -AccountName $(fhirToDatalakeStorageAccountName)).Value[0]
      $storageContext = New-AzStorageContext -StorageAccountName $(fhirToDatalakeStorageAccountName) -StorageAccountKey $storageAccountKey
      Remove-AzStorageContainer -Name $(containerName) -Context $storageContext -Force
      Remove-AzStorageTable -Name $(containerName)jobinfotable -Context $storageContext -Force
      Remove-AzStorageTable -Name $(containerName)metadatatable -Context $storageContext -Force
      Remove-AzStorageQueue -Name $(containerName)jobinfoqueue -Context $storageContext -Force
      Write-Host "##[section]Clear test container"

      try
      {
        Remove-AzContainerRegistryRepository -Name $(imageName) -RegistryName ($env:CONTAINER_REGISTRY_SERVER -split '.', 0, "simplematch")[0]
        Write-Host "##[section]Clear test image"
      }
      catch [Exception]
      {
        Write-Host "##[warning] $($_.Exception.Message)"
      }

      $sqlServerEndpoint = "$(synapseWorkspaceName)-ondemand.sql.azuresynapse.net"
      $userName = $env:SQL_USERNAME
      $password = $env:SQL_PASSWORD
      $connectionString = "Server=tcp:testcisynapseworkspace-ondemand.sql.azuresynapse.net,1433;Database=master;User ID=$userName;Password=$password;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;"

      # Retry to avoid the warming up of Synapse SQL pool and other potential issues
      $attempts = 1
      $maxAttempts = 3
      do
      {
        try
        {
          Invoke-Sqlcmd `
            -Query "DROP DATABASE $(databaseName)" `
            -ConnectionString $connectionString `
            -ErrorAction Stop
      
          Write-Host "##[section]Clear test database"
          break;
        }
        catch [Exception]
        {
          Write-Host "##[warning] $($_.Exception.Message)"
        }

        # exponential backoff delay
        $attempts++
        if ($attempts -le $maxAttempts)
        {
          $retryDelaySeconds = [math]::Pow(2, $attempts)
          $retryDelaySeconds = $retryDelaySeconds - 1  # Exponential Backoff Max == (2^n)-1
          Write-Host "##[warning]Clear test database $(databaseName) failed, waiting $retryDelaySeconds seconds before attempt $attempts of $maxAttempts."
      
          Start-Sleep $retryDelaySeconds
        }
        else
        {
          Write-Host "##[warning]Clear test database $(databaseName) failed for $maxAttempts attempts, you may need to manually clear the database."
        }
      } while ($attempts -le $maxAttempts)
  env:
    CONTAINER_REGISTRY_SERVER: $(pipeline-container-registry-server)
    SQL_USERNAME: $(synapse-sql-username)
    SQL_PASSWORD: $(synapse-sql-password)
