steps:
- task: NuGetAuthenticate@0
  displayName: 'NuGet Authenticate'

- task: NuGetToolInstaller@1
  displayName: 'Use NuGet 5.11'
  inputs:
    versionSpec: 5.11

# Install for Project dependencies
- task: UseDotNet@2
  displayName: 'Install .NET Core sdk 3.1'
  inputs:
    packageType: sdk
    version: 3.1.402
    installationPath: $(Agent.ToolsDirectory)/dotnet

- task: UseDotNet@2
  displayName: 'Use .NET Core sdk 6.0'
  inputs:
    packageType: sdk
    version: 6.0.302
    installationPath: $(Agent.ToolsDirectory)/dotnet

- task: DotNetCoreCLI@2
  displayName: 'dotnet restore solution'
  inputs:
    command: restore
    projects: FhirToDataLake/*.sln
    feedsToUse: 'config'
    nugetConfigPath: 'FhirToDataLake/NuGet.Config'

- task: DotNetCoreCLI@2
  displayName: 'dotnet build solution'
  inputs:
    command: build
    projects: FhirToDataLake/*.sln
    arguments: '--configuration $(buildConfiguration) -p:Version=$(version)'

- script: |
    docker pull mcr.microsoft.com/azure-storage/azurite
    docker run -d --name azurite-emulator-analytics-ci -p 10000-10002:10000-10002 \
        mcr.microsoft.com/azure-storage/azurite
  displayName: 'Start Azurite Emulator'

- task: AzureKeyVault@2
  inputs:
    azureSubscription: 'ResoluteOpenSource'
    KeyVaultName: $(keyVaultName)
    SecretsFilter: '*'
    RunAsPreJob: false

- task: AzureCLI@2
  displayName: Run Unit tests
  inputs:
    azureSubscription: 'ResoluteOpenSource'
    workingDirectory: FhirToDataLake
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: |
      export LD_LIBRARY_PATH=.
      dotnet test test/**/bin/**.UnitTests.dll --verbosity detailed
  env:
    TestContainerRegistryServer: $(pipeline-container-registry-server)
    TestContainerRegistryPassword: $(pipeline-container-registry-password)
    AZURE_CLIENT_ID: $(pipeline-service-principal-name)
    AZURE_CLIENT_SECRET: $(pipeline-service-principal-password)
    AZURE_TENANT_ID: $(pipeline-tenant-id)
    'dataLakeStore:storageUrl': $(DATALAKESTORE:STORAGEURL)

- task: AzureCLI@2
  displayName: Run E2E tests
  inputs:
    azureSubscription: 'ResoluteOpenSource'
    workingDirectory: FhirToDataLake
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: |
      export LD_LIBRARY_PATH=.
      dotnet test test/**/bin/**.E2ETests.dll --verbosity detailed
  env:
    'dataLakeStore:storageUrl': $(DATALAKESTORE:STORAGEURL)

- task: Docker@2
  displayName: Stop Azurite Emulator
  condition: succeededOrFailed()
  inputs:
    command: stop
    container: azurite-emulator-analytics-ci

- task: PowerShell@2
  displayName: Build FhirToDataLake Tool Docker Image
  inputs:
    targetType: inline
    workingDirectory: FhirToDataLake
    script: |
      docker build -t $(imageName):$(version) -f ./src/Microsoft.Health.Fhir.Synapse.Tool/Dockerfile .
      docker save $(imageName):$(version) -o $(Build.ArtifactStagingDirectory)/$(imageName).tar

- task: PublishPipelineArtifact@1
  displayName: Publish FhirToDataLake Tool Image As Artifact
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)/$(imageName).tar'
    artifact: FhirToDataLakeImage
    publishLocation: pipeline
